/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 *  Methods for transform elements of SBML
 <p>
 * @internal
 */

public class SBMLTransforms {
   private long swigCPtr;
   protected boolean swigCMemOwn;

   protected SBMLTransforms(long cPtr, boolean cMemoryOwn)
   {
     swigCMemOwn = cMemoryOwn;
     swigCPtr    = cPtr;
   }

   protected static long getCPtr(SBMLTransforms obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (SBMLTransforms obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_SBMLTransforms(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  
/**
   * Expands the math represented by the {@link ASTNode} to implement the functionality
   * of the {@link FunctionDefinition}, if it occurs within the original
   * math.
   <p>
   * For example, an {@link ASTNode} represents the math expression: f(s, p) where
   * f is the id of a {@link FunctionDefinition} representing f(x, y) = x * y.
   * The outcome of the function is that the {@link ASTNode} now represents
   * the math expression: s * p
   <p>
   * @param math {@link ASTNode} representing the math to be transformed
   <p>
   * @param fd the {@link FunctionDefinition} to be expanded
   <p>
   * @param idsToExclude an optional list of function definition ids to exclude.
   <p>
   * 
   * @internal
   */ public
 static void replaceFD(ASTNode math, FunctionDefinition fd, IdList idsToExclude) {
    libsbmlJNI.SBMLTransforms_replaceFD__SWIG_0(ASTNode.getCPtr(math), math, FunctionDefinition.getCPtr(fd), fd, IdList.getCPtr(idsToExclude), idsToExclude);
  }

  
/**
   * Expands the math represented by the {@link ASTNode} to implement the functionality
   * of the {@link FunctionDefinition}, if it occurs within the original
   * math.
   <p>
   * For example, an {@link ASTNode} represents the math expression: f(s, p) where
   * f is the id of a {@link FunctionDefinition} representing f(x, y) = x * y.
   * The outcome of the function is that the {@link ASTNode} now represents
   * the math expression: s * p
   <p>
   * @param math {@link ASTNode} representing the math to be transformed
   <p>
   * @param fd the {@link FunctionDefinition} to be expanded
   <p>
   * @param idsToExclude an optional list of function definition ids to exclude.
   <p>
   * 
   * @internal
   */ public
 static void replaceFD(ASTNode math, FunctionDefinition fd) {
    libsbmlJNI.SBMLTransforms_replaceFD__SWIG_1(ASTNode.getCPtr(math), math, FunctionDefinition.getCPtr(fd), fd);
  }

  
/**
   * Expands the math represented by the {@link ASTNode} to implement the functionality
   * of all the FunctionDefinitions in the list, if they occur within the 
   * original math.
   <p>
   * For example, an {@link ASTNode} represents the math expression: f(s, g(p, q)) where
   * f is the id of a {@link FunctionDefinition} representing f(x, y) = x * y
   * and g is the id of a {@link FunctionDefinition} representing f(x, y) = x/y
   * The outcome of the function is that the {@link ASTNode} now represents
   * the math expression: s * p/q
   <p>
   * @param math {@link ASTNode} representing the math to be transformed
   <p>
   * @param lofd the {@link ListOfFunctionDefinitions} to be expanded
   <p>
   * @param idsToExclude an optional list of function definition ids to exclude.
   <p>
   * 
   * @internal
   */ public
 static void replaceFD(ASTNode math, ListOfFunctionDefinitions lofd, IdList idsToExclude) {
    libsbmlJNI.SBMLTransforms_replaceFD__SWIG_2(ASTNode.getCPtr(math), math, ListOfFunctionDefinitions.getCPtr(lofd), lofd, IdList.getCPtr(idsToExclude), idsToExclude);
  }

  
/**
   * Expands the math represented by the {@link ASTNode} to implement the functionality
   * of all the FunctionDefinitions in the list, if they occur within the 
   * original math.
   <p>
   * For example, an {@link ASTNode} represents the math expression: f(s, g(p, q)) where
   * f is the id of a {@link FunctionDefinition} representing f(x, y) = x * y
   * and g is the id of a {@link FunctionDefinition} representing f(x, y) = x/y
   * The outcome of the function is that the {@link ASTNode} now represents
   * the math expression: s * p/q
   <p>
   * @param math {@link ASTNode} representing the math to be transformed
   <p>
   * @param lofd the {@link ListOfFunctionDefinitions} to be expanded
   <p>
   * @param idsToExclude an optional list of function definition ids to exclude.
   <p>
   * 
   * @internal
   */ public
 static void replaceFD(ASTNode math, ListOfFunctionDefinitions lofd) {
    libsbmlJNI.SBMLTransforms_replaceFD__SWIG_3(ASTNode.getCPtr(math), math, ListOfFunctionDefinitions.getCPtr(lofd), lofd);
  }

  
/** * @internal */ public
 static boolean expandInitialAssignments(Model m) {
    return libsbmlJNI.SBMLTransforms_expandInitialAssignments(Model.getCPtr(m), m);
  }

  
/** * @internal */ public
 static double evaluateASTNode(ASTNode node, Model m) {
    return libsbmlJNI.SBMLTransforms_evaluateASTNode__SWIG_0(ASTNode.getCPtr(node), node, Model.getCPtr(m), m);
  }

  
/** * @internal */ public
 static double evaluateASTNode(ASTNode node) {
    return libsbmlJNI.SBMLTransforms_evaluateASTNode__SWIG_1(ASTNode.getCPtr(node), node);
  }

  public static IdList mapComponentValues(Model m) {
    return new IdList(libsbmlJNI.SBMLTransforms_mapComponentValues(Model.getCPtr(m), m), true);
  }

  public static void clearComponentValues() {
    libsbmlJNI.SBMLTransforms_clearComponentValues();
  }

  public SBMLTransforms() {
    this(libsbmlJNI.new_SBMLTransforms(), true);
  }

}
