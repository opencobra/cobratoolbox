/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 *  Base class for SBML Level 3 package plug-ins.
 <p>
 * Plug-in objects for the {@link SBMLDocument} element must be this class or a
 * derived class of this class.  Package developers should use this class
 * as-is if only 'required' attribute is added in the {@link SBMLDocument} element by
 * their packages.  Otherwise, developers must implement a derived class of
 * this class and use that class as the plugin object for the {@link SBMLDocument}
 * element.
 */

public class SBMLDocumentPlugin extends SBasePlugin {
   private long swigCPtr;

   protected SBMLDocumentPlugin(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.SBMLDocumentPlugin_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(SBMLDocumentPlugin obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (SBMLDocumentPlugin obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_SBMLDocumentPlugin(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   *  Constructor
   <p>
   * @param uri the URI of package 
   * @param prefix the prefix for the given package
   * @param sbmlns the {@link SBMLNamespaces} object for the package
   */ public
 SBMLDocumentPlugin(String uri, String prefix, SBMLNamespaces sbmlns) {
    this(libsbmlJNI.new_SBMLDocumentPlugin__SWIG_0(uri, prefix, SBMLNamespaces.getCPtr(sbmlns), sbmlns), true);
  }

  
/**
   * Copy constructor. Creates a copy of this object.
   */ public
 SBMLDocumentPlugin(SBMLDocumentPlugin orig) {
    this(libsbmlJNI.new_SBMLDocumentPlugin__SWIG_1(SBMLDocumentPlugin.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link SBMLDocumentPlugin} object.
   <p>
   * @return the (deep) copy of this {@link SBMLDocumentPlugin} object.
   */ public
 SBasePlugin cloneObject() {
    long cPtr = libsbmlJNI.SBMLDocumentPlugin_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new SBMLDocumentPlugin(cPtr, true);
  }

  
/**
   <p>
   * Sets the boolean value of 'required' attribute of corresponding package
   * in {@link SBMLDocument} element.
   <p>
   * @param value the boolean value of 'required' attribute of corresponding 
   * package in {@link SBMLDocument} element.
   <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * </ul>
   */ public
 int setRequired(boolean value) {
    return libsbmlJNI.SBMLDocumentPlugin_setRequired(swigCPtr, this, value);
  }

  
/**
   <p>
   * Returns the boolean value of 'required' attribute of corresponding 
   * package in {@link SBMLDocument} element.
   <p>
   * @return the boolean value of 'required' attribute of corresponding
   * package in {@link SBMLDocument} element.
   */ public
 boolean getRequired() {
    return libsbmlJNI.SBMLDocumentPlugin_getRequired(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link SBMLDocumentPlugin}'s 'required' attribute has been set.
   <p>
   * @return <code>true</code> if the 'required' attribute of this {@link SBMLDocument} has been
   * set, <code>false</code> otherwise.
   */ public
 boolean isSetRequired() {
    return libsbmlJNI.SBMLDocumentPlugin_isSetRequired(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'required' attribute of this {@link SBMLDocumentPlugin}.
   <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetRequired() {
    return libsbmlJNI.SBMLDocumentPlugin_unsetRequired(swigCPtr, this);
  }

  
/** * @internal */ public
 boolean isCompFlatteningImplemented() {
    return libsbmlJNI.SBMLDocumentPlugin_isCompFlatteningImplemented(swigCPtr, this);
  }

  
/**
   * Check consistency function.
   * @internal
   */ public
 long checkConsistency() {
    return libsbmlJNI.SBMLDocumentPlugin_checkConsistency(swigCPtr, this);
  }

}
