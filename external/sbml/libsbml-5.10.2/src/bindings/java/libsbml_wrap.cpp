/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_libsbmlJNI = NULL;
    jmethodID director_methids[18];
  }
}

#include "libsbml.h"

LIBSBML_CPP_NAMESPACE_USE

#include "../swig/libsbml-packages.h"
	
#include "local.cpp"


#include <string>


#include "OStream.cpp"

SWIGINTERN ListWrapper< SBase > *SBase_getListOfAllElements__SWIG_0(SBase *self,ElementFilter *filter=NULL){
		List* list = self->getAllElements(filter);
		return new ListWrapper<SBase>(list);
	}
SWIGINTERN ListWrapper< SBase > *SBase_getListOfAllElementsFromPlugins__SWIG_0(SBase *self,ElementFilter *filter=NULL){
		List* list = self->getAllElementsFromPlugins(filter);
		return new ListWrapper<SBase>(list);
	}
SWIGINTERN void Model_renameIDs(Model *self,ListWrapper< SBase > *elements,IdentifierTransformer *idTransformer){
		if (!elements) return;

		List *list = elements->getList();
		self->renameIDs(list, idTransformer);
   }
SWIGINTERN void RDFAnnotationParser_parseRDFAnnotation__SWIG_3(XMLNode const *annotation,ListWrapper< CVTerm > *CVTerms){
    if (!CVTerms) return;

    List *list = CVTerms->getList();
    RDFAnnotationParser::parseRDFAnnotation(annotation,list);
  }
SWIGINTERN void RDFAnnotationParser_parseRDFAnnotation__SWIG_4(XMLNode const *annotation,ListWrapper< CVTerm > *CVTerms,char const *metaId=NULL,XMLInputStream *stream=NULL){
    if (!CVTerms) return;

    List *list = CVTerms->getList();
    RDFAnnotationParser::parseRDFAnnotation(annotation,list, metaId, stream);
  }
SWIGINTERN ListWrapper< SBase > *SBasePlugin_getListOfAllElements__SWIG_0(SBasePlugin *self,ElementFilter *filter=NULL){
		List* list = self->getAllElements(filter);
		return new ListWrapper<SBase>(list);
	}


#include <sbml/common/libsbml-config-common.h>

#ifndef LIBSBML_USE_LEGACY_MATH

#include <sbml/math/ASTTypes.h>
#include <sbml/math/ASTBase.h>
//#include <sbml/math/ASTBinaryFunctionNode.h>
//#include <sbml/math/ASTCiFunctionNode.h>
//#include <sbml/math/ASTCiNumberNode.h>
//#include <sbml/math/ASTCnBase.h>
//#include <sbml/math/ASTCnExponentialNode.h>
//#include <sbml/math/ASTCnIntegerNode.h>
//#include <sbml/math/ASTCnRationalNode.h>
//#include <sbml/math/ASTCnRealNode.h>
//#include <sbml/math/ASTConstantNumberNode.h>
//#include <sbml/math/ASTCSymbol.h>
//#include <sbml/math/ASTCSymbolAvogadroNode.h>
//#include <sbml/math/ASTCSymbolDelayNode.h>
//#include <sbml/math/ASTCSymbolTimeNode.h>
//#include <sbml/math/ASTFunction.h>
//#include <sbml/math/ASTFunctionBase.h>
//#include <sbml/math/ASTLambdaFunctionNode.h>
//#include <sbml/math/ASTNaryFunctionNode.h>
//#include <sbml/math/ASTNumber.h>
//#include <sbml/math/ASTPiecewiseFunctionNode.h>
//#include <sbml/math/ASTQualifierNode.h>
//#include <sbml/math/ASTSemanticsNode.h>
//#include <sbml/math/ASTUnaryFunctionNode.h>

#include <sbml/math/ASTNode.h>
#include <sbml/math/MathML.h>
#include <sbml/math/L3FormulaFormatter.h>
#include <sbml/math/FormulaFormatter.h>
#include <sbml/math/FormulaParser.h>
#include <sbml/math/L3Parser.h>
#include <sbml/math/L3ParserSettings.h>

#else

#include <sbml/math-legacy/ASTNode.h>
#include <sbml/math-legacy/MathML.h>
#include <sbml/math-legacy/L3FormulaFormatter.h>
#include <sbml/math-legacy/FormulaFormatter.h>
#include <sbml/math-legacy/FormulaParser.h>
#include <sbml/math-legacy/L3Parser.h>
#include <sbml/math-legacy/L3ParserSettings.h>

#endif



SWIGINTERN ListWrapper< ASTNode > *ASTNode_getListOfNodes(ASTNode *self){
    List *list = self->getListOfNodes(ASTNode_true);
    return new ListWrapper<ASTNode>(list);
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "libsbml_wrap.h"

SwigDirector_IdentifierTransformer::SwigDirector_IdentifierTransformer(JNIEnv *jenv) : IdentifierTransformer(), Swig::Director(jenv) {
}

SwigDirector_IdentifierTransformer::~SwigDirector_IdentifierTransformer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_IdentifierTransformer::transform(SBase *element) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelement = 0 ;
  
  if (!swig_override[0]) {
    return IdentifierTransformer::transform(element);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((SBase **)&jelement) = (SBase *) element; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[0], swigjobj, jelement);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IdentifierTransformer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "transform", "(Lorg/sbml/libsbml/SBase;)I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/sbml/libsbml/IdentifierTransformer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ElementFilter::SwigDirector_ElementFilter(JNIEnv *jenv) : ElementFilter(), Swig::Director(jenv) {
}

SwigDirector_ElementFilter::~SwigDirector_ElementFilter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_ElementFilter::filter(SBase const *element) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelement = 0 ;
  
  if (!swig_override[0]) {
    return ElementFilter::filter(element);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((SBase **)&jelement) = (SBase *) element; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[1], swigjobj, jelement);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ElementFilter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "filter", "(Lorg/sbml/libsbml/SBase;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/sbml/libsbml/ElementFilter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SBMLConverter::SwigDirector_SBMLConverter(JNIEnv *jenv) : SBMLConverter(), Swig::Director(jenv) {
}

SwigDirector_SBMLConverter::SwigDirector_SBMLConverter(JNIEnv *jenv, std::string const &name) : SBMLConverter(name), Swig::Director(jenv) {
}

SwigDirector_SBMLConverter::SwigDirector_SBMLConverter(JNIEnv *jenv, SBMLConverter const &c) : SBMLConverter(c), Swig::Director(jenv) {
}

SwigDirector_SBMLConverter::~SwigDirector_SBMLConverter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


SBMLConverter *SwigDirector_SBMLConverter::clone() const {
  SBMLConverter *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return SBMLConverter::clone();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[2], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(SBMLConverter **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SBMLDocument *SwigDirector_SBMLConverter::getDocument() {
  SBMLDocument *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return SBMLConverter::getDocument();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[3], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(SBMLDocument **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SBMLDocument const *SwigDirector_SBMLConverter::getDocument() const {
  SBMLDocument *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return SBMLConverter::getDocument();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[4], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (SBMLDocument const *)c_result;
    c_result = *(SBMLDocument **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (SBMLDocument const *)c_result;
}

ConversionProperties SwigDirector_SBMLConverter::getDefaultProperties() const {
  ConversionProperties c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  ConversionProperties *argp ;
  
  if (!swig_override[3]) {
    return SBMLConverter::getDefaultProperties();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[5], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(ConversionProperties **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type ConversionProperties");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SBMLNamespaces *SwigDirector_SBMLConverter::getTargetNamespaces() {
  SBMLNamespaces *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return SBMLConverter::getTargetNamespaces();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[6], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(SBMLNamespaces **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_SBMLConverter::matchesProperties(ConversionProperties const &props) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprops = 0 ;
  
  if (!swig_override[5]) {
    return SBMLConverter::matchesProperties(props);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(ConversionProperties **)&jprops = (ConversionProperties *) &props; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[7], swigjobj, jprops);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_SBMLConverter::setDocument(SBMLDocument const *doc) {
  return SBMLConverter::setDocument(doc);
}

int SwigDirector_SBMLConverter::setDocument(SBMLDocument *doc) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdoc = 0 ;
  
  if (!swig_override[6]) {
    return SBMLConverter::setDocument(doc);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((SBMLDocument **)&jdoc) = (SBMLDocument *) doc; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[8], swigjobj, jdoc);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_SBMLConverter::setProperties(ConversionProperties const *props) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprops = 0 ;
  
  if (!swig_override[7]) {
    return SBMLConverter::setProperties(props);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ConversionProperties **)&jprops) = (ConversionProperties *) props; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[9], swigjobj, jprops);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ConversionProperties *SwigDirector_SBMLConverter::getProperties() const {
  ConversionProperties *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[8]) {
    return SBMLConverter::getProperties();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[10], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(ConversionProperties **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_SBMLConverter::convert() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    return SBMLConverter::convert();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[11], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SBMLConverter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "cloneObject", "()Lorg/sbml/libsbml/SBMLConverter;", NULL 
    },
    {
      "getDocument", "()Lorg/sbml/libsbml/SBMLDocument;", NULL 
    },
    {
      "getDocument", "()Lorg/sbml/libsbml/SBMLDocument;", NULL 
    },
    {
      "getDefaultProperties", "()Lorg/sbml/libsbml/ConversionProperties;", NULL 
    },
    {
      "getTargetNamespaces", "()Lorg/sbml/libsbml/SBMLNamespaces;", NULL 
    },
    {
      "matchesProperties", "(Lorg/sbml/libsbml/ConversionProperties;)Z", NULL 
    },
    {
      "setDocument", "(Lorg/sbml/libsbml/SBMLDocument;)I", NULL 
    },
    {
      "setProperties", "(Lorg/sbml/libsbml/ConversionProperties;)I", NULL 
    },
    {
      "getProperties", "()Lorg/sbml/libsbml/ConversionProperties;", NULL 
    },
    {
      "convert", "()I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/sbml/libsbml/SBMLConverter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 10; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SBMLValidator::SwigDirector_SBMLValidator(JNIEnv *jenv) : SBMLValidator(), Swig::Director(jenv) {
}

SwigDirector_SBMLValidator::SwigDirector_SBMLValidator(JNIEnv *jenv, SBMLValidator const &orig) : SBMLValidator(orig), Swig::Director(jenv) {
}

SwigDirector_SBMLValidator::~SwigDirector_SBMLValidator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


SBMLValidator *SwigDirector_SBMLValidator::clone() const {
  SBMLValidator *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return SBMLValidator::clone();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[12], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(SBMLValidator **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SBMLDocument *SwigDirector_SBMLValidator::getDocument() {
  SBMLDocument *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return SBMLValidator::getDocument();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[13], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(SBMLDocument **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SBMLDocument const *SwigDirector_SBMLValidator::getDocument() const {
  SBMLDocument *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return SBMLValidator::getDocument();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[14], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (SBMLDocument const *)c_result;
    c_result = *(SBMLDocument **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (SBMLDocument const *)c_result;
}

int SwigDirector_SBMLValidator::setDocument(SBMLDocument const *doc) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdoc = 0 ;
  
  if (!swig_override[3]) {
    return SBMLValidator::setDocument(doc);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((SBMLDocument **)&jdoc) = (SBMLDocument *) doc; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[15], swigjobj, jdoc);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

unsigned int SwigDirector_SBMLValidator::validate() {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return SBMLValidator::validate();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[16], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SBMLValidator::clearFailures() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    SBMLValidator::clearFailures();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libsbmlJNI, Swig::director_methids[17], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SBMLValidator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "cloneObject", "()Lorg/sbml/libsbml/SBMLValidator;", NULL 
    },
    {
      "getDocument", "()Lorg/sbml/libsbml/SBMLDocument;", NULL 
    },
    {
      "getDocument", "()Lorg/sbml/libsbml/SBMLDocument;", NULL 
    },
    {
      "setDocument", "(Lorg/sbml/libsbml/SBMLDocument;)I", NULL 
    },
    {
      "validate", "()J", NULL 
    },
    {
      "clearFailures", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/sbml/libsbml/SBMLValidator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ModelCreatorList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< ModelCreator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< ModelCreator > *)new ListWrapper< ModelCreator >();
  *(ListWrapper< ModelCreator > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ModelCreatorList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreatorList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  ModelCreator *arg2 = (ModelCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  arg2 = *(ModelCreator **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreatorList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  unsigned int arg2 ;
  ModelCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ModelCreator *)((ListWrapper< ModelCreator > const *)arg1)->get(arg2);
  *(ModelCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreatorList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  ModelCreator *arg2 = (ModelCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  arg2 = *(ModelCreator **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreatorList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  unsigned int arg2 ;
  ModelCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ModelCreator *)(arg1)->remove(arg2);
  *(ModelCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreatorList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  result = (unsigned int)((ListWrapper< ModelCreator > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1DateList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< Date > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< Date > *)new ListWrapper< Date >();
  *(ListWrapper< Date > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1DateList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_DateList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  Date *arg2 = (Date *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  arg2 = *(Date **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_DateList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  unsigned int arg2 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Date *)((ListWrapper< Date > const *)arg1)->get(arg2);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_DateList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  Date *arg2 = (Date *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  arg2 = *(Date **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_DateList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  unsigned int arg2 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Date *)(arg1)->remove(arg2);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_DateList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  result = (unsigned int)((ListWrapper< Date > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1CVTermList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< CVTerm > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< CVTerm > *)new ListWrapper< CVTerm >();
  *(ListWrapper< CVTerm > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1CVTermList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTermList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  CVTerm *arg2 = (CVTerm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  arg2 = *(CVTerm **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTermList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  unsigned int arg2 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CVTerm *)((ListWrapper< CVTerm > const *)arg1)->get(arg2);
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTermList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  CVTerm *arg2 = (CVTerm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  arg2 = *(CVTerm **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTermList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  unsigned int arg2 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CVTerm *)(arg1)->remove(arg2);
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTermList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  result = (unsigned int)((ListWrapper< CVTerm > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ASTNodeList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< ASTNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< ASTNode > *)new ListWrapper< ASTNode >();
  *(ListWrapper< ASTNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ASTNodeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNodeList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNodeList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  unsigned int arg2 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ASTNode *)((ListWrapper< ASTNode > const *)arg1)->get(arg2);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNodeList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNodeList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  unsigned int arg2 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ASTNode *)(arg1)->remove(arg2);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNodeList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  result = (unsigned int)((ListWrapper< ASTNode > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLNamespacesList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< SBMLNamespaces > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< SBMLNamespaces > *)new ListWrapper< SBMLNamespaces >();
  *(ListWrapper< SBMLNamespaces > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLNamespacesList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< SBMLNamespaces > *arg1 = (ListWrapper< SBMLNamespaces > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< SBMLNamespaces > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespacesList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< SBMLNamespaces > *arg1 = (ListWrapper< SBMLNamespaces > *) 0 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< SBMLNamespaces > **)&jarg1; 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespacesList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< SBMLNamespaces > *arg1 = (ListWrapper< SBMLNamespaces > *) 0 ;
  unsigned int arg2 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< SBMLNamespaces > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBMLNamespaces *)((ListWrapper< SBMLNamespaces > const *)arg1)->get(arg2);
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespacesList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< SBMLNamespaces > *arg1 = (ListWrapper< SBMLNamespaces > *) 0 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< SBMLNamespaces > **)&jarg1; 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespacesList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< SBMLNamespaces > *arg1 = (ListWrapper< SBMLNamespaces > *) 0 ;
  unsigned int arg2 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< SBMLNamespaces > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBMLNamespaces *)(arg1)->remove(arg2);
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespacesList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< SBMLNamespaces > *arg1 = (ListWrapper< SBMLNamespaces > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< SBMLNamespaces > **)&jarg1; 
  result = (unsigned int)((ListWrapper< SBMLNamespaces > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBaseList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< SBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< SBase > *)new ListWrapper< SBase >();
  *(ListWrapper< SBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBaseList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< SBase > *arg1 = (ListWrapper< SBase > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< SBase > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBaseList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< SBase > *arg1 = (ListWrapper< SBase > *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< SBase > **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBaseList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< SBase > *arg1 = (ListWrapper< SBase > *) 0 ;
  unsigned int arg2 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< SBase > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBase *)((ListWrapper< SBase > const *)arg1)->get(arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBaseList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ListWrapper< SBase > *arg1 = (ListWrapper< SBase > *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< SBase > **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBaseList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< SBase > *arg1 = (ListWrapper< SBase > *) 0 ;
  unsigned int arg2 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< SBase > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBase *)(arg1)->remove(arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBaseList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< SBase > *arg1 = (ListWrapper< SBase > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< SBase > **)&jarg1; 
  result = (unsigned int)((ListWrapper< SBase > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1OStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  OStream::StdOSType arg1 ;
  OStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OStream::StdOSType)jarg1; 
  result = (OStream *)new OStream(arg1);
  *(OStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1OStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OStream *)new OStream();
  *(OStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1OStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OStream *arg1 = (OStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_OStream_1get_1ostream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OStream *arg1 = (OStream *) 0 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OStream **)&jarg1; 
  result = (std::ostream *)(arg1)->get_ostream();
  *(std::ostream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_OStream_1endl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OStream *arg1 = (OStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OStream **)&jarg1; 
  (arg1)->endl();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1OFStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  char const *arg_pstr1 ;
  std::string arg_str1 ;
  OFStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr1 = (char const *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg_pstr1) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr1);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg1, arg_pstr1);
    return 0;
  }
  
  arg_str1.assign(mbstr);
  delete[] mbstr;
#else
  arg_str1.assign(arg_pstr1);
#endif
  arg1 = &arg_str1;
  jenv->ReleaseStringUTFChars(jarg1, arg_pstr1);
  
  
  arg2 = jarg2 ? true : false; 
  result = (OFStream *)new OFStream((std::string const &)*arg1,arg2);
  *(OFStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1OFStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  char const *arg_pstr1 ;
  std::string arg_str1 ;
  OFStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr1 = (char const *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg_pstr1) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr1);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg1, arg_pstr1);
    return 0;
  }
  
  arg_str1.assign(mbstr);
  delete[] mbstr;
#else
  arg_str1.assign(arg_pstr1);
#endif
  arg1 = &arg_str1;
  jenv->ReleaseStringUTFChars(jarg1, arg_pstr1);
  
  
  result = (OFStream *)new OFStream((std::string const &)*arg1);
  *(OFStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1OFStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OFStream *arg1 = (OFStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OFStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_OFStream_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  OFStream *arg1 = (OFStream *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  char const *arg_pstr2 ;
  std::string arg_str2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OFStream **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg_pstr2) return ;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr2);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
    return ;
  }
  
  arg_str2.assign(mbstr);
  delete[] mbstr;
#else
  arg_str2.assign(arg_pstr2);
#endif
  arg2 = &arg_str2;
  jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
  
  
  arg3 = jarg3 ? true : false; 
  (arg1)->open((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_OFStream_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OFStream *arg1 = (OFStream *) 0 ;
  std::string *arg2 = 0 ;
  char const *arg_pstr2 ;
  std::string arg_str2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OFStream **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg_pstr2) return ;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr2);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
    return ;
  }
  
  arg_str2.assign(mbstr);
  delete[] mbstr;
#else
  arg_str2.assign(arg_pstr2);
#endif
  arg2 = &arg_str2;
  jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
  
  
  (arg1)->open((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_OFStream_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OFStream *arg1 = (OFStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OFStream **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_OFStream_1is_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OFStream *arg1 = (OFStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OFStream **)&jarg1; 
  result = (bool)(arg1)->is_open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1OStringStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OStringStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OStringStream *)new OStringStream();
  *(OStringStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_OStringStream_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OStringStream *arg1 = (OStringStream *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OStringStream **)&jarg1; 
  result = (arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_OStringStream_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OStringStream *arg1 = (OStringStream *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OStringStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->str((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1OStringStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OStringStream *arg1 = (OStringStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OStringStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_getLibSBMLVersion(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)getLibSBMLVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_getLibSBMLDottedVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)getLibSBMLDottedVersion();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_getLibSBMLVersionString(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)getLibSBMLVersionString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_isLibSBMLCompiledWith(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)isLibSBMLCompiledWith((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_getLibSBMLDependencyVersionOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)getLibSBMLDependencyVersionOf((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_OperationReturnValue_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)OperationReturnValue_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1IdList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdList *)new IdList();
  *(IdList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1IdList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  IdList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (IdList *)new IdList((std::string const &)*arg1);
  *(IdList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdList_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IdList *arg1 = (IdList *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdList **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->append(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdList_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  IdList *arg1 = (IdList *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdList **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((IdList const *)arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdList_1removeIdsBefore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IdList *arg1 = (IdList *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdList **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeIdsBefore(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IdList *arg1 = (IdList *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdList **)&jarg1; 
  result = (unsigned int)((IdList const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdList *arg1 = (IdList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdList **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdList_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  IdList *arg1 = (IdList *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->at(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1IdList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IdList *arg1 = (IdList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IdList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1IdentifierTransformer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdentifierTransformer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdentifierTransformer *)new SwigDirector_IdentifierTransformer(jenv);
  *(IdentifierTransformer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1IdentifierTransformer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IdentifierTransformer *arg1 = (IdentifierTransformer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IdentifierTransformer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdentifierTransformer_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  IdentifierTransformer *arg1 = (IdentifierTransformer *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IdentifierTransformer **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  result = (int)(arg1)->transform(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdentifierTransformer_1transformSwigExplicitIdentifierTransformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  IdentifierTransformer *arg1 = (IdentifierTransformer *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IdentifierTransformer **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  result = (int)(arg1)->IdentifierTransformer::transform(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdentifierTransformer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  IdentifierTransformer *obj = *((IdentifierTransformer **)&objarg);
  (void)jcls;
  SwigDirector_IdentifierTransformer *director = dynamic_cast<SwigDirector_IdentifierTransformer *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_IdentifierTransformer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  IdentifierTransformer *obj = *((IdentifierTransformer **)&objarg);
  SwigDirector_IdentifierTransformer *director = dynamic_cast<SwigDirector_IdentifierTransformer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ElementFilter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ElementFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ElementFilter *)new SwigDirector_ElementFilter(jenv);
  *(ElementFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ElementFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ElementFilter *arg1 = (ElementFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ElementFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ElementFilter_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ElementFilter *arg1 = (ElementFilter *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ElementFilter **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  result = (bool)(arg1)->filter((SBase const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ElementFilter_1filterSwigExplicitElementFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ElementFilter *arg1 = (ElementFilter *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ElementFilter **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  result = (bool)(arg1)->ElementFilter::filter((SBase const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ElementFilter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ElementFilter *obj = *((ElementFilter **)&objarg);
  (void)jcls;
  SwigDirector_ElementFilter *director = dynamic_cast<SwigDirector_ElementFilter *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ElementFilter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ElementFilter *obj = *((ElementFilter **)&objarg);
  SwigDirector_ElementFilter *director = dynamic_cast<SwigDirector_ElementFilter *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLReader *)new SBMLReader();
  *(SBMLReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLReader *arg1 = (SBMLReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReader_1readSBML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLReader *arg1 = (SBMLReader *) 0 ;
  std::string *arg2 = 0 ;
  char const *arg_pstr2 ;
  std::string arg_str2 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLReader **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg_pstr2) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr2);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
    return 0;
  }
  
  arg_str2.assign(mbstr);
  delete[] mbstr;
#else
  arg_str2.assign(arg_pstr2);
#endif
  arg2 = &arg_str2;
  jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
  
  
  result = (SBMLDocument *)(arg1)->readSBML((std::string const &)*arg2);
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReader_1readSBMLFromFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLReader *arg1 = (SBMLReader *) 0 ;
  std::string *arg2 = 0 ;
  char const *arg_pstr2 ;
  std::string arg_str2 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLReader **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg_pstr2) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr2);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
    return 0;
  }
  
  arg_str2.assign(mbstr);
  delete[] mbstr;
#else
  arg_str2.assign(arg_pstr2);
#endif
  arg2 = &arg_str2;
  jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
  
  
  result = (SBMLDocument *)(arg1)->readSBMLFromFile((std::string const &)*arg2);
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReader_1readSBMLFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLReader *arg1 = (SBMLReader *) 0 ;
  std::string *arg2 = 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBMLDocument *)(arg1)->readSBMLFromString((std::string const &)*arg2);
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReader_1hasZlib(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)SBMLReader::hasZlib();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReader_1hasBzip2(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)SBMLReader::hasBzip2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_readSBML(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char const *arg_pstr1 ;
  SBMLDocument_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if (jarg1) {
    arg_pstr1 = (char const *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg_pstr1) return 0;
  }
  else
  {
    arg_pstr1 = 0;
  }
#ifdef WIN32
  arg1 = convertUTF8ToACP(arg_pstr1);
  if (!arg1)
  {
    jenv->ReleaseStringUTFChars(jarg1, (const char*)arg_pstr1);
    return 0;
  }
  jenv->ReleaseStringUTFChars(jarg1, (const char*)arg_pstr1);
#else
  arg1 = (char*)arg_pstr1;
#endif
  
  result = (SBMLDocument_t *)readSBML((char const *)arg1);
  *(SBMLDocument_t **)&jresult = result; 
  
#ifdef WIN32
  delete[] arg1;
#else
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char*)arg1);
#endif
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_readSBMLFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char const *arg_pstr1 ;
  SBMLDocument_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if (jarg1) {
    arg_pstr1 = (char const *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg_pstr1) return 0;
  }
  else
  {
    arg_pstr1 = 0;
  }
#ifdef WIN32
  arg1 = convertUTF8ToACP(arg_pstr1);
  if (!arg1)
  {
    jenv->ReleaseStringUTFChars(jarg1, (const char*)arg_pstr1);
    return 0;
  }
  jenv->ReleaseStringUTFChars(jarg1, (const char*)arg_pstr1);
#else
  arg1 = (char*)arg_pstr1;
#endif
  
  result = (SBMLDocument_t *)readSBMLFromFile((char const *)arg1);
  *(SBMLDocument_t **)&jresult = result; 
  
#ifdef WIN32
  delete[] arg1;
#else
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char*)arg1);
#endif
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_readSBMLFromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  SBMLDocument_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (SBMLDocument_t *)readSBMLFromString((char const *)arg1);
  *(SBMLDocument_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLWriter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLWriter *)new SBMLWriter();
  *(SBMLWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLWriter *arg1 = (SBMLWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLWriter_1setProgramName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBMLWriter *arg1 = (SBMLWriter *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLWriter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setProgramName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLWriter_1setProgramVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBMLWriter *arg1 = (SBMLWriter *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLWriter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setProgramVersion((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLWriter_1writeSBML_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  SBMLWriter *arg1 = (SBMLWriter *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  std::string *arg3 = 0 ;
  char const *arg_pstr3 ;
  std::string arg_str3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLWriter **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr3 = (char const *)jenv->GetStringUTFChars(jarg3, 0);
  if (!arg_pstr3) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr3);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg3, arg_pstr3);
    return 0;
  }
  
  arg_str3.assign(mbstr);
  delete[] mbstr;
#else
  arg_str3.assign(arg_pstr3);
#endif
  arg3 = &arg_str3;
  jenv->ReleaseStringUTFChars(jarg3, arg_pstr3);
  
  
  result = (bool)(arg1)->writeSBML((SBMLDocument const *)arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLWriter_1writeSBML_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  SBMLWriter *arg1 = (SBMLWriter *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  std::ostream *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(SBMLWriter **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  arg3 = *(std::ostream **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->writeSBML((SBMLDocument const *)arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLWriter_1writeToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  SBMLWriter *arg1 = (SBMLWriter *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLWriter **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  result = (char *)(arg1)->writeToString((SBMLDocument const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLWriter_1writeSBMLToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  SBMLWriter *arg1 = (SBMLWriter *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  std::string *arg3 = 0 ;
  char const *arg_pstr3 ;
  std::string arg_str3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLWriter **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr3 = (char const *)jenv->GetStringUTFChars(jarg3, 0);
  if (!arg_pstr3) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr3);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg3, arg_pstr3);
    return 0;
  }
  
  arg_str3.assign(mbstr);
  delete[] mbstr;
#else
  arg_str3.assign(arg_pstr3);
#endif
  arg3 = &arg_str3;
  jenv->ReleaseStringUTFChars(jarg3, arg_pstr3);
  
  
  result = (bool)(arg1)->writeSBMLToFile((SBMLDocument const *)arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLWriter_1writeSBMLToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  SBMLWriter *arg1 = (SBMLWriter *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLWriter **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  result = (char *)(arg1)->writeSBMLToString((SBMLDocument const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLWriter_1hasZlib(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)SBMLWriter::hasZlib();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLWriter_1hasBzip2(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)SBMLWriter::hasBzip2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_writeSBML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBMLDocument_t *arg1 = (SBMLDocument_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char const *arg_pstr2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument_t **)&jarg1; 
  
  if (jarg2) {
    arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg_pstr2) return 0;
  }
  else
  {
    arg_pstr2 = 0;
  }
#ifdef WIN32
  arg2 = convertUTF8ToACP(arg_pstr2);
  if (!arg2)
  {
    jenv->ReleaseStringUTFChars(jarg2, (const char*)arg_pstr2);
    return 0;
  }
  jenv->ReleaseStringUTFChars(jarg2, (const char*)arg_pstr2);
#else
  arg2 = (char*)arg_pstr2;
#endif
  
  result = (int)writeSBML((SBMLDocument const *)arg1,(char const *)arg2);
  jresult = (jint)result; 
  
#ifdef WIN32
  delete[] arg2;
#else
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char*)arg2);
#endif
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_writeSBMLToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLDocument_t *arg1 = (SBMLDocument_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument_t **)&jarg1; 
  result = (char *)writeSBMLToString((SBMLDocument const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_writeSBMLToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBMLDocument_t *arg1 = (SBMLDocument_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char const *arg_pstr2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument_t **)&jarg1; 
  
  if (jarg2) {
    arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg_pstr2) return 0;
  }
  else
  {
    arg_pstr2 = 0;
  }
#ifdef WIN32
  arg2 = convertUTF8ToACP(arg_pstr2);
  if (!arg2)
  {
    jenv->ReleaseStringUTFChars(jarg2, (const char*)arg_pstr2);
    return 0;
  }
  jenv->ReleaseStringUTFChars(jarg2, (const char*)arg_pstr2);
#else
  arg2 = (char*)arg_pstr2;
#endif
  
  result = (int)writeSBMLToFile((SBMLDocument const *)arg1,(char const *)arg2);
  jresult = (jint)result; 
  
#ifdef WIN32
  delete[] arg2;
#else
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char*)arg2);
#endif
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTypeCode_1toString(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)SBMLTypeCode_toString(arg1,(char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBase *arg1 = (SBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (SBase *)((SBase const *)arg1)->clone();
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getElementByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementByMetaId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1renameMetaIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameMetaIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1divideAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->divideAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1multiplyAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->multiplyAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getElementFromPluginsBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string arg2 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementFromPluginsBySId(arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getElementFromPluginsByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string arg2 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementFromPluginsByMetaId(arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1hasNonstandardIdentifierBeginningWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->hasNonstandardIdentifierBeginningWith((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1prependStringToAllIdentifiers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->prependStringToAllIdentifiers((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1transformIdentifiers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  IdentifierTransformer *arg2 = (IdentifierTransformer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(IdentifierTransformer **)&jarg2; 
  result = (int)(arg1)->transformIdentifiers(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (std::string *) &((SBase const *)arg1)->getMetaId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (std::string *) &((SBase const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (std::string *) &((SBase const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getNotes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (XMLNode *)(arg1)->getNotes();
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getNotesString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (arg1)->getNotesString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getAnnotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (XMLNode *)(arg1)->getAnnotation();
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getAnnotationString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (arg1)->getAnnotationString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (XMLNamespaces *)((SBase const *)arg1)->getNamespaces();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getSBMLDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (SBMLDocument *)((SBase const *)arg1)->getSBMLDocument();
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getParentSBMLObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (SBase *)(arg1)->getParentSBMLObject();
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getAncestorOfType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int arg2 ;
  std::string arg3 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (SBase *)(arg1)->getAncestorOfType(arg2,arg3);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getAncestorOfType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int arg2 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SBase *)(arg1)->getAncestorOfType(arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getSBOTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)((SBase const *)arg1)->getSBOTerm();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getSBOTermID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = ((SBase const *)arg1)->getSBOTermID();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getSBOTermAsURL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = ((SBase const *)arg1)->getSBOTermAsURL();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (unsigned int)((SBase const *)arg1)->getLine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (unsigned int)((SBase const *)arg1)->getColumn();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getModelHistory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  ModelHistory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (ModelHistory *)((SBase const *)arg1)->getModelHistory();
  *(ModelHistory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isSetMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)((SBase const *)arg1)->isSetMetaId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)((SBase const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)((SBase const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isSetNotes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)((SBase const *)arg1)->isSetNotes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isSetAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)((SBase const *)arg1)->isSetAnnotation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isSetSBOTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)((SBase const *)arg1)->isSetSBOTerm();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setMetaId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isSetModelHistory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)(arg1)->isSetModelHistory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setAnnotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->setAnnotation((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setAnnotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setAnnotation((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1appendAnnotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->appendAnnotation((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1appendAnnotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->appendAnnotation((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1removeTopLevelAnnotationElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->removeTopLevelAnnotationElement(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1removeTopLevelAnnotationElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->removeTopLevelAnnotationElement(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1removeTopLevelAnnotationElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->removeTopLevelAnnotationElement(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1replaceTopLevelAnnotationElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->replaceTopLevelAnnotationElement((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1replaceTopLevelAnnotationElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->replaceTopLevelAnnotationElement((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setNotes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->setNotes((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setNotes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->setNotes((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setNotes_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setNotes((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1appendNotes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->appendNotes((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1appendNotes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->appendNotes((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setModelHistory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  ModelHistory *arg2 = (ModelHistory *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(ModelHistory **)&jarg2; 
  result = (int)(arg1)->setModelHistory(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1connectToParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBase *arg1 = (SBase *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  (arg1)->connectToParent(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1connectToChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SBase *arg1 = (SBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  (arg1)->connectToChild();
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setSBOTerm_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setSBOTerm(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setSBOTerm_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setSBOTerm((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2; 
  result = (int)(arg1)->setNamespaces(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1unsetMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)(arg1)->unsetMetaId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1unsetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)(arg1)->unsetId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1unsetNotes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)(arg1)->unsetNotes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1unsetAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)(arg1)->unsetAnnotation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1unsetSBOTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)(arg1)->unsetSBOTerm();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1addCVTerm_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  CVTerm *arg2 = (CVTerm *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(CVTerm **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->addCVTerm(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1addCVTerm_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  CVTerm *arg2 = (CVTerm *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(CVTerm **)&jarg2; 
  result = (int)(arg1)->addCVTerm(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getCVTerms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  List *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (List *)(arg1)->getCVTerms();
  {
    ListWrapper<CVTerm> *listw = (result != 0) ? new ListWrapper<CVTerm>(result) : 0;  
    *( ListWrapper<CVTerm>   **)&jresult = listw;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getNumCVTerms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (unsigned int)(arg1)->getNumCVTerms();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getCVTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  unsigned int arg2 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CVTerm *)(arg1)->getCVTerm(arg2);
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1unsetCVTerms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)(arg1)->unsetCVTerms();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1unsetModelHistory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)(arg1)->unsetModelHistory();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getResourceBiologicalQualifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string arg2 ;
  BiolQualifierType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (BiolQualifierType_t)(arg1)->getResourceBiologicalQualifier(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getResourceModelQualifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string arg2 ;
  ModelQualifierType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ModelQualifierType_t)(arg1)->getResourceModelQualifier(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (Model *)((SBase const *)arg1)->getModel();
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (unsigned int)((SBase const *)arg1)->getLevel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (unsigned int)((SBase const *)arg1)->getVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getPackageVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (unsigned int)((SBase const *)arg1)->getPackageVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (std::string *) &((SBase const *)arg1)->getPackageName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)((SBase const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1hasValidLevelVersionNamespaceCombination(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)(arg1)->hasValidLevelVersionNamespaceCombination();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (std::string *) &((SBase const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1toSBML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (char *)(arg1)->toSBML();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1toXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (XMLNode *)(arg1)->toXMLNode();
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getPlugin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  SBasePlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBasePlugin *)(arg1)->getPlugin((std::string const &)*arg2);
  *(SBasePlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getPlugin_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  unsigned int arg2 ;
  SBasePlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBasePlugin *)(arg1)->getPlugin(arg2);
  *(SBasePlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getNumPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (unsigned int)((SBase const *)arg1)->getNumPlugins();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1enablePackage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->enablePackage((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1disablePackage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->disablePackage((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isPackageURIEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((SBase const *)arg1)->isPackageURIEnabled((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isPackageEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((SBase const *)arg1)->isPackageEnabled((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isPkgURIEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((SBase const *)arg1)->isPkgURIEnabled((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1isPkgEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((SBase const *)arg1)->isPkgEnabled((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1writeExtensionElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBase *arg1 = (SBase *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  ((SBase const *)arg1)->writeExtensionElements(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)((SBase const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)((SBase const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1checkCompatibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  result = (int)((SBase const *)arg1)->checkCompatibility((SBase const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1setSBMLNamespacesAndOwn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBase *arg1 = (SBase *) 0 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  (arg1)->setSBMLNamespacesAndOwn(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getSBMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (SBMLNamespaces *)((SBase const *)arg1)->getSBMLNamespaces();
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1checkMathMLNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLToken arg2 ;
  XMLToken const *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  argp2 = *(XMLToken **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XMLToken const");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->checkMathMLNamespace(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getDerivedUnitDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1containsUndeclaredUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (bool)(arg1)->containsUndeclaredUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1removeFromParentAndDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (int)(arg1)->removeFromParentAndDelete();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1matchesSBMLNamespaces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  result = (bool)(arg1)->matchesSBMLNamespaces((SBase const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1matchesRequiredSBMLNamespacesForAddition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  result = (bool)(arg1)->matchesRequiredSBMLNamespacesForAddition((SBase const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = ((SBase const *)arg1)->getURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = ((SBase const *)arg1)->getPrefix();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getListOfAllElements_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  ElementFilter *arg2 = (ElementFilter *) 0 ;
  ListWrapper< SBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(ElementFilter **)&jarg2; 
  result = (ListWrapper< SBase > *)SBase_getListOfAllElements__SWIG_0(arg1,arg2);
  *(ListWrapper< SBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getListOfAllElements_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  ListWrapper< SBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (ListWrapper< SBase > *)SBase_getListOfAllElements__SWIG_0(arg1);
  *(ListWrapper< SBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getListOfAllElementsFromPlugins_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  ElementFilter *arg2 = (ElementFilter *) 0 ;
  ListWrapper< SBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBase **)&jarg1; 
  arg2 = *(ElementFilter **)&jarg2; 
  result = (ListWrapper< SBase > *)SBase_getListOfAllElementsFromPlugins__SWIG_0(arg1,arg2);
  *(ListWrapper< SBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBase_1getListOfAllElementsFromPlugins_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  ListWrapper< SBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (ListWrapper< SBase > *)SBase_getListOfAllElementsFromPlugins__SWIG_0(arg1);
  *(ListWrapper< SBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOf *)new ListOf(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  ListOf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  
  try {
    result = (ListOf *)new ListOf(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOf_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListOf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (ListOf *)new ListOf();
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOf_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOf *)new ListOf(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOf(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOf *arg1 = (ListOf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOf **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOf_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOf *arg1 = 0 ;
  ListOf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ListOf const & reference is null");
    return 0;
  } 
  
  try {
    result = (ListOf *)new ListOf((ListOf const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  ListOf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  result = (ListOf *)((ListOf const *)arg1)->clone();
  *(ListOf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListOf **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  result = (int)(arg1)->append((SBase const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1appendAndOwn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListOf **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  result = (int)(arg1)->appendAndOwn(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1appendFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  ListOf *arg2 = (ListOf *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListOf **)&jarg1; 
  arg2 = *(ListOf **)&jarg2; 
  result = (int)(arg1)->appendFrom((ListOf const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  int arg2 ;
  SBase *arg3 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ListOf **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SBase **)&jarg3; 
  result = (int)(arg1)->insert(arg2,(SBase const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1insertAndOwn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  int arg2 ;
  SBase *arg3 = (SBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ListOf **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SBase **)&jarg3; 
  result = (int)(arg1)->insertAndOwn(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  unsigned int arg2 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBase *)((ListOf const *)arg1)->get(arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1getElementByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementByMetaId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ListOf *arg1 = (ListOf *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ListOf *arg1 = (ListOf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1removeFromParentAndDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  result = (int)(arg1)->removeFromParentAndDelete();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  unsigned int arg2 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBase *)(arg1)->remove(arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  result = (unsigned int)((ListOf const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1connectToChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ListOf *arg1 = (ListOf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  (arg1)->connectToChild();
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  result = (int)((ListOf const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  result = (int)((ListOf const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOf *arg1 = (ListOf *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  result = (std::string *) &((ListOf const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ListOf *arg1 = (ListOf *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOf **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Model_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Model *)new Model(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Model_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Model *)new Model(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Model **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Model_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Model const & reference is null");
    return 0;
  } 
  
  try {
    result = (Model *)new Model((Model const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Model *)((Model const *)arg1)->clone();
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getElementByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementByMetaId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getSubstanceUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getTimeUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getVolumeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getVolumeUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getAreaUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getAreaUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getLengthUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getLengthUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getExtentUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getExtentUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getConversionFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getConversionFactor();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isSetSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->isSetSubstanceUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isSetTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->isSetTimeUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isSetVolumeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->isSetVolumeUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isSetAreaUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->isSetAreaUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isSetLengthUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->isSetLengthUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isSetExtentUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->isSetExtentUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isSetConversionFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->isSetConversionFactor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setSubstanceUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setTimeUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setVolumeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setVolumeUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setAreaUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setAreaUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setLengthUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setLengthUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setExtentUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setExtentUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setConversionFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setConversionFactor((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1unsetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->unsetId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1unsetSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->unsetSubstanceUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1unsetTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->unsetTimeUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1unsetVolumeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->unsetVolumeUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1unsetAreaUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->unsetAreaUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1unsetLengthUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->unsetLengthUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1unsetExtentUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->unsetExtentUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1unsetConversionFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->unsetConversionFactor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addFunctionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  FunctionDefinition *arg2 = (FunctionDefinition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(FunctionDefinition **)&jarg2; 
  result = (int)(arg1)->addFunctionDefinition((FunctionDefinition const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addUnitDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  UnitDefinition *arg2 = (UnitDefinition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(UnitDefinition **)&jarg2; 
  result = (int)(arg1)->addUnitDefinition((UnitDefinition const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addCompartmentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  CompartmentType *arg2 = (CompartmentType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(CompartmentType **)&jarg2; 
  result = (int)(arg1)->addCompartmentType((CompartmentType const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addSpeciesType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  SpeciesType *arg2 = (SpeciesType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(SpeciesType **)&jarg2; 
  result = (int)(arg1)->addSpeciesType((SpeciesType const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Compartment *arg2 = (Compartment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(Compartment **)&jarg2; 
  result = (int)(arg1)->addCompartment((Compartment const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Species *arg2 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(Species **)&jarg2; 
  result = (int)(arg1)->addSpecies((Species const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Parameter *arg2 = (Parameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(Parameter **)&jarg2; 
  result = (int)(arg1)->addParameter((Parameter const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addInitialAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  InitialAssignment *arg2 = (InitialAssignment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(InitialAssignment **)&jarg2; 
  result = (int)(arg1)->addInitialAssignment((InitialAssignment const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addRule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Rule *arg2 = (Rule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(Rule **)&jarg2; 
  result = (int)(arg1)->addRule((Rule const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Constraint *arg2 = (Constraint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(Constraint **)&jarg2; 
  result = (int)(arg1)->addConstraint((Constraint const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addReaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Reaction *arg2 = (Reaction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(Reaction **)&jarg2; 
  result = (int)(arg1)->addReaction((Reaction const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Event *arg2 = (Event *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(Event **)&jarg2; 
  result = (int)(arg1)->addEvent((Event const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createFunctionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (FunctionDefinition *)(arg1)->createFunctionDefinition();
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createUnitDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (UnitDefinition *)(arg1)->createUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Unit *)(arg1)->createUnit();
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createCompartmentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (CompartmentType *)(arg1)->createCompartmentType();
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createSpeciesType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (SpeciesType *)(arg1)->createSpeciesType();
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Compartment *)(arg1)->createCompartment();
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Species *)(arg1)->createSpecies();
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Parameter *)(arg1)->createParameter();
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createInitialAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (InitialAssignment *)(arg1)->createInitialAssignment();
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createAlgebraicRule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  AlgebraicRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (AlgebraicRule *)(arg1)->createAlgebraicRule();
  *(AlgebraicRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createAssignmentRule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  AssignmentRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (AssignmentRule *)(arg1)->createAssignmentRule();
  *(AssignmentRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createRateRule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  RateRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (RateRule *)(arg1)->createRateRule();
  *(RateRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Constraint *)(arg1)->createConstraint();
  *(Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createReaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Reaction *)(arg1)->createReaction();
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createReactant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (SpeciesReference *)(arg1)->createReactant();
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (SpeciesReference *)(arg1)->createProduct();
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createModifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ModifierSpeciesReference *)(arg1)->createModifier();
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createKineticLaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  KineticLaw *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (KineticLaw *)(arg1)->createKineticLaw();
  *(KineticLaw **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createKineticLawParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Parameter *)(arg1)->createKineticLawParameter();
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createKineticLawLocalParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (LocalParameter *)(arg1)->createKineticLawLocalParameter();
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Event *)(arg1)->createEvent();
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createEventAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (EventAssignment *)(arg1)->createEventAssignment();
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createTrigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Trigger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Trigger *)(arg1)->createTrigger();
  *(Trigger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1createDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (Delay *)(arg1)->createDelay();
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setAnnotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->setAnnotation((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setAnnotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setAnnotation((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1appendAnnotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->appendAnnotation((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1appendAnnotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->appendAnnotation((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfFunctionDefinitions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfFunctionDefinitions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfFunctionDefinitions *)((Model const *)arg1)->getListOfFunctionDefinitions();
  *(ListOfFunctionDefinitions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfUnitDefinitions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfUnitDefinitions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfUnitDefinitions *)((Model const *)arg1)->getListOfUnitDefinitions();
  *(ListOfUnitDefinitions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfCompartmentTypes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfCompartmentTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfCompartmentTypes *)((Model const *)arg1)->getListOfCompartmentTypes();
  *(ListOfCompartmentTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfSpeciesTypes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfSpeciesTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfSpeciesTypes *)((Model const *)arg1)->getListOfSpeciesTypes();
  *(ListOfSpeciesTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfCompartments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfCompartments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfCompartments *)((Model const *)arg1)->getListOfCompartments();
  *(ListOfCompartments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfSpecies_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfSpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfSpecies *)((Model const *)arg1)->getListOfSpecies();
  *(ListOfSpecies **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfParameters *)((Model const *)arg1)->getListOfParameters();
  *(ListOfParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfInitialAssignments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfInitialAssignments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfInitialAssignments *)((Model const *)arg1)->getListOfInitialAssignments();
  *(ListOfInitialAssignments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfRules_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfRules *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfRules *)((Model const *)arg1)->getListOfRules();
  *(ListOfRules **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfConstraints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfConstraints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfConstraints *)((Model const *)arg1)->getListOfConstraints();
  *(ListOfConstraints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfReactions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfReactions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfReactions *)((Model const *)arg1)->getListOfReactions();
  *(ListOfReactions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getListOfEvents_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ListOfEvents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (ListOfEvents *)((Model const *)arg1)->getListOfEvents();
  *(ListOfEvents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getFunctionDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FunctionDefinition *)((Model const *)arg1)->getFunctionDefinition(arg2);
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getFunctionDefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (FunctionDefinition *)((Model const *)arg1)->getFunctionDefinition((std::string const &)*arg2);
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (UnitDefinition *)((Model const *)arg1)->getUnitDefinition(arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getUnitDefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (UnitDefinition *)((Model const *)arg1)->getUnitDefinition((std::string const &)*arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getCompartmentType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompartmentType *)((Model const *)arg1)->getCompartmentType(arg2);
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getCompartmentType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (CompartmentType *)((Model const *)arg1)->getCompartmentType((std::string const &)*arg2);
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getSpeciesType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SpeciesType *)((Model const *)arg1)->getSpeciesType(arg2);
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getSpeciesType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SpeciesType *)((Model const *)arg1)->getSpeciesType((std::string const &)*arg2);
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getCompartment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Compartment *)((Model const *)arg1)->getCompartment(arg2);
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getCompartment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Compartment *)((Model const *)arg1)->getCompartment((std::string const &)*arg2);
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getSpecies_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Species *)((Model const *)arg1)->getSpecies(arg2);
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getSpecies_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Species *)((Model const *)arg1)->getSpecies((std::string const &)*arg2);
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Parameter *)((Model const *)arg1)->getParameter(arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getParameter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Parameter *)((Model const *)arg1)->getParameter((std::string const &)*arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getInitialAssignment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (InitialAssignment *)((Model const *)arg1)->getInitialAssignment(arg2);
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getInitialAssignment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (InitialAssignment *)((Model const *)arg1)->getInitialAssignment((std::string const &)*arg2);
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getInitialAssignmentBySymbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (InitialAssignment *)((Model const *)arg1)->getInitialAssignmentBySymbol((std::string const &)*arg2);
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Rule *)((Model const *)arg1)->getRule(arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getRule_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Rule *)((Model const *)arg1)->getRule((std::string const &)*arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getRuleByVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Rule *)((Model const *)arg1)->getRuleByVariable((std::string const &)*arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getAssignmentRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  AssignmentRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AssignmentRule *)((Model const *)arg1)->getAssignmentRule((std::string const &)*arg2);
  *(AssignmentRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getRateRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  RateRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (RateRule *)((Model const *)arg1)->getRateRule((std::string const &)*arg2);
  *(RateRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getAssignmentRuleByVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  AssignmentRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AssignmentRule *)((Model const *)arg1)->getAssignmentRuleByVariable((std::string const &)*arg2);
  *(AssignmentRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getRateRuleByVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  RateRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (RateRule *)((Model const *)arg1)->getRateRuleByVariable((std::string const &)*arg2);
  *(RateRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Constraint *)((Model const *)arg1)->getConstraint(arg2);
  *(Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getReaction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Reaction *)((Model const *)arg1)->getReaction(arg2);
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getReaction_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Reaction *)((Model const *)arg1)->getReaction((std::string const &)*arg2);
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getSpeciesReference_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SpeciesReference *)(arg1)->getSpeciesReference((std::string const &)*arg2);
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getModifierSpeciesReference_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ModifierSpeciesReference *)(arg1)->getModifierSpeciesReference((std::string const &)*arg2);
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getEvent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Event *)((Model const *)arg1)->getEvent(arg2);
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getEvent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Event *)((Model const *)arg1)->getEvent((std::string const &)*arg2);
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumFunctionDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumFunctionDefinitions();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumUnitDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumUnitDefinitions();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumCompartmentTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumCompartmentTypes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumSpeciesTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumSpeciesTypes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumCompartments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumCompartments();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumSpecies();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumSpeciesWithBoundaryCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumSpeciesWithBoundaryCondition();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumParameters();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumInitialAssignments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumInitialAssignments();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumRules(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumRules();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumConstraints();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumReactions();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getNumEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (unsigned int)((Model const *)arg1)->getNumEvents();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeFromParentAndDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)(arg1)->removeFromParentAndDelete();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1renameAllIds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  IdentifierTransformer *arg2 = (IdentifierTransformer *) 0 ;
  ElementFilter *arg3 = (ElementFilter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(IdentifierTransformer **)&jarg2; 
  arg3 = *(ElementFilter **)&jarg3; 
  result = (int)(arg1)->renameAllIds(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1renameAllIds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  IdentifierTransformer *arg2 = (IdentifierTransformer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(IdentifierTransformer **)&jarg2; 
  result = (int)(arg1)->renameAllIds(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertL1ToL2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->convertL1ToL2();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertL1ToL3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->convertL1ToL3();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertL2ToL3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->convertL2ToL3();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertL2ToL1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Model *arg1 = (Model *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->convertL2ToL1(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertL2ToL1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->convertL2ToL1();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertL3ToL1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->convertL3ToL1();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertL3ToL2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Model *arg1 = (Model *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->convertL3ToL2(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertL3ToL2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->convertL3ToL2();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addModifiers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->addModifiers();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addConstantAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->addConstantAttribute();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setSpatialDimensions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Model *arg1 = (Model *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSpatialDimensions(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setSpatialDimensions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->setSpatialDimensions();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1addDefinitionsForDefaultUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->addDefinitionsForDefaultUnits();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertParametersToLocals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->convertParametersToLocals(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1setSpeciesReferenceConstantValueAndStoichiometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->setSpeciesReferenceConstantValueAndStoichiometry();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeParameterRuleUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Model *arg1 = (Model *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->removeParameterRuleUnits(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1convertStoichiometryMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->convertStoichiometryMath();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1assignRequiredValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->assignRequiredValues();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1dealWithModelUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->dealWithModelUnits();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1dealWithStoichiometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->dealWithStoichiometry();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1dealWithEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Model *arg1 = (Model *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->dealWithEvents(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1connectToChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->connectToChild();
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (int)((Model const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (std::string *) &((Model const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1populateListFormulaUnitsData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Model *arg1 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  (arg1)->populateListFormulaUnitsData();
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1isPopulatedListFormulaUnitsData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)(arg1)->isPopulatedListFormulaUnitsData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getFormulaUnitsDataForVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  FormulaUnitsData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (FormulaUnitsData *)(arg1)->getFormulaUnitsDataForVariable((std::string const &)*arg2);
  *(FormulaUnitsData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1getFormulaUnitsDataForAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  FormulaUnitsData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (FormulaUnitsData *)(arg1)->getFormulaUnitsDataForAssignment((std::string const &)*arg2);
  *(FormulaUnitsData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)((Model const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeFunctionDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FunctionDefinition *)(arg1)->removeFunctionDefinition(arg2);
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeFunctionDefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (FunctionDefinition *)(arg1)->removeFunctionDefinition((std::string const &)*arg2);
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (UnitDefinition *)(arg1)->removeUnitDefinition(arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeUnitDefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (UnitDefinition *)(arg1)->removeUnitDefinition((std::string const &)*arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeCompartmentType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompartmentType *)(arg1)->removeCompartmentType(arg2);
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeCompartmentType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (CompartmentType *)(arg1)->removeCompartmentType((std::string const &)*arg2);
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeSpeciesType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SpeciesType *)(arg1)->removeSpeciesType(arg2);
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeSpeciesType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SpeciesType *)(arg1)->removeSpeciesType((std::string const &)*arg2);
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeCompartment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Compartment *)(arg1)->removeCompartment(arg2);
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeCompartment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Compartment *)(arg1)->removeCompartment((std::string const &)*arg2);
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeSpecies_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Species *)(arg1)->removeSpecies(arg2);
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeSpecies_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Species *)(arg1)->removeSpecies((std::string const &)*arg2);
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Parameter *)(arg1)->removeParameter(arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Parameter *)(arg1)->removeParameter((std::string const &)*arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeInitialAssignment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (InitialAssignment *)(arg1)->removeInitialAssignment(arg2);
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeInitialAssignment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (InitialAssignment *)(arg1)->removeInitialAssignment((std::string const &)*arg2);
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Rule *)(arg1)->removeRule(arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeRule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Rule *)(arg1)->removeRule((std::string const &)*arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeRuleByVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Rule *)(arg1)->removeRuleByVariable((std::string const &)*arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Constraint *)(arg1)->removeConstraint(arg2);
  *(Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeReaction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Reaction *)(arg1)->removeReaction(arg2);
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeReaction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Reaction *)(arg1)->removeReaction((std::string const &)*arg2);
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeEvent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  unsigned int arg2 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Event *)(arg1)->removeEvent(arg2);
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1removeEvent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Event *)(arg1)->removeEvent((std::string const &)*arg2);
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1appendFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  Model *arg2 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(Model **)&jarg2; 
  result = (int)(arg1)->appendFrom((Model const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  Model *arg1 = (Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1renameIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Model *arg1 = (Model *) 0 ;
  ListWrapper< SBase > *arg2 = (ListWrapper< SBase > *) 0 ;
  IdentifierTransformer *arg3 = (IdentifierTransformer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Model **)&jarg1; 
  arg2 = *(ListWrapper< SBase > **)&jarg2; 
  arg3 = *(IdentifierTransformer **)&jarg3; 
  Model_renameIDs(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getDefaultLevel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)SBMLDocument::getDefaultLevel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getDefaultVersion(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)SBMLDocument::getDefaultVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (SBMLDocument *)new SBMLDocument(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  
  try {
    result = (SBMLDocument *)new SBMLDocument(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLDocument_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (SBMLDocument *)new SBMLDocument();
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLDocument_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (SBMLDocument *)new SBMLDocument(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLDocument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLDocument_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLDocument const & reference is null");
    return 0;
  } 
  
  try {
    result = (SBMLDocument *)new SBMLDocument((SBMLDocument const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (SBMLDocument *)((SBMLDocument const *)arg1)->clone();
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (Model *)((SBMLDocument const *)arg1)->getModel();
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getElementByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementByMetaId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1expandFunctionDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (bool)(arg1)->expandFunctionDefinitions();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1expandInitialAssignments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (bool)(arg1)->expandInitialAssignments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setLevelAndVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setLevelAndVersion(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setLevelAndVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setLevelAndVersion(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setLevelAndVersion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->setLevelAndVersion(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1updateSBMLNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->updateSBMLNamespace((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  Model *arg2 = (Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = *(Model **)&jarg2; 
  result = (int)(arg1)->setModel((Model const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1createModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Model *)(arg1)->createModel((std::string const &)*arg2);
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1createModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (Model *)(arg1)->createModel();
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setLocationURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setLocationURI((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getLocationURI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = ((SBMLDocument const *)arg1)->getLocationURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setConsistencyChecks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  SBMLErrorCategory_t arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (SBMLErrorCategory_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setConsistencyChecks(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setConsistencyChecksForConversion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  SBMLErrorCategory_t arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (SBMLErrorCategory_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setConsistencyChecksForConversion(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1checkConsistency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)(arg1)->checkConsistency();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1validateSBML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)(arg1)->validateSBML();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1checkInternalConsistency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)(arg1)->checkInternalConsistency();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1checkL1Compatibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)(arg1)->checkL1Compatibility();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1checkL2v1Compatibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)(arg1)->checkL2v1Compatibility();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1checkL2v2Compatibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)(arg1)->checkL2v2Compatibility();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1checkL2v3Compatibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)(arg1)->checkL2v3Compatibility();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1checkL2v4Compatibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)(arg1)->checkL2v4Compatibility();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1checkL3v1Compatibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)(arg1)->checkL3v1Compatibility();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int arg2 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBMLError *)((SBMLDocument const *)arg1)->getError(arg2);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getNumErrors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)((SBMLDocument const *)arg1)->getNumErrors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getNumErrors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((SBMLDocument const *)arg1)->getNumErrors(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1printErrors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  ((SBMLDocument const *)arg1)->printErrors(*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1printErrors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  ((SBMLDocument const *)arg1)->printErrors();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1connectToChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  (arg1)->connectToChild();
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  ConversionProperties *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->convert((ConversionProperties const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (int)((SBMLDocument const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (std::string *) &((SBMLDocument const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getErrorLog_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  SBMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (SBMLErrorLog *)(arg1)->getErrorLog();
  *(SBMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (XMLNamespaces *)((SBMLDocument const *)arg1)->getNamespaces();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1enableDefaultNS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->enableDefaultNS((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1isEnabledDefaultNS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->isEnabledDefaultNS((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setPackageRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->setPackageRequired((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getPackageRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->getPackageRequired((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1isSetPackageRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->isSetPackageRequired((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1isIgnoredPackage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->isIgnoredPackage((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1isDisabledIgnoredPackage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->isDisabledIgnoredPackage((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setPkgRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->setPkgRequired((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getPkgRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->getPkgRequired((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1isSetPkgRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->isSetPkgRequired((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1isIgnoredPkg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->isIgnoredPkg((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getApplicableValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned char)((SBMLDocument const *)arg1)->getApplicableValidators();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getConversionValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned char)((SBMLDocument const *)arg1)->getConversionValidators();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setApplicableValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->setApplicableValidators(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1setConversionValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->setConversionValidators(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getNumValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (unsigned int)((SBMLDocument const *)arg1)->getNumValidators();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1clearValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  result = (int)(arg1)->clearValidators();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1addValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  SBMLValidator *arg2 = (SBMLValidator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = *(SBMLValidator **)&jarg2; 
  result = (int)(arg1)->addValidator((SBMLValidator const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1getValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBMLDocument *arg1 = (SBMLDocument *) 0 ;
  unsigned int arg2 ;
  SBMLValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocument **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBMLValidator *)(arg1)->getValidator(arg2);
  *(SBMLValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1FunctionDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (FunctionDefinition *)new FunctionDefinition(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1FunctionDefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (FunctionDefinition *)new FunctionDefinition(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1FunctionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FunctionDefinition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1FunctionDefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FunctionDefinition *arg1 = 0 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FunctionDefinition const & reference is null");
    return 0;
  } 
  
  try {
    result = (FunctionDefinition *)new FunctionDefinition((FunctionDefinition const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (FunctionDefinition *)((FunctionDefinition const *)arg1)->clone();
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (std::string *) &((FunctionDefinition const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (std::string *) &((FunctionDefinition const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (ASTNode *)((FunctionDefinition const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (bool)((FunctionDefinition const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (bool)((FunctionDefinition const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (bool)((FunctionDefinition const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1getArgument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  unsigned int arg2 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ASTNode *)((FunctionDefinition const *)arg1)->getArgument(arg2);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1getArgument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ASTNode *)((FunctionDefinition const *)arg1)->getArgument((std::string const &)*arg2);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1getBody_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (ASTNode *)((FunctionDefinition const *)arg1)->getBody();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1isSetBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (bool)((FunctionDefinition const *)arg1)->isSetBody();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1getNumArguments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (unsigned int)((FunctionDefinition const *)arg1)->getNumArguments();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (int)((FunctionDefinition const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (std::string *) &((FunctionDefinition const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (bool)((FunctionDefinition const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  result = (bool)((FunctionDefinition const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  FunctionDefinition *arg1 = (FunctionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctionDefinition **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfFunctionDefinitions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfFunctionDefinitions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfFunctionDefinitions *)new ListOfFunctionDefinitions(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfFunctionDefinitions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfFunctionDefinitions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfFunctionDefinitions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfFunctionDefinitions *)new ListOfFunctionDefinitions(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfFunctionDefinitions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfFunctionDefinitions_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfFunctionDefinitions *arg1 = (ListOfFunctionDefinitions *) 0 ;
  ListOfFunctionDefinitions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfFunctionDefinitions **)&jarg1; 
  result = (ListOfFunctionDefinitions *)((ListOfFunctionDefinitions const *)arg1)->clone();
  *(ListOfFunctionDefinitions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfFunctionDefinitions_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfFunctionDefinitions *arg1 = (ListOfFunctionDefinitions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfFunctionDefinitions **)&jarg1; 
  result = (int)((ListOfFunctionDefinitions const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfFunctionDefinitions_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfFunctionDefinitions *arg1 = (ListOfFunctionDefinitions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfFunctionDefinitions **)&jarg1; 
  result = (std::string *) &((ListOfFunctionDefinitions const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfFunctionDefinitions_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfFunctionDefinitions *arg1 = (ListOfFunctionDefinitions *) 0 ;
  unsigned int arg2 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfFunctionDefinitions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FunctionDefinition *)(arg1)->get(arg2);
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfFunctionDefinitions_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfFunctionDefinitions *arg1 = (ListOfFunctionDefinitions *) 0 ;
  std::string *arg2 = 0 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfFunctionDefinitions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (FunctionDefinition *)(arg1)->get((std::string const &)*arg2);
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfFunctionDefinitions_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfFunctionDefinitions *arg1 = (ListOfFunctionDefinitions *) 0 ;
  unsigned int arg2 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfFunctionDefinitions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FunctionDefinition *)(arg1)->remove(arg2);
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfFunctionDefinitions_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfFunctionDefinitions *arg1 = (ListOfFunctionDefinitions *) 0 ;
  std::string *arg2 = 0 ;
  FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfFunctionDefinitions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (FunctionDefinition *)(arg1)->remove((std::string const &)*arg2);
  *(FunctionDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfFunctionDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfFunctionDefinitions *arg1 = (ListOfFunctionDefinitions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfFunctionDefinitions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitKind_1equals(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  UnitKind_t arg1 ;
  UnitKind_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (UnitKind_t)jarg1; 
  arg2 = (UnitKind_t)jarg2; 
  result = (int)UnitKind_equals(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitKind_1forName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  UnitKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (UnitKind_t)UnitKind_forName((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitKind_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  UnitKind_t arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (UnitKind_t)jarg1; 
  result = (char *)UnitKind_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitKind_1isValidUnitKindString(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)UnitKind_isValidUnitKindString((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Unit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Unit *)new Unit(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Unit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Unit *)new Unit(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Unit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Unit *arg1 = (Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Unit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Unit_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Unit *arg1 = 0 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unit const & reference is null");
    return 0;
  } 
  
  try {
    result = (Unit *)new Unit((Unit const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (Unit *)((Unit const *)arg1)->clone();
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1initDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Unit *arg1 = (Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  (arg1)->initDefaults();
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1getKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  UnitKind_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (UnitKind_t)((Unit const *)arg1)->getKind();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1getExponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (int)((Unit const *)arg1)->getExponent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1getExponentAsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (double)((Unit const *)arg1)->getExponentAsDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1getScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (int)((Unit const *)arg1)->getScale();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1getMultiplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (double)((Unit const *)arg1)->getMultiplier();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1getOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (double)((Unit const *)arg1)->getOffset();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isAmpere(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isAmpere();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isAvogadro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isAvogadro();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isBecquerel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isBecquerel();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isCandela(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isCandela();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isCelsius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isCelsius();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isCoulomb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isCoulomb();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isDimensionless(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isDimensionless();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isFarad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isFarad();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isGram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isGram();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isGray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isGray();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isHenry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isHenry();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isHertz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isHertz();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isItem();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isJoule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isJoule();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isKatal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isKatal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isKelvin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isKelvin();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isKilogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isKilogram();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isLitre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isLitre();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isLumen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isLumen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isLux(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isLux();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isMetre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isMetre();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isMole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isMole();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isNewton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isNewton();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isOhm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isOhm();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isPascal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isPascal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isRadian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isRadian();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isSecond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isSiemens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isSiemens();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isSievert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isSievert();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isSteradian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isSteradian();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isTesla(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isTesla();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isVolt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isVolt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isWatt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isWatt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isWeber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isWeber();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isSetKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isSetKind();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isSetExponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isSetExponent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isSetScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isSetScale();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isSetMultiplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->isSetMultiplier();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1setKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  UnitKind_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  arg2 = (UnitKind_t)jarg2; 
  result = (int)(arg1)->setKind(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1setExponent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setExponent(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1setExponent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setExponent(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1setScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setScale(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1setMultiplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setMultiplier(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1setOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setOffset(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (int)((Unit const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (std::string *) &((Unit const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isBuiltIn(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  result = (bool)Unit::isBuiltIn((std::string const &)*arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1isUnitKind(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)Unit::isUnitKind((std::string const &)*arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1areIdentical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Unit **)&jarg1; 
  arg2 = *(Unit **)&jarg2; 
  result = (bool)Unit::areIdentical(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1areEquivalent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Unit **)&jarg1; 
  arg2 = *(Unit **)&jarg2; 
  result = (bool)Unit::areEquivalent(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1removeScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (int)Unit::removeScale(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Unit **)&jarg1; 
  arg2 = *(Unit **)&jarg2; 
  Unit::merge(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1convertToSI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (UnitDefinition *)Unit::convertToSI((Unit const *)arg1);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unit **)&jarg1; 
  result = (bool)((Unit const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfUnits *)new ListOfUnits(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfUnits **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfUnits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfUnits *)new ListOfUnits(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfUnits **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnits_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfUnits *arg1 = (ListOfUnits *) 0 ;
  ListOfUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnits **)&jarg1; 
  result = (ListOfUnits *)((ListOfUnits const *)arg1)->clone();
  *(ListOfUnits **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnits_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfUnits *arg1 = (ListOfUnits *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnits **)&jarg1; 
  result = (int)((ListOfUnits const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnits_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfUnits *arg1 = (ListOfUnits *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnits **)&jarg1; 
  result = (std::string *) &((ListOfUnits const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnits_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfUnits *arg1 = (ListOfUnits *) 0 ;
  unsigned int arg2 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnits **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Unit *)(arg1)->get(arg2);
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnits_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfUnits *arg1 = (ListOfUnits *) 0 ;
  unsigned int arg2 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnits **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Unit *)(arg1)->remove(arg2);
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfUnits(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfUnits *arg1 = (ListOfUnits *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfUnits **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1UnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (UnitDefinition *)new UnitDefinition(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1UnitDefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (UnitDefinition *)new UnitDefinition(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1UnitDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UnitDefinition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1UnitDefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UnitDefinition const & reference is null");
    return 0;
  } 
  
  try {
    result = (UnitDefinition *)new UnitDefinition((UnitDefinition const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (UnitDefinition *)((UnitDefinition const *)arg1)->clone();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1getElementByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementByMetaId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (std::string *) &((UnitDefinition const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (std::string *) &((UnitDefinition const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isVariantOfArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isVariantOfArea();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isVariantOfLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isVariantOfLength();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isVariantOfSubstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isVariantOfSubstance();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isVariantOfTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isVariantOfTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isVariantOfVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isVariantOfVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isVariantOfDimensionless(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isVariantOfDimensionless();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isVariantOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isVariantOfMass();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1isVariantOfSubstancePerTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->isVariantOfSubstancePerTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1addUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UnitDefinition **)&jarg1; 
  arg2 = *(Unit **)&jarg2; 
  result = (int)(arg1)->addUnit((Unit const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1createUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (Unit *)(arg1)->createUnit();
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1getListOfUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  ListOfUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (ListOfUnits *)((UnitDefinition const *)arg1)->getListOfUnits();
  *(ListOfUnits **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1getUnit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  unsigned int arg2 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Unit *)(arg1)->getUnit(arg2);
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1getNumUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (unsigned int)((UnitDefinition const *)arg1)->getNumUnits();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1removeUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  unsigned int arg2 ;
  Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Unit *)(arg1)->removeUnit(arg2);
  *(Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1connectToChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  (arg1)->connectToChild();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (int)((UnitDefinition const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (std::string *) &((UnitDefinition const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  UnitDefinition::simplify(arg1);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1reorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  UnitDefinition::reorder(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1convertToSI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (UnitDefinition *)UnitDefinition::convertToSI((UnitDefinition const *)arg1);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1areIdentical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  UnitDefinition *arg2 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UnitDefinition **)&jarg1; 
  arg2 = *(UnitDefinition **)&jarg2; 
  result = (bool)UnitDefinition::areIdentical((UnitDefinition const *)arg1,(UnitDefinition const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1areEquivalent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  UnitDefinition *arg2 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UnitDefinition **)&jarg1; 
  arg2 = *(UnitDefinition **)&jarg2; 
  result = (bool)UnitDefinition::areEquivalent((UnitDefinition const *)arg1,(UnitDefinition const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1combine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  UnitDefinition *arg2 = (UnitDefinition *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UnitDefinition **)&jarg1; 
  arg2 = *(UnitDefinition **)&jarg2; 
  result = (UnitDefinition *)UnitDefinition::combine(arg1,arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1divide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  UnitDefinition *arg2 = (UnitDefinition *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UnitDefinition **)&jarg1; 
  arg2 = *(UnitDefinition **)&jarg2; 
  result = (UnitDefinition *)UnitDefinition::divide(arg1,arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1printUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = UnitDefinition::printUnits((UnitDefinition const *)arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1printUnits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = UnitDefinition::printUnits((UnitDefinition const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UnitDefinition *arg1 = (UnitDefinition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UnitDefinition **)&jarg1; 
  result = (bool)((UnitDefinition const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfUnitDefinitions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfUnitDefinitions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfUnitDefinitions *)new ListOfUnitDefinitions(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfUnitDefinitions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfUnitDefinitions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfUnitDefinitions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfUnitDefinitions *)new ListOfUnitDefinitions(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfUnitDefinitions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnitDefinitions_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfUnitDefinitions *arg1 = (ListOfUnitDefinitions *) 0 ;
  ListOfUnitDefinitions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnitDefinitions **)&jarg1; 
  result = (ListOfUnitDefinitions *)((ListOfUnitDefinitions const *)arg1)->clone();
  *(ListOfUnitDefinitions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnitDefinitions_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfUnitDefinitions *arg1 = (ListOfUnitDefinitions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnitDefinitions **)&jarg1; 
  result = (int)((ListOfUnitDefinitions const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnitDefinitions_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfUnitDefinitions *arg1 = (ListOfUnitDefinitions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnitDefinitions **)&jarg1; 
  result = (std::string *) &((ListOfUnitDefinitions const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnitDefinitions_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfUnitDefinitions *arg1 = (ListOfUnitDefinitions *) 0 ;
  unsigned int arg2 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnitDefinitions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (UnitDefinition *)(arg1)->get(arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnitDefinitions_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfUnitDefinitions *arg1 = (ListOfUnitDefinitions *) 0 ;
  std::string *arg2 = 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnitDefinitions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (UnitDefinition *)(arg1)->get((std::string const &)*arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnitDefinitions_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfUnitDefinitions *arg1 = (ListOfUnitDefinitions *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnitDefinitions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnitDefinitions_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfUnitDefinitions *arg1 = (ListOfUnitDefinitions *) 0 ;
  unsigned int arg2 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnitDefinitions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (UnitDefinition *)(arg1)->remove(arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnitDefinitions_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfUnitDefinitions *arg1 = (ListOfUnitDefinitions *) 0 ;
  std::string *arg2 = 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfUnitDefinitions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (UnitDefinition *)(arg1)->remove((std::string const &)*arg2);
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfUnitDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfUnitDefinitions *arg1 = (ListOfUnitDefinitions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfUnitDefinitions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1CompartmentType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (CompartmentType *)new CompartmentType(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1CompartmentType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (CompartmentType *)new CompartmentType(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1CompartmentType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CompartmentType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1CompartmentType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompartmentType *arg1 = 0 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CompartmentType const & reference is null");
    return 0;
  } 
  
  try {
    result = (CompartmentType *)new CompartmentType((CompartmentType const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  result = (CompartmentType *)((CompartmentType const *)arg1)->clone();
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  result = (std::string *) &((CompartmentType const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  result = (std::string *) &((CompartmentType const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  result = (bool)((CompartmentType const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  result = (bool)((CompartmentType const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  result = (int)((CompartmentType const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  result = (std::string *) &((CompartmentType const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CompartmentType *arg1 = (CompartmentType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompartmentType **)&jarg1; 
  result = (bool)((CompartmentType const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfCompartmentTypes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfCompartmentTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfCompartmentTypes *)new ListOfCompartmentTypes(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfCompartmentTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfCompartmentTypes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfCompartmentTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfCompartmentTypes *)new ListOfCompartmentTypes(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfCompartmentTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartmentTypes_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfCompartmentTypes *arg1 = (ListOfCompartmentTypes *) 0 ;
  ListOfCompartmentTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartmentTypes **)&jarg1; 
  result = (ListOfCompartmentTypes *)((ListOfCompartmentTypes const *)arg1)->clone();
  *(ListOfCompartmentTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartmentTypes_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfCompartmentTypes *arg1 = (ListOfCompartmentTypes *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartmentTypes **)&jarg1; 
  result = (int)((ListOfCompartmentTypes const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartmentTypes_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfCompartmentTypes *arg1 = (ListOfCompartmentTypes *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartmentTypes **)&jarg1; 
  result = (std::string *) &((ListOfCompartmentTypes const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartmentTypes_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfCompartmentTypes *arg1 = (ListOfCompartmentTypes *) 0 ;
  unsigned int arg2 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartmentTypes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompartmentType *)(arg1)->get(arg2);
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartmentTypes_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfCompartmentTypes *arg1 = (ListOfCompartmentTypes *) 0 ;
  std::string *arg2 = 0 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartmentTypes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (CompartmentType *)(arg1)->get((std::string const &)*arg2);
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartmentTypes_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfCompartmentTypes *arg1 = (ListOfCompartmentTypes *) 0 ;
  unsigned int arg2 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartmentTypes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompartmentType *)(arg1)->remove(arg2);
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartmentTypes_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfCompartmentTypes *arg1 = (ListOfCompartmentTypes *) 0 ;
  std::string *arg2 = 0 ;
  CompartmentType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartmentTypes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (CompartmentType *)(arg1)->remove((std::string const &)*arg2);
  *(CompartmentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfCompartmentTypes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfCompartmentTypes *arg1 = (ListOfCompartmentTypes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfCompartmentTypes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SpeciesType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (SpeciesType *)new SpeciesType(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SpeciesType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (SpeciesType *)new SpeciesType(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SpeciesType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SpeciesType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SpeciesType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SpeciesType *arg1 = 0 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SpeciesType const & reference is null");
    return 0;
  } 
  
  try {
    result = (SpeciesType *)new SpeciesType((SpeciesType const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  result = (SpeciesType *)((SpeciesType const *)arg1)->clone();
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  result = (std::string *) &((SpeciesType const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  result = (std::string *) &((SpeciesType const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  result = (bool)((SpeciesType const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  result = (bool)((SpeciesType const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  result = (int)((SpeciesType const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  result = (std::string *) &((SpeciesType const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SpeciesType *arg1 = (SpeciesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesType **)&jarg1; 
  result = (bool)((SpeciesType const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfSpeciesTypes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfSpeciesTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfSpeciesTypes *)new ListOfSpeciesTypes(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfSpeciesTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfSpeciesTypes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfSpeciesTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfSpeciesTypes *)new ListOfSpeciesTypes(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfSpeciesTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesTypes_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfSpeciesTypes *arg1 = (ListOfSpeciesTypes *) 0 ;
  ListOfSpeciesTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesTypes **)&jarg1; 
  result = (ListOfSpeciesTypes *)((ListOfSpeciesTypes const *)arg1)->clone();
  *(ListOfSpeciesTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesTypes_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfSpeciesTypes *arg1 = (ListOfSpeciesTypes *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesTypes **)&jarg1; 
  result = (int)((ListOfSpeciesTypes const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesTypes_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfSpeciesTypes *arg1 = (ListOfSpeciesTypes *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesTypes **)&jarg1; 
  result = (std::string *) &((ListOfSpeciesTypes const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesTypes_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfSpeciesTypes *arg1 = (ListOfSpeciesTypes *) 0 ;
  unsigned int arg2 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesTypes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SpeciesType *)(arg1)->get(arg2);
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesTypes_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfSpeciesTypes *arg1 = (ListOfSpeciesTypes *) 0 ;
  std::string *arg2 = 0 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesTypes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SpeciesType *)(arg1)->get((std::string const &)*arg2);
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesTypes_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfSpeciesTypes *arg1 = (ListOfSpeciesTypes *) 0 ;
  unsigned int arg2 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesTypes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SpeciesType *)(arg1)->remove(arg2);
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesTypes_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfSpeciesTypes *arg1 = (ListOfSpeciesTypes *) 0 ;
  std::string *arg2 = 0 ;
  SpeciesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesTypes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SpeciesType *)(arg1)->remove((std::string const &)*arg2);
  *(SpeciesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfSpeciesTypes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfSpeciesTypes *arg1 = (ListOfSpeciesTypes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfSpeciesTypes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Compartment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Compartment *)new Compartment(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Compartment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Compartment *)new Compartment(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Compartment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Compartment *arg1 = (Compartment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Compartment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Compartment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Compartment *arg1 = 0 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Compartment const & reference is null");
    return 0;
  } 
  
  try {
    result = (Compartment *)new Compartment((Compartment const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (Compartment *)((Compartment const *)arg1)->clone();
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1initDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Compartment *arg1 = (Compartment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  (arg1)->initDefaults();
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (std::string *) &((Compartment const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (std::string *) &((Compartment const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getCompartmentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (std::string *) &((Compartment const *)arg1)->getCompartmentType();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getSpatialDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (unsigned int)((Compartment const *)arg1)->getSpatialDimensions();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getSpatialDimensionsAsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (double)((Compartment const *)arg1)->getSpatialDimensionsAsDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (double)((Compartment const *)arg1)->getSize();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (double)((Compartment const *)arg1)->getVolume();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (std::string *) &((Compartment const *)arg1)->getUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getOutside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (std::string *) &((Compartment const *)arg1)->getOutside();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->getConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1isSetCompartmentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->isSetCompartmentType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1isSetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->isSetSize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1isSetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->isSetVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1isSetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->isSetUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1isSetOutside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->isSetOutside();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1isSetSpatialDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->isSetSpatialDimensions();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1isSetConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->isSetConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setCompartmentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setCompartmentType((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setSpatialDimensions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setSpatialDimensions(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setSpatialDimensions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setSpatialDimensions(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setSize(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setVolume(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setOutside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setOutside((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1setConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setConstant(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1unsetCompartmentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (int)(arg1)->unsetCompartmentType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1unsetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (int)(arg1)->unsetSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1unsetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (int)(arg1)->unsetVolume();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1unsetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (int)(arg1)->unsetUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1unsetOutside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (int)(arg1)->unsetOutside();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1unsetSpatialDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (int)(arg1)->unsetSpatialDimensions();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (int)((Compartment const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (std::string *) &((Compartment const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Compartment *arg1 = (Compartment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compartment **)&jarg1; 
  result = (bool)((Compartment const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfCompartments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfCompartments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfCompartments *)new ListOfCompartments(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfCompartments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfCompartments_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfCompartments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfCompartments *)new ListOfCompartments(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfCompartments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartments_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfCompartments *arg1 = (ListOfCompartments *) 0 ;
  ListOfCompartments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartments **)&jarg1; 
  result = (ListOfCompartments *)((ListOfCompartments const *)arg1)->clone();
  *(ListOfCompartments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartments_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfCompartments *arg1 = (ListOfCompartments *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartments **)&jarg1; 
  result = (int)((ListOfCompartments const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartments_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfCompartments *arg1 = (ListOfCompartments *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartments **)&jarg1; 
  result = (std::string *) &((ListOfCompartments const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartments_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfCompartments *arg1 = (ListOfCompartments *) 0 ;
  unsigned int arg2 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartments **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Compartment *)(arg1)->get(arg2);
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartments_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfCompartments *arg1 = (ListOfCompartments *) 0 ;
  std::string *arg2 = 0 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartments **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Compartment *)(arg1)->get((std::string const &)*arg2);
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartments_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfCompartments *arg1 = (ListOfCompartments *) 0 ;
  unsigned int arg2 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartments **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Compartment *)(arg1)->remove(arg2);
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartments_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfCompartments *arg1 = (ListOfCompartments *) 0 ;
  std::string *arg2 = 0 ;
  Compartment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfCompartments **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Compartment *)(arg1)->remove((std::string const &)*arg2);
  *(Compartment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfCompartments(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfCompartments *arg1 = (ListOfCompartments *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfCompartments **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Species_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Species *)new Species(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Species_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Species *)new Species(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Species(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Species *arg1 = (Species *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Species **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Species_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Species *arg1 = 0 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Species const & reference is null");
    return 0;
  } 
  
  try {
    result = (Species *)new Species((Species const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (Species *)((Species const *)arg1)->clone();
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1initDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Species *arg1 = (Species *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  (arg1)->initDefaults();
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (std::string *) &((Species const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (std::string *) &((Species const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getSpeciesType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (std::string *) &((Species const *)arg1)->getSpeciesType();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (std::string *) &((Species const *)arg1)->getCompartment();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getInitialAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (double)((Species const *)arg1)->getInitialAmount();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getInitialConcentration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (double)((Species const *)arg1)->getInitialConcentration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (std::string *) &((Species const *)arg1)->getSubstanceUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getSpatialSizeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (std::string *) &((Species const *)arg1)->getSpatialSizeUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (std::string *) &((Species const *)arg1)->getUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getHasOnlySubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->getHasOnlySubstanceUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getBoundaryCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->getBoundaryCondition();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)((Species const *)arg1)->getCharge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->getConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getConversionFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (std::string *) &((Species const *)arg1)->getConversionFactor();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetSpeciesType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetSpeciesType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetCompartment();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetInitialAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetInitialAmount();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetInitialConcentration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetInitialConcentration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetSubstanceUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetSpatialSizeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetSpatialSizeUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetCharge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetConversionFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetConversionFactor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetBoundaryCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetBoundaryCondition();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetHasOnlySubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetHasOnlySubstanceUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1isSetConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->isSetConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setSpeciesType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setSpeciesType((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setCompartment((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setInitialAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setInitialAmount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setInitialConcentration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setInitialConcentration(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setSubstanceUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setSpatialSizeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setSpatialSizeUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setHasOnlySubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setHasOnlySubstanceUnits(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setBoundaryCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setBoundaryCondition(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setCharge(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setConstant(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1setConversionFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setConversionFactor((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1unsetSpeciesType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)(arg1)->unsetSpeciesType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1unsetInitialAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)(arg1)->unsetInitialAmount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1unsetInitialConcentration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)(arg1)->unsetInitialConcentration();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1unsetSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)(arg1)->unsetSubstanceUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1unsetSpatialSizeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)(arg1)->unsetSpatialSizeUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1unsetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)(arg1)->unsetUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1unsetCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)(arg1)->unsetCharge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1unsetConversionFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)(arg1)->unsetConversionFactor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (int)((Species const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (std::string *) &((Species const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Species *arg1 = (Species *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  result = (bool)((Species const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Species *arg1 = (Species *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Species **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfSpecies_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfSpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfSpecies *)new ListOfSpecies(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfSpecies **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfSpecies_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfSpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfSpecies *)new ListOfSpecies(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfSpecies **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpecies_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfSpecies *arg1 = (ListOfSpecies *) 0 ;
  ListOfSpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpecies **)&jarg1; 
  result = (ListOfSpecies *)((ListOfSpecies const *)arg1)->clone();
  *(ListOfSpecies **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpecies_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfSpecies *arg1 = (ListOfSpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpecies **)&jarg1; 
  result = (int)((ListOfSpecies const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpecies_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfSpecies *arg1 = (ListOfSpecies *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpecies **)&jarg1; 
  result = (std::string *) &((ListOfSpecies const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpecies_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfSpecies *arg1 = (ListOfSpecies *) 0 ;
  unsigned int arg2 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpecies **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Species *)(arg1)->get(arg2);
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpecies_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfSpecies *arg1 = (ListOfSpecies *) 0 ;
  std::string *arg2 = 0 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpecies **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Species *)(arg1)->get((std::string const &)*arg2);
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpecies_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfSpecies *arg1 = (ListOfSpecies *) 0 ;
  unsigned int arg2 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpecies **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Species *)(arg1)->remove(arg2);
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpecies_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfSpecies *arg1 = (ListOfSpecies *) 0 ;
  std::string *arg2 = 0 ;
  Species *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpecies **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Species *)(arg1)->remove((std::string const &)*arg2);
  *(Species **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfSpecies *arg1 = (ListOfSpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfSpecies **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Parameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Parameter *)new Parameter(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Parameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Parameter *)new Parameter(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Parameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Parameter *arg1 = (Parameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Parameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Parameter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Parameter *arg1 = 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Parameter const & reference is null");
    return 0;
  } 
  
  try {
    result = (Parameter *)new Parameter((Parameter const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (Parameter *)((Parameter const *)arg1)->clone();
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1initDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Parameter *arg1 = (Parameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  (arg1)->initDefaults();
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (std::string *) &((Parameter const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (std::string *) &((Parameter const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (double)((Parameter const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1getUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (std::string *) &((Parameter const *)arg1)->getUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1getConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (bool)((Parameter const *)arg1)->getConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (bool)((Parameter const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (bool)((Parameter const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1isSetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (bool)((Parameter const *)arg1)->isSetValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1isSetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (bool)((Parameter const *)arg1)->isSetUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1isSetConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (bool)((Parameter const *)arg1)->isSetConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1setUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1setConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setConstant(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1unsetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (int)(arg1)->unsetValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1unsetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (int)(arg1)->unsetUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (int)((Parameter const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (std::string *) &((Parameter const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  result = (bool)((Parameter const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Parameter *arg1 = (Parameter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1setCalculatingUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Parameter *arg1 = (Parameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setCalculatingUnits(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfParameters *)new ListOfParameters(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfParameters *)new ListOfParameters(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfParameters_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfParameters *arg1 = (ListOfParameters *) 0 ;
  ListOfParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfParameters **)&jarg1; 
  result = (ListOfParameters *)((ListOfParameters const *)arg1)->clone();
  *(ListOfParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfParameters_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfParameters *arg1 = (ListOfParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfParameters **)&jarg1; 
  result = (int)((ListOfParameters const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfParameters_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfParameters *arg1 = (ListOfParameters *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfParameters **)&jarg1; 
  result = (std::string *) &((ListOfParameters const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfParameters_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfParameters *arg1 = (ListOfParameters *) 0 ;
  unsigned int arg2 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfParameters **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Parameter *)(arg1)->get(arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfParameters_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfParameters *arg1 = (ListOfParameters *) 0 ;
  std::string *arg2 = 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfParameters **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Parameter *)(arg1)->get((std::string const &)*arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfParameters_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfParameters *arg1 = (ListOfParameters *) 0 ;
  unsigned int arg2 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfParameters **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Parameter *)(arg1)->remove(arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfParameters_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfParameters *arg1 = (ListOfParameters *) 0 ;
  std::string *arg2 = 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfParameters **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Parameter *)(arg1)->remove((std::string const &)*arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfParameters *arg1 = (ListOfParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1LocalParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (LocalParameter *)new LocalParameter(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1LocalParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (LocalParameter *)new LocalParameter(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1LocalParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LocalParameter *arg1 = (LocalParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LocalParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1LocalParameter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LocalParameter *arg1 = 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocalParameter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalParameter const & reference is null");
    return 0;
  } 
  
  try {
    result = (LocalParameter *)new LocalParameter((LocalParameter const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1LocalParameter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Parameter *arg1 = 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parameter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Parameter const & reference is null");
    return 0;
  } 
  
  try {
    result = (LocalParameter *)new LocalParameter((Parameter const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_LocalParameter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LocalParameter *arg1 = (LocalParameter *) 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocalParameter **)&jarg1; 
  result = (LocalParameter *)((LocalParameter const *)arg1)->clone();
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_LocalParameter_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LocalParameter *arg1 = (LocalParameter *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocalParameter **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_LocalParameter_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LocalParameter *arg1 = (LocalParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocalParameter **)&jarg1; 
  result = (int)((LocalParameter const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_LocalParameter_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  LocalParameter *arg1 = (LocalParameter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocalParameter **)&jarg1; 
  result = (std::string *) &((LocalParameter const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_LocalParameter_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  LocalParameter *arg1 = (LocalParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocalParameter **)&jarg1; 
  result = (bool)((LocalParameter const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_LocalParameter_1getConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  LocalParameter *arg1 = (LocalParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocalParameter **)&jarg1; 
  result = (bool)((LocalParameter const *)arg1)->getConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_LocalParameter_1isSetConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  LocalParameter *arg1 = (LocalParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocalParameter **)&jarg1; 
  result = (bool)((LocalParameter const *)arg1)->isSetConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_LocalParameter_1setConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  LocalParameter *arg1 = (LocalParameter *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocalParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setConstant(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfLocalParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfLocalParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfLocalParameters *)new ListOfLocalParameters(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfLocalParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfLocalParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfLocalParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfLocalParameters *)new ListOfLocalParameters(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfLocalParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfLocalParameters_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfLocalParameters *arg1 = (ListOfLocalParameters *) 0 ;
  ListOfLocalParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfLocalParameters **)&jarg1; 
  result = (ListOfLocalParameters *)((ListOfLocalParameters const *)arg1)->clone();
  *(ListOfLocalParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfLocalParameters_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfLocalParameters *arg1 = (ListOfLocalParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfLocalParameters **)&jarg1; 
  result = (int)((ListOfLocalParameters const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfLocalParameters_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfLocalParameters *arg1 = (ListOfLocalParameters *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfLocalParameters **)&jarg1; 
  result = (std::string *) &((ListOfLocalParameters const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfLocalParameters_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfLocalParameters *arg1 = (ListOfLocalParameters *) 0 ;
  unsigned int arg2 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfLocalParameters **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (LocalParameter *)(arg1)->get(arg2);
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfLocalParameters_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfLocalParameters *arg1 = (ListOfLocalParameters *) 0 ;
  std::string *arg2 = 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfLocalParameters **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (LocalParameter *)(arg1)->get((std::string const &)*arg2);
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfLocalParameters_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfLocalParameters *arg1 = (ListOfLocalParameters *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfLocalParameters **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfLocalParameters_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfLocalParameters *arg1 = (ListOfLocalParameters *) 0 ;
  unsigned int arg2 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfLocalParameters **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (LocalParameter *)(arg1)->remove(arg2);
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfLocalParameters_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfLocalParameters *arg1 = (ListOfLocalParameters *) 0 ;
  std::string *arg2 = 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfLocalParameters **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (LocalParameter *)(arg1)->remove((std::string const &)*arg2);
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfLocalParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfLocalParameters *arg1 = (ListOfLocalParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfLocalParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1InitialAssignment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (InitialAssignment *)new InitialAssignment(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1InitialAssignment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (InitialAssignment *)new InitialAssignment(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1InitialAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InitialAssignment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1InitialAssignment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  InitialAssignment *arg1 = 0 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "InitialAssignment const & reference is null");
    return 0;
  } 
  
  try {
    result = (InitialAssignment *)new InitialAssignment((InitialAssignment const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (InitialAssignment *)((InitialAssignment const *)arg1)->clone();
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1getSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (std::string *) &((InitialAssignment const *)arg1)->getSymbol();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (ASTNode *)((InitialAssignment const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1isSetSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (bool)((InitialAssignment const *)arg1)->isSetSymbol();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (bool)((InitialAssignment const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1setSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setSymbol((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(InitialAssignment **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1containsUndeclaredUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (bool)(arg1)->containsUndeclaredUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (int)((InitialAssignment const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (std::string *) &((InitialAssignment const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (bool)((InitialAssignment const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (bool)((InitialAssignment const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  result = (std::string *) &((InitialAssignment const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InitialAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(InitialAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1divideAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(InitialAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->divideAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1multiplyAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  InitialAssignment *arg1 = (InitialAssignment *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(InitialAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->multiplyAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfInitialAssignments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfInitialAssignments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfInitialAssignments *)new ListOfInitialAssignments(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfInitialAssignments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfInitialAssignments_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfInitialAssignments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfInitialAssignments *)new ListOfInitialAssignments(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfInitialAssignments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfInitialAssignments_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfInitialAssignments *arg1 = (ListOfInitialAssignments *) 0 ;
  ListOfInitialAssignments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfInitialAssignments **)&jarg1; 
  result = (ListOfInitialAssignments *)((ListOfInitialAssignments const *)arg1)->clone();
  *(ListOfInitialAssignments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfInitialAssignments_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfInitialAssignments *arg1 = (ListOfInitialAssignments *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfInitialAssignments **)&jarg1; 
  result = (int)((ListOfInitialAssignments const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfInitialAssignments_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfInitialAssignments *arg1 = (ListOfInitialAssignments *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfInitialAssignments **)&jarg1; 
  result = (std::string *) &((ListOfInitialAssignments const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfInitialAssignments_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfInitialAssignments *arg1 = (ListOfInitialAssignments *) 0 ;
  unsigned int arg2 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfInitialAssignments **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (InitialAssignment *)(arg1)->get(arg2);
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfInitialAssignments_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfInitialAssignments *arg1 = (ListOfInitialAssignments *) 0 ;
  std::string *arg2 = 0 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfInitialAssignments **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (InitialAssignment *)(arg1)->get((std::string const &)*arg2);
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfInitialAssignments_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfInitialAssignments *arg1 = (ListOfInitialAssignments *) 0 ;
  unsigned int arg2 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfInitialAssignments **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (InitialAssignment *)(arg1)->remove(arg2);
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfInitialAssignments_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfInitialAssignments *arg1 = (ListOfInitialAssignments *) 0 ;
  std::string *arg2 = 0 ;
  InitialAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfInitialAssignments **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (InitialAssignment *)(arg1)->remove((std::string const &)*arg2);
  *(InitialAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfInitialAssignments_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfInitialAssignments *arg1 = (ListOfInitialAssignments *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfInitialAssignments **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfInitialAssignments(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfInitialAssignments *arg1 = (ListOfInitialAssignments *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfInitialAssignments **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Rule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Rule *arg1 = (Rule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Rule **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Rule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Rule *arg1 = 0 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Rule const & reference is null");
    return 0;
  } 
  result = (Rule *)new Rule((Rule const &)*arg1);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (Rule *)((Rule const *)arg1)->clone();
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (std::string *) &((Rule const *)arg1)->getFormula();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (ASTNode *)((Rule const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (std::string *) &((Rule const *)arg1)->getVariable();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (std::string *) &((Rule const *)arg1)->getUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isSetFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isSetFormula();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isSetVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isSetVariable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isSetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isSetUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1setFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setFormula((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Rule **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1setVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setVariable((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1setUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1unsetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (int)(arg1)->unsetUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1containsUndeclaredUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)(arg1)->containsUndeclaredUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  RuleType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (RuleType_t)((Rule const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isAlgebraic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isAlgebraic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isAssignment();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isCompartmentVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isCompartmentVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isParameter();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isRate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isScalar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isScalar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1isSpeciesConcentration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->isSpeciesConcentration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (int)((Rule const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getL1TypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (int)((Rule const *)arg1)->getL1TypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (std::string *) &((Rule const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1setL1TypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setL1TypeCode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (bool)((Rule const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Rule *arg1 = (Rule *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Rule *arg1 = (Rule *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Rule *arg1 = (Rule *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rule **)&jarg1; 
  result = (std::string *) &((Rule const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Rule *arg1 = (Rule *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Rule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1divideAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Rule *arg1 = (Rule *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Rule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->divideAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1multiplyAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Rule *arg1 = (Rule *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Rule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->multiplyAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfRules_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfRules *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfRules *)new ListOfRules(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfRules **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfRules_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfRules *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfRules *)new ListOfRules(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfRules **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfRules_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfRules *arg1 = (ListOfRules *) 0 ;
  ListOfRules *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfRules **)&jarg1; 
  result = (ListOfRules *)((ListOfRules const *)arg1)->clone();
  *(ListOfRules **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfRules_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfRules *arg1 = (ListOfRules *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfRules **)&jarg1; 
  result = (int)((ListOfRules const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfRules_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfRules *arg1 = (ListOfRules *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfRules **)&jarg1; 
  result = (std::string *) &((ListOfRules const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfRules_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfRules *arg1 = (ListOfRules *) 0 ;
  unsigned int arg2 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfRules **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Rule *)(arg1)->get(arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfRules_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfRules *arg1 = (ListOfRules *) 0 ;
  std::string *arg2 = 0 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfRules **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Rule *)(arg1)->get((std::string const &)*arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfRules_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfRules *arg1 = (ListOfRules *) 0 ;
  unsigned int arg2 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfRules **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Rule *)(arg1)->remove(arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfRules_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfRules *arg1 = (ListOfRules *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfRules **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfRules_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfRules *arg1 = (ListOfRules *) 0 ;
  std::string *arg2 = 0 ;
  Rule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfRules **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Rule *)(arg1)->remove((std::string const &)*arg2);
  *(Rule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfRules(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfRules *arg1 = (ListOfRules *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfRules **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1AlgebraicRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  AlgebraicRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (AlgebraicRule *)new AlgebraicRule(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AlgebraicRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1AlgebraicRule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  AlgebraicRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (AlgebraicRule *)new AlgebraicRule(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AlgebraicRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1AlgebraicRule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AlgebraicRule *arg1 = (AlgebraicRule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AlgebraicRule **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_AlgebraicRule_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AlgebraicRule *arg1 = (AlgebraicRule *) 0 ;
  AlgebraicRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AlgebraicRule **)&jarg1; 
  result = (AlgebraicRule *)((AlgebraicRule const *)arg1)->clone();
  *(AlgebraicRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_AlgebraicRule_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AlgebraicRule *arg1 = (AlgebraicRule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AlgebraicRule **)&jarg1; 
  result = (bool)((AlgebraicRule const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1AssignmentRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  AssignmentRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (AssignmentRule *)new AssignmentRule(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AssignmentRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1AssignmentRule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  AssignmentRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (AssignmentRule *)new AssignmentRule(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AssignmentRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1AssignmentRule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AssignmentRule *arg1 = (AssignmentRule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AssignmentRule **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_AssignmentRule_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AssignmentRule *arg1 = (AssignmentRule *) 0 ;
  AssignmentRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AssignmentRule **)&jarg1; 
  result = (AssignmentRule *)((AssignmentRule const *)arg1)->clone();
  *(AssignmentRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_AssignmentRule_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AssignmentRule *arg1 = (AssignmentRule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AssignmentRule **)&jarg1; 
  result = (bool)((AssignmentRule const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_AssignmentRule_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  AssignmentRule *arg1 = (AssignmentRule *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AssignmentRule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1RateRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  RateRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (RateRule *)new RateRule(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(RateRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1RateRule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  RateRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (RateRule *)new RateRule(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(RateRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1RateRule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RateRule *arg1 = (RateRule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RateRule **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RateRule_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RateRule *arg1 = (RateRule *) 0 ;
  RateRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RateRule **)&jarg1; 
  result = (RateRule *)((RateRule const *)arg1)->clone();
  *(RateRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_RateRule_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RateRule *arg1 = (RateRule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RateRule **)&jarg1; 
  result = (bool)((RateRule const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_RateRule_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  RateRule *arg1 = (RateRule *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RateRule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Constraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Constraint *)new Constraint(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Constraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Constraint *)new Constraint(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Constraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Constraint *arg1 = (Constraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Constraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Constraint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Constraint *arg1 = 0 ;
  Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Constraint const & reference is null");
    return 0;
  } 
  
  try {
    result = (Constraint *)new Constraint((Constraint const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = (Constraint *)((Constraint const *)arg1)->clone();
  *(Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = (XMLNode *)((Constraint const *)arg1)->getMessage();
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1getMessageString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = ((Constraint const *)arg1)->getMessageString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = (ASTNode *)((Constraint const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1isSetMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = (bool)((Constraint const *)arg1)->isSetMessage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = (bool)((Constraint const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1setMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Constraint **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->setMessage((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Constraint **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1unsetMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = (int)(arg1)->unsetMessage();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Constraint *arg1 = (Constraint *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Constraint *arg1 = (Constraint *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Constraint *arg1 = (Constraint *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Constraint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = (int)((Constraint const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = (std::string *) &((Constraint const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Constraint *arg1 = (Constraint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Constraint **)&jarg1; 
  result = (bool)((Constraint const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfConstraints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfConstraints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfConstraints *)new ListOfConstraints(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfConstraints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfConstraints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfConstraints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfConstraints *)new ListOfConstraints(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfConstraints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfConstraints_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfConstraints *arg1 = (ListOfConstraints *) 0 ;
  ListOfConstraints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfConstraints **)&jarg1; 
  result = (ListOfConstraints *)((ListOfConstraints const *)arg1)->clone();
  *(ListOfConstraints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfConstraints_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfConstraints *arg1 = (ListOfConstraints *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfConstraints **)&jarg1; 
  result = (int)((ListOfConstraints const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfConstraints_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfConstraints *arg1 = (ListOfConstraints *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfConstraints **)&jarg1; 
  result = (std::string *) &((ListOfConstraints const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfConstraints_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfConstraints *arg1 = (ListOfConstraints *) 0 ;
  unsigned int arg2 ;
  Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfConstraints **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Constraint *)(arg1)->get(arg2);
  *(Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfConstraints_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfConstraints *arg1 = (ListOfConstraints *) 0 ;
  unsigned int arg2 ;
  Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfConstraints **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Constraint *)(arg1)->remove(arg2);
  *(Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfConstraints *arg1 = (ListOfConstraints *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfConstraints **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Reaction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Reaction *)new Reaction(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Reaction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Reaction *)new Reaction(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Reaction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Reaction *arg1 = (Reaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Reaction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Reaction_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = 0 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Reaction const & reference is null");
    return 0;
  } 
  
  try {
    result = (Reaction *)new Reaction((Reaction const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (Reaction *)((Reaction const *)arg1)->clone();
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getElementByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementByMetaId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1initDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Reaction *arg1 = (Reaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  (arg1)->initDefaults();
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (std::string *) &((Reaction const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (std::string *) &((Reaction const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getKineticLaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  KineticLaw *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (KineticLaw *)((Reaction const *)arg1)->getKineticLaw();
  *(KineticLaw **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getReversible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (bool)((Reaction const *)arg1)->getReversible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getFast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (bool)((Reaction const *)arg1)->getFast();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (std::string *) &((Reaction const *)arg1)->getCompartment();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (bool)((Reaction const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (bool)((Reaction const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1isSetKineticLaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (bool)((Reaction const *)arg1)->isSetKineticLaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1isSetFast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (bool)((Reaction const *)arg1)->isSetFast();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1isSetCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (bool)((Reaction const *)arg1)->isSetCompartment();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1isSetReversible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (bool)((Reaction const *)arg1)->isSetReversible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1setKineticLaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  KineticLaw *arg2 = (KineticLaw *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = *(KineticLaw **)&jarg2; 
  result = (int)(arg1)->setKineticLaw((KineticLaw const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1setReversible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setReversible(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1setFast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setFast(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1setCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setCompartment((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1unsetKineticLaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (int)(arg1)->unsetKineticLaw();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1unsetFast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (int)(arg1)->unsetFast();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1unsetCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (int)(arg1)->unsetCompartment();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1addReactant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  SpeciesReference *arg2 = (SpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = *(SpeciesReference **)&jarg2; 
  result = (int)(arg1)->addReactant((SpeciesReference const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1addProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  SpeciesReference *arg2 = (SpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = *(SpeciesReference **)&jarg2; 
  result = (int)(arg1)->addProduct((SpeciesReference const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1addModifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  ModifierSpeciesReference *arg2 = (ModifierSpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = *(ModifierSpeciesReference **)&jarg2; 
  result = (int)(arg1)->addModifier((ModifierSpeciesReference const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1createReactant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (SpeciesReference *)(arg1)->createReactant();
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1createProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (SpeciesReference *)(arg1)->createProduct();
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1createModifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (ModifierSpeciesReference *)(arg1)->createModifier();
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1createKineticLaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  KineticLaw *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (KineticLaw *)(arg1)->createKineticLaw();
  *(KineticLaw **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getListOfReactants_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  ListOfSpeciesReferences *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (ListOfSpeciesReferences *)((Reaction const *)arg1)->getListOfReactants();
  *(ListOfSpeciesReferences **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getListOfProducts_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  ListOfSpeciesReferences *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (ListOfSpeciesReferences *)((Reaction const *)arg1)->getListOfProducts();
  *(ListOfSpeciesReferences **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getListOfModifiers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  ListOfSpeciesReferences *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (ListOfSpeciesReferences *)((Reaction const *)arg1)->getListOfModifiers();
  *(ListOfSpeciesReferences **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getReactant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  unsigned int arg2 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SpeciesReference *)((Reaction const *)arg1)->getReactant(arg2);
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getReactant_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SpeciesReference *)((Reaction const *)arg1)->getReactant((std::string const &)*arg2);
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getProduct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  unsigned int arg2 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SpeciesReference *)((Reaction const *)arg1)->getProduct(arg2);
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getProduct_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SpeciesReference *)((Reaction const *)arg1)->getProduct((std::string const &)*arg2);
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getModifier_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  unsigned int arg2 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ModifierSpeciesReference *)((Reaction const *)arg1)->getModifier(arg2);
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getModifier_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ModifierSpeciesReference *)((Reaction const *)arg1)->getModifier((std::string const &)*arg2);
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getNumReactants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (unsigned int)((Reaction const *)arg1)->getNumReactants();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getNumProducts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (unsigned int)((Reaction const *)arg1)->getNumProducts();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getNumModifiers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (unsigned int)((Reaction const *)arg1)->getNumModifiers();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1removeReactant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  unsigned int arg2 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SpeciesReference *)(arg1)->removeReactant(arg2);
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1removeReactant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SpeciesReference *)(arg1)->removeReactant((std::string const &)*arg2);
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1removeProduct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  unsigned int arg2 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SpeciesReference *)(arg1)->removeProduct(arg2);
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1removeProduct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SpeciesReference *)(arg1)->removeProduct((std::string const &)*arg2);
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1removeModifier_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  unsigned int arg2 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ModifierSpeciesReference *)(arg1)->removeModifier(arg2);
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1removeModifier_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ModifierSpeciesReference *)(arg1)->removeModifier((std::string const &)*arg2);
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1connectToChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Reaction *arg1 = (Reaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  (arg1)->connectToChild();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (int)((Reaction const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (std::string *) &((Reaction const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Reaction *arg1 = (Reaction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reaction **)&jarg1; 
  result = (bool)((Reaction const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfReactions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfReactions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfReactions *)new ListOfReactions(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfReactions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfReactions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfReactions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfReactions *)new ListOfReactions(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfReactions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfReactions_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfReactions *arg1 = (ListOfReactions *) 0 ;
  ListOfReactions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfReactions **)&jarg1; 
  result = (ListOfReactions *)((ListOfReactions const *)arg1)->clone();
  *(ListOfReactions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfReactions_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfReactions *arg1 = (ListOfReactions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfReactions **)&jarg1; 
  result = (int)((ListOfReactions const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfReactions_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfReactions *arg1 = (ListOfReactions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfReactions **)&jarg1; 
  result = (std::string *) &((ListOfReactions const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfReactions_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfReactions *arg1 = (ListOfReactions *) 0 ;
  unsigned int arg2 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfReactions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Reaction *)(arg1)->get(arg2);
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfReactions_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfReactions *arg1 = (ListOfReactions *) 0 ;
  std::string *arg2 = 0 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfReactions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Reaction *)(arg1)->get((std::string const &)*arg2);
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfReactions_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfReactions *arg1 = (ListOfReactions *) 0 ;
  unsigned int arg2 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfReactions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Reaction *)(arg1)->remove(arg2);
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfReactions_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfReactions *arg1 = (ListOfReactions *) 0 ;
  std::string *arg2 = 0 ;
  Reaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfReactions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Reaction *)(arg1)->remove((std::string const &)*arg2);
  *(Reaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfReactions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfReactions *arg1 = (ListOfReactions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfReactions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1KineticLaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  KineticLaw *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (KineticLaw *)new KineticLaw(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(KineticLaw **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1KineticLaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  KineticLaw *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (KineticLaw *)new KineticLaw(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(KineticLaw **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1KineticLaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KineticLaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1KineticLaw_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = 0 ;
  KineticLaw *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "KineticLaw const & reference is null");
    return 0;
  } 
  
  try {
    result = (KineticLaw *)new KineticLaw((KineticLaw const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(KineticLaw **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  KineticLaw *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (KineticLaw *)((KineticLaw const *)arg1)->clone();
  *(KineticLaw **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getElementByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementByMetaId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (std::string *) &((KineticLaw const *)arg1)->getFormula();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (ASTNode *)((KineticLaw const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (std::string *) &((KineticLaw const *)arg1)->getTimeUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (std::string *) &((KineticLaw const *)arg1)->getSubstanceUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1isSetFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (bool)((KineticLaw const *)arg1)->isSetFormula();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (bool)((KineticLaw const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1isSetTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (bool)((KineticLaw const *)arg1)->isSetTimeUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1isSetSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (bool)((KineticLaw const *)arg1)->isSetSubstanceUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1setFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setFormula((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(KineticLaw **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1setTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setTimeUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1setSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setSubstanceUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1unsetTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (int)(arg1)->unsetTimeUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1unsetSubstanceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (int)(arg1)->unsetSubstanceUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1addParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  Parameter *arg2 = (Parameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(KineticLaw **)&jarg1; 
  arg2 = *(Parameter **)&jarg2; 
  result = (int)(arg1)->addParameter((Parameter const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1addLocalParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  LocalParameter *arg2 = (LocalParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(KineticLaw **)&jarg1; 
  arg2 = *(LocalParameter **)&jarg2; 
  result = (int)(arg1)->addLocalParameter((LocalParameter const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1createParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (Parameter *)(arg1)->createParameter();
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1createLocalParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (LocalParameter *)(arg1)->createLocalParameter();
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getListOfParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  ListOfParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (ListOfParameters *)((KineticLaw const *)arg1)->getListOfParameters();
  *(ListOfParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getListOfLocalParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  ListOfLocalParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (ListOfLocalParameters *)((KineticLaw const *)arg1)->getListOfLocalParameters();
  *(ListOfLocalParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  unsigned int arg2 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Parameter *)((KineticLaw const *)arg1)->getParameter(arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getLocalParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  unsigned int arg2 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (LocalParameter *)((KineticLaw const *)arg1)->getLocalParameter(arg2);
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getParameter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Parameter *)((KineticLaw const *)arg1)->getParameter((std::string const &)*arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getLocalParameter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (LocalParameter *)((KineticLaw const *)arg1)->getLocalParameter((std::string const &)*arg2);
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (unsigned int)((KineticLaw const *)arg1)->getNumParameters();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getNumLocalParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (unsigned int)((KineticLaw const *)arg1)->getNumLocalParameters();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1containsUndeclaredUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (bool)(arg1)->containsUndeclaredUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1removeParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  unsigned int arg2 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Parameter *)(arg1)->removeParameter(arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1removeLocalParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  unsigned int arg2 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (LocalParameter *)(arg1)->removeLocalParameter(arg2);
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1removeParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Parameter *)(arg1)->removeParameter((std::string const &)*arg2);
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1removeLocalParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  LocalParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (LocalParameter *)(arg1)->removeLocalParameter((std::string const &)*arg2);
  *(LocalParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1connectToChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  (arg1)->connectToChild();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (int)((KineticLaw const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (std::string *) &((KineticLaw const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (bool)((KineticLaw const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (bool)((KineticLaw const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1removeFromParentAndDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  result = (int)(arg1)->removeFromParentAndDelete();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1divideAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->divideAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1multiplyAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  KineticLaw *arg1 = (KineticLaw *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(KineticLaw **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->multiplyAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SimpleSpeciesReference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  result = (std::string *) &((SimpleSpeciesReference const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  result = (std::string *) &((SimpleSpeciesReference const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  result = (std::string *) &((SimpleSpeciesReference const *)arg1)->getSpecies();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  result = (bool)((SimpleSpeciesReference const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  result = (bool)((SimpleSpeciesReference const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1isSetSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  result = (bool)((SimpleSpeciesReference const *)arg1)->isSetSpecies();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1setSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setSpecies((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1unsetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  result = (int)(arg1)->unsetId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1isModifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  result = (bool)((SimpleSpeciesReference const *)arg1)->isModifier();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  SimpleSpeciesReference *arg1 = (SimpleSpeciesReference *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleSpeciesReference **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SpeciesReference_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (SpeciesReference *)new SpeciesReference(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SpeciesReference_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (SpeciesReference *)new SpeciesReference(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SpeciesReference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SpeciesReference **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SpeciesReference_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SpeciesReference *arg1 = 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SpeciesReference const & reference is null");
    return 0;
  } 
  
  try {
    result = (SpeciesReference *)new SpeciesReference((SpeciesReference const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  SpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (SpeciesReference *)((SpeciesReference const *)arg1)->clone();
  *(SpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1initDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  (arg1)->initDefaults();
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1getStoichiometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (double)((SpeciesReference const *)arg1)->getStoichiometry();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1getStoichiometryMath_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  StoichiometryMath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (StoichiometryMath *)((SpeciesReference const *)arg1)->getStoichiometryMath();
  *(StoichiometryMath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1getDenominator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (int)((SpeciesReference const *)arg1)->getDenominator();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1getConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (bool)((SpeciesReference const *)arg1)->getConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1isSetStoichiometryMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (bool)((SpeciesReference const *)arg1)->isSetStoichiometryMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1isSetConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (bool)((SpeciesReference const *)arg1)->isSetConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1isSetStoichiometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (bool)((SpeciesReference const *)arg1)->isSetStoichiometry();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1setStoichiometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setStoichiometry(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1setStoichiometryMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  StoichiometryMath *arg2 = (StoichiometryMath *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SpeciesReference **)&jarg1; 
  arg2 = *(StoichiometryMath **)&jarg2; 
  result = (int)(arg1)->setStoichiometryMath((StoichiometryMath const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1setDenominator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setDenominator(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1setConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setConstant(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1unsetStoichiometryMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (int)(arg1)->unsetStoichiometryMath();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1unsetStoichiometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (int)(arg1)->unsetStoichiometry();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1createStoichiometryMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  StoichiometryMath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (StoichiometryMath *)(arg1)->createStoichiometryMath();
  *(StoichiometryMath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1setAnnotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SpeciesReference **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->setAnnotation((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1setAnnotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setAnnotation((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1appendAnnotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SpeciesReference **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->appendAnnotation((XMLNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1appendAnnotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->appendAnnotation((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (int)((SpeciesReference const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (std::string *) &((SpeciesReference const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SpeciesReference *arg1 = (SpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeciesReference **)&jarg1; 
  result = (bool)((SpeciesReference const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfSpeciesReferences_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfSpeciesReferences *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfSpeciesReferences *)new ListOfSpeciesReferences(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfSpeciesReferences **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfSpeciesReferences_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfSpeciesReferences *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfSpeciesReferences *)new ListOfSpeciesReferences(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfSpeciesReferences **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesReferences_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfSpeciesReferences *arg1 = (ListOfSpeciesReferences *) 0 ;
  ListOfSpeciesReferences *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesReferences **)&jarg1; 
  result = (ListOfSpeciesReferences *)((ListOfSpeciesReferences const *)arg1)->clone();
  *(ListOfSpeciesReferences **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesReferences_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfSpeciesReferences *arg1 = (ListOfSpeciesReferences *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesReferences **)&jarg1; 
  result = (int)((ListOfSpeciesReferences const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesReferences_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfSpeciesReferences *arg1 = (ListOfSpeciesReferences *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesReferences **)&jarg1; 
  result = (std::string *) &((ListOfSpeciesReferences const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesReferences_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfSpeciesReferences *arg1 = (ListOfSpeciesReferences *) 0 ;
  unsigned int arg2 ;
  SimpleSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesReferences **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SimpleSpeciesReference *)(arg1)->get(arg2);
  *(SimpleSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesReferences_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfSpeciesReferences *arg1 = (ListOfSpeciesReferences *) 0 ;
  std::string *arg2 = 0 ;
  SimpleSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesReferences **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SimpleSpeciesReference *)(arg1)->get((std::string const &)*arg2);
  *(SimpleSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesReferences_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfSpeciesReferences *arg1 = (ListOfSpeciesReferences *) 0 ;
  unsigned int arg2 ;
  SimpleSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesReferences **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SimpleSpeciesReference *)(arg1)->remove(arg2);
  *(SimpleSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesReferences_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfSpeciesReferences *arg1 = (ListOfSpeciesReferences *) 0 ;
  std::string *arg2 = 0 ;
  SimpleSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfSpeciesReferences **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SimpleSpeciesReference *)(arg1)->remove((std::string const &)*arg2);
  *(SimpleSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfSpeciesReferences(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfSpeciesReferences *arg1 = (ListOfSpeciesReferences *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfSpeciesReferences **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ModifierSpeciesReference_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ModifierSpeciesReference *)new ModifierSpeciesReference(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ModifierSpeciesReference_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ModifierSpeciesReference *)new ModifierSpeciesReference(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ModifierSpeciesReference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModifierSpeciesReference *arg1 = (ModifierSpeciesReference *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModifierSpeciesReference **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModifierSpeciesReference_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModifierSpeciesReference *arg1 = (ModifierSpeciesReference *) 0 ;
  ModifierSpeciesReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModifierSpeciesReference **)&jarg1; 
  result = (ModifierSpeciesReference *)((ModifierSpeciesReference const *)arg1)->clone();
  *(ModifierSpeciesReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModifierSpeciesReference_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModifierSpeciesReference *arg1 = (ModifierSpeciesReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModifierSpeciesReference **)&jarg1; 
  result = (int)((ModifierSpeciesReference const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModifierSpeciesReference_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModifierSpeciesReference *arg1 = (ModifierSpeciesReference *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModifierSpeciesReference **)&jarg1; 
  result = (std::string *) &((ModifierSpeciesReference const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModifierSpeciesReference_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModifierSpeciesReference *arg1 = (ModifierSpeciesReference *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModifierSpeciesReference **)&jarg1; 
  result = (bool)((ModifierSpeciesReference const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Event_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Event *)new Event(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Event_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Event *)new Event(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Event(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Event *arg1 = (Event *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Event **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Event_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = 0 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event const & reference is null");
    return 0;
  } 
  
  try {
    result = (Event *)new Event((Event const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (Event *)((Event const *)arg1)->clone();
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getElementByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementByMetaId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (std::string *) &((Event const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (std::string *) &((Event const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getTrigger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Trigger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (Trigger *)((Event const *)arg1)->getTrigger();
  *(Trigger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getDelay_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (Delay *)((Event const *)arg1)->getDelay();
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getPriority_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Priority *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (Priority *)((Event const *)arg1)->getPriority();
  *(Priority **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (std::string *) &((Event const *)arg1)->getTimeUnits();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getUseValuesFromTriggerTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->getUseValuesFromTriggerTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1isSetTrigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->isSetTrigger();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1isSetDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->isSetDelay();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1isSetPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->isSetPriority();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1isSetTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->isSetTimeUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1isSetUseValuesFromTriggerTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->isSetUseValuesFromTriggerTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1setTrigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Trigger *arg2 = (Trigger *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Event **)&jarg1; 
  arg2 = *(Trigger **)&jarg2; 
  result = (int)(arg1)->setTrigger((Trigger const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1setDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Delay *arg2 = (Delay *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Event **)&jarg1; 
  arg2 = *(Delay **)&jarg2; 
  result = (int)(arg1)->setDelay((Delay const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1setPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Priority *arg2 = (Priority *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Event **)&jarg1; 
  arg2 = *(Priority **)&jarg2; 
  result = (int)(arg1)->setPriority((Priority const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1setTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setTimeUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1setUseValuesFromTriggerTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setUseValuesFromTriggerTime(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1unsetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (int)(arg1)->unsetId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1unsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (int)(arg1)->unsetName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1unsetDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (int)(arg1)->unsetDelay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1unsetPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (int)(arg1)->unsetPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1unsetTrigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (int)(arg1)->unsetTrigger();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1unsetTimeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (int)(arg1)->unsetTimeUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1addEventAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  EventAssignment *arg2 = (EventAssignment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Event **)&jarg1; 
  arg2 = *(EventAssignment **)&jarg2; 
  result = (int)(arg1)->addEventAssignment((EventAssignment const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1createEventAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (EventAssignment *)(arg1)->createEventAssignment();
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1createTrigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Trigger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (Trigger *)(arg1)->createTrigger();
  *(Trigger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1createDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (Delay *)(arg1)->createDelay();
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1createPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  Priority *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (Priority *)(arg1)->createPriority();
  *(Priority **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getListOfEventAssignments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  ListOfEventAssignments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (ListOfEventAssignments *)((Event const *)arg1)->getListOfEventAssignments();
  *(ListOfEventAssignments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getEventAssignment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  unsigned int arg2 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (EventAssignment *)((Event const *)arg1)->getEventAssignment(arg2);
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getEventAssignment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *arg2 = 0 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (EventAssignment *)((Event const *)arg1)->getEventAssignment((std::string const &)*arg2);
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getNumEventAssignments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (unsigned int)((Event const *)arg1)->getNumEventAssignments();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1removeEventAssignment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  unsigned int arg2 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (EventAssignment *)(arg1)->removeEventAssignment(arg2);
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1removeEventAssignment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *arg2 = 0 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (EventAssignment *)(arg1)->removeEventAssignment((std::string const &)*arg2);
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1connectToChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Event *arg1 = (Event *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  (arg1)->connectToChild();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  Event *arg1 = (Event *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (int)((Event const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (std::string *) &((Event const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Event **)&jarg1; 
  result = (bool)((Event const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfEvents_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfEvents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfEvents *)new ListOfEvents(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfEvents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfEvents_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfEvents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfEvents *)new ListOfEvents(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfEvents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEvents_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfEvents *arg1 = (ListOfEvents *) 0 ;
  ListOfEvents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEvents **)&jarg1; 
  result = (ListOfEvents *)((ListOfEvents const *)arg1)->clone();
  *(ListOfEvents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEvents_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfEvents *arg1 = (ListOfEvents *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEvents **)&jarg1; 
  result = (int)((ListOfEvents const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEvents_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfEvents *arg1 = (ListOfEvents *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEvents **)&jarg1; 
  result = (std::string *) &((ListOfEvents const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEvents_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfEvents *arg1 = (ListOfEvents *) 0 ;
  unsigned int arg2 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEvents **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Event *)(arg1)->get(arg2);
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEvents_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfEvents *arg1 = (ListOfEvents *) 0 ;
  std::string *arg2 = 0 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEvents **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Event *)(arg1)->get((std::string const &)*arg2);
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEvents_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfEvents *arg1 = (ListOfEvents *) 0 ;
  unsigned int arg2 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEvents **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Event *)(arg1)->remove(arg2);
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEvents_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfEvents *arg1 = (ListOfEvents *) 0 ;
  std::string *arg2 = 0 ;
  Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEvents **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Event *)(arg1)->remove((std::string const &)*arg2);
  *(Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfEvents(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfEvents *arg1 = (ListOfEvents *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfEvents **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1EventAssignment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (EventAssignment *)new EventAssignment(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1EventAssignment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (EventAssignment *)new EventAssignment(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1EventAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EventAssignment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1EventAssignment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EventAssignment *arg1 = 0 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "EventAssignment const & reference is null");
    return 0;
  } 
  
  try {
    result = (EventAssignment *)new EventAssignment((EventAssignment const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (EventAssignment *)((EventAssignment const *)arg1)->clone();
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1getVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (std::string *) &((EventAssignment const *)arg1)->getVariable();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (ASTNode *)((EventAssignment const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1isSetVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (bool)((EventAssignment const *)arg1)->isSetVariable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (bool)((EventAssignment const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1setVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setVariable((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EventAssignment **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1containsUndeclaredUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (bool)(arg1)->containsUndeclaredUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (int)((EventAssignment const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (std::string *) &((EventAssignment const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (bool)((EventAssignment const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (bool)((EventAssignment const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  result = (std::string *) &((EventAssignment const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EventAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EventAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1divideAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EventAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->divideAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1multiplyAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  EventAssignment *arg1 = (EventAssignment *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EventAssignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->multiplyAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfEventAssignments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ListOfEventAssignments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ListOfEventAssignments *)new ListOfEventAssignments(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfEventAssignments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ListOfEventAssignments_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ListOfEventAssignments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (ListOfEventAssignments *)new ListOfEventAssignments(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ListOfEventAssignments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEventAssignments_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListOfEventAssignments *arg1 = (ListOfEventAssignments *) 0 ;
  ListOfEventAssignments *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEventAssignments **)&jarg1; 
  result = (ListOfEventAssignments *)((ListOfEventAssignments const *)arg1)->clone();
  *(ListOfEventAssignments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEventAssignments_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListOfEventAssignments *arg1 = (ListOfEventAssignments *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEventAssignments **)&jarg1; 
  result = (int)((ListOfEventAssignments const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEventAssignments_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListOfEventAssignments *arg1 = (ListOfEventAssignments *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEventAssignments **)&jarg1; 
  result = (std::string *) &((ListOfEventAssignments const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEventAssignments_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfEventAssignments *arg1 = (ListOfEventAssignments *) 0 ;
  unsigned int arg2 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEventAssignments **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (EventAssignment *)(arg1)->get(arg2);
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEventAssignments_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfEventAssignments *arg1 = (ListOfEventAssignments *) 0 ;
  std::string *arg2 = 0 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEventAssignments **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (EventAssignment *)(arg1)->get((std::string const &)*arg2);
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEventAssignments_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListOfEventAssignments *arg1 = (ListOfEventAssignments *) 0 ;
  unsigned int arg2 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEventAssignments **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (EventAssignment *)(arg1)->remove(arg2);
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEventAssignments_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfEventAssignments *arg1 = (ListOfEventAssignments *) 0 ;
  std::string *arg2 = 0 ;
  EventAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEventAssignments **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (EventAssignment *)(arg1)->remove((std::string const &)*arg2);
  *(EventAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEventAssignments_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ListOfEventAssignments *arg1 = (ListOfEventAssignments *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListOfEventAssignments **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ListOfEventAssignments(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListOfEventAssignments *arg1 = (ListOfEventAssignments *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListOfEventAssignments **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Trigger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Trigger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Trigger *)new Trigger(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Trigger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Trigger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Trigger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Trigger *)new Trigger(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Trigger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Trigger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Trigger *arg1 = (Trigger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Trigger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Trigger_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Trigger *arg1 = 0 ;
  Trigger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Trigger const & reference is null");
    return 0;
  } 
  
  try {
    result = (Trigger *)new Trigger((Trigger const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Trigger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  Trigger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (Trigger *)((Trigger const *)arg1)->clone();
  *(Trigger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (ASTNode *)((Trigger const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1getInitialValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (bool)((Trigger const *)arg1)->getInitialValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1getPersistent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (bool)((Trigger const *)arg1)->getPersistent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (bool)((Trigger const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1isSetInitialValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (bool)((Trigger const *)arg1)->isSetInitialValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1isSetPersistent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (bool)((Trigger const *)arg1)->isSetPersistent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Trigger **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1setInitialValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setInitialValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1setPersistent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setPersistent(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (int)((Trigger const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (std::string *) &((Trigger const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Trigger *arg1 = (Trigger *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Trigger *arg1 = (Trigger *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Trigger *arg1 = (Trigger *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Trigger **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (bool)((Trigger const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (bool)((Trigger const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1removeFromParentAndDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Trigger *arg1 = (Trigger *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Trigger **)&jarg1; 
  result = (int)(arg1)->removeFromParentAndDelete();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Delay_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Delay *)new Delay(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Delay_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Delay *)new Delay(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Delay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Delay *arg1 = (Delay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Delay **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Delay_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Delay *arg1 = 0 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delay const & reference is null");
    return 0;
  } 
  
  try {
    result = (Delay *)new Delay((Delay const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (Delay *)((Delay const *)arg1)->clone();
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (ASTNode *)((Delay const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (bool)((Delay const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Delay **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1containsUndeclaredUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (bool)(arg1)->containsUndeclaredUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (int)((Delay const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (std::string *) &((Delay const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (bool)((Delay const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1removeFromParentAndDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (int)(arg1)->removeFromParentAndDelete();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Delay *arg1 = (Delay *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Delay *arg1 = (Delay *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Delay *arg1 = (Delay *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Delay **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Priority_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Priority *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Priority *)new Priority(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Priority **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Priority_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  Priority *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (Priority *)new Priority(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Priority **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Priority(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Priority *arg1 = (Priority *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Priority **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Priority_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Priority *arg1 = 0 ;
  Priority *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Priority const & reference is null");
    return 0;
  } 
  
  try {
    result = (Priority *)new Priority((Priority const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Priority **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Priority *arg1 = (Priority *) 0 ;
  Priority *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1; 
  result = (Priority *)((Priority const *)arg1)->clone();
  *(Priority **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Priority *arg1 = (Priority *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1; 
  result = (ASTNode *)((Priority const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Priority *arg1 = (Priority *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1; 
  result = (bool)((Priority const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Priority *arg1 = (Priority *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Priority **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Priority *arg1 = (Priority *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1; 
  result = (int)((Priority const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Priority *arg1 = (Priority *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1; 
  result = (std::string *) &((Priority const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Priority *arg1 = (Priority *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1; 
  result = (bool)((Priority const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1removeFromParentAndDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Priority *arg1 = (Priority *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1; 
  result = (int)(arg1)->removeFromParentAndDelete();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Priority *arg1 = (Priority *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Priority *arg1 = (Priority *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Priority **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Priority *arg1 = (Priority *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Priority **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isQuantitativeParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isQuantitativeParameter(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isParticipantRole(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isParticipantRole(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isModellingFramework(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isModellingFramework(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isMathematicalExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isMathematicalExpression(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isKineticConstant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isKineticConstant(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isReactant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isReactant(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isProduct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isProduct(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isModifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isModifier(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isRateLaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isRateLaw(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isEvent(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isPhysicalParticipant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isPhysicalParticipant(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isParticipant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isParticipant(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isInteraction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isInteraction(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isEntity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isEntity(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isFunctionalEntity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isFunctionalEntity(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isMaterialEntity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isMaterialEntity(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isConservationLaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isConservationLaw(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isSteadyStateExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isSteadyStateExpression(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isFunctionalCompartment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isFunctionalCompartment(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isContinuousFramework(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isContinuousFramework(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isDiscreteFramework(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isDiscreteFramework(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isLogicalFramework(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isLogicalFramework(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isMetadataRepresentation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isMetadataRepresentation(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isOccurringEntityRepresentation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isOccurringEntityRepresentation(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isPhysicalEntityRepresentation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isPhysicalEntityRepresentation(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isSystemsDescriptionParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isSystemsDescriptionParameter(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1isObselete(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)SBO::isObselete(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1intToString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = SBO::intToString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1stringToInt(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)SBO::stringToInt((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1checkTerm_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SBO::checkTerm((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBO_1checkTerm_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)SBO::checkTerm(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBO *)new SBO();
  *(SBO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBO *arg1 = (SBO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SyntaxChecker_1isValidSBMLSId(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SyntaxChecker::isValidSBMLSId(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SyntaxChecker_1isValidXMLID(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SyntaxChecker::isValidXMLID(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SyntaxChecker_1isValidXMLanyURI(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SyntaxChecker::isValidXMLanyURI(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SyntaxChecker_1isValidUnitSId(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SyntaxChecker::isValidUnitSId(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SyntaxChecker_1hasExpectedXHTMLSyntax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  result = (bool)SyntaxChecker::hasExpectedXHTMLSyntax((XMLNode const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SyntaxChecker_1hasExpectedXHTMLSyntax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (bool)SyntaxChecker::hasExpectedXHTMLSyntax((XMLNode const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SyntaxChecker_1isValidInternalSId(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SyntaxChecker::isValidInternalSId(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SyntaxChecker_1isValidInternalUnitSId(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SyntaxChecker::isValidInternalUnitSId(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SyntaxChecker(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SyntaxChecker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SyntaxChecker *)new SyntaxChecker();
  *(SyntaxChecker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SyntaxChecker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SyntaxChecker *arg1 = (SyntaxChecker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SyntaxChecker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1StoichiometryMath_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  StoichiometryMath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (StoichiometryMath *)new StoichiometryMath(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(StoichiometryMath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1StoichiometryMath_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  StoichiometryMath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  
  try {
    result = (StoichiometryMath *)new StoichiometryMath(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(StoichiometryMath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1StoichiometryMath(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StoichiometryMath **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1StoichiometryMath_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StoichiometryMath *arg1 = 0 ;
  StoichiometryMath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StoichiometryMath const & reference is null");
    return 0;
  } 
  
  try {
    result = (StoichiometryMath *)new StoichiometryMath((StoichiometryMath const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(StoichiometryMath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  StoichiometryMath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  result = (StoichiometryMath *)((StoichiometryMath const *)arg1)->clone();
  *(StoichiometryMath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  result = (ASTNode *)((StoichiometryMath const *)arg1)->getMath();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  result = (bool)((StoichiometryMath const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1setMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->setMath((ASTNode const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1getDerivedUnitDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  UnitDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  result = (UnitDefinition *)(arg1)->getDerivedUnitDefinition();
  *(UnitDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1containsUndeclaredUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  result = (bool)(arg1)->containsUndeclaredUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  result = (int)((StoichiometryMath const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  result = (std::string *) &((StoichiometryMath const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  result = (bool)((StoichiometryMath const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1removeFromParentAndDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  result = (int)(arg1)->removeFromParentAndDelete();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  StoichiometryMath *arg1 = (StoichiometryMath *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(StoichiometryMath **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLNamespaces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (SBMLNamespaces *)new SBMLNamespaces(arg1,arg2);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLNamespaces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  
  try {
    result = (SBMLNamespaces *)new SBMLNamespaces(arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLNamespaces_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (SBMLNamespaces *)new SBMLNamespaces();
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLNamespaces_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  unsigned int arg4 ;
  std::string *arg5 = 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (unsigned int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  
  try {
    result = (SBMLNamespaces *)new SBMLNamespaces(arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLNamespaces_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  unsigned int arg4 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (unsigned int)jarg4; 
  
  try {
    result = (SBMLNamespaces *)new SBMLNamespaces(arg1,arg2,(std::string const &)*arg3,arg4);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLNamespaces_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLNamespaces const & reference is null");
    return 0;
  } 
  
  try {
    result = (SBMLNamespaces *)new SBMLNamespaces((SBMLNamespaces const &)*arg1);
  }
  catch (const SBMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  catch (const SBMLExtensionException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/SBMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  result = (SBMLNamespaces *)((SBMLNamespaces const *)arg1)->clone();
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1getSBMLNamespaceURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = SBMLNamespaces::getSBMLNamespaceURI(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1getSupportedNamespaces(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  List *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (List *)SBMLNamespaces::getSupportedNamespaces();
  {
    ListWrapper<SBMLNamespaces> *listw = (result != 0) ? new ListWrapper<SBMLNamespaces>(result) : 0;  
    *( ListWrapper<SBMLNamespaces>   **)&jresult = listw;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1freeSBMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  List *arg1 = (List *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(List **)&jarg1; 
  SBMLNamespaces::freeSBMLNamespaces(arg1);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  result = ((SBMLNamespaces const *)arg1)->getURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1getLevel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  result = (unsigned int)(arg1)->getLevel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1getVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  result = (unsigned int)(arg1)->getVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1getNamespaces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  result = (XMLNamespaces *)(arg1)->getNamespaces();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1addNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2; 
  result = (int)(arg1)->addNamespaces((XMLNamespaces const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1addNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->addNamespace((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1removeNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->removeNamespace((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1addPackageNamespace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (int)(arg1)->addPackageNamespace((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1addPackageNamespace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->addPackageNamespace((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1addPackageNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2; 
  result = (int)(arg1)->addPackageNamespaces((XMLNamespaces const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1removePackageNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  result = (int)(arg1)->removePackageNamespace(arg2,arg3,(std::string const &)*arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1addPkgNamespace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (int)(arg1)->addPkgNamespace((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1addPkgNamespace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->addPkgNamespace((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1addPkgNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2; 
  result = (int)(arg1)->addPkgNamespaces((XMLNamespaces const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1removePkgNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jint jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  result = (int)(arg1)->removePkgNamespace(arg2,arg3,(std::string const &)*arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1isSBMLNamespace(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SBMLNamespaces::isSBMLNamespace((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1isValidCombination(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  result = (bool)(arg1)->isValidCombination();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLNamespaces_1getPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  result = (std::string *) &((SBMLNamespaces const *)arg1)->getPackageName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTransforms_1replaceFD_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  FunctionDefinition *arg2 = (FunctionDefinition *) 0 ;
  IdList *arg3 = (IdList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(FunctionDefinition **)&jarg2; 
  arg3 = *(IdList **)&jarg3; 
  SBMLTransforms::replaceFD(arg1,(FunctionDefinition const *)arg2,(IdList const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTransforms_1replaceFD_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  FunctionDefinition *arg2 = (FunctionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(FunctionDefinition **)&jarg2; 
  SBMLTransforms::replaceFD(arg1,(FunctionDefinition const *)arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTransforms_1replaceFD_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  ListOfFunctionDefinitions *arg2 = (ListOfFunctionDefinitions *) 0 ;
  IdList *arg3 = (IdList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(ListOfFunctionDefinitions **)&jarg2; 
  arg3 = *(IdList **)&jarg3; 
  SBMLTransforms::replaceFD(arg1,(ListOfFunctionDefinitions const *)arg2,(IdList const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTransforms_1replaceFD_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  ListOfFunctionDefinitions *arg2 = (ListOfFunctionDefinitions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(ListOfFunctionDefinitions **)&jarg2; 
  SBMLTransforms::replaceFD(arg1,(ListOfFunctionDefinitions const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTransforms_1expandInitialAssignments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = (bool)SBMLTransforms::expandInitialAssignments(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTransforms_1evaluateASTNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  Model *arg2 = (Model *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(Model **)&jarg2; 
  result = (double)SBMLTransforms::evaluateASTNode((ASTNode const *)arg1,(Model const *)arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTransforms_1evaluateASTNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (double)SBMLTransforms::evaluateASTNode((ASTNode const *)arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTransforms_1mapComponentValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  IdList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  result = SBMLTransforms::mapComponentValues((Model const *)arg1);
  *(IdList **)&jresult = new IdList((const IdList &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLTransforms_1clearComponentValues(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLTransforms::clearComponentValues();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLTransforms(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLTransforms *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLTransforms *)new SBMLTransforms();
  *(SBMLTransforms **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLTransforms(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLTransforms *arg1 = (SBMLTransforms *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLTransforms **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLConstructorException_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLConstructorException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLConstructorException *)new SBMLConstructorException();
  *(SBMLConstructorException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLConstructorException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  SBMLConstructorException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBMLConstructorException *)new SBMLConstructorException(arg1,arg2);
  *(SBMLConstructorException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLConstructorException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  SBMLConstructorException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  result = (SBMLConstructorException *)new SBMLConstructorException(arg1,arg2);
  *(SBMLConstructorException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLConstructorException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLConstructorException *arg1 = (SBMLConstructorException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLConstructorException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConstructorException_1getSBMLErrMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLConstructorException *arg1 = (SBMLConstructorException *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConstructorException **)&jarg1; 
  result = ((SBMLConstructorException const *)arg1)->getSBMLErrMsg();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ConversionOptionType_t arg3 ;
  std::string *arg4 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ConversionOptionType_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ConversionOptionType_t arg3 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ConversionOptionType_t)jarg3; 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,(std::string const &)*arg2);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::string *arg3 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,(char const *)arg2,(std::string const &)*arg3);
  *(ConversionOption **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  std::string *arg3 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,arg2);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (double)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  double arg2 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (double)jarg2; 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,arg2);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jstring jarg1, jfloat jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  float arg2 ;
  std::string *arg3 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (float)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  float arg2 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (float)jarg2; 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,arg2);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  result = (ConversionOption *)new ConversionOption((std::string const &)*arg1,arg2);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionOption_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConversionOption *arg1 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionOption const & reference is null");
    return 0;
  } 
  result = (ConversionOption *)new ConversionOption((ConversionOption const &)*arg1);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ConversionOption(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConversionOption **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  result = (ConversionOption *)((ConversionOption const *)arg1)->clone();
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  result = (std::string *) &((ConversionOption const *)arg1)->getKey();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1setKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setKey((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  result = (std::string *) &((ConversionOption const *)arg1)->getValue();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setValue((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  result = (std::string *) &((ConversionOption const *)arg1)->getDescription();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDescription((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  ConversionOptionType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  result = (ConversionOptionType_t)((ConversionOption const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  ConversionOptionType_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  arg2 = (ConversionOptionType_t)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1getBoolValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  result = (bool)((ConversionOption const *)arg1)->getBoolValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1setBoolValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBoolValue(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1getDoubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  result = (double)((ConversionOption const *)arg1)->getDoubleValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1setDoubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDoubleValue(arg2);
}


SWIGEXPORT jfloat JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1getFloatValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  result = (float)((ConversionOption const *)arg1)->getFloatValue();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1setFloatValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFloatValue(arg2);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1getIntValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  result = (int)((ConversionOption const *)arg1)->getIntValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionOption_1setIntValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConversionOption *arg1 = (ConversionOption *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOption **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIntValue(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ConversionProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  result = (ConversionProperties *)new ConversionProperties(arg1);
  *(ConversionProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConversionProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConversionProperties *)new ConversionProperties();
  *(ConversionProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ConversionProperties_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConversionProperties *arg1 = 0 ;
  ConversionProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (ConversionProperties *)new ConversionProperties((ConversionProperties const &)*arg1);
  *(ConversionProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  ConversionProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  result = (ConversionProperties *)((ConversionProperties const *)arg1)->clone();
  *(ConversionProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ConversionProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConversionProperties **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getTargetNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  result = (SBMLNamespaces *)((ConversionProperties const *)arg1)->getTargetNamespaces();
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1hasTargetNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  result = (bool)((ConversionProperties const *)arg1)->hasTargetNamespaces();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1setTargetNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConversionProperties **)&jarg1; 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  (arg1)->setTargetNamespaces(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::string *) &((ConversionProperties const *)arg1)->getDescription((std::string const &)*arg2);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  ConversionOptionType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ConversionOptionType_t)((ConversionProperties const *)arg1)->getType((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ConversionOption *)((ConversionProperties const *)arg1)->getOption((std::string const &)*arg2);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  int arg2 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ConversionOption *)((ConversionProperties const *)arg1)->getOption(arg2);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  ConversionOption *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConversionProperties **)&jarg1; 
  arg2 = *(ConversionOption **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionOption const & reference is null");
    return ;
  } 
  (arg1)->addOption((ConversionOption const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ConversionOptionType_t arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (ConversionOptionType_t)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->addOption((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ConversionOptionType_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (ConversionOptionType_t)jarg4; 
  (arg1)->addOption((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addOption((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addOption((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->addOption((std::string const &)*arg2,(char const *)arg3,(std::string const &)*arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->addOption((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  (arg1)->addOption((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jstring jarg4) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->addOption((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->addOption((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jstring jarg4) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->addOption((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  (arg1)->addOption((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->addOption((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1addOption_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->addOption((std::string const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1removeOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  ConversionOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ConversionOption *)(arg1)->removeOption((std::string const &)*arg2);
  *(ConversionOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1hasOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((ConversionProperties const *)arg1)->hasOption((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::string *) &((ConversionProperties const *)arg1)->getValue((std::string const &)*arg2);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setValue((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getBoolValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((ConversionProperties const *)arg1)->getBoolValue((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1setBoolValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  (arg1)->setBoolValue((std::string const &)*arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getDoubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((ConversionProperties const *)arg1)->getDoubleValue((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1setDoubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setDoubleValue((std::string const &)*arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getFloatValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (float)((ConversionProperties const *)arg1)->getFloatValue((std::string const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1setFloatValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  (arg1)->setFloatValue((std::string const &)*arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getIntValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((ConversionProperties const *)arg1)->getIntValue((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1setIntValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->setIntValue((std::string const &)*arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ConversionProperties_1getNumOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ConversionProperties *arg1 = (ConversionProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionProperties **)&jarg1; 
  result = (int)((ConversionProperties const *)arg1)->getNumOptions();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLConverter *)new SwigDirector_SBMLConverter(jenv);
  *(SBMLConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  SBMLConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (SBMLConverter *)new SwigDirector_SBMLConverter(jenv,(std::string const &)*arg1);
  *(SBMLConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLConverter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = 0 ;
  SBMLConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLConverter const & reference is null");
    return 0;
  } 
  result = (SBMLConverter *)new SwigDirector_SBMLConverter(jenv,(SBMLConverter const &)*arg1);
  *(SBMLConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  SBMLConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (SBMLConverter *)((SBMLConverter const *)arg1)->clone();
  *(SBMLConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1cloneObjectSwigExplicitSBMLConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  SBMLConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (SBMLConverter *)((SBMLConverter const *)arg1)->SBMLConverter::clone();
  *(SBMLConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (SBMLDocument *)(arg1)->getDocument();
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getDocumentSwigExplicitSBMLConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (SBMLDocument *)(arg1)->SBMLConverter::getDocument();
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getDocumentSwigExplicitSBMLConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (SBMLDocument *)((SBMLConverter const *)arg1)->SBMLConverter::getDocument();
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = ((SBMLConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getDefaultPropertiesSwigExplicitSBMLConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = ((SBMLConverter const *)arg1)->SBMLConverter::getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getTargetNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (SBMLNamespaces *)(arg1)->getTargetNamespaces();
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getTargetNamespacesSwigExplicitSBMLConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (SBMLNamespaces *)(arg1)->SBMLConverter::getTargetNamespaces();
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1matchesPropertiesSwigExplicitSBMLConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLConverter const *)arg1)->SBMLConverter::matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1setDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLConverter **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  result = (int)(arg1)->setDocument(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1setDocumentSwigExplicitSBMLConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLConverter **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  result = (int)(arg1)->SBMLConverter::setDocument(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1setProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  ConversionProperties *arg2 = (ConversionProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2; 
  result = (int)(arg1)->setProperties((ConversionProperties const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1setPropertiesSwigExplicitSBMLConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  ConversionProperties *arg2 = (ConversionProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2; 
  result = (int)(arg1)->SBMLConverter::setProperties((ConversionProperties const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  ConversionProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (ConversionProperties *)((SBMLConverter const *)arg1)->getProperties();
  *(ConversionProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getPropertiesSwigExplicitSBMLConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  ConversionProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (ConversionProperties *)((SBMLConverter const *)arg1)->SBMLConverter::getProperties();
  *(ConversionProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1convertSwigExplicitSBMLConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (int)(arg1)->SBMLConverter::convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLConverter *arg1 = (SBMLConverter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverter **)&jarg1; 
  result = (std::string *) &((SBMLConverter const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  SBMLConverter *obj = *((SBMLConverter **)&objarg);
  (void)jcls;
  SwigDirector_SBMLConverter *director = dynamic_cast<SwigDirector_SBMLConverter *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  SBMLConverter *obj = *((SBMLConverter **)&objarg);
  SwigDirector_SBMLConverter *director = dynamic_cast<SwigDirector_SBMLConverter *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverterRegistry_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLConverterRegistry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLConverterRegistry *) &SBMLConverterRegistry::getInstance();
  *(SBMLConverterRegistry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverterRegistry_1addConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLConverterRegistry *arg1 = (SBMLConverterRegistry *) 0 ;
  SBMLConverter *arg2 = (SBMLConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLConverterRegistry **)&jarg1; 
  arg2 = *(SBMLConverter **)&jarg2; 
  result = (int)(arg1)->addConverter((SBMLConverter const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverterRegistry_1getConverterByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SBMLConverterRegistry *arg1 = (SBMLConverterRegistry *) 0 ;
  int arg2 ;
  SBMLConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverterRegistry **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SBMLConverter *)((SBMLConverterRegistry const *)arg1)->getConverterByIndex(arg2);
  *(SBMLConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverterRegistry_1getConverterFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SBMLConverterRegistry *arg1 = (SBMLConverterRegistry *) 0 ;
  ConversionProperties *arg2 = 0 ;
  SBMLConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLConverterRegistry **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (SBMLConverter *)((SBMLConverterRegistry const *)arg1)->getConverterFor((ConversionProperties const &)*arg2);
  *(SBMLConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLConverterRegistry_1getNumConverters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLConverterRegistry *arg1 = (SBMLConverterRegistry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLConverterRegistry **)&jarg1; 
  result = (int)((SBMLConverterRegistry const *)arg1)->getNumConverters();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLConverterRegistry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLConverterRegistry *arg1 = (SBMLConverterRegistry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLConverterRegistry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLFunctionDefinitionConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLFunctionDefinitionConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLFunctionDefinitionConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLFunctionDefinitionConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLFunctionDefinitionConverter *)new SBMLFunctionDefinitionConverter();
  *(SBMLFunctionDefinitionConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLFunctionDefinitionConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLFunctionDefinitionConverter *arg1 = 0 ;
  SBMLFunctionDefinitionConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLFunctionDefinitionConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLFunctionDefinitionConverter const & reference is null");
    return 0;
  } 
  result = (SBMLFunctionDefinitionConverter *)new SBMLFunctionDefinitionConverter((SBMLFunctionDefinitionConverter const &)*arg1);
  *(SBMLFunctionDefinitionConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLFunctionDefinitionConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLFunctionDefinitionConverter *arg1 = (SBMLFunctionDefinitionConverter *) 0 ;
  SBMLFunctionDefinitionConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLFunctionDefinitionConverter **)&jarg1; 
  result = (SBMLFunctionDefinitionConverter *)((SBMLFunctionDefinitionConverter const *)arg1)->clone();
  *(SBMLFunctionDefinitionConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLFunctionDefinitionConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLFunctionDefinitionConverter *arg1 = (SBMLFunctionDefinitionConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLFunctionDefinitionConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLFunctionDefinitionConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLFunctionDefinitionConverter *arg1 = (SBMLFunctionDefinitionConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLFunctionDefinitionConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLFunctionDefinitionConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLFunctionDefinitionConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLFunctionDefinitionConverter *arg1 = (SBMLFunctionDefinitionConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLFunctionDefinitionConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLFunctionDefinitionConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLFunctionDefinitionConverter *arg1 = (SBMLFunctionDefinitionConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLFunctionDefinitionConverter **)&jarg1; 
  result = ((SBMLFunctionDefinitionConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLIdConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLIdConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLIdConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLIdConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLIdConverter *)new SBMLIdConverter();
  *(SBMLIdConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLIdConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLIdConverter *arg1 = 0 ;
  SBMLIdConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLIdConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLIdConverter const & reference is null");
    return 0;
  } 
  result = (SBMLIdConverter *)new SBMLIdConverter((SBMLIdConverter const &)*arg1);
  *(SBMLIdConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLIdConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLIdConverter *arg1 = (SBMLIdConverter *) 0 ;
  SBMLIdConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLIdConverter **)&jarg1; 
  result = (SBMLIdConverter *)((SBMLIdConverter const *)arg1)->clone();
  *(SBMLIdConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLIdConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLIdConverter *arg1 = (SBMLIdConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLIdConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLIdConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLIdConverter *arg1 = (SBMLIdConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLIdConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLIdConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLIdConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLIdConverter *arg1 = (SBMLIdConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLIdConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLIdConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLIdConverter *arg1 = (SBMLIdConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLIdConverter **)&jarg1; 
  result = ((SBMLIdConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInferUnitsConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLInferUnitsConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLInferUnitsConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLInferUnitsConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLInferUnitsConverter *)new SBMLInferUnitsConverter();
  *(SBMLInferUnitsConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLInferUnitsConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLInferUnitsConverter *arg1 = 0 ;
  SBMLInferUnitsConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLInferUnitsConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLInferUnitsConverter const & reference is null");
    return 0;
  } 
  result = (SBMLInferUnitsConverter *)new SBMLInferUnitsConverter((SBMLInferUnitsConverter const &)*arg1);
  *(SBMLInferUnitsConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLInferUnitsConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLInferUnitsConverter *arg1 = (SBMLInferUnitsConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLInferUnitsConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInferUnitsConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLInferUnitsConverter *arg1 = (SBMLInferUnitsConverter *) 0 ;
  SBMLInferUnitsConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLInferUnitsConverter **)&jarg1; 
  result = (SBMLInferUnitsConverter *)((SBMLInferUnitsConverter const *)arg1)->clone();
  *(SBMLInferUnitsConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInferUnitsConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLInferUnitsConverter *arg1 = (SBMLInferUnitsConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLInferUnitsConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLInferUnitsConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInferUnitsConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLInferUnitsConverter *arg1 = (SBMLInferUnitsConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLInferUnitsConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInferUnitsConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLInferUnitsConverter *arg1 = (SBMLInferUnitsConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLInferUnitsConverter **)&jarg1; 
  result = ((SBMLInferUnitsConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInitialAssignmentConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLInitialAssignmentConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLInitialAssignmentConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLInitialAssignmentConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLInitialAssignmentConverter *)new SBMLInitialAssignmentConverter();
  *(SBMLInitialAssignmentConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLInitialAssignmentConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLInitialAssignmentConverter *arg1 = 0 ;
  SBMLInitialAssignmentConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLInitialAssignmentConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLInitialAssignmentConverter const & reference is null");
    return 0;
  } 
  result = (SBMLInitialAssignmentConverter *)new SBMLInitialAssignmentConverter((SBMLInitialAssignmentConverter const &)*arg1);
  *(SBMLInitialAssignmentConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInitialAssignmentConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLInitialAssignmentConverter *arg1 = (SBMLInitialAssignmentConverter *) 0 ;
  SBMLInitialAssignmentConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLInitialAssignmentConverter **)&jarg1; 
  result = (SBMLInitialAssignmentConverter *)((SBMLInitialAssignmentConverter const *)arg1)->clone();
  *(SBMLInitialAssignmentConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLInitialAssignmentConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLInitialAssignmentConverter *arg1 = (SBMLInitialAssignmentConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLInitialAssignmentConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInitialAssignmentConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLInitialAssignmentConverter *arg1 = (SBMLInitialAssignmentConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLInitialAssignmentConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLInitialAssignmentConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInitialAssignmentConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLInitialAssignmentConverter *arg1 = (SBMLInitialAssignmentConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLInitialAssignmentConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInitialAssignmentConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLInitialAssignmentConverter *arg1 = (SBMLInitialAssignmentConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLInitialAssignmentConverter **)&jarg1; 
  result = ((SBMLInitialAssignmentConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLevelVersionConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLLevelVersionConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLLevelVersionConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLLevelVersionConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLLevelVersionConverter *)new SBMLLevelVersionConverter();
  *(SBMLLevelVersionConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLLevelVersionConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLLevelVersionConverter *arg1 = 0 ;
  SBMLLevelVersionConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLevelVersionConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLLevelVersionConverter const & reference is null");
    return 0;
  } 
  result = (SBMLLevelVersionConverter *)new SBMLLevelVersionConverter((SBMLLevelVersionConverter const &)*arg1);
  *(SBMLLevelVersionConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLLevelVersionConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLLevelVersionConverter *arg1 = (SBMLLevelVersionConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLLevelVersionConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLevelVersionConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLLevelVersionConverter *arg1 = (SBMLLevelVersionConverter *) 0 ;
  SBMLLevelVersionConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLevelVersionConverter **)&jarg1; 
  result = (SBMLLevelVersionConverter *)((SBMLLevelVersionConverter const *)arg1)->clone();
  *(SBMLLevelVersionConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLevelVersionConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLLevelVersionConverter *arg1 = (SBMLLevelVersionConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLLevelVersionConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLLevelVersionConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLevelVersionConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLLevelVersionConverter *arg1 = (SBMLLevelVersionConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLevelVersionConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLevelVersionConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLLevelVersionConverter *arg1 = (SBMLLevelVersionConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLevelVersionConverter **)&jarg1; 
  result = ((SBMLLevelVersionConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLevelVersionConverter_1getTargetLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLLevelVersionConverter *arg1 = (SBMLLevelVersionConverter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLevelVersionConverter **)&jarg1; 
  result = (unsigned int)(arg1)->getTargetLevel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLevelVersionConverter_1getTargetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLLevelVersionConverter *arg1 = (SBMLLevelVersionConverter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLevelVersionConverter **)&jarg1; 
  result = (unsigned int)(arg1)->getTargetVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLevelVersionConverter_1getValidityFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBMLLevelVersionConverter *arg1 = (SBMLLevelVersionConverter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLevelVersionConverter **)&jarg1; 
  result = (bool)(arg1)->getValidityFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLocalParameterConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLLocalParameterConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLLocalParameterConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLLocalParameterConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLLocalParameterConverter *)new SBMLLocalParameterConverter();
  *(SBMLLocalParameterConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLLocalParameterConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLLocalParameterConverter *arg1 = 0 ;
  SBMLLocalParameterConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLocalParameterConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLLocalParameterConverter const & reference is null");
    return 0;
  } 
  result = (SBMLLocalParameterConverter *)new SBMLLocalParameterConverter((SBMLLocalParameterConverter const &)*arg1);
  *(SBMLLocalParameterConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLocalParameterConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLLocalParameterConverter *arg1 = (SBMLLocalParameterConverter *) 0 ;
  SBMLLocalParameterConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLocalParameterConverter **)&jarg1; 
  result = (SBMLLocalParameterConverter *)((SBMLLocalParameterConverter const *)arg1)->clone();
  *(SBMLLocalParameterConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLLocalParameterConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLLocalParameterConverter *arg1 = (SBMLLocalParameterConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLLocalParameterConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLocalParameterConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLLocalParameterConverter *arg1 = (SBMLLocalParameterConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLLocalParameterConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLLocalParameterConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLocalParameterConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLLocalParameterConverter *arg1 = (SBMLLocalParameterConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLocalParameterConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLocalParameterConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLLocalParameterConverter *arg1 = (SBMLLocalParameterConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLLocalParameterConverter **)&jarg1; 
  result = ((SBMLLocalParameterConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReactionConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLReactionConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLReactionConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLReactionConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLReactionConverter *)new SBMLReactionConverter();
  *(SBMLReactionConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLReactionConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLReactionConverter *arg1 = 0 ;
  SBMLReactionConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLReactionConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLReactionConverter const & reference is null");
    return 0;
  } 
  result = (SBMLReactionConverter *)new SBMLReactionConverter((SBMLReactionConverter const &)*arg1);
  *(SBMLReactionConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReactionConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLReactionConverter *arg1 = (SBMLReactionConverter *) 0 ;
  SBMLReactionConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLReactionConverter **)&jarg1; 
  result = (SBMLReactionConverter *)((SBMLReactionConverter const *)arg1)->clone();
  *(SBMLReactionConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLReactionConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLReactionConverter *arg1 = (SBMLReactionConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLReactionConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReactionConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLReactionConverter *arg1 = (SBMLReactionConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLReactionConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLReactionConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReactionConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLReactionConverter *arg1 = (SBMLReactionConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLReactionConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReactionConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLReactionConverter *arg1 = (SBMLReactionConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLReactionConverter **)&jarg1; 
  result = ((SBMLReactionConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReactionConverter_1setDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLReactionConverter *arg1 = (SBMLReactionConverter *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLReactionConverter **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  result = (int)(arg1)->setDocument(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLRuleConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLRuleConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLRuleConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLRuleConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLRuleConverter *)new SBMLRuleConverter();
  *(SBMLRuleConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLRuleConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLRuleConverter *arg1 = 0 ;
  SBMLRuleConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLRuleConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLRuleConverter const & reference is null");
    return 0;
  } 
  result = (SBMLRuleConverter *)new SBMLRuleConverter((SBMLRuleConverter const &)*arg1);
  *(SBMLRuleConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLRuleConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLRuleConverter *arg1 = (SBMLRuleConverter *) 0 ;
  SBMLRuleConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLRuleConverter **)&jarg1; 
  result = (SBMLRuleConverter *)((SBMLRuleConverter const *)arg1)->clone();
  *(SBMLRuleConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLRuleConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLRuleConverter *arg1 = (SBMLRuleConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLRuleConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLRuleConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLRuleConverter *arg1 = (SBMLRuleConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLRuleConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLRuleConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLRuleConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLRuleConverter *arg1 = (SBMLRuleConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLRuleConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLRuleConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLRuleConverter *arg1 = (SBMLRuleConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLRuleConverter **)&jarg1; 
  result = ((SBMLRuleConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLStripPackageConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLStripPackageConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLStripPackageConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLStripPackageConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLStripPackageConverter *)new SBMLStripPackageConverter();
  *(SBMLStripPackageConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLStripPackageConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLStripPackageConverter *arg1 = 0 ;
  SBMLStripPackageConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLStripPackageConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLStripPackageConverter const & reference is null");
    return 0;
  } 
  result = (SBMLStripPackageConverter *)new SBMLStripPackageConverter((SBMLStripPackageConverter const &)*arg1);
  *(SBMLStripPackageConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLStripPackageConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLStripPackageConverter *arg1 = (SBMLStripPackageConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLStripPackageConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLStripPackageConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLStripPackageConverter *arg1 = (SBMLStripPackageConverter *) 0 ;
  SBMLStripPackageConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLStripPackageConverter **)&jarg1; 
  result = (SBMLStripPackageConverter *)((SBMLStripPackageConverter const *)arg1)->clone();
  *(SBMLStripPackageConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLStripPackageConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLStripPackageConverter *arg1 = (SBMLStripPackageConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLStripPackageConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLStripPackageConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLStripPackageConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLStripPackageConverter *arg1 = (SBMLStripPackageConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLStripPackageConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLStripPackageConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLStripPackageConverter *arg1 = (SBMLStripPackageConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLStripPackageConverter **)&jarg1; 
  result = ((SBMLStripPackageConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLUnitsConverter_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SBMLUnitsConverter::init();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLUnitsConverter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLUnitsConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLUnitsConverter *)new SBMLUnitsConverter();
  *(SBMLUnitsConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLUnitsConverter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLUnitsConverter *arg1 = 0 ;
  SBMLUnitsConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLUnitsConverter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLUnitsConverter const & reference is null");
    return 0;
  } 
  result = (SBMLUnitsConverter *)new SBMLUnitsConverter((SBMLUnitsConverter const &)*arg1);
  *(SBMLUnitsConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLUnitsConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLUnitsConverter *arg1 = (SBMLUnitsConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLUnitsConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLUnitsConverter_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLUnitsConverter *arg1 = (SBMLUnitsConverter *) 0 ;
  SBMLUnitsConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLUnitsConverter **)&jarg1; 
  result = (SBMLUnitsConverter *)((SBMLUnitsConverter const *)arg1)->clone();
  *(SBMLUnitsConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLUnitsConverter_1matchesProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLUnitsConverter *arg1 = (SBMLUnitsConverter *) 0 ;
  ConversionProperties *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLUnitsConverter **)&jarg1; 
  arg2 = *(ConversionProperties **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConversionProperties const & reference is null");
    return 0;
  } 
  result = (bool)((SBMLUnitsConverter const *)arg1)->matchesProperties((ConversionProperties const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLUnitsConverter_1convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLUnitsConverter *arg1 = (SBMLUnitsConverter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLUnitsConverter **)&jarg1; 
  result = (int)(arg1)->convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLUnitsConverter_1getDefaultProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLUnitsConverter *arg1 = (SBMLUnitsConverter *) 0 ;
  ConversionProperties result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLUnitsConverter **)&jarg1; 
  result = ((SBMLUnitsConverter const *)arg1)->getDefaultProperties();
  *(ConversionProperties **)&jresult = new ConversionProperties((const ConversionProperties &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLValidator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLValidator *)new SwigDirector_SBMLValidator(jenv);
  *(SBMLValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLValidator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = 0 ;
  SBMLValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLValidator const & reference is null");
    return 0;
  } 
  result = (SBMLValidator *)new SwigDirector_SBMLValidator(jenv,(SBMLValidator const &)*arg1);
  *(SBMLValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLValidator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLValidator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (SBMLValidator *)((SBMLValidator const *)arg1)->clone();
  *(SBMLValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1cloneObjectSwigExplicitSBMLValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (SBMLValidator *)((SBMLValidator const *)arg1)->SBMLValidator::clone();
  *(SBMLValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1getDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (SBMLDocument *)(arg1)->getDocument();
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1getDocumentSwigExplicitSBMLValidator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (SBMLDocument *)(arg1)->SBMLValidator::getDocument();
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1getDocumentSwigExplicitSBMLValidator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (SBMLDocument *)((SBMLValidator const *)arg1)->SBMLValidator::getDocument();
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1setDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLValidator **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  result = (int)(arg1)->setDocument((SBMLDocument const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1setDocumentSwigExplicitSBMLValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLValidator **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  result = (int)(arg1)->SBMLValidator::setDocument((SBMLDocument const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1validate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (unsigned int)(arg1)->validate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1validateSwigExplicitSBMLValidator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (unsigned int)(arg1)->SBMLValidator::validate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1clearFailures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  (arg1)->clearFailures();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1clearFailuresSwigExplicitSBMLValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  (arg1)->SBMLValidator::clearFailures();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1logFailure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLError *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLValidator **)&jarg1; 
  arg2 = *(SBMLError **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLError const & reference is null");
    return ;
  } 
  (arg1)->logFailure((SBMLError const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1validate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLDocument *arg2 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLValidator **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLDocument const & reference is null");
    return 0;
  } 
  result = (unsigned int)(arg1)->validate((SBMLDocument const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1validate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  std::string *arg2 = 0 ;
  char const *arg_pstr2 ;
  std::string arg_str2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg_pstr2) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr2);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
    return 0;
  }
  
  arg_str2.assign(mbstr);
  delete[] mbstr;
#else
  arg_str2.assign(arg_pstr2);
#endif
  arg2 = &arg_str2;
  jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
  
  
  result = (unsigned int)(arg1)->validate((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1getErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  SBMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (SBMLErrorLog *)(arg1)->getErrorLog();
  *(SBMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1getModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (Model *)((SBMLValidator const *)arg1)->getModel();
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1getNumFailures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  result = (unsigned int)((SBMLValidator const *)arg1)->getNumFailures();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1getFailure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBMLValidator *arg1 = (SBMLValidator *) 0 ;
  unsigned int arg2 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLValidator **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBMLError *)((SBMLValidator const *)arg1)->getFailure(arg2);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  SBMLValidator *obj = *((SBMLValidator **)&objarg);
  (void)jcls;
  SwigDirector_SBMLValidator *director = dynamic_cast<SwigDirector_SBMLValidator *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLValidator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  SBMLValidator *obj = *((SBMLValidator **)&objarg);
  SwigDirector_SBMLValidator *director = dynamic_cast<SwigDirector_SBMLValidator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLExternalValidator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLExternalValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLExternalValidator *)new SBMLExternalValidator();
  *(SBMLExternalValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLExternalValidator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLExternalValidator *arg1 = 0 ;
  SBMLExternalValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLExternalValidator const & reference is null");
    return 0;
  } 
  result = (SBMLExternalValidator *)new SBMLExternalValidator((SBMLExternalValidator const &)*arg1);
  *(SBMLExternalValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  SBMLValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  result = (SBMLValidator *)((SBMLExternalValidator const *)arg1)->clone();
  *(SBMLValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLExternalValidator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1validate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  result = (unsigned int)(arg1)->validate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1getProgram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  result = (std::string *) &((SBMLExternalValidator const *)arg1)->getProgram();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1setProgram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setProgram(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1getOutputFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  result = (std::string *) &((SBMLExternalValidator const *)arg1)->getOutputFileName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1setOutputFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputFileName(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1getSBMLFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  result = (std::string *) &((SBMLExternalValidator const *)arg1)->getSBMLFileName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1setSBMLFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSBMLFileName(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1clearArguments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  (arg1)->clearArguments();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1addArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addArgument(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1getNumArguments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  result = (unsigned int)((SBMLExternalValidator const *)arg1)->getNumArguments();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1getArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  SBMLExternalValidator *arg1 = (SBMLExternalValidator *) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExternalValidator **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((SBMLExternalValidator const *)arg1)->getArgument(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (XMLAttributes *)new XMLAttributes();
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLAttributes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLAttributes *arg1 = 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLAttributes *)new XMLAttributes((XMLAttributes const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  result = (XMLAttributes *)((XMLAttributes const *)arg1)->clone();
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->add((XMLTriple const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1removeResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeResource(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->remove((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1remove_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->remove((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1remove_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->remove((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  result = (int)(arg1)->clear();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLAttributes const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)((XMLAttributes const *)arg1)->getIndex((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)((XMLAttributes const *)arg1)->getIndex((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  result = (int)((XMLAttributes const *)arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getNumAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  result = (int)((XMLAttributes const *)arg1)->getNumAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getPrefix(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getPrefixedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getPrefixedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getURI(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getValue(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLAttributes const *)arg1)->getValue(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((XMLAttributes const *)arg1)->getValue(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1getValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = ((XMLAttributes const *)arg1)->getValue((XMLTriple const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1hasAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XMLAttributes const *)arg1)->hasAttribute(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1hasAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((XMLAttributes const *)arg1)->hasAttribute(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1hasAttribute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLAttributes const *)arg1)->hasAttribute(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1hasAttribute_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (bool)((XMLAttributes const *)arg1)->hasAttribute((XMLTriple const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLAttributes_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  result = (bool)((XMLAttributes const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLConstructorException(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLConstructorException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLConstructorException *)new XMLConstructorException();
  *(XMLConstructorException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLConstructorException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLConstructorException *arg1 = (XMLConstructorException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLConstructorException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNamespaces_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (XMLNamespaces *)new XMLNamespaces();
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLNamespaces **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNamespaces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNamespaces *arg1 = 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLNamespaces *)new XMLNamespaces((XMLNamespaces const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = (XMLNamespaces *)((XMLNamespaces const *)arg1)->clone();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->remove((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = (int)(arg1)->clear();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLNamespaces const *)arg1)->getIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1containsUri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLNamespaces const *)arg1)->containsUri(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1getIndexByPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLNamespaces const *)arg1)->getIndexByPrefix(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = (int)((XMLNamespaces const *)arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1getNumNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = (int)((XMLNamespaces const *)arg1)->getNumNamespaces();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1getPrefix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLNamespaces const *)arg1)->getPrefix(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1getPrefix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLNamespaces const *)arg1)->getPrefix((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1getURI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLNamespaces const *)arg1)->getURI(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1getURI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLNamespaces const *)arg1)->getURI((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1getURI_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = ((XMLNamespaces const *)arg1)->getURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = (bool)((XMLNamespaces const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1hasURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLNamespaces const *)arg1)->hasURI((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1hasPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLNamespaces const *)arg1)->hasPrefix((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNamespaces_1hasNS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((XMLNamespaces const *)arg1)->hasNS((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (XMLToken *)new XMLToken();
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  
  try {
    result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3,arg4,arg5);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  unsigned int arg4 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  
  try {
    result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3,arg4);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  
  try {
    result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,arg3,arg4);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  unsigned int arg3 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  
  try {
    result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  
  try {
    result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,arg2,arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  unsigned int arg2 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,arg2);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  
  try {
    result = (XMLToken *)new XMLToken((std::string const &)*arg1,arg2,arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (XMLToken *)new XMLToken((std::string const &)*arg1,arg2);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  
  try {
    result = (XMLToken *)new XMLToken((std::string const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLToken *arg1 = (XMLToken *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLToken **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLToken_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLToken *)new XMLToken((XMLToken const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (XMLToken *)((XMLToken const *)arg1)->clone();
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (XMLAttributes *) &((XMLToken const *)arg1)->getAttributes();
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1setAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLAttributes *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->setAttributes((XMLAttributes const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1addAttr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->addAttr((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1addAttr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (int)(arg1)->addAttr((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1addAttr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->addAttr((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1addAttr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->addAttr((XMLTriple const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1removeAttr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeAttr(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1removeAttr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->removeAttr((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1removeAttr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->removeAttr((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1removeAttr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->removeAttr((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1clearAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->clearAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)((XMLToken const *)arg1)->getAttrIndex((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLToken const *)arg1)->getAttrIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)((XMLToken const *)arg1)->getAttrIndex((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttributesLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)((XMLToken const *)arg1)->getAttributesLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrPrefix(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrPrefixedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrPrefixedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrURI(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrValue(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((XMLToken const *)arg1)->getAttrValue(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLToken const *)arg1)->getAttrValue(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getAttrValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = ((XMLToken const *)arg1)->getAttrValue((XMLTriple const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1hasAttr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XMLToken const *)arg1)->hasAttr(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1hasAttr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasAttr(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1hasAttr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasAttr(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1hasAttr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (bool)((XMLToken const *)arg1)->hasAttr((XMLTriple const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1isAttributesEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isAttributesEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (XMLNamespaces *) &((XMLToken const *)arg1)->getNamespaces();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1setNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLNamespaces *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->setNamespaces((XMLNamespaces const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1addNamespace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->addNamespace((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1addNamespace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->addNamespace((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1removeNamespace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeNamespace(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1removeNamespace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->removeNamespace((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1clearNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->clearNamespaces();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getNamespaceIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLToken const *)arg1)->getNamespaceIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getNamespaceIndexByPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLToken const *)arg1)->getNamespaceIndexByPrefix((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getNamespacesLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)((XMLToken const *)arg1)->getNamespacesLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getNamespacePrefix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getNamespacePrefix(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getNamespacePrefix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLToken const *)arg1)->getNamespacePrefix((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getNamespaceURI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getNamespaceURI(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getNamespaceURI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLToken const *)arg1)->getNamespaceURI((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getNamespaceURI_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = ((XMLToken const *)arg1)->getNamespaceURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1isNamespacesEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isNamespacesEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1hasNamespaceURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasNamespaceURI((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1hasNamespacePrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasNamespacePrefix((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1hasNamespaceNS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasNamespaceNS((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1setTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->setTriple((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (std::string *) &((XMLToken const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (std::string *) &((XMLToken const *)arg1)->getPrefix();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (std::string *) &((XMLToken const *)arg1)->getURI();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getCharacters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (std::string *) &((XMLToken const *)arg1)->getCharacters();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->append((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (unsigned int)((XMLToken const *)arg1)->getColumn();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (unsigned int)((XMLToken const *)arg1)->getLine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1isElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isElement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1isEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isEnd();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1isEndFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLToken *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return 0;
  } 
  result = (bool)((XMLToken const *)arg1)->isEndFor((XMLToken const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1isEOF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isEOF();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1isStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isStart();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1isText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isText();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1setEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->setEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1setEOF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->setEOF();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1unsetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->unsetEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLToken_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (XMLNode *)new XMLNode();
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLNode *)new XMLNode((XMLToken const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  
  try {
    result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3,arg4,arg5);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  unsigned int arg4 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  
  try {
    result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3,arg4);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  
  try {
    result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,arg3,arg4);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  unsigned int arg3 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  
  try {
    result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  
  try {
    result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,arg2,arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  unsigned int arg2 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,arg2);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  
  try {
    result = (XMLNode *)new XMLNode((std::string const &)*arg1,arg2,arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (XMLNode *)new XMLNode((std::string const &)*arg1,arg2);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  
  try {
    result = (XMLNode *)new XMLNode((std::string const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLNode *)new XMLNode(*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLNode *arg1 = (XMLNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLNode_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNode const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLNode *)new XMLNode((XMLNode const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (XMLNode *)((XMLNode const *)arg1)->clone();
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1addChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  XMLNode *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNode const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->addChild((XMLNode const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1insertChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  unsigned int arg2 ;
  XMLNode *arg3 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(XMLNode **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNode const & reference is null");
    return 0;
  } 
  result = (XMLNode *) &(arg1)->insertChild(arg2,(XMLNode const &)*arg3);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1removeChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  unsigned int arg2 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (XMLNode *)(arg1)->removeChild(arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1removeChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (int)(arg1)->removeChildren();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1getChild_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  unsigned int arg2 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (XMLNode *) &(arg1)->getChild(arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1getChild_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  std::string *arg2 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (XMLNode *) &(arg1)->getChild((std::string const &)*arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLNode const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1hasChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLNode const *)arg1)->hasChild((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1xmlEquals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  XMLNode *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNode const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)((XMLNode const *)arg1)->equals((XMLNode const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1xmlEquals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  XMLNode *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNode const & reference is null");
    return 0;
  } 
  result = (bool)((XMLNode const *)arg1)->equals((XMLNode const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1getNumChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (unsigned int)((XMLNode const *)arg1)->getNumChildren();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1toXMLString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = ((XMLNode const *)arg1)->toXMLString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1convertXMLNodeToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = XMLNode::convertXMLNodeToString((XMLNode const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1convertStringToXMLNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(XMLNamespaces **)&jarg2; 
  result = (XMLNode *)XMLNode::convertStringToXMLNode((std::string const &)*arg1,(XMLNamespaces const *)arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1convertStringToXMLNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (XMLNode *)XMLNode::convertStringToXMLNode((std::string const &)*arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLTriple_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLTriple *)new XMLTriple();
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLTriple_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (XMLTriple *)new XMLTriple((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLTriple_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  char arg2 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (char)jarg2; 
  result = (XMLTriple *)new XMLTriple((std::string const &)*arg1,arg2);
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLTriple_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (XMLTriple *)new XMLTriple((std::string const &)*arg1);
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLTriple_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (XMLTriple *)new XMLTriple((XMLTriple const &)*arg1);
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLTriple_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (XMLTriple *)((XMLTriple const *)arg1)->clone();
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLTriple_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (std::string *) &((XMLTriple const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLTriple_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (std::string *) &((XMLTriple const *)arg1)->getPrefix();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLTriple_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (std::string *) &((XMLTriple const *)arg1)->getURI();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLTriple_1getPrefixedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = ((XMLTriple const *)arg1)->getPrefixedName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLTriple_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (bool)((XMLTriple const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLTriple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLTriple **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLOutputStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  
  try {
    result = (XMLOutputStream *)new XMLOutputStream(*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLOutputStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  
  try {
    result = (XMLOutputStream *)new XMLOutputStream(*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLOutputStream_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  
  try {
    result = (XMLOutputStream *)new XMLOutputStream(*arg1,(std::string const &)*arg2,arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLOutputStream_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  try {
    result = (XMLOutputStream *)new XMLOutputStream(*arg1,(std::string const &)*arg2);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLOutputStream_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLOutputStream *)new XMLOutputStream(*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLOutputStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLOutputStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1endElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->endElement((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1endElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->endElement((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1endElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  (arg1)->endElement((XMLTriple const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1setAutoIndent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoIndent(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1startElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->startElement((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1startElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->startElement((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1startElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  (arg1)->startElement((XMLTriple const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1startEndElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->startEndElement((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1startEndElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->startEndElement((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1startEndElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  (arg1)->startEndElement((XMLTriple const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->writeAttribute((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->writeAttribute((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->writeAttribute((XMLTriple const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((std::string const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  (arg1)->writeAttribute((std::string const &)*arg2,(std::string const &)*arg3,(bool const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((XMLTriple const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((std::string const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double *arg4 = 0 ;
  double temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  (arg1)->writeAttribute((std::string const &)*arg2,(std::string const &)*arg3,(double const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((XMLTriple const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (long)jarg3; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((std::string const &)*arg2,(long const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  long *arg4 = 0 ;
  long temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  temp4 = (long)jarg4; 
  arg4 = &temp4; 
  (arg1)->writeAttribute((std::string const &)*arg2,(std::string const &)*arg3,(long const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  temp3 = (long)jarg3; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((XMLTriple const &)*arg2,(long const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  (arg1)->writeAttribute((std::string const &)*arg2,(std::string const &)*arg3,(unsigned int const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeXMLDecl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  (arg1)->writeXMLDecl();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1writeComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->writeComment((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1downIndent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  (arg1)->downIndent();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1upIndent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  (arg1)->upIndent();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1getSBMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  result = (SBMLNamespaces *)(arg1)->getSBMLNamespaces();
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLOutputStream_1setSBMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  (arg1)->setSBMLNamespaces(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLInputStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  XMLErrorLog *arg4 = (XMLErrorLog *) 0 ;
  XMLInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(XMLErrorLog **)&jarg4; 
  result = (XMLInputStream *)new XMLInputStream((char const *)arg1,arg2,arg3,arg4);
  *(XMLInputStream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLInputStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  XMLInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (XMLInputStream *)new XMLInputStream((char const *)arg1,arg2,arg3);
  *(XMLInputStream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLInputStream_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  XMLInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (XMLInputStream *)new XMLInputStream((char const *)arg1,arg2);
  *(XMLInputStream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLInputStream_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  XMLInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (XMLInputStream *)new XMLInputStream((char const *)arg1);
  *(XMLInputStream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLInputStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLInputStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1getEncoding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (std::string *) &(arg1)->getEncoding();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (std::string *) &(arg1)->getVersion();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1getErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (XMLErrorLog *)(arg1)->getErrorLog();
  *(XMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1isEOF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (bool)((XMLInputStream const *)arg1)->isEOF();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1isError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (bool)((XMLInputStream const *)arg1)->isError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1isGood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (bool)((XMLInputStream const *)arg1)->isGood();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLToken result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (arg1)->next();
  *(XMLToken **)&jresult = new XMLToken((const XMLToken &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1peek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (XMLToken *) &(arg1)->peek();
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1skipPastEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLToken *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLInputStream **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  (arg1)->skipPastEnd((XMLToken const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1skipText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  (arg1)->skipText();
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1setErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLErrorLog *arg2 = (XMLErrorLog *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLInputStream **)&jarg1; 
  arg2 = *(XMLErrorLog **)&jarg2; 
  result = (int)(arg1)->setErrorLog(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1getSBMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (SBMLNamespaces *)(arg1)->getSBMLNamespaces();
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1setSBMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLInputStream **)&jarg1; 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  (arg1)->setSBMLNamespaces(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1determineNumberChildren_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (unsigned int)(arg1)->determineNumberChildren((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1determineNumberChildren_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (unsigned int)(arg1)->determineNumberChildren();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLInputStream_1determineNumSpecificChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (unsigned int)(arg1)->determineNumSpecificChildren((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  
  try {
    result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  
  try {
    result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  
  try {
    result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2,arg3,arg4);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  
  try {
    result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2,arg3);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLError_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  try {
    result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLError_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  
  try {
    result = (XMLError *)new XMLError(arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLError_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (XMLError *)new XMLError();
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLError_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = 0 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLError const & reference is null");
    return 0;
  } 
  
  try {
    result = (XMLError *)new XMLError((XMLError const &)*arg1);
  }
  catch (const XMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/sbml/libsbml/XMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLError *arg1 = (XMLError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getErrorId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getErrorId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (std::string *) &((XMLError const *)arg1)->getMessage();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getShortMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (std::string *) &((XMLError const *)arg1)->getShortMessage();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getLine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getColumn();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getSeverity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getSeverity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getSeverityAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (std::string *) &((XMLError const *)arg1)->getSeverityAsString();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getCategory();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getCategoryAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (std::string *) &((XMLError const *)arg1)->getCategoryAsString();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1isInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1isWarning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isWarning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1isError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1isFatal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isFatal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1isInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isInternal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1isSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isSystem();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1isXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isXML();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1setLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setLine(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1setColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setColumn(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getStandardMessage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = XMLError::getStandardMessage(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getPackage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (std::string *) &((XMLError const *)arg1)->getPackage();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLError_1getErrorIdOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getErrorIdOffset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1getNumErrors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  result = (unsigned int)((XMLErrorLog const *)arg1)->getNumErrors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  unsigned int arg2 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (XMLError *)((XMLErrorLog const *)arg1)->getError(arg2);
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1clearLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  (arg1)->clearLog();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLErrorLog_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLErrorLog *)new XMLErrorLog();
  *(XMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1XMLErrorLog_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLErrorLog *arg1 = 0 ;
  XMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLErrorLog const & reference is null");
    return 0;
  } 
  result = (XMLErrorLog *)new XMLErrorLog((XMLErrorLog const &)*arg1);
  *(XMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1XMLErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLErrorLog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  XMLError *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  arg2 = *(XMLError **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLError const & reference is null");
    return ;
  } 
  (arg1)->add((XMLError const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  std::vector< XMLError * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  arg2 = *(std::vector< XMLError * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< XMLError * > const & reference is null");
    return ;
  } 
  (arg1)->add((std::vector< XMLError * > const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  result = ((XMLErrorLog const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1printErrors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  ((XMLErrorLog const *)arg1)->printErrors(*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1printErrors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  ((XMLErrorLog const *)arg1)->printErrors();
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1isSeverityOverridden(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  result = (bool)((XMLErrorLog const *)arg1)->isSeverityOverridden();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1unsetSeverityOverride(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  (arg1)->unsetSeverityOverride();
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1getSeverityOverride(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  XMLErrorSeverityOverride_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  result = (XMLErrorSeverityOverride_t)((XMLErrorLog const *)arg1)->getSeverityOverride();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1setSeverityOverride(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  XMLErrorSeverityOverride_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  arg2 = (XMLErrorSeverityOverride_t)jarg2; 
  (arg1)->setSeverityOverride(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1changeErrorSeverity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  XMLErrorSeverity_t arg2 ;
  XMLErrorSeverity_t arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  arg2 = (XMLErrorSeverity_t)jarg2; 
  arg3 = (XMLErrorSeverity_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->changeErrorSeverity(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLErrorLog_1changeErrorSeverity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  XMLErrorSeverity_t arg2 ;
  XMLErrorSeverity_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  arg2 = (XMLErrorSeverity_t)jarg2; 
  arg3 = (XMLErrorSeverity_t)jarg3; 
  (arg1)->changeErrorSeverity(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBMLError *)((SBMLErrorLog const *)arg1)->getError(arg2);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1getNumFailsWithSeverity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->getNumFailsWithSeverity(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLErrorLog_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLErrorLog *)new SBMLErrorLog();
  *(SBMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLErrorLog_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLErrorLog *arg1 = 0 ;
  SBMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLErrorLog const & reference is null");
    return 0;
  } 
  result = (SBMLErrorLog *)new SBMLErrorLog((SBMLErrorLog const &)*arg1);
  *(SBMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::string *arg5 = 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  (arg1)->logError(arg2,arg3,arg4,(std::string const &)*arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::string *arg5 = 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  (arg1)->logError(arg2,arg3,arg4,(std::string const &)*arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6, jlong jarg7) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::string *arg5 = 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  (arg1)->logError(arg2,arg3,arg4,(std::string const &)*arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::string *arg5 = 0 ;
  unsigned int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (unsigned int)jarg6; 
  (arg1)->logError(arg2,arg3,arg4,(std::string const &)*arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logError_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->logError(arg2,arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logError_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->logError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logError_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->logError(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logError_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->logError(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logError_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  (arg1)->logError();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jlong jarg11) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::string *arg7 = 0 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  unsigned int arg10 ;
  unsigned int arg11 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  arg10 = (unsigned int)jarg10; 
  arg11 = (unsigned int)jarg11; 
  (arg1)->logPackageError((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jlong jarg8, jlong jarg9, jlong jarg10) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::string *arg7 = 0 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  unsigned int arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  arg10 = (unsigned int)jarg10; 
  (arg1)->logPackageError((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jlong jarg8, jlong jarg9) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::string *arg7 = 0 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  (arg1)->logPackageError((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jlong jarg8) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::string *arg7 = 0 ;
  unsigned int arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  arg8 = (unsigned int)jarg8; 
  (arg1)->logPackageError((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jstring jarg7) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::string *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  (arg1)->logPackageError((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  (arg1)->logPackageError((std::string const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->logPackageError((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->logPackageError((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  (arg1)->logPackageError((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->logPackageError((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1logPackageError_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  (arg1)->logPackageError();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  SBMLError *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = *(SBMLError **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLError const & reference is null");
    return ;
  } 
  (arg1)->add((SBMLError const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SBMLErrorLog *arg1 = (SBMLErrorLog *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  std::string *arg9 = 0 ;
  unsigned int arg10 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  arg10 = (unsigned int)jarg10; 
  result = (SBMLError *)new SBMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8,(std::string const &)*arg9,arg10);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jstring jarg9) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  std::string *arg9 = 0 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  result = (SBMLError *)new SBMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8,(std::string const &)*arg9);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  result = (SBMLError *)new SBMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (SBMLError *)new SBMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5,arg6,arg7);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (SBMLError *)new SBMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  result = (SBMLError *)new SBMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (SBMLError *)new SBMLError(arg1,arg2,arg3,(std::string const &)*arg4);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (SBMLError *)new SBMLError(arg1,arg2,arg3);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SBMLError *)new SBMLError(arg1,arg2);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (SBMLError *)new SBMLError(arg1);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_110(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLError *)new SBMLError();
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLError_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLError *arg1 = 0 ;
  SBMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLError **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLError const & reference is null");
    return 0;
  } 
  result = (SBMLError *)new SBMLError((SBMLError const &)*arg1);
  *(SBMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLError *arg1 = (SBMLError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1CVTerm_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  QualifierType_t arg1 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (QualifierType_t)jarg1; 
  result = (CVTerm *)new CVTerm(arg1);
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1CVTerm_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CVTerm *)new CVTerm();
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1CVTerm_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode arg1 ;
  XMLNode const *argp1 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(XMLNode **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XMLNode const");
    return 0;
  }
  arg1 = *argp1; 
  result = (CVTerm *)new CVTerm(arg1);
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1CVTerm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CVTerm *arg1 = (CVTerm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CVTerm **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1CVTerm_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CVTerm *arg1 = 0 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CVTerm const & reference is null");
    return 0;
  } 
  result = (CVTerm *)new CVTerm((CVTerm const &)*arg1);
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  result = (CVTerm *)((CVTerm const *)arg1)->clone();
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1getQualifierType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  QualifierType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  result = (QualifierType_t)(arg1)->getQualifierType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1getModelQualifierType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  ModelQualifierType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  result = (ModelQualifierType_t)(arg1)->getModelQualifierType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1getBiologicalQualifierType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  BiolQualifierType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  result = (BiolQualifierType_t)(arg1)->getBiologicalQualifierType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1getResources_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  result = (XMLAttributes *)(arg1)->getResources();
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1getNumResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  result = (unsigned int)(arg1)->getNumResources();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1getResourceURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->getResourceURI(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1setQualifierType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  QualifierType_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  arg2 = (QualifierType_t)jarg2; 
  result = (int)(arg1)->setQualifierType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1setModelQualifierType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  ModelQualifierType_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  arg2 = (ModelQualifierType_t)jarg2; 
  result = (int)(arg1)->setModelQualifierType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1setBiologicalQualifierType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  BiolQualifierType_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  arg2 = (BiolQualifierType_t)jarg2; 
  result = (int)(arg1)->setBiologicalQualifierType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1setModelQualifierType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setModelQualifierType((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1setBiologicalQualifierType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setBiologicalQualifierType((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1addResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->addResource((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1removeResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->removeResource(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  result = (bool)(arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1hasBeenModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CVTerm *arg1 = (CVTerm *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  result = (bool)(arg1)->hasBeenModified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_CVTerm_1resetModifiedFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CVTerm *arg1 = (CVTerm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CVTerm **)&jarg1; 
  (arg1)->resetModifiedFlags();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  result = (Date *)new Date(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  result = (Date *)new Date(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (Date *)new Date(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (Date *)new Date(arg1,arg2,arg3,arg4,arg5,arg6);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (Date *)new Date(arg1,arg2,arg3,arg4,arg5);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (Date *)new Date(arg1,arg2,arg3,arg4);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (Date *)new Date(arg1,arg2,arg3);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Date *)new Date(arg1,arg2);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (Date *)new Date(arg1);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_19(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Date *)new Date();
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (Date *)new Date((std::string const &)*arg1);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1Date(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Date *arg1 = (Date *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Date **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1Date_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = 0 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Date const & reference is null");
    return 0;
  } 
  result = (Date *)new Date((Date const &)*arg1);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (Date *)((Date const *)arg1)->clone();
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (unsigned int)(arg1)->getYear();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (unsigned int)(arg1)->getMonth();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (unsigned int)(arg1)->getDay();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getHour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (unsigned int)(arg1)->getHour();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getMinute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (unsigned int)(arg1)->getMinute();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (unsigned int)(arg1)->getSecond();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getSignOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (unsigned int)(arg1)->getSignOffset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getHoursOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (unsigned int)(arg1)->getHoursOffset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getMinutesOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (unsigned int)(arg1)->getMinutesOffset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1getDateAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (std::string *) &(arg1)->getDateAsString();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setYear(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setMonth(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setDay(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setHour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setHour(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setMinute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setMinute(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setSecond(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setSignOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setSignOffset(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setHoursOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setHoursOffset(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setMinutesOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setMinutesOffset(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1setDateAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setDateAsString((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1representsValidDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (bool)(arg1)->representsValidDate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1hasBeenModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  result = (bool)(arg1)->hasBeenModified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_Date_1resetModifiedFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Date *arg1 = (Date *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  (arg1)->resetModifiedFlags();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ModelCreator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ModelCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ModelCreator *)new ModelCreator();
  *(ModelCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ModelCreator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode arg1 ;
  XMLNode const *argp1 ;
  ModelCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(XMLNode **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XMLNode const");
    return 0;
  }
  arg1 = *argp1; 
  result = (ModelCreator *)new ModelCreator(arg1);
  *(ModelCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ModelCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ModelCreator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelCreator *arg1 = 0 ;
  ModelCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ModelCreator const & reference is null");
    return 0;
  } 
  result = (ModelCreator *)new ModelCreator((ModelCreator const &)*arg1);
  *(ModelCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  ModelCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (ModelCreator *)((ModelCreator const *)arg1)->clone();
  *(ModelCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1getFamilyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (std::string *) &((ModelCreator const *)arg1)->getFamilyName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1getGivenName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (std::string *) &((ModelCreator const *)arg1)->getGivenName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1getEmail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (std::string *) &((ModelCreator const *)arg1)->getEmail();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1getOrganization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (std::string *) &((ModelCreator const *)arg1)->getOrganization();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1getOrganisation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (std::string *) &((ModelCreator const *)arg1)->getOrganisation();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1isSetFamilyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (bool)(arg1)->isSetFamilyName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1isSetGivenName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (bool)(arg1)->isSetGivenName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1isSetEmail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (bool)(arg1)->isSetEmail();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1isSetOrganization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (bool)(arg1)->isSetOrganization();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1isSetOrganisation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (bool)(arg1)->isSetOrganisation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1setFamilyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setFamilyName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1setGivenName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setGivenName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1setEmail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setEmail((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1setOrganization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setOrganization((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1setOrganisation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setOrganisation((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1unsetFamilyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (int)(arg1)->unsetFamilyName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1unsetGivenName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (int)(arg1)->unsetGivenName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1unsetEmail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (int)(arg1)->unsetEmail();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1unsetOrganization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (int)(arg1)->unsetOrganization();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1unsetOrganisation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (int)(arg1)->unsetOrganisation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (bool)(arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1hasBeenModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  result = (bool)(arg1)->hasBeenModified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelCreator_1resetModifiedFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ModelCreator *arg1 = (ModelCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelCreator **)&jarg1; 
  (arg1)->resetModifiedFlags();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ModelHistory_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ModelHistory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ModelHistory *)new ModelHistory();
  *(ModelHistory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ModelHistory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelHistory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ModelHistory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = 0 ;
  ModelHistory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ModelHistory const & reference is null");
    return 0;
  } 
  result = (ModelHistory *)new ModelHistory((ModelHistory const &)*arg1);
  *(ModelHistory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  ModelHistory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (ModelHistory *)((ModelHistory const *)arg1)->clone();
  *(ModelHistory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1getCreatedDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (Date *)(arg1)->getCreatedDate();
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1getModifiedDate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (Date *)(arg1)->getModifiedDate();
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1isSetCreatedDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (bool)(arg1)->isSetCreatedDate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1isSetModifiedDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (bool)(arg1)->isSetModifiedDate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1setCreatedDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  Date *arg2 = (Date *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ModelHistory **)&jarg1; 
  arg2 = *(Date **)&jarg2; 
  result = (int)(arg1)->setCreatedDate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1setModifiedDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  Date *arg2 = (Date *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ModelHistory **)&jarg1; 
  arg2 = *(Date **)&jarg2; 
  result = (int)(arg1)->setModifiedDate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1addModifiedDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  Date *arg2 = (Date *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ModelHistory **)&jarg1; 
  arg2 = *(Date **)&jarg2; 
  result = (int)(arg1)->addModifiedDate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1getListModifiedDates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  List *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (List *)(arg1)->getListModifiedDates();
  {
    ListWrapper<Date> *listw = (result != 0) ? new ListWrapper<Date>(result) : 0;  
    *( ListWrapper<Date>   **)&jresult = listw;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1getModifiedDate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  unsigned int arg2 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Date *)(arg1)->getModifiedDate(arg2);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1getNumModifiedDates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (unsigned int)(arg1)->getNumModifiedDates();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1addCreator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  ModelCreator *arg2 = (ModelCreator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ModelHistory **)&jarg1; 
  arg2 = *(ModelCreator **)&jarg2; 
  result = (int)(arg1)->addCreator(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1getListCreators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  List *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (List *)(arg1)->getListCreators();
  {
    ListWrapper<ModelCreator> *listw = (result != 0) ? new ListWrapper<ModelCreator>(result) : 0;  
    *( ListWrapper<ModelCreator>   **)&jresult = listw;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1getCreator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  unsigned int arg2 ;
  ModelCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ModelCreator *)(arg1)->getCreator(arg2);
  *(ModelCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1getNumCreators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (unsigned int)(arg1)->getNumCreators();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (bool)(arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1hasBeenModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  result = (bool)(arg1)->hasBeenModified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModelHistory_1resetModifiedFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ModelHistory *arg1 = (ModelHistory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelHistory **)&jarg1; 
  (arg1)->resetModifiedFlags();
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1parseRDFAnnotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  XMLInputStream *arg3 = (XMLInputStream *) 0 ;
  ModelHistory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(XMLInputStream **)&jarg3; 
  result = (ModelHistory *)RDFAnnotationParser::parseRDFAnnotation((XMLNode const *)arg1,(char const *)arg2,arg3);
  *(ModelHistory **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1parseRDFAnnotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  ModelHistory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ModelHistory *)RDFAnnotationParser::parseRDFAnnotation((XMLNode const *)arg1,(char const *)arg2);
  *(ModelHistory **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1parseRDFAnnotation_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  ModelHistory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (ModelHistory *)RDFAnnotationParser::parseRDFAnnotation((XMLNode const *)arg1);
  *(ModelHistory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1createAnnotation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLNode *)RDFAnnotationParser::createAnnotation();
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1createRDFAnnotation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLNode *)RDFAnnotationParser::createRDFAnnotation();
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1createCVTerms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (XMLNode *)RDFAnnotationParser::createCVTerms((SBase const *)arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1parseCVTerms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (XMLNode *)RDFAnnotationParser::parseCVTerms((SBase const *)arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1parseModelHistory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (XMLNode *)RDFAnnotationParser::parseModelHistory((SBase const *)arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1parseOnlyModelHistory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBase *arg1 = (SBase *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBase **)&jarg1; 
  result = (XMLNode *)RDFAnnotationParser::parseOnlyModelHistory((SBase const *)arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1deleteRDFAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (XMLNode *)RDFAnnotationParser::deleteRDFAnnotation((XMLNode const *)arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1deleteRDFHistoryAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (XMLNode *)RDFAnnotationParser::deleteRDFHistoryAnnotation((XMLNode const *)arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1deleteRDFCVTermAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (XMLNode *)RDFAnnotationParser::deleteRDFCVTermAnnotation((XMLNode const *)arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1parseRDFAnnotation_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLNode *arg1 = (XMLNode *) 0 ;
  ListWrapper< CVTerm > *arg2 = (ListWrapper< CVTerm > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = *(ListWrapper< CVTerm > **)&jarg2; 
  RDFAnnotationParser_parseRDFAnnotation__SWIG_3((XMLNode const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1parseRDFAnnotation_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  XMLNode *arg1 = (XMLNode *) 0 ;
  ListWrapper< CVTerm > *arg2 = (ListWrapper< CVTerm > *) 0 ;
  char *arg3 = (char *) 0 ;
  XMLInputStream *arg4 = (XMLInputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = *(ListWrapper< CVTerm > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(XMLInputStream **)&jarg4; 
  RDFAnnotationParser_parseRDFAnnotation__SWIG_4((XMLNode const *)arg1,arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_RDFAnnotationParser_1parseRDFAnnotation_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  XMLNode *arg1 = (XMLNode *) 0 ;
  ListWrapper< CVTerm > *arg2 = (ListWrapper< CVTerm > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = *(ListWrapper< CVTerm > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  RDFAnnotationParser_parseRDFAnnotation__SWIG_4((XMLNode const *)arg1,arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1RDFAnnotationParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RDFAnnotationParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RDFAnnotationParser *)new RDFAnnotationParser();
  *(RDFAnnotationParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1RDFAnnotationParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RDFAnnotationParser *arg1 = (RDFAnnotationParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RDFAnnotationParser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ISBMLExtensionNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISBMLExtensionNamespaces *arg1 = (ISBMLExtensionNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISBMLExtensionNamespaces **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ISBMLExtensionNamespaces_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISBMLExtensionNamespaces *arg1 = (ISBMLExtensionNamespaces *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISBMLExtensionNamespaces **)&jarg1; 
  result = ((ISBMLExtensionNamespaces const *)arg1)->getURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ISBMLExtensionNamespaces_1getPackageVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISBMLExtensionNamespaces *arg1 = (ISBMLExtensionNamespaces *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISBMLExtensionNamespaces **)&jarg1; 
  result = (unsigned int)((ISBMLExtensionNamespaces const *)arg1)->getPackageVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ISBMLExtensionNamespaces_1getPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISBMLExtensionNamespaces *arg1 = (ISBMLExtensionNamespaces *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISBMLExtensionNamespaces **)&jarg1; 
  result = (std::string *) &((ISBMLExtensionNamespaces const *)arg1)->getPackageName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ISBMLExtensionNamespaces_1setPackageVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ISBMLExtensionNamespaces *arg1 = (ISBMLExtensionNamespaces *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISBMLExtensionNamespaces **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setPackageVersion(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBaseExtensionPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  SBaseExtensionPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  result = (SBaseExtensionPoint *)new SBaseExtensionPoint((std::string const &)*arg1,arg2);
  *(SBaseExtensionPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBaseExtensionPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBaseExtensionPoint *arg1 = (SBaseExtensionPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBaseExtensionPoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBaseExtensionPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBaseExtensionPoint *arg1 = 0 ;
  SBaseExtensionPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBaseExtensionPoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBaseExtensionPoint const & reference is null");
    return 0;
  } 
  result = (SBaseExtensionPoint *)new SBaseExtensionPoint((SBaseExtensionPoint const &)*arg1);
  *(SBaseExtensionPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBaseExtensionPoint_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBaseExtensionPoint *arg1 = (SBaseExtensionPoint *) 0 ;
  SBaseExtensionPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBaseExtensionPoint **)&jarg1; 
  result = (SBaseExtensionPoint *)((SBaseExtensionPoint const *)arg1)->clone();
  *(SBaseExtensionPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBaseExtensionPoint_1getPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBaseExtensionPoint *arg1 = (SBaseExtensionPoint *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBaseExtensionPoint **)&jarg1; 
  result = (std::string *) &((SBaseExtensionPoint const *)arg1)->getPackageName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBaseExtensionPoint_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBaseExtensionPoint *arg1 = (SBaseExtensionPoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBaseExtensionPoint **)&jarg1; 
  result = (int)((SBaseExtensionPoint const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBasePlugin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBasePlugin **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getElementNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (std::string *) &((SBasePlugin const *)arg1)->getElementNamespace();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (std::string *) &((SBasePlugin const *)arg1)->getPrefix();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (std::string *) &((SBasePlugin const *)arg1)->getPackageName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  SBasePlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (SBasePlugin *)((SBasePlugin const *)arg1)->clone();
  *(SBasePlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getElementBySId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementBySId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getElementByMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBase *)(arg1)->getElementByMetaId((std::string const &)*arg2);
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1connectToParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  SBase *arg2 = (SBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBasePlugin **)&jarg1; 
  arg2 = *(SBase **)&jarg2; 
  (arg1)->connectToParent(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1stripPackage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->stripPackage((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getSBMLDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  SBMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (SBMLDocument *)(arg1)->getSBMLDocument();
  *(SBMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = ((SBasePlugin const *)arg1)->getURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getParentSBMLObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (SBase *)(arg1)->getParentSBMLObject();
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1setElementNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setElementNamespace((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (unsigned int)((SBasePlugin const *)arg1)->getLevel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (unsigned int)((SBasePlugin const *)arg1)->getVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getPackageVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (unsigned int)((SBasePlugin const *)arg1)->getPackageVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1replaceSIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceSIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1divideAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->divideAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1multiplyAssignmentsToSIdByFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->multiplyAssignmentsToSIdByFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1hasIdentifierBeginningWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->hasIdentifierBeginningWith((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1prependStringToAllIdentifiers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->prependStringToAllIdentifiers((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1transformIdentifiers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  IdentifierTransformer *arg2 = (IdentifierTransformer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBasePlugin **)&jarg1; 
  arg2 = *(IdentifierTransformer **)&jarg2; 
  result = (int)(arg1)->transformIdentifiers(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (unsigned int)((SBasePlugin const *)arg1)->getLine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (unsigned int)((SBasePlugin const *)arg1)->getColumn();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getSBMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (SBMLNamespaces *)((SBasePlugin const *)arg1)->getSBMLNamespaces();
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1logUnknownElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->logUnknownElement((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getListOfAllElements_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  ElementFilter *arg2 = (ElementFilter *) 0 ;
  ListWrapper< SBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBasePlugin **)&jarg1; 
  arg2 = *(ElementFilter **)&jarg2; 
  result = (ListWrapper< SBase > *)SBasePlugin_getListOfAllElements__SWIG_0(arg1,arg2);
  *(ListWrapper< SBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBasePlugin_1getListOfAllElements_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBasePlugin *arg1 = (SBasePlugin *) 0 ;
  ListWrapper< SBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBasePlugin **)&jarg1; 
  result = (ListWrapper< SBase > *)SBasePlugin_getListOfAllElements__SWIG_0(arg1);
  *(ListWrapper< SBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLDocumentPlugin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SBMLNamespaces *arg3 = (SBMLNamespaces *) 0 ;
  SBMLDocumentPlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(SBMLNamespaces **)&jarg3; 
  result = (SBMLDocumentPlugin *)new SBMLDocumentPlugin((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(SBMLDocumentPlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLDocumentPlugin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocumentPlugin *arg1 = 0 ;
  SBMLDocumentPlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocumentPlugin **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBMLDocumentPlugin const & reference is null");
    return 0;
  } 
  result = (SBMLDocumentPlugin *)new SBMLDocumentPlugin((SBMLDocumentPlugin const &)*arg1);
  *(SBMLDocumentPlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLDocumentPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLDocumentPlugin *arg1 = (SBMLDocumentPlugin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLDocumentPlugin **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocumentPlugin_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocumentPlugin *arg1 = (SBMLDocumentPlugin *) 0 ;
  SBMLDocumentPlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocumentPlugin **)&jarg1; 
  result = (SBMLDocumentPlugin *)((SBMLDocumentPlugin const *)arg1)->clone();
  *(SBMLDocumentPlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocumentPlugin_1setRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  SBMLDocumentPlugin *arg1 = (SBMLDocumentPlugin *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocumentPlugin **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setRequired(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocumentPlugin_1getRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBMLDocumentPlugin *arg1 = (SBMLDocumentPlugin *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocumentPlugin **)&jarg1; 
  result = (bool)((SBMLDocumentPlugin const *)arg1)->getRequired();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocumentPlugin_1isSetRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBMLDocumentPlugin *arg1 = (SBMLDocumentPlugin *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocumentPlugin **)&jarg1; 
  result = (bool)((SBMLDocumentPlugin const *)arg1)->isSetRequired();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocumentPlugin_1unsetRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLDocumentPlugin *arg1 = (SBMLDocumentPlugin *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocumentPlugin **)&jarg1; 
  result = (int)(arg1)->unsetRequired();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocumentPlugin_1isCompFlatteningImplemented(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBMLDocumentPlugin *arg1 = (SBMLDocumentPlugin *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocumentPlugin **)&jarg1; 
  result = (bool)((SBMLDocumentPlugin const *)arg1)->isCompFlatteningImplemented();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocumentPlugin_1checkConsistency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLDocumentPlugin *arg1 = (SBMLDocumentPlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLDocumentPlugin **)&jarg1; 
  result = (unsigned int)(arg1)->checkConsistency();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLExtension(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLExtension **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getNumOfSBasePlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  result = (int)((SBMLExtension const *)arg1)->getNumOfSBasePlugins();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getNumOfSupportedPackageURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  result = (unsigned int)((SBMLExtension const *)arg1)->getNumOfSupportedPackageURI();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1isSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((SBMLExtension const *)arg1)->isSupported((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getSupportedPackageURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  unsigned int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (std::string *) &((SBMLExtension const *)arg1)->getSupportedPackageURI(arg2);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  SBMLExtension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  result = (SBMLExtension *)((SBMLExtension const *)arg1)->clone();
  *(SBMLExtension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  result = (std::string *) &((SBMLExtension const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jstring jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (std::string *) &((SBMLExtension const *)arg1)->getURI(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (unsigned int)((SBMLExtension const *)arg1)->getLevel((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (unsigned int)((SBMLExtension const *)arg1)->getVersion((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getPackageVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (unsigned int)((SBMLExtension const *)arg1)->getPackageVersion((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getStringFromTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((SBMLExtension const *)arg1)->getStringFromTypeCode(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getSBMLExtensionNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  std::string *arg2 = 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBMLNamespaces *)((SBMLExtension const *)arg1)->getSBMLExtensionNamespaces((std::string const &)*arg2);
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1setEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  result = (bool)((SBMLExtension const *)arg1)->isEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1removeL2Namespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2; 
  ((SBMLExtension const *)arg1)->removeL2Namespaces(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1addL2Namespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2; 
  ((SBMLExtension const *)arg1)->addL2Namespaces(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1enableL2NamespaceForDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  ((SBMLExtension const *)arg1)->enableL2NamespaceForDocument(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1isInUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  result = (bool)((SBMLExtension const *)arg1)->isInUse(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getErrorTableIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((SBMLExtension const *)arg1)->getErrorTableIndex(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getErrorIdOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  result = (unsigned int)((SBMLExtension const *)arg1)->getErrorIdOffset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getSeverity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)((SBMLExtension const *)arg1)->getSeverity(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((SBMLExtension const *)arg1)->getCategory(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((SBMLExtension const *)arg1)->getMessage(arg2,arg3,(std::string const &)*arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtension_1getShortMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  SBMLExtension *arg1 = (SBMLExtension *) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtension **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((SBMLExtension const *)arg1)->getShortMessage(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1SBMLExtensionException(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  SBMLExtensionException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (SBMLExtensionException *)new SBMLExtensionException((std::string const &)*arg1);
  *(SBMLExtensionException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1SBMLExtensionException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SBMLExtensionException *arg1 = (SBMLExtensionException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SBMLExtensionException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SBMLExtensionRegistry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SBMLExtensionRegistry *) &SBMLExtensionRegistry::getInstance();
  *(SBMLExtensionRegistry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1addExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  SBMLExtension *arg2 = (SBMLExtension *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  arg2 = *(SBMLExtension **)&jarg2; 
  result = (int)(arg1)->addExtension((SBMLExtension const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1getExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  std::string *arg2 = 0 ;
  SBMLExtension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SBMLExtension *)(arg1)->getExtension((std::string const &)*arg2);
  *(SBMLExtension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1removeL2Namespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2; 
  ((SBMLExtensionRegistry const *)arg1)->removeL2Namespaces(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1addL2Namespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2; 
  ((SBMLExtensionRegistry const *)arg1)->addL2Namespaces(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1enableL2NamespaceForDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  ((SBMLExtensionRegistry const *)arg1)->enableL2NamespaceForDocument(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1disableUnusedPackages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  SBMLDocument *arg2 = (SBMLDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  arg2 = *(SBMLDocument **)&jarg2; 
  (arg1)->disableUnusedPackages(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1disablePackage(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  SBMLExtensionRegistry::disablePackage((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1isPackageEnabled(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SBMLExtensionRegistry::isPackageEnabled((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1enablePackage(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  SBMLExtensionRegistry::enablePackage((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1getNumExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  SBaseExtensionPoint *arg2 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  arg2 = *(SBaseExtensionPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SBaseExtensionPoint const & reference is null");
    return 0;
  } 
  result = (unsigned int)(arg1)->getNumExtension((SBaseExtensionPoint const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1setEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setEnabled((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->isEnabled((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1isRegistered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SBMLExtensionRegistry *arg1 = (SBMLExtensionRegistry *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLExtensionRegistry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->isRegistered((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1getNumRegisteredPackages(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)SBMLExtensionRegistry::getNumRegisteredPackages();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExtensionRegistry_1getRegisteredPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  unsigned int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = SBMLExtensionRegistry::getRegisteredPackageName(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsNumber(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)representsNumber(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsFunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  int arg1 ;
  ASTBasePlugin *arg2 = (ASTBasePlugin *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(ASTBasePlugin **)&jarg2; 
  result = (bool)representsFunction(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsFunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)representsFunction(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsUnaryFunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  int arg1 ;
  ASTBasePlugin *arg2 = (ASTBasePlugin *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(ASTBasePlugin **)&jarg2; 
  result = (bool)representsUnaryFunction(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsUnaryFunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)representsUnaryFunction(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsBinaryFunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  int arg1 ;
  ASTBasePlugin *arg2 = (ASTBasePlugin *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(ASTBasePlugin **)&jarg2; 
  result = (bool)representsBinaryFunction(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsBinaryFunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)representsBinaryFunction(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsNaryFunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  int arg1 ;
  ASTBasePlugin *arg2 = (ASTBasePlugin *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(ASTBasePlugin **)&jarg2; 
  result = (bool)representsNaryFunction(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsNaryFunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)representsNaryFunction(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsQualifier_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  int arg1 ;
  ASTBasePlugin *arg2 = (ASTBasePlugin *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(ASTBasePlugin **)&jarg2; 
  result = (bool)representsQualifier(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsQualifier_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)representsQualifier(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_representsFunctionRequiringAtLeastTwoArguments(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)representsFunctionRequiringAtLeastTwoArguments(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_getCoreTypeFromName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)getCoreTypeFromName((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_getNameFromCoreType(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)getNameFromCoreType(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_isCoreTopLevelMathMLFunctionNodeTag(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)isCoreTopLevelMathMLFunctionNodeTag((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_isCoreTopLevelMathMLNumberNodeTag(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)isCoreTopLevelMathMLNumberNodeTag((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ASTBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ASTBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1deepCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  ASTBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (ASTBase *)((ASTBase const *)arg1)->deepCopy();
  *(ASTBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1loadASTPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  (arg1)->loadASTPlugins((SBMLNamespaces const *)arg2);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  ASTNodeType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (ASTNodeType_t)((ASTBase const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getExtendedType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (int)((ASTBase const *)arg1)->getExtendedType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isSetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)(arg1)->isSetType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1setType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  ASTNodeType_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = (ASTNodeType_t)jarg2; 
  result = (int)(arg1)->setType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isAvogadro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isAvogadro();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isBoolean();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isBinaryFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isBinaryFunction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isExponential(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isExponential();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isCiNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isCiNumber();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isConstantNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isConstantNumber();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isCSymbolFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isCSymbolFunction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isCSymbolNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isCSymbolNumber();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isFunction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isInteger();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isLambda(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isLambda();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isLogical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isLogical();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isNaryFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isNaryFunction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isNumber();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isOperator();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isPiecewise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isPiecewise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isQualifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isQualifier();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isRational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isRational();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isReal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isReal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isRelational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isRelational();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isSemantics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isSemantics();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isUnaryFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isUnaryFunction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isUnknown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isUnknown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isUserFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isUserFunction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1representsBvar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->representsBvar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1setIsBvar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setIsBvar(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isNumberNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isNumberNode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isFunctionNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isFunctionNode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isTopLevelMathMLFunctionNodeTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((ASTBase const *)arg1)->isTopLevelMathMLFunctionNodeTag((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isTopLevelMathMLNumberNodeTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((ASTBase const *)arg1)->isTopLevelMathMLNumberNodeTag((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  ((ASTBase const *)arg1)->write(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  XMLInputStream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(XMLInputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->read(*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  XMLInputStream *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(XMLInputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1addExpectedAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  ExpectedAttributes *arg2 = 0 ;
  XMLInputStream *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(ExpectedAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ExpectedAttributes & reference is null");
    return ;
  } 
  arg3 = *(XMLInputStream **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return ;
  } 
  (arg1)->addExpectedAttributes(*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1readAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  XMLAttributes *arg2 = 0 ;
  ExpectedAttributes *arg3 = 0 ;
  XMLInputStream *arg4 = 0 ;
  XMLToken *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(ExpectedAttributes **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ExpectedAttributes const & reference is null");
    return 0;
  } 
  arg4 = *(XMLInputStream **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  arg5 = *(XMLToken **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->readAttributes((XMLAttributes const &)*arg2,(ExpectedAttributes const &)*arg3,*arg4,(XMLToken const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1logError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jstring jarg5) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  XMLInputStream *arg2 = 0 ;
  XMLToken *arg3 = 0 ;
  SBMLErrorCode_t arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(XMLInputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return ;
  } 
  arg3 = *(XMLToken **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  arg4 = (SBMLErrorCode_t)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->logError(*arg2,(XMLToken const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1logError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  XMLInputStream *arg2 = 0 ;
  XMLToken *arg3 = 0 ;
  SBMLErrorCode_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(XMLInputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return ;
  } 
  arg3 = *(XMLToken **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  arg4 = (SBMLErrorCode_t)jarg4; 
  (arg1)->logError(*arg2,(XMLToken const &)*arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isChild();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1setIsChildFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsChildFlag(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getClassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = ((ASTBase const *)arg1)->getClass();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = ((ASTBase const *)arg1)->getId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = ((ASTBase const *)arg1)->getStyle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getParentSBMLObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (SBase *)((ASTBase const *)arg1)->getParentSBMLObject();
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isSetClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isSetClass();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isSetStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isSetStyle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isSetParentSBMLObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isSetParentSBMLObject();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1setClassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setClass(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1setStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setStyle(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1unsetClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (int)(arg1)->unsetClass();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1unsetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (int)(arg1)->unsetId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1unsetStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (int)(arg1)->unsetStyle();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1unsetParentSBMLObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (int)(arg1)->unsetParentSBMLObject();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  ASTBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (ASTBase *)((ASTBase const *)arg1)->getFunction();
  *(ASTBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1addPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  ASTBasePlugin *arg2 = (ASTBasePlugin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(ASTBasePlugin **)&jarg2; 
  (arg1)->addPlugin(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getPlugin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string *arg2 = 0 ;
  ASTBasePlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ASTBasePlugin *)(arg1)->getPlugin((std::string const &)*arg2);
  *(ASTBasePlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getPlugin_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  unsigned int arg2 ;
  ASTBasePlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ASTBasePlugin *)(arg1)->getPlugin(arg2);
  *(ASTBasePlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getNumPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (unsigned int)((ASTBase const *)arg1)->getNumPlugins();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getTypeFromName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((ASTBase const *)arg1)->getTypeFromName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getNameFromType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ASTBase const *)arg1)->getNameFromType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isSetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isSetUserData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1unsetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (int)(arg1)->unsetUserData();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1writeNodeOfType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  ((ASTBase const *)arg1)->writeNodeOfType(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1writeNodeOfType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ASTBase *arg1 = (ASTBase *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  ((ASTBase const *)arg1)->writeNodeOfType(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isWellFormedNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isWellFormedNode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1hasCorrectNumberArguments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->hasCorrectNumberArguments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (int)((ASTBase const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (std::string *) &((ASTBase const *)arg1)->getPackageName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1setPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setPackageName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1hasCnUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->hasCnUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getUnitsPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (std::string *) &((ASTBase const *)arg1)->getUnitsPrefix();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1isPackageInfixFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->isPackageInfixFunction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1hasPackageOnlyInfixSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (bool)((ASTBase const *)arg1)->hasPackageOnlyInfixSyntax();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1getL3PackageInfixPrecedence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBase **)&jarg1; 
  result = (int)((ASTBase const *)arg1)->getL3PackageInfixPrecedence();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBase_1hasUnambiguousPackageInfixGrammar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ASTBase *arg1 = (ASTBase *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBase **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (bool)((ASTBase const *)arg1)->hasUnambiguousPackageInfixGrammar((ASTNode const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ASTNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ASTNode *)new ASTNode(arg1);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ASTNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ASTNode *)new ASTNode();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ASTNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  int arg2 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ASTNode *)new ASTNode(arg1,arg2);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ASTNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SBMLNamespaces *arg1 = (SBMLNamespaces *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SBMLNamespaces **)&jarg1; 
  result = (ASTNode *)new ASTNode(arg1);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1ASTNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ASTNode const & reference is null");
    return 0;
  } 
  result = (ASTNode *)new ASTNode((ASTNode const &)*arg1);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ASTNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ASTNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1freeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)(arg1)->freeName();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1canonicalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)(arg1)->canonicalize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1addChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->addChild(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1prependChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->prependChild(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1removeChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->removeChild(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1replaceChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  unsigned int arg2 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(ASTNode **)&jarg3; 
  result = (int)(arg1)->replaceChild(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1insertChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  unsigned int arg2 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(ASTNode **)&jarg3; 
  result = (int)(arg1)->insertChild(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1deepCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (ASTNode *)((ASTNode const *)arg1)->deepCopy();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  unsigned int arg2 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ASTNode *)((ASTNode const *)arg1)->getChild(arg2);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getLeftChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (ASTNode *)((ASTNode const *)arg1)->getLeftChild();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getRightChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (ASTNode *)((ASTNode const *)arg1)->getRightChild();
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getNumChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (unsigned int)((ASTNode const *)arg1)->getNumChildren();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1addSemanticsAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  XMLNode *arg2 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2; 
  result = (int)(arg1)->addSemanticsAnnotation(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getNumSemanticsAnnotations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (unsigned int)((ASTNode const *)arg1)->getNumSemanticsAnnotations();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getSemanticsAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  unsigned int arg2 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (XMLNode *)((ASTNode const *)arg1)->getSemanticsAnnotation(arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getCharacter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (char)((ASTNode const *)arg1)->getCharacter();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = ((ASTNode const *)arg1)->getId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getClassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = ((ASTNode const *)arg1)->getClass();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = ((ASTNode const *)arg1)->getStyle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (long)((ASTNode const *)arg1)->getInteger();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (char *)((ASTNode const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getOperatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (char *)((ASTNode const *)arg1)->getOperatorName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getNumerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (long)((ASTNode const *)arg1)->getNumerator();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getDenominator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (long)((ASTNode const *)arg1)->getDenominator();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getReal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (double)((ASTNode const *)arg1)->getReal();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getMantissa(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (double)((ASTNode const *)arg1)->getMantissa();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getExponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (long)((ASTNode const *)arg1)->getExponent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getPrecedence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)((ASTNode const *)arg1)->getPrecedence();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  ASTNodeType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (ASTNodeType_t)((ASTNode const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getExtendedType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)((ASTNode const *)arg1)->getExtendedType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = ((ASTNode const *)arg1)->getUnits();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isAvogadro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isAvogadro();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isBoolean();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1returnsBoolean_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  Model *arg2 = (Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(Model **)&jarg2; 
  result = (bool)((ASTNode const *)arg1)->returnsBoolean((Model const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1returnsBoolean_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->returnsBoolean();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isFunction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isInfinity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isInfinity();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isInteger();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isLambda(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isLambda();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isLog10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isLog10();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isLogical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isLogical();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isNegInfinity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isNegInfinity();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isNumber();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isOperator();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isPiecewise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isPiecewise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isQualifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isQualifier();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isRational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isRational();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isReal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isReal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isRelational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isRelational();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isSemantics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isSemantics();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isSqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isSqrt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isUMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isUMinus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isUPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isUPlus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1hasTypeAndNumChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)((ASTNode const *)arg1)->hasTypeAndNumChildren(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isUnknown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isUnknown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isSetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isSetId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isSetClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isSetClass();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isSetStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isSetStyle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isSetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isSetUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1hasUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->hasUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setCharacter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  char arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (char)jarg2; 
  result = (int)(arg1)->setCharacter(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setClassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setClass((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setStyle((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->setName((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  long arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (int)(arg1)->setValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  long arg2 ;
  long arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (int)(arg1)->setValue(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->setValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  double arg2 ;
  long arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (long)jarg3; 
  result = (int)(arg1)->setValue(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setUnits((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1swapChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  result = (int)(arg1)->swapChildren(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1renameSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1renameUnitSIdRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameUnitSIdRefs((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1replaceIDWithFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ASTNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceIDWithFunction((std::string const &)*arg2,(ASTNode const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setIsChildFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsChildFlag(arg2);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1unsetUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)(arg1)->unsetUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1unsetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)(arg1)->unsetId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1unsetClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)(arg1)->unsetClass();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1unsetStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)(arg1)->unsetStyle();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setDefinitionURL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  XMLAttributes arg2 ;
  XMLAttributes *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  argp2 = *(XMLAttributes **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XMLAttributes");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->setDefinitionURL(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1setDefinitionURL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setDefinitionURL((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getDefinitionURL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (XMLAttributes *)((ASTNode const *)arg1)->getDefinitionURL();
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1replaceArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *arg2 = 0 ;
  ASTNode *arg3 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ASTNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ASTNode **)&jarg3; 
  (arg1)->replaceArgument((std::string const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getParentSBMLObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  SBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (SBase *)((ASTNode const *)arg1)->getParentSBMLObject();
  *(SBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1unsetParentSBMLObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)(arg1)->unsetParentSBMLObject();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isSetParentSBMLObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isSetParentSBMLObject();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1reduceToBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  (arg1)->reduceToBinary();
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1unsetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)(arg1)->unsetUserData();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isSetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isSetUserData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1isWellFormedASTNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->isWellFormedASTNode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1hasCorrectNumberArguments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->hasCorrectNumberArguments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getDefinitionURLString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (std::string *) &((ASTNode const *)arg1)->getDefinitionURLString();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1representsBvar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (bool)((ASTNode const *)arg1)->representsBvar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  ((ASTNode const *)arg1)->write(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  XMLInputStream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(XMLInputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->read(*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  XMLInputStream *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(XMLInputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1writeNodeOfType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  ((ASTNode const *)arg1)->writeNodeOfType(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1writeNodeOfType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ASTNode *arg1 = (ASTNode *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  ((ASTNode const *)arg1)->writeNodeOfType(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getNumBvars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (unsigned int)((ASTNode const *)arg1)->getNumBvars();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)((ASTNode const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (std::string *) &((ASTNode const *)arg1)->getPackageName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1getListOfNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  ListWrapper< ASTNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode **)&jarg1; 
  result = (ListWrapper< ASTNode > *)ASTNode_getListOfNodes(arg1);
  *(ListWrapper< ASTNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_readMathMLFromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ASTNode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ASTNode_t *)readMathMLFromString((char const *)arg1);
  *(ASTNode_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_readMathMLFromStringWithNamespaces(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  XMLNamespaces_t *arg2 = (XMLNamespaces_t *) 0 ;
  ASTNode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(XMLNamespaces_t **)&jarg2; 
  result = (ASTNode_t *)readMathMLFromStringWithNamespaces((char const *)arg1,arg2);
  *(ASTNode_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_writeMathMLToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode_t *arg1 = (ASTNode_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode_t **)&jarg1; 
  result = (char *)writeMathMLToString((ASTNode const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_parseFormula(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ASTNode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ASTNode_t *)SBML_parseFormula((char const *)arg1);
  *(ASTNode_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_formulaToL3String(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode_t *arg1 = (ASTNode_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode_t **)&jarg1; 
  result = (char *)SBML_formulaToL3String((ASTNode const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_formulaToL3StringWithSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  ASTNode_t *arg1 = (ASTNode_t *) 0 ;
  L3ParserSettings_t *arg2 = (L3ParserSettings_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTNode_t **)&jarg1; 
  arg2 = *(L3ParserSettings_t **)&jarg2; 
  result = (char *)SBML_formulaToL3StringWithSettings((ASTNode const *)arg1,(L3ParserSettings const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_formulaToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTNode_t *arg1 = (ASTNode_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTNode_t **)&jarg1; 
  result = (char *)SBML_formulaToString((ASTNode const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_parseL3Formula(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ASTNode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ASTNode_t *)SBML_parseL3Formula((char const *)arg1);
  *(ASTNode_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_parseL3FormulaWithModel(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Model_t *arg2 = (Model_t *) 0 ;
  ASTNode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(Model_t **)&jarg2; 
  result = (ASTNode_t *)SBML_parseL3FormulaWithModel((char const *)arg1,(Model const *)arg2);
  *(ASTNode_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_parseL3FormulaWithSettings(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  L3ParserSettings_t *arg2 = (L3ParserSettings_t *) 0 ;
  ASTNode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(L3ParserSettings_t **)&jarg2; 
  result = (ASTNode_t *)SBML_parseL3FormulaWithSettings((char const *)arg1,(L3ParserSettings const *)arg2);
  *(ASTNode_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_getDefaultL3ParserSettings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  L3ParserSettings_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (L3ParserSettings_t *)SBML_getDefaultL3ParserSettings();
  *(L3ParserSettings_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_getLastParseL3Error(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)SBML_getLastParseL3Error();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1L3ParserSettings_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  L3ParserSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (L3ParserSettings *)new L3ParserSettings();
  *(L3ParserSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1L3ParserSettings_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ParseLogType_t arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  SBMLNamespaces *arg7 = (SBMLNamespaces *) 0 ;
  L3ParserSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (ParseLogType_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(SBMLNamespaces **)&jarg7; 
  result = (L3ParserSettings *)new L3ParserSettings(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(L3ParserSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1L3ParserSettings_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ParseLogType_t arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  L3ParserSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (ParseLogType_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (L3ParserSettings *)new L3ParserSettings(arg1,arg2,arg3,arg4,arg5,arg6);
  *(L3ParserSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_new_1L3ParserSettings_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  Model *arg1 = (Model *) 0 ;
  ParseLogType_t arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  L3ParserSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Model **)&jarg1; 
  arg2 = (ParseLogType_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (L3ParserSettings *)new L3ParserSettings(arg1,arg2,arg3,arg4,arg5);
  *(L3ParserSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1L3ParserSettings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(L3ParserSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  Model *arg2 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  arg2 = *(Model **)&jarg2; 
  (arg1)->setModel((Model const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  result = (Model *)((L3ParserSettings const *)arg1)->getModel();
  *(Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1unsetModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  (arg1)->unsetModel();
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1setParseLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  ParseLogType_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  arg2 = (ParseLogType_t)jarg2; 
  (arg1)->setParseLog(arg2);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1getParseLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  ParseLogType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  result = (ParseLogType_t)((L3ParserSettings const *)arg1)->getParseLog();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1setParseCollapseMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setParseCollapseMinus(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1getParseCollapseMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  result = (bool)((L3ParserSettings const *)arg1)->getParseCollapseMinus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1setParseUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setParseUnits(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1getParseUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  result = (bool)((L3ParserSettings const *)arg1)->getParseUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1setParseAvogadroCsymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setParseAvogadroCsymbol(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1getParseAvogadroCsymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  result = (bool)((L3ParserSettings const *)arg1)->getParseAvogadroCsymbol();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1setComparisonCaseSensitivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setComparisonCaseSensitivity(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1getComparisonCaseSensitivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  result = (bool)((L3ParserSettings const *)arg1)->getComparisonCaseSensitivity();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1setPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  SBMLNamespaces *arg2 = (SBMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  arg2 = *(SBMLNamespaces **)&jarg2; 
  (arg1)->setPlugins((SBMLNamespaces const *)arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_L3ParserSettings_1visitPackageInfixSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  L3ParserSettings *arg1 = (L3ParserSettings *) 0 ;
  ASTNode_t *arg2 = (ASTNode_t *) 0 ;
  ASTNode_t *arg3 = (ASTNode_t *) 0 ;
  StringBuffer_t *arg4 = (StringBuffer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(L3ParserSettings **)&jarg1; 
  arg2 = *(ASTNode_t **)&jarg2; 
  arg3 = *(ASTNode_t **)&jarg3; 
  arg4 = *(StringBuffer_t **)&jarg4; 
  ((L3ParserSettings const *)arg1)->visitPackageInfixSyntax((ASTNode_t const *)arg2,(ASTNode_t const *)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_delete_1ASTBasePlugin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  ASTBasePlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (ASTBasePlugin *)((ASTBasePlugin const *)arg1)->clone();
  *(ASTBasePlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getElementNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (std::string *) &((ASTBasePlugin const *)arg1)->getElementNamespace();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (std::string *) &((ASTBasePlugin const *)arg1)->getPrefix();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (std::string *) &((ASTBasePlugin const *)arg1)->getPackageName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1setSBMLExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  SBMLExtension *arg2 = (SBMLExtension *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(SBMLExtension **)&jarg2; 
  result = (int)(arg1)->setSBMLExtension((SBMLExtension const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1setPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setPrefix((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1connectToParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  ASTBase *arg2 = (ASTBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(ASTBase **)&jarg2; 
  (arg1)->connectToParent(arg2);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1enablePackageInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->enablePackageInternal((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1stripPackage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->stripPackage((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = ((ASTBasePlugin const *)arg1)->getURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getParentASTObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  ASTBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (ASTBase *)(arg1)->getParentASTObject();
  *(ASTBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1setElementNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setElementNamespace((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (unsigned int)((ASTBasePlugin const *)arg1)->getLevel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (unsigned int)((ASTBasePlugin const *)arg1)->getVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getPackageVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (unsigned int)((ASTBasePlugin const *)arg1)->getPackageVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getSBMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  SBMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (SBMLNamespaces *)((ASTBasePlugin const *)arg1)->getSBMLNamespaces();
  *(SBMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isSetMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (bool)((ASTBasePlugin const *)arg1)->isSetMath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  ASTBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (ASTBase *)((ASTBasePlugin const *)arg1)->getMath();
  *(ASTBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1createMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->createMath(arg2);
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1addChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  ASTBase *arg2 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(ASTBase **)&jarg2; 
  result = (int)(arg1)->addChild(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  unsigned int arg2 ;
  ASTBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ASTBase *)((ASTBasePlugin const *)arg1)->getChild(arg2);
  *(ASTBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getNumChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  result = (unsigned int)((ASTBasePlugin const *)arg1)->getNumChildren();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1insertChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  unsigned int arg2 ;
  ASTBase *arg3 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(ASTBase **)&jarg3; 
  result = (int)(arg1)->insertChild(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1prependChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  ASTBase *arg2 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(ASTBase **)&jarg2; 
  result = (int)(arg1)->prependChild(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1removeChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->removeChild(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1replaceChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  unsigned int arg2 ;
  ASTBase *arg3 = (ASTBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(ASTBase **)&jarg3; 
  result = (int)(arg1)->replaceChild(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1swapChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  ASTFunction *arg2 = (ASTFunction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(ASTFunction **)&jarg2; 
  result = (int)(arg1)->swapChildren(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  XMLInputStream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XMLToken *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(XMLInputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(XMLToken **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2,(std::string const &)*arg3,(XMLToken const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1addExpectedAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  ExpectedAttributes *arg2 = 0 ;
  XMLInputStream *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(ExpectedAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ExpectedAttributes & reference is null");
    return ;
  } 
  arg3 = *(XMLInputStream **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return ;
  } 
  arg4 = (int)jarg4; 
  (arg1)->addExpectedAttributes(*arg2,*arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1readAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jint jarg6) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  XMLAttributes *arg2 = 0 ;
  ExpectedAttributes *arg3 = 0 ;
  XMLInputStream *arg4 = 0 ;
  XMLToken *arg5 = 0 ;
  int arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(ExpectedAttributes **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ExpectedAttributes const & reference is null");
    return 0;
  } 
  arg4 = *(XMLInputStream **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  arg5 = *(XMLToken **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return 0;
  } 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->readAttributes((XMLAttributes const &)*arg2,(ExpectedAttributes const &)*arg3,*arg4,(XMLToken const &)*arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1writeAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  ((ASTBasePlugin const *)arg1)->writeAttributes(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1writeXMLNS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  ((ASTBasePlugin const *)arg1)->writeXMLNS(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isNumberNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isNumberNode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isFunctionNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isFunctionNode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isLogical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isLogical(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isConstantNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isConstantNumber(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isCSymbolFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isCSymbolFunction(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isCSymbolNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isCSymbolNumber(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isName(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isNumber(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isOperator(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isRelational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isRelational(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1representsQualifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->representsQualifier(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isFunction(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1representsUnaryFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->representsUnaryFunction(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1representsBinaryFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->representsBinaryFunction(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1representsNaryFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->representsNaryFunction(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1hasCorrectNumberArguments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->hasCorrectNumberArguments(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isWellFormedNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ASTBasePlugin const *)arg1)->isWellFormedNode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isTopLevelMathMLFunctionNodeTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((ASTBasePlugin const *)arg1)->isTopLevelMathMLFunctionNodeTag((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1isTopLevelMathMLNumberNodeTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((ASTBasePlugin const *)arg1)->isTopLevelMathMLNumberNodeTag((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getTypeFromName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((ASTBasePlugin const *)arg1)->getTypeFromName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTBasePlugin_1getNameFromType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ASTBasePlugin *arg1 = (ASTBasePlugin *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASTBasePlugin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ASTBasePlugin const *)arg1)->getNameFromType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_OFStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OStream **)&baseptr = *(OFStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_OStringStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OStream **)&baseptr = *(OStringStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOf_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(ListOf **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Model_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Model **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocument_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(SBMLDocument **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_FunctionDefinition_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(FunctionDefinition **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfFunctionDefinitions_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfFunctionDefinitions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Unit_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Unit **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnits_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfUnits **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_UnitDefinition_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(UnitDefinition **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfUnitDefinitions_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfUnitDefinitions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_CompartmentType_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(CompartmentType **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartmentTypes_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfCompartmentTypes **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesType_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(SpeciesType **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesTypes_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfSpeciesTypes **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Compartment_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Compartment **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfCompartments_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfCompartments **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Species_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Species **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpecies_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfSpecies **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Parameter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Parameter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfParameters_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfParameters **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_LocalParameter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Parameter **)&baseptr = *(LocalParameter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfLocalParameters_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOfParameters **)&baseptr = *(ListOfLocalParameters **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_InitialAssignment_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(InitialAssignment **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfInitialAssignments_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfInitialAssignments **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Rule_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Rule **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfRules_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfRules **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_AlgebraicRule_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Rule **)&baseptr = *(AlgebraicRule **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_AssignmentRule_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Rule **)&baseptr = *(AssignmentRule **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_RateRule_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Rule **)&baseptr = *(RateRule **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Constraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Constraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfConstraints_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfConstraints **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Reaction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Reaction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfReactions_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfReactions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_KineticLaw_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(KineticLaw **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SimpleSpeciesReference_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(SimpleSpeciesReference **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SpeciesReference_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SimpleSpeciesReference **)&baseptr = *(SpeciesReference **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfSpeciesReferences_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfSpeciesReferences **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ModifierSpeciesReference_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SimpleSpeciesReference **)&baseptr = *(ModifierSpeciesReference **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Event_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Event **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEvents_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfEvents **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_EventAssignment_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(EventAssignment **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ListOfEventAssignments_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ListOf **)&baseptr = *(ListOfEventAssignments **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Trigger_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Trigger **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Delay_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Delay **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_Priority_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(Priority **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_StoichiometryMath_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBase **)&baseptr = *(StoichiometryMath **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLFunctionDefinitionConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLFunctionDefinitionConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLIdConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLIdConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInferUnitsConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLInferUnitsConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLInitialAssignmentConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLInitialAssignmentConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLevelVersionConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLLevelVersionConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLLocalParameterConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLLocalParameterConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLReactionConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLReactionConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLRuleConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLRuleConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLStripPackageConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLStripPackageConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLUnitsConverter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLConverter **)&baseptr = *(SBMLUnitsConverter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLExternalValidator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLValidator **)&baseptr = *(SBMLExternalValidator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_XMLNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XMLToken **)&baseptr = *(XMLNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLErrorLog_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XMLErrorLog **)&baseptr = *(SBMLErrorLog **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLError_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XMLError **)&baseptr = *(SBMLError **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ISBMLExtensionNamespaces_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBMLNamespaces **)&baseptr = *(ISBMLExtensionNamespaces **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_SBMLDocumentPlugin_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SBasePlugin **)&baseptr = *(SBMLDocumentPlugin **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sbml_libsbml_libsbmlJNI_ASTNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ASTBase **)&baseptr = *(ASTNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_org_sbml_libsbml_libsbmlJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[18] = {
    {
      "SwigDirector_IdentifierTransformer_transform", "(Lorg/sbml/libsbml/IdentifierTransformer;J)I" 
    },
    {
      "SwigDirector_ElementFilter_filter", "(Lorg/sbml/libsbml/ElementFilter;J)Z" 
    },
    {
      "SwigDirector_SBMLConverter_cloneObject", "(Lorg/sbml/libsbml/SBMLConverter;)J" 
    },
    {
      "SwigDirector_SBMLConverter_getDocument__SWIG_0", "(Lorg/sbml/libsbml/SBMLConverter;)J" 
    },
    {
      "SwigDirector_SBMLConverter_getDocument__SWIG_1", "(Lorg/sbml/libsbml/SBMLConverter;)J" 
    },
    {
      "SwigDirector_SBMLConverter_getDefaultProperties", "(Lorg/sbml/libsbml/SBMLConverter;)J" 
    },
    {
      "SwigDirector_SBMLConverter_getTargetNamespaces", "(Lorg/sbml/libsbml/SBMLConverter;)J" 
    },
    {
      "SwigDirector_SBMLConverter_matchesProperties", "(Lorg/sbml/libsbml/SBMLConverter;J)Z" 
    },
    {
      "SwigDirector_SBMLConverter_setDocument", "(Lorg/sbml/libsbml/SBMLConverter;J)I" 
    },
    {
      "SwigDirector_SBMLConverter_setProperties", "(Lorg/sbml/libsbml/SBMLConverter;J)I" 
    },
    {
      "SwigDirector_SBMLConverter_getProperties", "(Lorg/sbml/libsbml/SBMLConverter;)J" 
    },
    {
      "SwigDirector_SBMLConverter_convert", "(Lorg/sbml/libsbml/SBMLConverter;)I" 
    },
    {
      "SwigDirector_SBMLValidator_cloneObject", "(Lorg/sbml/libsbml/SBMLValidator;)J" 
    },
    {
      "SwigDirector_SBMLValidator_getDocument__SWIG_0", "(Lorg/sbml/libsbml/SBMLValidator;)J" 
    },
    {
      "SwigDirector_SBMLValidator_getDocument__SWIG_1", "(Lorg/sbml/libsbml/SBMLValidator;)J" 
    },
    {
      "SwigDirector_SBMLValidator_setDocument", "(Lorg/sbml/libsbml/SBMLValidator;J)I" 
    },
    {
      "SwigDirector_SBMLValidator_validate__SWIG_0", "(Lorg/sbml/libsbml/SBMLValidator;)J" 
    },
    {
      "SwigDirector_SBMLValidator_clearFailures", "(Lorg/sbml/libsbml/SBMLValidator;)V" 
    }
  };
  Swig::jclass_libsbmlJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_libsbmlJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

