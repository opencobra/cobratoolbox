/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace libsbmlcs {

using System;
using System.Runtime.InteropServices;

public class ASTNodeList : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ASTNodeList(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ASTNodeList obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ASTNodeList() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libsbmlPINVOKE.delete_ASTNodeList(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public ASTNodeList() : this(libsbmlPINVOKE.new_ASTNodeList(), true) {
  }

  public void add(ASTNode item) {
    libsbmlPINVOKE.ASTNodeList_add(swigCPtr, ASTNode.getCPtr(item));
  }

  public ASTNode get(uint n) {
    IntPtr cPtr = libsbmlPINVOKE.ASTNodeList_get(swigCPtr, n);
    ASTNode ret = (cPtr == IntPtr.Zero) ? null : new ASTNode(cPtr, false);
    return ret;
  }

  public void prepend(ASTNode item) {
    libsbmlPINVOKE.ASTNodeList_prepend(swigCPtr, ASTNode.getCPtr(item));
  }

  public ASTNode remove(uint n) {
    IntPtr cPtr = libsbmlPINVOKE.ASTNodeList_remove(swigCPtr, n);
    ASTNode ret = (cPtr == IntPtr.Zero) ? null : new ASTNode(cPtr, false);
    return ret;
  }

  public uint getSize() {
    uint ret = libsbmlPINVOKE.ASTNodeList_getSize(swigCPtr);
    return ret;
  }

}

}
