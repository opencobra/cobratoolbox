/** @page libsbml-reading-files Reading and writing SBML content

@tableofcontents

This section summarizes how to read and write SBML content using the
facilities provided by libSBML.  This is only a basic orientation to these
essential facilities of libSBML, and is far from exhaustive in its coverage.
Readers are directed to the rest of this manual for more details about using
libSBML's many features and facilities.  Please use the navigation bar near
the top of the page and the table of contents in the left-hand column for
navigating to other parts of this manual.


@section rf-started Getting started: the 1-minute introduction

LibSBML provides the class SBMLDocument as a top-level container for storing
SBML content and data associated with it (such as warnings and error
messages).  Here is a simple example to start this discussion:
@code{.cpp}
#include <iostream>
#include <sbml/SBMLTypes.h>

using namespace std;

int
main (int argc, char* argv[])
{
  SBMLDocument* document = readSBML(argv[1]);

  unsigned int errors = document->getNumErrors();

  cout << endl;
  cout << "  filename: " << argv[1] << endl;
  cout << "  error(s): " << errors  << endl;
  cout << endl;

  if (errors > 0) document->printErrors(cerr);

  return errors;
}
@endcode
The code above illustrates probably the simplest possible use of libSBML:
reading a model and printing any errors or warnings encountered.  The code
begins with the inclusion of a single SBML header file, SBMLTypes.h, which
serves to include most of the other useful libSBML individual header files.
Next, in the body of the main function, the line
@code{.cpp}
SBMLDocument* document = readSBML(argv[1]);
@endcode
reads in a file and returns a pointer to an SBMLDocument object.  A
subsequent call to the method
@link @if conly SBMLDocument_getNumErrors() @else
SBMLDocument::getNumErrors() @endif@~ getNumErrors() @endlink
on that object returns the number of errors
encountered (if any), and a call to
@link @if conly SBMLDocument_printErrors() @else
SBMLDocument::printErrors() @endif@~ printErrors() @endlink
method prints the errors (if any) to the C++ standard
error output stream.


@section rf-reading Reading SBML

SBML may be read from a file or an in-memory character string into an
SBMLDocument object.  LibSBML defines two basic, convenient, global functions
(not methods on a specific object class, but global functions in the classic
C programming sense) for reading SBML:

@li <code>SBMLDocument* readSBMLFromFile(const char* filename)</code>.  This
function takes a file name, attempts to read an SBML document from the
file, and returns a pointer to an SBMLDocument object if successful.
@li <code>SBMLDocument* readSBMLFromString(const char* xml)</code>.  This
function takes a string containing XML content, attempts to read an SBML
document from the string, and returns a pointer to an SBMLDocument object if
successful.

The model may be in any SBML Level and Version combination.
LibSBML implements an unified object model for SBML that encompasses 
all SBML Levels, so applications generally do not need to
worry about differences in syntax between these definitions of SBML when
reading and writing models.  (However, applications still need to be
concerned about the @em constructs used and how they are interpreted, since
there are substantial differences between SBML Level&nbsp;1,
Level&nbsp;2, and Level&nbsp;3!)


@section rf-sbmldocument The SBMLDocument container

As might be deduced from the examples so far, an SBMLDocument object in
libSBML represents a whole SBML model and its associated data.
SBMLDocument corresponds roughly to the class <i>SBML</i> (respectively,
<i>Sbml</i>) defined in the specification for SBML Level&nbsp;3
(respectively, Level&nbsp;2), but it does not have a direct correspondence
in SBML Level&nbsp;1.  (Nevertheless, it is created by libSBML no matter
whether the model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)

SBMLDocument is derived from SBase, so that it contains the usual SBase
attributes (in SBML Level&nbsp;2 and&nbsp;3) of "metaid" and "sboTerm", as
well as the subelements "notes" and "annotation".  It also contains the
attributes "level" and "version" indicating the Level and Version of the
SBML content that was read.  SBase (and thus its subclasses such as
SBMLDocument) provides methods for querying this information:

@li <code>unsigned int @link @if conly SBMLDocument_getLevel() @else SBMLDocument::getLevel() @endif@~
getLevel()@endlink</code> on an SBMLDocument object returns the SBML Level
of the model.
@li <code>unsigned int @link @if conly SBMLDocument_getVersion() @else SBMLDocument::getVersion() @endif@~
getVersion()@endlink</code> on an SBMLDocument object returns the SBML
Version within the Level of the model.

Of course, the whole point of reading an SBML file or data stream is to get
at the SBML model it contains.  The following method allows access to the
Model object within an SBML document:

@li <code>Model* @link @if conly  SBMLDocument_getModel() @else  SBMLDocument::getModel()  @endif@~
getModel()@endlink</code> on an SBMLDocument object returns a Model object
representing the SBML model contained within that SBMLDocument object.

SBMLDocument also acts to log any problems encountered while reading the
model from the file or data stream.  Whether the problems are warnings or
errors, they are reported through a single common interface involving the
object class SBMLError.  The example earlier on this page already showed
some of the methods available for accessing errors and warnings; here is a
slightly more complete list:

@li <code>unsigned int @link @if conly  SBMLDocument_getNumErrors() @else  SBMLDocument::getNumErrors() @endif@~
getNumErrors()@endlink</code> on an SBMLDocument object returns a count of
the diagnostic messages logged while attempting to read an SBML model using
either <code>SBMLReader::readSBMLFromFile(const std::string& filename)</code> or
<code>SBMLReader::readSBMLFromString(const std::string& xml)</code>.
@li <code>const SBMLError* @link @if conly  SBMLDocument_getError() @else  SBMLDocument::getError() @endif@~
getError(unsigned int n)@endlink</code> returns a specific error
indexed by the integer @c n.  (Callers should first use <code>@link
@if conly SBMLDocument_getNumErrors() @else SBMLDocument::getNumErrors() @endif@~
getNumErrors()@endlink</code> to get the
number of errors, so that they can know the range of valid index numbers.)
The SBMLError object class provides methods for assessing the severity of
the problem encountered and for finding out the line and column number of
where the problem occurred in the SBML input.
@li <code>void @link @if conly  SBMLDocument_printErrors() @else  SBMLDocument::printErrors() @endif@~
printErrors(std::ostream& stream = std::cerr)@endlink</code> on
an SBMLDocument object prints all of the diagnostics to the given output
stream, defaulting to the standard error stream if no stream argument is
given in the call.

Finally, another set of SBMLDocument methods worth mentioning in the
context of reading SBML are those for running consistency-checking and
validation rules on the SBML content.  These methods assess whether the
SBML is legal according to basic rules listed in the SBML Level&nbsp;2
and Level&nbsp;3 specification documents.  Note that they are
mostly structural checks, in the sense that they can indicate whether the
SBML is properly constructed; they cannot tell if a model is nonsense.
(But at least they can assess whether it's syntactically correct
nonsense!).

@li <code>unsigned int @link @if conly  SBMLDocument_checkConsistency() @else  SBMLDocument::checkConsistency() @endif@~
checkConsistency()@endlink</code>, invoked on an SBMLDocument object,
performs a set of structural and mathematical checks on the SBML content
and reports the number of failed checks (errors) encountered.  Callers may
use <code>@link @if conly SBMLDocument_getNumErrors() @else  SBMLDocument::getNumErrors() @endif@~ getNumErrors()@endlink</code>
and <code>@link @if conly SBMLDocument_getError() @else SBMLDocument::getError() @endif@~ getError(unsigned
int n)@endlink</code> interfaces to examine the individual errors.
@li <code>unsigned int @link @if conly  SBMLDocument_checkL1Compatibility() @else  SBMLDocument::checkL1Compatibility() @endif@~
checkL1Compatibility()@endlink</code> peforms a set of semantic consistency
checks on the document to establish whether it can be converted to SBML
Level&nbsp;1, and returns the number of failures.  If all the checks
succeed, it returns @c 0.
@li <code>unsigned int @link @if conly  SBMLDocument_checkL2v1Compatibility() @else  SBMLDocument::checkL2v1Compatibility() @endif@~
checkL2v1Compatibility()@endlink</code> peforms a set of semantic
consistency checks on the document to establish whether it can be converted
to SBML Level&nbsp;2 Version 1, and returns the number of failures.  If all
the checks succeed, it returns @c 0.
@li <code>unsigned int @link @if conly  SBMLDocument_checkL2v2Compatibility() @else  SBMLDocument::checkL2v2Compatibility() @endif@~
checkL2v2Compatibility()@endlink</code> peforms a set of semantic
consistency checks on the document to establish whether it can be converted
to SBML Level&nbsp;2 Version&nbsp;2, and returns the number of failures.
If all the checks succeed, it returns @c 0.
@li <code>unsigned int @link @if conly  SBMLDocument_checkL2v3Compatibility() @else  SBMLDocument::checkL2v3Compatibility() @endif@~
checkL2v3Compatibility()@endlink</code> peforms a set of semantic
consistency checks on the document to establish whether it can be converted
to SBML Level&nbsp;2 Version&nbsp;3, and returns the number of failures.
If all the checks succeed, it returns @c 0.
@li <code>unsigned int @link @if conly  SBMLDocument_checkL2v4Compatibility() @else  SBMLDocument::checkL2v4Compatibility() @endif@~
checkL2v4Compatibility()@endlink</code> peforms a set of semantic
consistency checks on the document to establish whether it can be converted
to SBML Level&nbsp;2 Version&nbsp;4, and returns the number of failures.
If all the checks succeed, it returns @c 0.
@li <code>unsigned int @link @if conly  SBMLDocument_checkL3v1Compatibility() @else  SBMLDocument::checkL3v1Compatibility() @endif@~
checkL3v1Compatibility()@endlink</code> peforms a set of semantic
consistency checks on the document to establish whether it can be converted
to SBML Level&nbsp;3 Version&nbsp;1, and returns the number of failures.
If all the checks succeed, it returns @c 0.

At the time of this release of libSBML, the most recent release of SBML is
Level&nbsp;3 Version&nbsp;1 Core.


@section rf-writing Writing SBML

Writing SBML is, in the end, a very simple matter in libSBML.  The library
provides the class SBMLWriter for this purpose, and SBMLWriter offers the
following methods:

@li <code>bool SBMLWriter::writeSBMLToFile(const SBMLDocument* d, const std::string& filename)</code> 
writes the given SBML document to the named file and returns either @c true
on success or @c false on failure.  Reasons for failure can be, for
example, that the named file could not be opened for writing.
@li <code>char* SBMLWriter::writeSBMLToString(const SBMLDocument* d)
</code> writes the given SBML document to a character string and returns a
pointer to it, or returns @c NULL if a failure occurred.  The string is
owned by the caller and should be freed (using the standard C function
<code>free()</code>) after it is no longer needed.
@li <code>bool SBMLWriter::writeSBML(const SBMLDocument* d, std::ostream& stream)</code> 
writes the given SBML document to the given output stream and returns
either @c true on success or @c false on failure.


*/
