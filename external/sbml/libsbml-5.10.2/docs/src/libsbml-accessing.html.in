<p> Once the libSBML files are installed as described in the <a
href="libsbml-installation.html">installation instructions</a>, you may need
to take additional steps so that software applications can find the libSBML
library files at <em>run</em> time.  This section provides
information about how to do that.

<ol>
 <li><a href="#common">Run-time environment configuration</a></li>
 <li><a href="#languages">Compiling software to use libSBML</a><br>
    <ul>
      <li><a href="#accessing-c">C++ and C</a></li>
      <li><a href="#accessing-csharp">C#</a></li>
      <li><a href="#accessing-java">Java</a></li>
      <li><a href="#accessing-matlab">MATLAB</a></li>
      <li><a href="#accessing-python">Python</a></li>
      <li><a href="#accessing-r">R</a></li>

      <li><a href="#accessing-octave">Octave</a></li>
      <li><a href="#accessing-perl">Perl</a></li>
      <li><a href="#accessing-ruby">Ruby</a></li>
    </ul>
  </li>
</ol>


<h2><a class="anchor" name="common">1. Run-time environment configuration</a></h2>

<p>
Whether you downloaded a ready-built libSBML installation, or you followed
the <a href="libsbml-installation.html">instructions for building and 
installing libSBML manually</a>, copies
of the libSBML files will end up in appropriate destination directories on
your computer.  On Mac&nbsp;OS&nbsp;X, this should be enough; a given
software application should be able to find the libSBML library file(s) when
it runs.  On Linux and Windows, it <em>may</em> not be sufficient not
guarantee that a given software application will be able to find the libSBML
library file(s) when it runs&mdash;you may need to do additional steps to enable
software to find libSBML.  

<h3>On most Linux platforms</h3>

<p>There are two common approaches to solving the problem under Linux.

<ol>
<li><em>Use <code>ldconfig</code></em>: Run the program
<code>ldconfig</code> as user 'root'.  (Please consult the man page for
<code>ldconfig</code> if this is unfamiliar.)</li>

<li><em>Set environment variables</em>: Ensure that each user sets the
environment variable <code>LD_LIBRARY_PATH</code> in their terminal shells.
The value of <code>LD_LIBRARY_PATH</code> must include
the directory <span class="placeholder">DIR</span> used
during the <a href="libsbml-installation.html">libSBML
configuration step</a> as the value of the
<nobr><code>--prefix=</code><span class="placeholder">DIR</span></nobr>
option (if you used <code>configure</code> to configure libSBML) or
<code>CMAKE_INSTALL_PREFIX</code> (if you used
<a target="_blank" href="http://www.cmake.org/">CMake</a>).
For example, suppose that you configured
libSBML to use the default installation prefix
<code><nobr>/usr/local/</nobr></code>.  Then in csh-based command shells
under Linux, if the <code>ldconfig</code> step is not performed, you may
have to set the variable as follows (perhaps in your <code>.cshrc</code>
file):

<pre class="fragment">
setenv LD_LIBRARY_PATH /usr/local/lib
</pre>
</li>

</ol>


<h3>On Microsoft Windows platforms:</h3>

<p>Set the <code>PATH</code> environment variable to include the
directory of the libSBML native library.  To set an environmental variable
in Windows, use the <em>System</em> option in the Windows <em>Control
Panel</em>.
</dd>
</dt>
</dl>

<p> If your run-time environment and the run-time environment for your
software applications do not know to look in the installation directory for
libSBML, programs that require libSBML will fail to run and report errors
about being unable to find libSBML.



<h2><a class="anchor" name="languages">2. Compiling software to use
libSBML</a></h2>

If you configured libSBML to provide additional language interfaces (such
as Java, Python, etc.), then you may also need to perform the following
steps to make the language bindings available to software on your computer.


<h3><a class="anchor" name="accessing-c">C++
and C</a></h3>

<p> Compiling C++ or C software to use libSBML is usually a matter of
supplying certain compilation and linking options.  Once again,
let <span class="placeholder">DIR</span> stand for the directory used
during the <a href="libsbml-installation.html">libSBML
configuration step</a> as the value of the
<nobr><code>--prefix=</code><span class="placeholder">DIR</span></nobr>
option (if you used <code>configure</code> to configure libSBML) or
<code>CMAKE_INSTALL_PREFIX</code> (if you used
<a target="_blank" href="http://www.cmake.org/">CMake</a>).
There are two main sets of settings on Unix-like systems
such as Linux:

<ul>
<li> The flag <nobr><code>-I<span class="placeholder">DIR</span>/include</code></nobr> needs
to be supplied to the compiler.  In addition, it may be necessary to supply a
second <nobr><code>-I</code></nobr> flag with the directory containing the
include files of the XML parser being used by libSBML.  For example,
if you are using the Xerces XML parser and you compiled and installed
Xerces in <code>/usr/local</code>, then when compiling your software
to use libSBML, you will also need to add the flag
<nobr><code>-I/usr/local/include</code></nobr>.

<p>

<li> The flags <nobr><code>-L<span class="placeholder">DIR</span>/lib -lsbml
-lstdc++ -lm</nobr></code> need to be supplied to 
the compiler or linker.  In addition, you may need to supply a corresponding
<nobr><code>-L</code></nobr> flag value to tell the linker where to find the XML
parser library being used by libSBML.
</ul>

<p> If you have the <nobr><code>pkg-config</code></nobr> utility, the steps above
can be substantially simplified.  First, make sure that your
<code>PKG_CONFIG_PATH</code> environment variable includes the path to
the directory <span class="placeholder">DIR</span><code>/lib/pkgconfig</code> (which is the
directory where the file <code>libsbml.pc</code> will be installed by
libSBML's <code>make install</code> step).  Then, you can run
<nobr><code>pkg-config</code></nobr> with the <nobr><code>--cflags</code></nobr> and/or
<nobr><code>--libs</code></nobr> flags in your compilation/linking command.  Here
is an example:

<pre class="fragment">
g++ `pkg-config --cflags --libs libsbml` myprogram.cpp
</pre>

<p> Note the use of the backward quote in the shell command above; it
has the effect of running the command <code><nobr>pkg-config</nobr> <nobr>--cflags</nobr>
<nobr>--libs</nobr> libsbml</code> and substituting in place the flags returned by
the command.


<h3><a class="anchor" name="accessing-csharp">C#</a></h3>

First, as mentioned for some of the other languages described on this page,
please be aware that libSBML by default only builds the C and C++ APIs.
To build the C# API as well, libSBML has to be configured appropriately,
as described in the <a
href="libsbml-installation.html">installation instructions</a>.

<p> The C# interface for libSBML is implemented partly as pure C# and partly
as native code.  Once libSBML is configured, built and installed on a
computer, two more steps are required to use the C#-libSBML interface in an
application.

<h4>Step 1: set LD_LIBRARY_PATH (Linux), DYLD_LIBRARY_PATH
(Mac&nbsp;OS&nbsp;X), or PATH (Windows)</h4>

<p> First, please follow the instructions for configuring the
<code>LD_LIBRARY_PATH</code> (under Linux, Unix, Cygwin),
<code>DYLD_LIBRARY_PATH</code> (under Mac&nbsp;OS&nbsp;X) or <code>PATH</code> (under
Windows) variables described in the <a href="#common">beginning of this
section</a>.  This is necessary so that, before the operating system starts
a C# application, the system loaders can find libSBML's native library
components.

<h4>Step 2: place the managed library <code>libsbmlcsP.dll</code> into your
application's directory</h4>

<p> C# applications need to be compiled by referencing the managed library
<code>libsbmlcsP.dll</code>.  This will also copy this managed library into
the application's output directory.

<p> Once the managed library is referenced, and the native library can be
found in the <code>PATH</code> (or, on Windows systems, if it is in the
same directory as the executable), the C# bindings can be used in any .Net
language program by simply including the libSBML namespace.  The following
C# code fragment illustrates how to use the namespace:

<pre class="fragment">
using namespace libsbml;
</pre>


<h3><a class="anchor" name="accessing-java">Java</a></h3>

<p> As is the case for the other language bindings, libSBML by default only
builds the C and C++ APIs.  To build the Java API as well, libSBML has to
be configured appropriately as described in the <a
href="libsbml-installation.html">installation instructions</a>.

<p> The Java interface for libSBML is implemented partly as pure Java and
partly as Java Native Interface (JNI) code.  Once libSBML is configured and
built using the <nobr><code>--with-java</code></nobr> flag described above,
and libSBML has been installed on a computer, three more steps are required
to use the Java-libSBML interface in an application.


<h4>Step 1: set LD_LIBRARY_PATH (Linux), DYLD_LIBRARY_PATH
(Mac&nbsp;OS&nbsp;X), or PATH (Windows)</h4>

First, please follow the instructions for configuring the
<code>LD_LIBRARY_PATH</code> (under Linux, Unix, Cygwin),
<code>DYLD_LIBRARY_PATH</code> (under Mac&nbsp;OS&nbsp;X) or <code>PATH</code> (under
Windows) variables described in the beginning of this section.  This is
necessary so that, before the operating system starts a Java application,
the system loaders can find libSBML's native library components.


<h4>Step 2: adjust the application's class search path</h4>

Java applications separately need to have their class search paths include
the libSBML <code>.jar</code> and binary object files.  This is often most
easily done by setting the <code>CLASSPATH</code> environment variable, but
other methods are possible.  The exact recipe also depends on the operating
system in use, as follows:

<ul>

<li><em>Java on Linux, Mac&nbsp;OS X and similar Unix-like systems:</em>

<p style="margin-top: 0.5em;"> You must either (1) set
your <code>CLASSPATH</code> environment variable to include
the <code>.jar</code> file, or (2) the <code>.jar</code> file must be listed
in the <nobr><code>-classpath</code></nobr> option passed to the Java
interpreter when it is started.  As an example of the former approach,
if you had configured libSBML to install itself into
<code>/usr/local</code> (e.g., by using
<nobr><code>--prefix=/usr/local</code></nobr> when configuring libSBML
using the <code>configure</code> system),
the <code>libsbmlj.jar</code> file will end up as
<code>/usr/local/share/java/libsbmlj.jar</code> and your environment
variable would at minimum need to be set as follows:

<pre class="fragment">
  CLASSPATH=.:/usr/local/share/java/libsbmlj.jar
</pre>
</li>

<li><em>Java on Windows systems:</em>

<p style="margin-top: 0.5em;"> The instructions are essentially the same as
for the case of Linux and similar systems, although the syntax for setting
environment variables is slightly different.  For example, if you had
installed libSBML into <code>C:\libsbml</code> on your system, you might set
your environment variable as follows:

<pre class="fragment">
  CLASSPATH=.;C:\libsbml\libsbmlj.jar
</pre>

<p> Note: to set an environmental variable in Windows, use the
<em>System</em> option in the Control Panel.

</li>
</ul>


<h4>Step 3: load the libSBML JNI library in the application</h4>

Finally, because of how JNI works in Java, an explicit call to
<code>System.loadLibrary</code> is needed in an application to load the
native language library portion of libSBML.  This involves putting a Java
<code>static</code> block of code somewhere in your application, usually in
the application's main class.  The following example illustrates one way of
doing this.

<pre class="fragment"><span style="color: #777">import org.sbml.libsbml.*;

public class YourMainApplicationClass
{
  public static void main (String[] args)
  {
    /* Whatever your application does here ... */
  }
</span>
  /**
   * The following static block is needed in order to load the
   * libSBML Java interface library when the application starts.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("os.name").startsWith("Mac OS"))
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (UnsatisfiedLinkError e)
    {
      System.err.println("Error encountered while attempting to load libSBML:");
      e.printStackTrace();
      System.err.println("Please check the value of your " + varname +
			 " environment variable and/or" +
                         " your 'java.library.path' system property" +
                         " (depending on which one you are using) to" +
                         " make sure it lists all the directories needed to" +
                         " find the " + shlibname + " library file and the" +
                         " libraries it depends upon (e.g., the XML parser).");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      System.err.println("Error: unable to load the file 'libsbmlj.jar'." +
                         " It is likely that your -classpath command line " +
                         " setting or your CLASSPATH environment variable " +
                         " do not include the file 'libsbmlj.jar'.");
      System.exit(1);
    }
    catch (SecurityException e)
    {
      System.err.println("Error encountered while attempting to load libSBML:");
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
  }
<span style="color: #777">
}</span>
</pre>


<h3><a class="anchor" name="accessing-matlab">MATLAB</a></h3>

<p> First, note that by default, libSBML only builds the C and C++ APIs.
To build the MATLAB API as well, libSBML has to be configured, as described
in the <a href="libsbml-installation.html">installation instructions</a>.

<h4>MATLAB on Linux, Mac&nbsp;OS X and similar Unix-like systems</h4>

<p> As with the other cases described above, the first configuration step
necessary for users is to make sure that their <code>LD_LIBRARY_PATH</code>
or <code>DYLD_LIBRARY_PATH</code> environment variable (see the <a
href="libsbml-installation.html#accessing">relevant section in the
installation instructions</a>) is set to the directory where the libSBML
shared library object is installed.  When the MATLAB bindings are enabled
in libSBML, this directory is also the same one where the additional files
<code>TranslateSBML</code>.<em>extension</em>,
<code>OutputSBML</code>.<em>extension</em> and
<code>CheckAndConvert.m</code> will have been placed.  These files
implement the MATLAB interface to libSBML.  The
<code>LD_LIBRARY_PATH</code>/<code>DYLD_LIBRARY_PATH</code> environment
variable must be set in the terminal shell from which MATLAB is started
prior to starting MATLAB.  (Otherwise, MATLAB itself will not "see" the
value of the variable.)

<p class="warning">
Important: some versions of MATLAB produced for Linux include a version of
the stdc++ library that conflicts with the version provided by the operating 
system, causing a mystifying error when MATLAB tries to run or compile code
involving libSBML.  Please see the <a
href="libsbml-issues.html#matlab-linux">section in the <em>Known Issues</em>
document</a> for more information. </p>

<p> An additional step is necessary in the MATLAB environment itself:
adding the same directory to the list of directories that MATLAB searches
to find functions.  If <span class="placeholder">DIR</span> is the
directory where the libSBML shared library as well as
<code>TranslateSBML</code>.<em>extension</em>,
<code>OutputSBML</code>.<em>extension</em>, and
<code>CheckAndConvert.m</code> have been installed, then the following
MATLAB command must be executed:

<pre class="fragment">
addpath('<span class="placeholder">DIR</span>');
</pre>

<p> For example, suppose you are using an Intel-based Mac&nbsp;OS X system
and you have configured libSBML to install itself into
<code>/usr/local</code>.  Then the files
<code>TranslateSBML.mexmaci</code>, <code>OutputSBML.mexmaci</code>
and <code>CheckAndConvert.m</code>
will have been installed as
<code>/usr/local/lib/TranslateSBML.mexmaci</code>,
<code>/usr/local/lib/OutpuSBML.mexmaci</code> and
<code>/usr/local/lib/CheckAndConvert.m</code>.  You will need to set
your <code>DYLD_LIBRARY_PATH</code> environment variable to
<code>/usr/local/lib</code>, and also execute the following command
(or an equivalent) in MATLAB:

<pre class="fragment">
addpath('/usr/local/lib');
</pre>

<p> To save the trouble of having to type the command above each
time you start MATLAB, you may wish to put it in your
<code>startup.m</code> file (i.e., the file MATLAB uses for user
initialization).  Please refer to the MATLAB documentation for more
information about <code>startup.m</code> and where it is located.


<h4>MATLAB on Windows systems</h4>

<p> Most Windows users will probably prefer to install libSBML using the
self-extracting installer provided separately and available for downloading
from the same servers as the libSBML source code distribution.  The
installer will take care of placing the MATLAB files in directories where
MATLAB can find them.  Nothing further needs to be done in that case.  You
should be able to start MATLAB at will, and be able to invoke functions
like <code>TranslateSBML</code> and <code>OutputSBML</code>.

<p> If you are compiling and installing libSBML from the sources, or else
want/need to install the MATLAB bindings directly from the libSBML source
distribution on Windows, follow these simple steps:

<ol>

<li style="margin-bottom: 1em">Start MATLAB.

<li style="margin-bottom: 1em">Within MATLAB, change directory to the
directory in your libSBML source tree containing the MATLAB code.  This
directory will be <code><span
class="placeholder">libsbml</span>/src/bindings/matlab</code>, where
<code><span class="placeholder">libsbml</span></code> is the root of your
libSBML source directory on your computer.

<li style="margin-bottom: 1em">Execute <code>buildSBML</code> in MATLAB.

<li style="margin-bottom: 1em">Execute <code>installSBML</code> in MATLAB.

</ol>

After these steps, you should be able to invoke functions
such as <code>TranslateSBML</code> and <code>OutputSBML</code>.  These will
be accessible after you restart MATLAB and even when you are no longer in
the libSBML directory.


<h3><a class="anchor" name="accessing-python">Python</a></h3>

<p> As described in the <a
href="libsbml-installation.html#quick">installation instructions</a>, we
provide two ways for you to get the libSBML Python language interfaces easily
without having to configure and build libSBML manually from the source
distribution.  You can use
<a target="_blank" href="https://pypi.python.org/pypi">PyPI</a>,
the Python Package Index, or alternatively (for Linux), binary
distributions together with the standard operating system installation
tools such as <code>yum</code> and <code>apt-get</code>.

<p> <strong><em>If you used one of the two approaches mentioned above</em></strong>
and followed the <a
href="libsbml-installation.html#quick">installation instructions</a>, you
should not need to do anything more: you should be able to accessing libSBML
from your Python interpreter by importing it like any other Python module.
In other words, the following should work:

<pre class="fragment">
from libsbml import *
</pre>

<p> <strong><em>If you did not use one of the approaches above</em></strong>,
then libSBML must first be configured, compiled and installed as
described in the <a href="libsbml-installation.html">building instructions</a>.
Once that is done, your Python interpreter will need one more thing to find
libSBML: a correctly set <code>PYTHONPATH</code> environment variable.
To cope with the fact that different Unix-like systems
(including Mac&nbsp;OS&nbsp;X) use different conventions
for where they install Python modules, the following is a general-purpose
setting for <code>PYTHONPATH</code>.
Here, <span class="placeholder">DIR</span> represents
the value of the <nobr><code>--prefix=</code><span
class="placeholder-nospace">DIR</span></nobr> option given during
configuration of libSBML (the default value is <code>/usr/local</code>)
and <span class="placeholder">version</span> is the version of your copy of
Python (this might be, e.g., <code>2.7</code>).
If you use <i>sh</i>-based shells such as Bash, put this in your
shell's initialization file or execute it in your shell before starting the
Python interpreter:

<pre class="fragment" style="font-size: 12px">
PYSITE=<span class="placeholder-nospace">DIR</span>/lib/<span class="placeholder-nospace">version</span>/site-packages
PYDIST=<span class="placeholder-nospace">DIR</span>/lib/<span class="placeholder-nospace">version</span>/dist-packages
export PYTHONPATH=$PYTHONPATH:$PYSITE:$PYSITE/libsbml:$PYDIST:$PYDIST/libsbml
</pre>

If you use <i>csh</i>-based shells instead of Bash or other
<i>sh</i>-based shells, then the appropriate syntax is the following:

<pre class="fragment" style="font-size: 12px">
set PYSITE = <span class="placeholder-nospace">DIR</span>/lib/<span class="placeholder-nospace">version</span>/site-packages
set PYDIST = <span class="placeholder-nospace">DIR</span>/lib/<span class="placeholder-nospace">version</span>/dist-packages
setenv PYTHONPATH ${PYTHONPATH}:${PYSITE}:${PYSITE}/libsbml:${PYDIST}:${PYDIST}/libsbml
</pre>

<p> Once the <code>PYTHONPATH</code> variable has been set, you should be
able to start the Python interpreter and type the following command to
import the libSBML package for Python:

<pre class="fragment">
from libsbml import *
</pre>

<p>
If Python produces an import error or a failure in linking a new module, it
probably means that <code>PYTHONPATH</code> has not been set correctly.
It may also mean that the read/write permissions of the installed library
files or a directory in the hierarchy containing them are such that you are
not allowed to access the files.  In that case, please consult your systems
administrator or (if you have administrator priviledges) reset the
permissions yourself.


<h3><a class="anchor" name="accessing-r">R</a></h3>

<p> As described in the <a
href="libsbml-installation.html#quick">installation instructions</a>, we
provide ready-built installers for the libSBML R language interface that you
can download from our <a target="_blank"
href="http://sf.net/projects/sbml/files/libsbml">SourceForge 
download page</a>.  Alternatively, you can also build the R bindings
yourself following the
<a href="libsbml-installation.html">compilation instructions</a>.  (In the
latter case, make sure to configure your CMake or GNU make build with the
option to enable the libSBML R interface.) Either way, you will have in your
possession an archive file containing the libSBML R interface.  This file
will have the name
<code>libSBML_@PACKAGE_VERSION@.tgz</code> on 
Mac&nbsp;OS&nbsp;X, 
<code>libSBML_@PACKAGE_VERSION@.zip</code> on 
Windows, and
<code>libSBML_@PACKAGE_VERSION@_R_i686-pc-linux-gnu.tar.gz</code>
or
<code>libSBML_@PACKAGE_VERSION@_R_x86_64-pc-linux-gnu.tar.gz</code>
on Linux systems.

<p> <strong>One more step is required to make your R
installation find the libSBML interface</strong>: you must invoke a command
in R, supplying it with the path to this archive file.  You can do this in
one of two ways: either using the R graphical interface, or a shell
command.
<ul>
<li><em style="padding-right: 1px">Using the R GUI</em>: In the R menu
"<strong>Packages</strong>" or "<strong>Packages&nbsp;&amp;&nbsp;Data</strong>"
(depending on your operating system), select the "<strong>Package 
Installer</strong>" item.  You will be presented with an interface that lets
you install a local binary package.  Use the interface to navigate to the
directory where you copied the libSBML archive file, and select the archive
file for installation.

<li><em style="padding-right: 1px">Using a shell command</em>: 
Suppose that the path to the libSBML R archive on your computer is
<span class="placeholder">archive</span>.  Execute the following command
in a terminal/shell window (note: <em>not</em> in the R command line
interpreter!):

<pre class="fragment">
R CMD INSTALL <span class="placeholder">archive</span>
</pre>
</ul>

<p> In the command above, <code>R</code> is the executable for the
command-line version of R; we assume it is accessible from your shell's
command line, but if it is not accessible by simply typing<code>R</code>, you
may need to supply the full path to <code>R</code>.  From this point forward,
you should be able to call on libSBML functions from within your copy of R.
You can test whether the installation was successful by trying the following
command in R:

<pre class="fragment">
library('libSBML')
</pre>

<p> If R does not report an error when you execute this command, then the
libSBML R interface is probably installed correctly.


<h3><a class="anchor" name="accessing-octave">Octave</a></h3>

(Documentation unfinished.)

<h3><a class="anchor" name="accessing-perl">Perl</a></h3>

(Documentation unfinished.)

<h3><a class="anchor" name="accessing-ruby">Ruby</a></h3>

(Documentation unfinished.)

