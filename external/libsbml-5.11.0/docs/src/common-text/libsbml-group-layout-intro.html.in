<p> The libSBML &ldquo;layout&rdquo; extension implements support for the
SBML Level&nbsp;3 <em>Layout</em> package.

<h2>Introduction</h2>

<p> The layout of a reaction network diagram should be described as graphical
representations of species and reactions (and not as arbitrary drawing or
graph). This means that existing languages for the description of vector
drawings (SVG) or general graphs cannot be used.  While it may seem
unnecessary to invent a new language when an existing one like SVG could in
principle be used to describe the layout of a reaction network, there are
good reasons to have a language tailored specifically for the layout of SBML
models.  Presumably, most programs that will use this SBML extension are
primarily programs dealing with biochemical models. Internally, they will
have data structures for species and reactions, so it will be natural for
them to describe the layout of the reaction network also in terms of species
and reactions (and not in terms of, e.g., polygons or splines). Thus, the
<b>LayoutClass</b> object defined by this SBML Layout package has a similar
structure like the SBML <b>Model</b> object and contains lists of graphical
representations of compartments, species, and reactions.  Additional layout
elements and relationships can be represented by using other custom objects
defined by this package.

<center>
<figure>
<img src="layout-example.png">
<figcaption>Example of different renderings of the same layout.</figcaption>
</figure>
</center>

<p> Another important question is the level of detail that the description
should provide. For simplicity, only the layout (i.e., the position of the
different graphical objects) of the diagram is encoded, not the details of
how it should be rendered; the latter is left to the SBML Level&nbsp;3 Render
package.  The figure at right illustrates this distinction. All three
diagrams could be renderings of the same layout and would be described by
identical SBML files. No information about colors, line styles, fonts, etc.,
is present in the layout description.

<p> The next question is how the relation between the model and the layout 
should be established. There seems to be a consensus that one model 
element can be represented by several layout elements. For example, it 
can be useful to have several representations of one species in the 
layout to avoid crossing lines. This can be accomplished if every layout 
element has a field that refers to the id of a model element. 

<p> There are also cases where a layout element does not correspondent to 
exactly one model element. One example is when a layout shows a 
simplified version of a model in which one reaction in the layout 
corresponds to several reactions and intermediate species in the model. 
This is the reason why the field in the layout elements that refers to 
the model elements is optional: to allow layout objects that do not have 
a specific counterpart in the SBML model. 

<p> The result of all this is a way to describe the graphical layout of a 
reaction network in biochemical terms. This layout can be closely tied 
to the model. A graphical editor, for example, would 
typically create a layout that is closely connected (by a one-to-several 
relation from the model elements to the layout elements) to the model. 
A more general layout design program could create a layout that is 
not so closely tied to the model; for example, it could create a layout 
that shows a simplified version of the model. 


<h2>Historical considerations</h2>

<p> Historically, the SBML Layout package has been used to encode the layout
of SBML Level&nbsp;2 models; indeed, the original version of the package was
developed in the context of SBML Level&nbsp;2.  The approach used with
Level&nbsp;2 is to store the layout information as SBML annotations, i.e.,
using SBML <code>&lt;annotation&gt;</code> elements.  The following XML
namespace must be used for layout annotations in Level&nbsp;2 models:

<center>
<code>http://projects.eml.org/bcb/sbml/level2</code>
</center>

<p> A minimal example in this case would look like the following:

<pre class="fragment">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sbml xmlns="http://www.sbml.org/sbml/level2" level="2" version="1"&gt;
  &lt;model&gt;
    &lt;annotation&gt;
      &lt;listOfLayouts xmlns="http://projects.eml.org/bcb/sbml/level2"&gt;
        ...
      &lt;/listOfLayouts&gt;
    &lt;/annotation&gt;
  &lt;/model&gt;
&lt;/sbml&gt;
</pre>

<h3>Special libSBML behavior for Level&nbsp;2 Layout</h3>

<p> Due to the way that the encoding difference discussed above affects
legacy applications, libSBML implements special behavior for the Layout
package: it <em>always</em> creates a Layout plugin object for any SBML
Level&nbsp;2 document it reads in, regardless of whether that document
actually uses Layout constructs.  This is unlike the case for SBML
Level&nbsp;3 documents that use Layout&mdash;for them, libSBML will
<em>not</em> create a plugin object unless the document actually declares the
use of the Layout package (via the usual Level&nbsp;3 namespace declaration
for Level&nbsp;3 packages).

<p>
This has the following consequence.  If an application queries for the
presence of Layout in an SBML Level&nbsp;2 document by testing only for
the existence of the plugin object, <strong>it will always get a positive
result</strong>; in other words, the presence of a Layout extension
object is not an indication of whether a read-in Level&nbsp;2 document
does or does not use SBML Layout.  Instead, callers have to query
explicitly for the existence of layout information.

<p> The special, always-available Level&nbsp;2 Layout behavior was motivated
by a desire to support legacy applications.  In SBML Level&nbsp;3, the Layout
package uses the normal SBML Level&nbsp;3 scheme of requiring declarations on
the SBML document element.  This means that upon reading a model, libSBML
knows right away whether it contains layout information.  In SBML
Level&nbsp;2, there is no top-level declaration because layout is stored as
annotations in the body of the model.  Detecting the presence of layout
information when reading a Level&nbsp;2 model requires parsing the
annotations.  For efficiency reasons, libSBML normally does not parse
annotations automatically when reading a model.  However, applications that
predated the introduction of Level&nbsp;3 Layout and the updated version of
libSBML never had to do anything special to enable parsing layout; the
facilities were always available for every Level&nbsp;2 model as long as
libSBML was compiled with Layout support.  To avoid burdening developers of
legacy applications with the need to modify their software, libSBML provides
backward compatibility by always preloading the Layout package extension when
reading Level&nbsp;2 models.  The same applies to the creation of
Level&nbsp;2 models: with the plugin-oriented libSBML, applications normally
would have to take deliberate steps to activate package code, instantiate
objects, manage namespaces, and so on.  LibSBML again loads the Layout
package plugin automatically when creating a Level&nbsp;2 model, thereby
making the APIs available to legacy applications without further work on
their part.

<h3>Testing for Level&nbsp;2 Layout</h3>

The following are examples of code fragments that could be used to test for
the presence of layout data in a Level&nbsp;2 model.

<ul>

<li><em>For the case of C++</em>:
<div class="fragment" style="margin-top: 0.5em">
<div class="line"><span class="comment">// Assume &quot;m&quot; below is a Model object.</span></div>
<div class="line"><a class="code" href="class_layout_model_plugin.html">LayoutModelPlugin</a>* lmp = <span class="keyword">static_cast&lt;</span><a class="code" href="class_layout_model_plugin.html">LayoutModelPlugin</a>*<span class="keyword">&gt;</span>(m-&gt;getPlugin(<span class="stringliteral">&quot;layout&quot;</span>));</div>
<div class="line"><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numLayouts = lmp-&gt;<a class="code" href="class_layout_model_plugin.html#af4f263428d5587079194ac093187c9d2">getNumLayouts</a>();</div>
<div class="line"><span class="comment">// If numLayouts is greater than zero, then the model uses Layout.</span></div>
</div>
</li>

<li><em>For the case of Python</em>:
<div class="fragment" style="margin-top: 0.5em"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment"># Assume &quot;doc&quot; below is an SBMLDocument object.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;m = doc.getModel()</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keywordflow">if</span> m != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    layoutPlugin = m.getPlugin(<span class="stringliteral">&#39;layout&#39;</span>)</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    <span class="keywordflow">if</span> layoutPlugin != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;        numLayouts = layoutPlugin.getNumLayouts()</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;        <span class="comment"># If numLayouts is greater than zero, then the model uses Layout.</span></div>
</div>
</li>

<li><em>For the case of Java</em>:
<div class="fragment" style="margin-top: 0.5em"><div class="line"><span class="comment">// Assume &quot;doc&quot; below is an SBMLDocument object.</span></div>
<div class="line"><a class="code" href="class_model.html">Model</a> m = doc.getModel();</div>
<div class="line"><a class="code" href="class_layout_model_plugin.html">LayoutModelPlugin</a> lmp = (<a class="code" href="class_layout_model_plugin.html">LayoutModelPlugin</a>) m.getPlugin(<span class="stringliteral">&quot;layout&quot;</span>);</div>
<div class="line"><span class="keywordflow">if</span> (lmp != null)</div>
<div class="line">{</div>
<div class="line">  <span class="keywordtype">int</span> numLayouts = lmp.getNumLayouts();</div>
<div class="line">  <span class="comment">// If numLayouts is greater than zero, then the model uses Layout.</span></div>
<div class="line">}</div>
</div>
</li>

<li><em>For the case of C#</em>:
<div class="fragment" style="margin-top: 0.5em"><div class="line"><span class="comment">// Assume &quot;doc&quot; below is an SBMLDocument object.</span></div>
<div class="line"><a class="code" href="class_model.html">Model</a> m = doc.getModel();</div>
<div class="line"><a class="code" href="class_layout_model_plugin.html">LayoutModelPlugin</a> lmp = (<a class="code" href="class_layout_model_plugin.html">LayoutModelPlugin</a>) m.getPlugin(<span class="stringliteral">&quot;layout&quot;</span>);</div>
<div class="line"><span class="keywordflow">if</span> (lmp != null)</div>
<div class="line">{</div>
<div class="line">  <span class="keywordtype">int</span> numLayouts = lmp.getNumLayouts();</div>
<div class="line">  <span class="comment">// If numLayouts is greater than zero, then the model uses Layout.</span></div>
<div class="line">}</div>
</div></li>

</ul>


<h2>The specification for this SBML package</h2>

<p style="color: #880000"> This API documentation for libSBML does not
provide a complete explanation of the SBML Level&nbsp;3 Layout
(&ldquo;layout&rdquo;) package.  If you are developing software that uses
&ldquo;layout&rdquo;, you are strongly urged to read the actual specification
for the package.  A link to the specification document current is provided
below, along with a link to the page of known issues (if any).

<table border="0" class="centered text-table normal-font alt-row-colors" style="padding-bottom: 0.5em">
  <caption class="top-caption">Specification for SBML Level&nbsp;3 Layout,
    current at the time of this libSBML release (@PACKAGE_VERSION@).  Note:
    an Internet connection is required to access these documents.</caption>
<tr>
<th style="text-align: left">Specification (in PDF format)</th>
<th style="text-align: left">Known issues</th>
</tr>

<tr><td>
<a class="spec-link" target="_blank" href="@PACKAGE_LAYOUT_SPEC_URL@">
  <img class="big-icon" width="22px" src="icon-format-pdf-44px.jpg">Layout package, Version&nbsp;@PACKAGE_LAYOUT_VERSION@ Release&nbsp;@PACKAGE_LAYOUT_RELEASE@</a>
</td><td>
<a class="spec-link" target="_blank" href="@PACKAGE_LAYOUT_ERRATA_URL@">
  <img class="big-icon" width="22px" src="icon-format-html-44px.jpg">Errata page</a>
</td></tr>
</table>
