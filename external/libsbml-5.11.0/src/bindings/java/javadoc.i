%javamethodmodifiers getLibSBMLVersion "
/**
 * Returns the version number of this copy of libSBML as an integer.
 <p>
 * @return the libSBML version as an integer; version 1.2.3 becomes 10203.
 */ public
";


%javamethodmodifiers getLibSBMLDottedVersion "
/**
 * Returns the version number of this copy of libSBML as a string.
 <p>
 * @return the libSBML version as a string; version 1.2.3 becomes
 * \'1.2.3\'.
 <p>
 * @see #getLibSBMLVersionString()
 */ public
";


%javamethodmodifiers getLibSBMLVersionString "
/**
 * Returns the version number of this copy of libSBML as a string without
 * periods.
 <p>
 * @return the libSBML version as a string: version 1.2.3 becomes \'10203\'.
 <p>
 * @see #getLibSBMLDottedVersion()
 */ public
";


%javamethodmodifiers isLibSBMLCompiledWith(const char* option) "
/**
 * Returns an indication whether libSBML has been compiled with
 * against a specific library. 
 <p>
 * @param option the library to test against, this can be one of
 *        \'expat\', \'libxml\', \'xerces-c\', \'bzip2\', \'zip\'
 <p>
 * @return 0 in case the libSBML has not been compiled against 
 *         that library and non-zero otherwise (for libraries 
 *         that define an integer version number that number will 
 *         be returned).
 <p>
 * @see #getLibSBMLDependencyVersionOf(String option)
 */ public
";


%javamethodmodifiers getLibSBMLDependencyVersionOf(const char* option) "
/**
 * Returns the version string for the dependency library used. 
 <p>
 * @param option the library for which the version
 *        should be retrieved, this can be one of
 *        \'expat\', \'libxml\', \'xerces-c\', \'bzip2\', \'zip\'
 <p>
 * @return null in case libSBML has not been compiled against 
 *         that library and a version string otherwise.
 <p>
 * @see #isLibSBMLCompiledWith(String option)
 */ public
";


%javamethodmodifiers OperationReturnValue_toString(int returnValue) "
/**
 * This method takes an SBML operation return value and returns a string representing
 * the code.
 <p>
 * @param returnValue the operation return value to convert to a string
 <p>
 * @return a human readable name for the given
 * operation return value .
 <p>
 * @note The caller does not own the returned string and is therefore not
 * allowed to modify it.
 */ public
";


%typemap(javaimports) IdList "
/** 
 *  Maintains a list of SIds.
 * @internal
 */
"


%javamethodmodifiers IdList::append(const std::string& id) "
/** * @internal */ public
";


%javamethodmodifiers IdList::contains(const std::string& id) const "
/** * @internal */ public
";


%javamethodmodifiers IdList::removeIdsBefore(const std::string& id) "
/** * @internal */ public
";


%javamethodmodifiers IdList::size() const "
/** * @internal */ public
";


%typemap(javaimports) IdentifierTransformer "
/** 
 *  Base class for identifier transformers.
 * @internal
 */
"


%typemap(javaimports) ElementFilter "
/** 
 *  Base class for filter functions.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * Some libSBML objects provide the ability to return lists of components.
 * To provide callers with greater control over exactly what is
 * returned, these methods take optional arguments in the form of filters.
 * The {@link ElementFilter} class is the parent class for these filters.
 */
"


%javamethodmodifiers ElementFilter::ElementFilter "
/**
   * Creates a new {@link ElementFilter} object.
   */ public
";


%javamethodmodifiers ElementFilter::filter(const SBase* element) "
/**
   * Predicate to test elements.
   <p>
   * This is the central predicate of the {@link ElementFilter} class.  In subclasses
   * of {@link ElementFilter}, callers should implement this method such that it
   * returns <code>true</code> for <code>element</code> arguments that are \'desirable\' and 
   * <code>false</code> for those that are \'undesirable\' in whatever filtering context the
   * {@link ElementFilter} subclass is designed to be used.
   <p>
   * @param element the element to be tested.
   <p>
   * @return <code>true</code> if the <code>element</code> is desirable or should be kept,
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ElementFilter::getUserData "
/**
   * Returns the user data that has been previously set via setUserData().
   <p>
   * Callers can attach private data to {@link ElementFilter} objects using
   * setUserData().  This user data can be used by an application to store
   * custom information to be accessed by the {@link ElementFilter} in its work.  In
   * case of a deep copy, the data will passed as it is.  The attribute will
   * never be interpreted by libSBML.
   <p>
   * @return the user data of this node, or <code>null</code> if no user data has been
   * set.
   <p>
   * @warning This <em>user data</em> is specific to an {@link ElementFilter} object
   * instance, and is not the same as the user data that may be attached to
   * an SBML object using {@link SBase#setUserData()}.
   <p>
   * @see #setUserData()
   */ public
";


%javamethodmodifiers ElementFilter::setUserData(void* userData) "
/**
   * Sets the user data of this element.
   <p>
   * Callers can attach private data to {@link ElementFilter} objects using this
   * method, and retrieve them using getUserData().  Such user data can be
   * used by an application to store information to be accessed by the
   * {@link ElementFilter} in its work.  In case of a deep copy, this data will
   * passed as it is.  The attribute will never be interpreted by libSBML.
   <p>
   * @param userData specifies the new user data.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @warning This <em>user data</em> is specific to an {@link ElementFilter} object
   * instance, and is not the same as the user data that may be attached to
   * an SBML object using {@link SBase#setUserData()}.
   <p>
   * @see #getUserData()
   */ public
";


%typemap(javaimports) SBMLReader "
/** 
 *  File and text-string SBML reader.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The {@link SBMLReader} class provides the main interface for reading SBML content
 * from files and strings.  The methods for reading SBML all return an
 * {@link SBMLDocument}
 * object representing the results.  In the case of failures (such as if the
 * SBML contains errors or a file cannot be read), the errors will be
 * recorded with the {@link SBMLErrorLog} object kept in the
 * {@link SBMLDocument}
 * returned by {@link SBMLReader}.  Consequently, immediately after calling a method
 * on {@link SBMLReader}, callers should always check for errors and warnings using
 * the methods for this purpose provided by {@link SBMLDocument}.
 <p>
 * For convenience as well as easy access from other languages besides C++,
 * this file also defines two global functions, <a href=\'libsbml.html#readSBML(java.lang.String)\'><code>libsbml.readSBML(String)</code></a> and <a href=\'libsbml.html#readSBMLFromString(java.lang.String)\'><code>libsbml.readSBMLFromString(String)</code></a>.  They are
 * equivalent to creating an {@link SBMLReader} object and then calling the
 * {@link SBMLReader#readSBML(String)} and
 * {@link SBMLReader#readSBMLFromString(String)} methods, respectively.
 <p>
 * <h2>Support for reading compressed files</h2>
 <p>
 * LibSBML provides support for reading (as well as writing) compressed
 * SBML files.  The process is transparent to the calling
 * application&mdash;the application does not need to do anything
 * deliberate to invoke the functionality.  If a given SBML filename ends
 * with an extension for the <em>gzip</em>, <em>zip</em> or <em>bzip2</em> compression
 * formats (respectively, <code>.gz</code>, <code>.zip</code>, or <code>.bz2</code>), then the methods
 * @link {@link SBMLReader#readSBML(String)} {@link SBMLReader}.readSBML(String)@endlink and
 * @link {@link SBMLWriter#writeSBML(String)} {@link SBMLWriter}.writeSBML(String)@endlink
 * will automatically decompress and compress the file while reading and
 * writing it.  If the filename has no such extension, it will be read and
 * written uncompressed as normal.
 <p>
 * The compression feature requires that the <em>zlib</em> (for <em>gzip</em> and 
 * <em>zip</em> formats) and/or <em>bzip2</em> (for <em>bzip2</em> format) be available on the
 * system running libSBML, and that libSBML was configured with their
 * support compiled-in.  Please see the libSBML
 * <a href=\'../../../libsbml-installation.html\'>installation instructions</a> 
 * for more information about this.  The methods
 * {@link SBMLReader#hasZlib()} and
 * {@link SBMLReader#hasBzip2()}
 * can be used by an application to query at run-time whether support
 * for the compression libraries is available in the present copy of
 * libSBML.
 <p>
 * Support for compression is not mandated by the SBML standard, but
 * applications may find it helpful, particularly when large SBML models
 * are being communicated across data links of limited bandwidth.
 */
"


%javamethodmodifiers SBMLReader::SBMLReader "
/**
   * Creates a new {@link SBMLReader} object and returns it.
   <p>
   * The libSBML {@link SBMLReader} object offers methods for reading SBML in
   * XML form from files and text strings.
   */ public
";


%javamethodmodifiers SBMLReader::readSBML(const std::string& filename) "
/**
   * <p>
 * Reads an SBML document from the given file.
 <p>
 * If the file named <code>filename</code> does not exist or its content is not
 * valid SBML, one or more errors will be logged with the
 * {@link SBMLDocument}
 * object returned by this method.  Callers can use the methods on
 * {@link SBMLDocument} such as
 * {@link SBMLDocument#getNumErrors()}
 * and
 * {@link SBMLDocument#getError(long)}
 * to get the errors.  The object returned by
 * {@link SBMLDocument#getError(long)}
 * is an {@link SBMLError} object, and it has methods to get the error code,
 * category, and severity level of the problem, as well as a textual
 * description of the problem.  The possible severity levels range from
 * informational messages to fatal errors; see the documentation for
 * {@link SBMLError}
 * for more information.
 <p>
 * If the file <code>filename</code> could not be read, the file-reading error will
 * appear first.  The error code  can provide a clue about what
 * happened.  For example, a file might be unreadable (either because it does
 * not actually exist or because the user does not have the necessary access
 * priviledges to read it) or some sort of file operation error may have been
 * reported by the underlying operating system.  Callers can check for these
 * situations using a program fragment such as the following:
 <p>
<pre class=\'fragment\'>
{@link SBMLReader} reader = new {@link SBMLReader}();
{@link SBMLDocument} doc  = reader.readSBMLFromFile(filename);

if (doc.getNumErrors() &gt; 0)
{
    if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileUnreadable)
    {
        // Handle case of unreadable file here.
    }
    else if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileOperationError)
    {
        // Handle case of other file operation error here.
    }
    else
    {
        // Handle other error cases.
    }
}
</pre>
<p>
 * <p>
 * If the given filename ends with the suffix <code>\'.gz\'</code> (for example, 
 * <code>\'myfile.xml.gz\'</code>), the file is assumed to be compressed in <em>gzip</em>
 * format and will be automatically decompressed upon reading.
 * Similarly, if the given filename ends with <code>\'.zip\'</code> or <code>\'.bz2\'</code>, the
 * file is assumed to be compressed in <em>zip</em> or <em>bzip2</em> format
 * (respectively).  Files whose names lack these suffixes will be read
 * uncompressed.  Note that if the file is in <em>zip</em> format but the
 * archive contains more than one file, only the first file in the
 * archive will be read and the rest ignored.
 <p>
 * <p>
 * To read a gzip/zip file, libSBML needs to be configured and linked with the
 * <a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at compile
 * time.  It also needs to be linked with the <a target=\'_blank\'
 * href=\'\'>bzip2</a> library to read files in <em>bzip2</em> format.  (Both of
 * these are the default configurations for libSBML.)  Errors about unreadable
 * files will be logged if a compressed filename is given and libSBML was
 * <em>not</em> linked with the corresponding required library.
   <p>
   * This method is identical to
   * @link {@link SBMLReader#readSBMLFromFile(String)} {@link SBMLReader}.readSBMLFromFile(String)@endlink.
   <p>
   * @param filename the name or full pathname of the file to be read.
   <p>
   * @return a pointer to the {@link SBMLDocument} object created from the SBML
   * content in <code>filename</code>.
   <p>
   * <p>
 * @note LibSBML versions 2.x and later versions behave differently in
 * error handling in several respects.  One difference is how early some
 * errors are caught and whether libSBML continues processing a file in
 * the face of some early errors.  In general, libSBML versions after 2.x
 * stop parsing SBML inputs sooner than libSBML version 2.x in the face
 * of XML errors, because the errors may invalidate any further SBML
 * content.  For example, a missing XML declaration at the beginning of
 * the file was ignored by libSBML 2.x but in version 3.x and later, it
 * will cause libSBML to stop parsing the rest of the input altogether.
 * While this behavior may seem more severe and intolerant, it was
 * necessary in order to provide uniform behavior regardless of which
 * underlying XML parser (Expat, Xerces, libxml2) is being used by
 * libSBML.  The XML parsers themselves behave differently in their error
 * reporting, and sometimes libSBML has to resort to the lowest common
 * denominator.
   <p>
   * @see #readSBMLFromString(String)
   * @see SBMLError
   * @see SBMLDocument
   */ public
";


%javamethodmodifiers SBMLReader::readSBMLFromFile(const std::string& filename) "
/**
   * <p>
 * Reads an SBML document from the given file.
 <p>
 * If the file named <code>filename</code> does not exist or its content is not
 * valid SBML, one or more errors will be logged with the
 * {@link SBMLDocument}
 * object returned by this method.  Callers can use the methods on
 * {@link SBMLDocument} such as
 * {@link SBMLDocument#getNumErrors()}
 * and
 * {@link SBMLDocument#getError(long)}
 * to get the errors.  The object returned by
 * {@link SBMLDocument#getError(long)}
 * is an {@link SBMLError} object, and it has methods to get the error code,
 * category, and severity level of the problem, as well as a textual
 * description of the problem.  The possible severity levels range from
 * informational messages to fatal errors; see the documentation for
 * {@link SBMLError}
 * for more information.
 <p>
 * If the file <code>filename</code> could not be read, the file-reading error will
 * appear first.  The error code  can provide a clue about what
 * happened.  For example, a file might be unreadable (either because it does
 * not actually exist or because the user does not have the necessary access
 * priviledges to read it) or some sort of file operation error may have been
 * reported by the underlying operating system.  Callers can check for these
 * situations using a program fragment such as the following:
 <p>
<pre class=\'fragment\'>
{@link SBMLReader} reader = new {@link SBMLReader}();
{@link SBMLDocument} doc  = reader.readSBMLFromFile(filename);

if (doc.getNumErrors() &gt; 0)
{
    if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileUnreadable)
    {
        // Handle case of unreadable file here.
    }
    else if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileOperationError)
    {
        // Handle case of other file operation error here.
    }
    else
    {
        // Handle other error cases.
    }
}
</pre>
<p>
 * <p>
 * If the given filename ends with the suffix <code>\'.gz\'</code> (for example, 
 * <code>\'myfile.xml.gz\'</code>), the file is assumed to be compressed in <em>gzip</em>
 * format and will be automatically decompressed upon reading.
 * Similarly, if the given filename ends with <code>\'.zip\'</code> or <code>\'.bz2\'</code>, the
 * file is assumed to be compressed in <em>zip</em> or <em>bzip2</em> format
 * (respectively).  Files whose names lack these suffixes will be read
 * uncompressed.  Note that if the file is in <em>zip</em> format but the
 * archive contains more than one file, only the first file in the
 * archive will be read and the rest ignored.
 <p>
 * <p>
 * To read a gzip/zip file, libSBML needs to be configured and linked with the
 * <a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at compile
 * time.  It also needs to be linked with the <a target=\'_blank\'
 * href=\'\'>bzip2</a> library to read files in <em>bzip2</em> format.  (Both of
 * these are the default configurations for libSBML.)  Errors about unreadable
 * files will be logged if a compressed filename is given and libSBML was
 * <em>not</em> linked with the corresponding required library.
   <p>
   * This method is identical to
   * @link {@link SBMLReader#readSBML(String)} {@link SBMLReader}.readSBML(String)@endlink.
   <p>
   * @param filename the name or full pathname of the file to be read.
   <p>
   * @return a pointer to the {@link SBMLDocument} object created from the SBML
   * content in <code>filename</code>.
   <p>
   * <p>
 * @note LibSBML versions 2.x and later versions behave differently in
 * error handling in several respects.  One difference is how early some
 * errors are caught and whether libSBML continues processing a file in
 * the face of some early errors.  In general, libSBML versions after 2.x
 * stop parsing SBML inputs sooner than libSBML version 2.x in the face
 * of XML errors, because the errors may invalidate any further SBML
 * content.  For example, a missing XML declaration at the beginning of
 * the file was ignored by libSBML 2.x but in version 3.x and later, it
 * will cause libSBML to stop parsing the rest of the input altogether.
 * While this behavior may seem more severe and intolerant, it was
 * necessary in order to provide uniform behavior regardless of which
 * underlying XML parser (Expat, Xerces, libxml2) is being used by
 * libSBML.  The XML parsers themselves behave differently in their error
 * reporting, and sometimes libSBML has to resort to the lowest common
 * denominator.
   <p>
   * @see #readSBMLFromString(String)
   * @see SBMLError
   * @see SBMLDocument
   */ public
";


%javamethodmodifiers SBMLReader::readSBMLFromString(const std::string& xml) "
/**
   * <p>
 * Reads an SBML document from a text string.
 <p>
 * This method is flexible with respect to the presence of an XML
 * declaration at the beginning of the string.  In particular, if the
 * string in <code>xml</code> does not begin with the XML declaration
 * <pre class=\'fragment\'>
&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;
</pre>
 * then this method will automatically prepend the declaration
 * to <code>xml</code>.
 <p>
 * This method will log a fatal error if the content given in the parameter
 * <code>xml</code> is not in SBML format.  See the method documentation for
 * {@link SBMLReader#readSBML(String)} for an example of code for
 * testing the returned error code.
   <p>
   * @param xml a string containing a full SBML model
   <p>
   * @return a pointer to the {@link SBMLDocument} created from the SBML content,
   * or a null pointer if <code>xml</code> is null.
   <p>
   * <p>
 * @note When using this method to read an {@link SBMLDocument} that uses the SBML
 * Level&nbsp;3 Hierarchical Model Composition package (comp) the document
 * location cannot be set automatically. Thus, if the model contains
 * references to ExternalModelDefinition objects, it will be necessary to
 * manually set the document URI location
 * ({@link SBMLDocument#setLocationURI(String)} in order to facilitate
 * resolving these models.
   <p>
   * @see SBMLReader#readSBML(String)
   */ public
";


%javamethodmodifiers SBMLReader::hasZlib "
/**
   * Static method; returns <code>true</code> if this copy of libSBML supports
   * <i>gzip</I> and <i>zip</i> format compression.
   <p>
   * @return <code>true</code> if libSBML has been linked with the <i>zlib</i>
   * library, <code>false</code> otherwise.
   <p>
   * 
   <p>
   * @see SBMLReader#hasBzip2()
   */ public
";


%javamethodmodifiers SBMLReader::hasBzip2 "
/**
   * Static method; returns <code>true</code> if this copy of libSBML supports
   * <i>bzip2</i> format compression.
   <p>
   * @return <code>true</code> if libSBML is linked with the <i>bzip2</i>
   * libraries, <code>false</code> otherwise.
   <p>
   * 
   <p>
   * @see SBMLReader#hasZlib()
   */ public
";


%javamethodmodifiers SBMLReader::readInternal(const char* content, bool isFile = true) "
/** * @internal */ public
";


%javamethodmodifiers readSBML(const char *filename) "
/**
 * <p>
 * Reads an SBML document from the given file.
 <p>
 * If the file named <code>filename</code> does not exist or its content is not
 * valid SBML, one or more errors will be logged with the
 * {@link SBMLDocument}
 * object returned by this method.  Callers can use the methods on
 * {@link SBMLDocument} such as
 * {@link SBMLDocument#getNumErrors()}
 * and
 * {@link SBMLDocument#getError(long)}
 * to get the errors.  The object returned by
 * {@link SBMLDocument#getError(long)}
 * is an {@link SBMLError} object, and it has methods to get the error code,
 * category, and severity level of the problem, as well as a textual
 * description of the problem.  The possible severity levels range from
 * informational messages to fatal errors; see the documentation for
 * {@link SBMLError}
 * for more information.
 <p>
 * If the file <code>filename</code> could not be read, the file-reading error will
 * appear first.  The error code  can provide a clue about what
 * happened.  For example, a file might be unreadable (either because it does
 * not actually exist or because the user does not have the necessary access
 * priviledges to read it) or some sort of file operation error may have been
 * reported by the underlying operating system.  Callers can check for these
 * situations using a program fragment such as the following:
 <p>
<pre class=\'fragment\'>
{@link SBMLReader} reader = new {@link SBMLReader}();
{@link SBMLDocument} doc  = reader.readSBMLFromFile(filename);

if (doc.getNumErrors() &gt; 0)
{
    if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileUnreadable)
    {
        // Handle case of unreadable file here.
    }
    else if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileOperationError)
    {
        // Handle case of other file operation error here.
    }
    else
    {
        // Handle other error cases.
    }
}
</pre>
<p>
 * <p>
 * If the given filename ends with the suffix <code>\'.gz\'</code> (for example, 
 * <code>\'myfile.xml.gz\'</code>), the file is assumed to be compressed in <em>gzip</em>
 * format and will be automatically decompressed upon reading.
 * Similarly, if the given filename ends with <code>\'.zip\'</code> or <code>\'.bz2\'</code>, the
 * file is assumed to be compressed in <em>zip</em> or <em>bzip2</em> format
 * (respectively).  Files whose names lack these suffixes will be read
 * uncompressed.  Note that if the file is in <em>zip</em> format but the
 * archive contains more than one file, only the first file in the
 * archive will be read and the rest ignored.
 <p>
 * <p>
 * To read a gzip/zip file, libSBML needs to be configured and linked with the
 * <a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at compile
 * time.  It also needs to be linked with the <a target=\'_blank\'
 * href=\'\'>bzip2</a> library to read files in <em>bzip2</em> format.  (Both of
 * these are the default configurations for libSBML.)  Errors about unreadable
 * files will be logged if a compressed filename is given and libSBML was
 * <em>not</em> linked with the corresponding required library.
 */ public
";


%javamethodmodifiers readSBMLFromFile(const char *filename) "
/**
 * <p>
 * Reads an SBML document from the given file.
 <p>
 * If the file named <code>filename</code> does not exist or its content is not
 * valid SBML, one or more errors will be logged with the
 * {@link SBMLDocument}
 * object returned by this method.  Callers can use the methods on
 * {@link SBMLDocument} such as
 * {@link SBMLDocument#getNumErrors()}
 * and
 * {@link SBMLDocument#getError(long)}
 * to get the errors.  The object returned by
 * {@link SBMLDocument#getError(long)}
 * is an {@link SBMLError} object, and it has methods to get the error code,
 * category, and severity level of the problem, as well as a textual
 * description of the problem.  The possible severity levels range from
 * informational messages to fatal errors; see the documentation for
 * {@link SBMLError}
 * for more information.
 <p>
 * If the file <code>filename</code> could not be read, the file-reading error will
 * appear first.  The error code  can provide a clue about what
 * happened.  For example, a file might be unreadable (either because it does
 * not actually exist or because the user does not have the necessary access
 * priviledges to read it) or some sort of file operation error may have been
 * reported by the underlying operating system.  Callers can check for these
 * situations using a program fragment such as the following:
 <p>
<pre class=\'fragment\'>
{@link SBMLReader} reader = new {@link SBMLReader}();
{@link SBMLDocument} doc  = reader.readSBMLFromFile(filename);

if (doc.getNumErrors() &gt; 0)
{
    if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileUnreadable)
    {
        // Handle case of unreadable file here.
    }
    else if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileOperationError)
    {
        // Handle case of other file operation error here.
    }
    else
    {
        // Handle other error cases.
    }
}
</pre>
<p>
 * <p>
 * If the given filename ends with the suffix <code>\'.gz\'</code> (for example, 
 * <code>\'myfile.xml.gz\'</code>), the file is assumed to be compressed in <em>gzip</em>
 * format and will be automatically decompressed upon reading.
 * Similarly, if the given filename ends with <code>\'.zip\'</code> or <code>\'.bz2\'</code>, the
 * file is assumed to be compressed in <em>zip</em> or <em>bzip2</em> format
 * (respectively).  Files whose names lack these suffixes will be read
 * uncompressed.  Note that if the file is in <em>zip</em> format but the
 * archive contains more than one file, only the first file in the
 * archive will be read and the rest ignored.
 <p>
 * <p>
 * To read a gzip/zip file, libSBML needs to be configured and linked with the
 * <a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at compile
 * time.  It also needs to be linked with the <a target=\'_blank\'
 * href=\'\'>bzip2</a> library to read files in <em>bzip2</em> format.  (Both of
 * these are the default configurations for libSBML.)  Errors about unreadable
 * files will be logged if a compressed filename is given and libSBML was
 * <em>not</em> linked with the corresponding required library.
 <p>
 * @param filename the name or full pathname of the file to be read.
 <p>
 * @return a pointer to the {@link SBMLDocument} structure created from the SBML
 * content in <code>filename</code>.
 */ public
";


%javamethodmodifiers readSBMLFromString(const char *xml) "
/**
 * <p>
 * Reads an SBML document from a text string.
 <p>
 * This method is flexible with respect to the presence of an XML
 * declaration at the beginning of the string.  In particular, if the
 * string in <code>xml</code> does not begin with the XML declaration
 * <pre class=\'fragment\'>
&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;
</pre>
 * then this method will automatically prepend the declaration
 * to <code>xml</code>.
 <p>
 * This method will log a fatal error if the content given in the parameter
 * <code>xml</code> is not in SBML format.  See the method documentation for
 * {@link SBMLReader#readSBML(String)} for an example of code for
 * testing the returned error code.
 <p>
 * @param xml a string containing a full SBML model
 <p>
 * @return a pointer to the {@link SBMLDocument} structure created from the SBML
 * content in <code>xml</code>.
 <p>
 * <p>
 * @note When using this method to read an {@link SBMLDocument} that uses the SBML
 * Level&nbsp;3 Hierarchical Model Composition package (comp) the document
 * location cannot be set automatically. Thus, if the model contains
 * references to ExternalModelDefinition objects, it will be necessary to
 * manually set the document URI location
 * ({@link SBMLDocument#setLocationURI(String)} in order to facilitate
 * resolving these models.
 */ public
";


%typemap(javaimports) SBMLWriter "
/** 
 *  File and text-string SBML writer.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The {@link SBMLWriter} class is the converse of {@link SBMLReader}, and provides the
 * main interface for serializing SBML models into XML and writing the
 * result to an output stream or to files and text strings.  The methods 
 * for writing SBML all take an {@link SBMLDocument} object and a destination.  
 * They return a boolean or integer value to indicate success or failure.
 <p>
 * <h2>Support for writing compressed files</h2>
 <p>
 * LibSBML provides support for writing (as well as reading) compressed
 * SBML files.  The process is transparent to the calling
 * application&mdash;the application does not need to do anything
 * deliberate to invoke the functionality.  If a given SBML filename ends
 * with an extension for the <em>gzip</em>, <em>zip</em> or <em>bzip2</em> compression
 * formats (respectively, <code>&quot;.gz&quot;</code>,
 * <code>&quot;.zip&quot;</code>, or <code>&quot;.bz2&quot;</code>),
 * then the methods
 * {@link SBMLWriter#writeSBML(SBMLDocument, String)}
 * and {@link SBMLReader#readSBML(String)}
 * will automatically compress and decompress the file while writing and
 * reading it.  If the filename has no such extension, it
 * will be written and read uncompressed as normal.
 <p>
 * The compression feature requires that the <em>zlib</em> (for <em>gzip</em> and 
 * <em>zip</em> formats) and/or <em>bzip2</em> (for <em>bzip2</em> format) be available on the
 * system running libSBML, and that libSBML was configured with their
 * support compiled-in.  Please see the libSBML <a href=\'../../../libsbml-installation.html\'>installation instructions</a> for 
 * more information about this.  The methods
 * {@link SBMLWriter#hasZlib()} and
 * {@link SBMLWriter#hasBzip2()}
 * can be used by an application to query at run-time whether support
 * for the compression libraries is available in the present copy of
 * libSBML.
 <p>
 * Support for compression is not mandated by the SBML standard, but
 * applications may find it helpful, particularly when large SBML models
 * are being communicated across data links of limited bandwidth.
 */
"


%javamethodmodifiers SBMLWriter::SBMLWriter "
/**
   * Creates a new {@link SBMLWriter}.
   <p>
   * The libSBML {@link SBMLWriter} objects offer methods for writing SBML in
   * XML form to files and text strings.
   */ public
";


%javamethodmodifiers SBMLWriter::setProgramName(const std::string& name) "
/**
   * Sets the name of this program, i.e., the program that is about to
   * write out the {@link SBMLDocument}.
   <p>
   * If the program name and version are set (see
   * {@link SBMLWriter#setProgramVersion(String)}), the
   * following XML comment, intended for human consumption, will be written
   * at the beginning of the XML document:
   * <pre class=\'fragment\'>
 &lt;!-- Created by &lt;program name&gt; version &lt;program version&gt;
 on yyyy-MM-dd HH:mm with libSBML version &lt;libsbml version&gt;. --&gt;
 </pre>
   <p>
   * If the program name and version are not set at some point before
   * calling the writeSBML() methods, no such comment is written out.
   <p>
   * @param name the name of this program (where \'this program\' refers to
   * program in which libSBML is embedded, not libSBML itself!)
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #setProgramVersion(String version)
   */ public
";


%javamethodmodifiers SBMLWriter::setProgramVersion(const std::string& version) "
/**
   * Sets the version of this program, i.e., the program that is about to
   * write out the {@link SBMLDocument}.
   <p>
   * If the program version and name are set (see
   * {@link SBMLWriter#setProgramName(String)}), the
   * following XML comment, intended for human consumption, will be written
   * at the beginning of the document:
   * <pre class=\'fragment\'>
 &lt;!-- Created by &lt;program name&gt; version &lt;program version&gt;
 on yyyy-MM-dd HH:mm with libSBML version &lt;libsbml version&gt;. --&gt;
 </pre>
   <p>
   * If the program version and name are not set at some point before
   * calling the writeSBML() methods, no such comment is written out.
   <p>
   * @param version the version of this program (where \'this program\'
   * refers to program in which libSBML is embedded, not libSBML itself!)
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #setProgramName(String name)
   */ public
";


%javamethodmodifiers SBMLWriter::writeSBML(const SBMLDocument* d, const std::string& filename) "
/**
   * Writes the given SBML document to filename.
   <p>
   * If the given filename ends with the suffix <code>&quot;.gz&quot;</code>
(for example, <code>&quot;myfile.xml.gz&quot;</code>), libSBML assumes the
caller wants the file to be written compressed in <em>gzip</em> format.
Similarly, if the given filename ends with <code>&quot;.zip&quot;</code> or
<code>&quot;.bz2&quot;</code>, libSBML assumes the caller wants the file to
be compressed in <em>zip</em> or <em>bzip2</em> format (respectively).
Files whose names lack these suffixes will be written uncompressed.
<em>Special considerations for the zip format</em>: If the given filename
ends with <code>&quot;.zip&quot;</code>, the file placed in the zip archive
will have the suffix <code>&quot;.xml&quot;</code> or
<code>&quot;.sbml&quot;</code>.  For example, the file in the zip archive
will be named <code>&quot;test.xml&quot;</code> if the given filename is
<code>&quot;test.xml.zip&quot;</code> or <code>&quot;test.zip&quot;</code>.
Similarly, the filename in the archive will be
<code>&quot;test.sbml&quot;</code> if the given filename is
<code>&quot;test.sbml.zip&quot;</code>.

   <p>
   * @param d the SBML document to be written
   <p>
   * @param filename the name or full pathname of the file where the SBML
   * is to be written. 
   <p>
   * @return <code>true</code> on success and <code>false</code> if the filename could not be
   * opened for writing.
   <p>
   * @note To write a gzip/zip file, libSBML needs to be configured and linked with
the <a target=\"_blank\" href=\"http://www.zlib.net/\">zlib</a> library at
compile time.  It also needs to be linked with the <a target=\"_blank\"
href=\"\">bzip2</a> library to write files in <em>bzip2</em> format.  (Both
of these are the default configurations for libSBML.)  Errors about
unreadable files will be logged and this method will return
<code>false</code> if a compressed filename is given and libSBML was
<em>not</em> linked with the corresponding required library.

   <p>
   * @see #setProgramVersion(String version)
   * @see #setProgramName(String name)
   */ public
";


%javamethodmodifiers SBMLWriter::writeSBML(const SBMLDocument* d, std::ostream& stream) "
/**
   * Writes the given SBML document to the output stream.
   <p>
   * @param d the SBML document to be written
   <p>
   * @param stream the stream object where the SBML is to be written.
   <p>
   * @return <code>true</code> on success and <code>false</code> if one of the underlying
   * parser components fail (rare).
   <p>
   * @see #setProgramVersion(String version)
   * @see #setProgramName(String name)
   */ public
";


%javamethodmodifiers SBMLWriter::writeToString(const SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers SBMLWriter::writeSBMLToFile(const SBMLDocument* d, const std::string& filename) "
/**
   * Writes the given SBML document to filename.
   <p>
   * If the given filename ends with the suffix <code>&quot;.gz&quot;</code>
(for example, <code>&quot;myfile.xml.gz&quot;</code>), libSBML assumes the
caller wants the file to be written compressed in <em>gzip</em> format.
Similarly, if the given filename ends with <code>&quot;.zip&quot;</code> or
<code>&quot;.bz2&quot;</code>, libSBML assumes the caller wants the file to
be compressed in <em>zip</em> or <em>bzip2</em> format (respectively).
Files whose names lack these suffixes will be written uncompressed.
<em>Special considerations for the zip format</em>: If the given filename
ends with <code>&quot;.zip&quot;</code>, the file placed in the zip archive
will have the suffix <code>&quot;.xml&quot;</code> or
<code>&quot;.sbml&quot;</code>.  For example, the file in the zip archive
will be named <code>&quot;test.xml&quot;</code> if the given filename is
<code>&quot;test.xml.zip&quot;</code> or <code>&quot;test.zip&quot;</code>.
Similarly, the filename in the archive will be
<code>&quot;test.sbml&quot;</code> if the given filename is
<code>&quot;test.sbml.zip&quot;</code>.

   <p>
   * @param d the SBML document to be written
   <p>
   * @param filename the name or full pathname of the file where the SBML
   * is to be written. 
   <p>
   * @return <code>true</code> on success and <code>false</code> if the filename could not be
   * opened for writing.
   <p>
   * @note To write a gzip/zip file, libSBML needs to be configured and linked with
the <a target=\"_blank\" href=\"http://www.zlib.net/\">zlib</a> library at
compile time.  It also needs to be linked with the <a target=\"_blank\"
href=\"\">bzip2</a> library to write files in <em>bzip2</em> format.  (Both
of these are the default configurations for libSBML.)  Errors about
unreadable files will be logged and this method will return
<code>false</code> if a compressed filename is given and libSBML was
<em>not</em> linked with the corresponding required library.

   <p>
   * @see #setProgramVersion(String version)
   * @see #setProgramName(String name)
   */ public
";


%javamethodmodifiers SBMLWriter::writeSBMLToString(const SBMLDocument* d) "
/**
   * Writes the given SBML document to an in-memory string and returns a
   * pointer to it.
   <p>
   * The string is owned by the caller and should be freed (with <code>free</code>())
   * when no longer needed.
   <p>
   * @param d the SBML document to be written
   <p>
   * @return the string on success and <code>0</code> if one of the underlying parser
   * components fail.
   <p>
   * @see #setProgramVersion(String version)
   * @see #setProgramName(String name)
   */ public
";


%javamethodmodifiers SBMLWriter::hasZlib "
/**
   * Predicate returning <code>true</code> if this copy of libSBML has been linked
   * with the <em>zlib</em> library.
   <p>
   * LibSBML supports reading and writing files compressed with either
   * bzip2 or zip/gzip compression.  The facility depends on libSBML having
   * been compiled with the necessary support libraries.  This method
   * allows a calling program to inquire whether that is the case for the
   * copy of libSBML it is using.
   <p>
   * @return <code>true</code> if libSBML is linked with zlib, <code>false</code> otherwise.
   <p>
   * 
   <p>
   * @see SBMLWriter#hasBzip2() 
   */ public
";


%javamethodmodifiers SBMLWriter::hasBzip2 "
/**
   * Predicate returning <code>true</code> if this copy of libSBML has been linked
   * with the <em>bzip2</em> library.
   <p>
   * LibSBML supports reading and writing files compressed with either
   * bzip2 or zip/gzip compression.  The facility depends on libSBML having
   * been compiled with the necessary support libraries.  This method
   * allows a calling program to inquire whether that is the case for the
   * copy of libSBML it is using.
   <p>
   * @return <code>true</code> if libSBML is linked with bzip2, <code>false</code> otherwise.
   <p>
   * 
   <p>
   * @see SBMLWriter#hasZlib() 
   */ public
";


%javamethodmodifiers writeSBML(const SBMLDocument_t *d, const char *filename) "
/**
 * Writes the given SBML document <code>d</code> to the file named by <code>filename</code>.
 * This convenience function is functionally equivalent to:
 <p>
 *   SBMLWriter_writeSBML(SBMLWriter_create(), d, filename);
 <p>
 * If the given filename ends with the suffix <code>&quot;.gz&quot;</code>
(for example, <code>&quot;myfile.xml.gz&quot;</code>), libSBML assumes the
caller wants the file to be written compressed in <em>gzip</em> format.
Similarly, if the given filename ends with <code>&quot;.zip&quot;</code> or
<code>&quot;.bz2&quot;</code>, libSBML assumes the caller wants the file to
be compressed in <em>zip</em> or <em>bzip2</em> format (respectively).
Files whose names lack these suffixes will be written uncompressed.
<em>Special considerations for the zip format</em>: If the given filename
ends with <code>&quot;.zip&quot;</code>, the file placed in the zip archive
will have the suffix <code>&quot;.xml&quot;</code> or
<code>&quot;.sbml&quot;</code>.  For example, the file in the zip archive
will be named <code>&quot;test.xml&quot;</code> if the given filename is
<code>&quot;test.xml.zip&quot;</code> or <code>&quot;test.zip&quot;</code>.
Similarly, the filename in the archive will be
<code>&quot;test.sbml&quot;</code> if the given filename is
<code>&quot;test.sbml.zip&quot;</code>.

 <p>
 * @param d the {@link SBMLDocument} object to be written out in XML format
 <p>
 * @param filename a string giving the path to a file where the XML
 * content is to be written.
 <p>
 * @return <code>1</code> on success and <code>0</code> (zero) if <code>filename</code> could not be
 * written.  Some possible reasons for failure include (a) being unable to
 * open the file, and (b) using a filename that indicates a compressed SBML
 * file (i.e., a filename ending in <code>&quot;.zip&quot;</code> or
 * similar) when the compression functionality has not been enabled in
 * the underlying copy of libSBML.
 <p>
 * @see SBMLWriter#hasZlib()
 * @see SBMLWriter#hasBzip2()
 */ public
";


%javamethodmodifiers writeSBMLToString(const SBMLDocument_t *d) "
/**
 * Writes the given SBML document <code>d</code> to an in-memory string and returns a
 * pointer to it.  The string is owned by the caller and should be freed
 * (with free()) when no longer needed.  This convenience function is
 * functionally equivalent to:
 <p>
 *   SBMLWriter_writeSBMLToString(SBMLWriter_create(), d);
 <p>
 * but does not require the caller to create an {@link SBMLWriter} object first.
 <p>
 * @param d an {@link SBMLDocument} object to be written out in XML format
 <p>
 * @return the string on success and <code>null</code> if one of the underlying parser
 * components fail.
 */ public
";


%javamethodmodifiers writeSBMLToFile(const SBMLDocument_t *d, const char *filename) "
/**
 * Writes the given SBML document <code>d</code> to the file <code>filename</code>.
 * This convenience function is functionally equivalent to:
 <p>
 *   SBMLWriter_writeSBMLToFile(SBMLWriter_create(), d, filename);
 <p>
 * but that does not require the caller to create an {@link SBMLWriter} object first.
 <p>
 * If the given filename ends with the suffix <code>&quot;.gz&quot;</code>
(for example, <code>&quot;myfile.xml.gz&quot;</code>), libSBML assumes the
caller wants the file to be written compressed in <em>gzip</em> format.
Similarly, if the given filename ends with <code>&quot;.zip&quot;</code> or
<code>&quot;.bz2&quot;</code>, libSBML assumes the caller wants the file to
be compressed in <em>zip</em> or <em>bzip2</em> format (respectively).
Files whose names lack these suffixes will be written uncompressed.
<em>Special considerations for the zip format</em>: If the given filename
ends with <code>&quot;.zip&quot;</code>, the file placed in the zip archive
will have the suffix <code>&quot;.xml&quot;</code> or
<code>&quot;.sbml&quot;</code>.  For example, the file in the zip archive
will be named <code>&quot;test.xml&quot;</code> if the given filename is
<code>&quot;test.xml.zip&quot;</code> or <code>&quot;test.zip&quot;</code>.
Similarly, the filename in the archive will be
<code>&quot;test.sbml&quot;</code> if the given filename is
<code>&quot;test.sbml.zip&quot;</code>.

 <p>
 * @param d an {@link SBMLDocument} object to be written out in XML format
 <p>
 * @param filename a string giving the path to a file where the XML
 * content is to be written.
 <p>
 * @return <code>1</code> on success and <code>0</code> (zero) if <code>filename</code> could not be
 * written.  Some possible reasons for failure include (a) being unable to
 * open the file, and (b) using a filename that indicates a compressed SBML
 * file (i.e., a filename ending in <code>&quot;.zip&quot;</code> or
 * similar) when the compression functionality has not been enabled in
 * the underlying copy of libSBML.
 <p>
 * @see SBMLWriter#hasZlib()
 * @see SBMLWriter#hasBzip2()
 */ public
";


%javamethodmodifiers SBMLTypeCode_toString(int tc, const char* pkgName) "
/**
 * This method takes an SBML type code and returns a string representing
 * the code.
 <p>
 * LibSBML attaches an identifying code to every
 * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
 * other languages, the set of type codes is stored in an enumeration; in
 * the Java language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class {@link
 * libsbmlConstants}.  The names of the type codes all begin with the
 * characters <code>SBML_.</code> 
 <p>
 * @return a human readable name for the given
 * SBML type code.
 <p>
 * @note The caller does not own the returned string and is therefore not
 * allowed to modify it.
 */ public
";


%typemap(javaimports) SBase "
/** 
 *  SBML\'s <em>SBase</em> class, base class of most SBML objects.
 <p>
 * Most components in SBML are derived from a single abstract base type,
 * {@link SBase}.  In addition to serving as the parent class for most other
 * classes of objects in SBML, this base type is designed to allow a
 * modeler or a software package to attach arbitrary information to each
 * major element or list in an SBML model.
 <p>
 * {@link SBase} has an optional subelement called \'notes\'.  It is intended to
 * serve as a place for storing optional information intended to be seen by
 * humans.  An example use of the \'notes\' element would be to contain
 * formatted user comments about the model element in which the \'notes\'
 * element is enclosed.  There are certain conditions on the XHTML content
 * permitted inside the \'notes\' element; please consult the <a
 * target=\'_blank\' href=\'http://sbml.org/Documents/Specifications\'>SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for \'notes\'
 * content.
 <p>
 * {@link SBase} has another optional subelement called \'annotation\'.  Whereas the
 * \'notes\' element described above is a container for content to be shown
 * directly to humans, the \'annotation\' element is a container for optional
 * software-generated content <em>not</em> meant to be shown to humans.  The
 * element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary data content.  SBML places
 * only a few restrictions on the organization of the content; these are
 * intended to help software tools read and write the data as well as help
 * reduce conflicts between annotations added by different tools.  As is
 * the case with \'notes\', it is important to refer to the <a
 * target=\'_blank\' href=\'http://sbml.org/Documents/Specifications\'>SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for
 * \'annotation\' content.
 <p>
 * It is worth pointing out that the \'annotation\' element in the definition
 * of {@link SBase} exists in order that software developers may attach optional
 * application-specific data to the elements in an SBML model.  However, it
 * is important that this facility not be misused.  In particular, it is
 * <em>critical</em> that data essential to a model definition or that can
 * be encoded in existing SBML elements is <em>not</em> stored in
 * \'annotation\'. {@link Parameter} values, functional dependencies between model
 * elements, etc., should not be recorded as annotations.  It is crucial to
 * keep in mind the fact that data placed in annotations can be freely
 * ignored by software applications.  If such data affects the
 * interpretation of a model, then software interoperability is greatly
 * impeded.
 <p>
 * SBML Level 2 introduced an optional {@link SBase} attribute named \'metaid\' for
 * supporting metadata annotations using RDF (<a target=\'_blank\'
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>). The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML identifier
 * type, which means each \'metaid\' value must be globally unique within an
 * SBML file.  (Importantly, this uniqueness criterion applies across any
 * attribute with type <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML
 * ID</a>, not just the \'metaid\' attribute used by SBML&mdash;something to
 * be aware of if your application-specific XML content inside the
 * \'annotation\' subelement happens to use <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)  The \'metaid\' value
 * serves to identify a model component for purposes such as referencing
 * that component from metadata placed within \'annotation\' subelements.
 <p>
 * Beginning with SBML Level 2 Version 3, {@link SBase} also has an optional
 * attribute named \'sboTerm\' for supporting the use of the Systems Biology
 * Ontology.  In SBML proper, the data type of the attribute is a string of
 * the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a seven digit integer number;
 * libSBML simplifies the representation by only storing the \'NNNNNNN\'
 * integer portion.  Thus, in libSBML, the \'sboTerm\' attribute on {@link SBase} has
 * data type <code>int</code>, and {@link SBO} identifiers are stored simply as integers.
 * (For convenience, {@link SBase} offers methods for returning both the integer
 * form and a text-string form of the {@link SBO} identifier.)  {@link SBO} terms are a
 * type of optional annotation, and each different class of SBML object
 * derived from {@link SBase} imposes its own requirements about the values
 * permitted for \'sboTerm\'.  Please consult the SBML Level&nbsp;2
 * Version&nbsp;4 specification for more information about the use of {@link SBO}
 * and the \'sboTerm\' attribute.
 <p>
 * Finally, note that, in the list of methods on {@link SBase}, there is no public
 * constructor because {@link SBase} is an abstract class.  The constructors reside
 * in the subclasses derived from {@link SBase}.
 <p>
 * <h2>Standard format for annotations linking data resources</h2>
 <p>
 * SBML Level 2 Versions 2, 3 and 4, and Level&nbsp;3, define a proposed
 * regular format for encoding two particular categories of annotations:
 * (a) references to controlled vocabulary terms and database identifiers
 * which define and describe biological and biochemical entities in a
 * model; and (b) descriptions of the provenance of a model, including its
 * author(s) and modification history.
 */
"


%javamethodmodifiers SBase::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this {@link SBase} object.
   <p>
   * @param v the SBMLVisitor instance to be used
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers SBase::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBase} object.
   <p>
   * @return the (deep) copy of this {@link SBase} object.
   */ public
";


%javamethodmodifiers SBase::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide <code>SId</code> namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id string representing the \'id\' attribute value of the object
   * to find.
   <p>
   * @return pointer to the first element found with the given identifier.
   */ public
";


%javamethodmodifiers SBase::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with a specific \'metaid\'
   * attribute value, or <code>null</code> if no such object is found.
   <p>
   * <p>
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
   <p>
   * @param metaid string representing the \'metaid\' attribute value of the
   * object to find.
   <p>
   * @return pointer to the first element found with the given meta-identifier.
   */ public
";


%javamethodmodifiers SBase::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child {@link SBase} objects, including those nested to
   * an arbitrary depth.
   <p>
   * @return a pointer to a List of pointers to all objects that are children
   * of this object.
   */ public
";


%javamethodmodifiers SBase::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers SBase::renameMetaIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given meta identifier attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, object \'meta\' identifiers are of the XML data type <code>ID</code>;
 * the SBML object attribute itself is typically named <code>metaid</code>.  All
 * attributes that hold values <em>referring</em> to values of type
 * <code>ID</code> are of the XML data type <code>IDREF</code>.  They are also
 * sometimes informally referred to as \'metaid refs\', in analogy to the
 * SBML-defined type <code>SIdRef</code>.
 <p>
 * This method works by looking at all meta-identifier attribute values,
 * comparing the identifiers to the value of <code>oldid</code>.  If any matches are
 * found, the matching identifiers are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers SBase::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers SBase::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers SBase::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers SBase::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers SBase::getElementFromPluginsBySId(std::string id) "
/** * @internal */ public
";


%javamethodmodifiers SBase::getElementFromPluginsByMetaId(std::string metaid) "
/** * @internal */ public
";


%javamethodmodifiers SBase::hasNonstandardIdentifierBeginningWith(const std::string& prefix) "
/** * @internal */ public
";


%javamethodmodifiers SBase::prependStringToAllIdentifiers(const std::string& prefix) "
/** * @internal */ public
";


%javamethodmodifiers SBase::transformIdentifiers(IdentifierTransformer* idTransformer) "
/** * @internal */ public
";


%javamethodmodifiers SBase::getAllElementsFromPlugins(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child {@link SBase} objects contained in SBML package
   * plug-ins.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * This method walks down the list of all SBML Level&nbsp;3 packages used
   * by this object and returns all child objects defined by those packages.
   <p>
   * @return a pointer to a List of pointers to all children objects from
   * plug-ins.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers SBase::getMetaId() const "
/**
   * Returns the value of the \'metaid\' attribute of this object.
   <p>
   * <p>
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
   <p>
   * @return the meta-identifier of this SBML object.
   <p>
   * @see #isSetMetaId()
   * @see #setMetaId(String metaid)
   */ public
";


%javamethodmodifiers SBase::getMetaId "
/**
   * Returns the value of the \'metaid\' attribute of this object.
   <p>
   * <p>
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
   <p>
   * @return the meta-identifier of this SBML object, as a string.
   <p>
   * @see #isSetMetaId()
   * @see #setMetaId(String metaid)
   */ public
";


%javamethodmodifiers SBase::getId() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::getName() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::getNotes "
/**
   * Returns the content of the \'notes\' subelement of this object as
   * a tree of {@link XMLNode} objects.
   <p>
   * <p>
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * {@link Constraint}), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type {@link SBase} can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 <p>
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be <em>entirely</em> free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)}; this
 * method implements a verification process that lets callers check whether
 * the content of a given {@link XMLNode} object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured. 
   <p>
   * The \'notes\' element content returned by this method will be in XML
   * form, but libSBML does not provide an object model specifically for
   * the content of notes.  Callers will need to traverse the XML tree
   * structure using the facilities available on {@link XMLNode} and related
   * objects.  For an alternative method of accessing the notes, see
   * getNotesString().
   <p>
   * @return the content of the \'notes\' subelement of this SBML object as a
   * tree structure composed of {@link XMLNode} objects.
   <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes, boolean addXHTMLMarkup)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::getNotes() const "
/**
   * Returns the content of the \'notes\' subelement of this object as
   * a tree of {@link XMLNode} objects.
   <p>
   * <p>
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * {@link Constraint}), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type {@link SBase} can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 <p>
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be <em>entirely</em> free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)}; this
 * method implements a verification process that lets callers check whether
 * the content of a given {@link XMLNode} object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured. 
   <p>
   * The \'notes\' element content returned by this method will be in XML
   * form, but libSBML does not provide an object model specifically for
   * the content of notes.  Callers will need to traverse the XML tree
   * structure using the facilities available on {@link XMLNode} and related
   * objects.  For an alternative method of accessing the notes, see
   * getNotesString().
   <p>
   * @return the content of the \'notes\' subelement of this SBML object as a
   * tree structure composed of {@link XMLNode} objects.
   <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes, boolean addXHTMLMarkup)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::getNotesString "
/**
   * Returns the content of the \'notes\' subelement of this object as a
   * string.
   <p>
   * <p>
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * {@link Constraint}), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type {@link SBase} can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 <p>
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be <em>entirely</em> free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)}; this
 * method implements a verification process that lets callers check whether
 * the content of a given {@link XMLNode} object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured. 
   <p>
   * For an alternative method of accessing the notes, see getNotes(),
   * which returns the content as an {@link XMLNode} tree structure.  Depending on
   * an application\'s needs, one or the other method may be more
   * convenient.
   <p>
   * @return the content of the \'notes\' subelement of this SBML object as a
   * string.
   <p>
   * @see #getNotes()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes, boolean addXHTMLMarkup)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::getNotesString() const "
/**
   * Returns the content of the \'notes\' subelement of this object as a
   * string.
   <p>
   * <p>
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * {@link Constraint}), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type {@link SBase} can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 <p>
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be <em>entirely</em> free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)}; this
 * method implements a verification process that lets callers check whether
 * the content of a given {@link XMLNode} object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured. 
   <p>
   * For an alternative method of accessing the notes, see getNotes(),
   * which returns the content as an {@link XMLNode} tree structure.  Depending on
   * an application\'s needs, one or the other method may be more
   * convenient.
   <p>
   * @return the content of the \'notes\' subelement of this SBML object as a
   * string.
   <p>
   * @see #getNotes()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes, boolean addXHTMLMarkup)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::getAnnotation "
/**
   * Returns the content of the \'annotation\' subelement of this object as
   * a tree of {@link XMLNode} objects.
   <p>
   * <p>
 * Whereas the SBML \'notes\' subelement is a container for content to be
 * shown directly to humans, the \'annotation\' element is a container for
 * optional software-generated content <em>not</em> meant to be shown to
 * humans.  Every object derived from {@link SBase} can have its own value for
 * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary well-formed XML data
 * content.
 <p>
 * SBML places a few restrictions on the organization of the content of
 * annotations; these are intended to help software tools read and write
 * the data as well as help reduce conflicts between annotations added by
 * different tools.  Please see the SBML specifications for more details. 
   <p>
   * The annotations returned by this method will be in XML form.  LibSBML
   * provides an object model and related interfaces for certain specific
   * kinds of annotations, namely model history information and RDF
   * content.  See the {@link ModelHistory}, {@link CVTerm} and {@link RDFAnnotationParser} classes
   * for more information about the facilities available.
   <p>
   * @return the annotation of this SBML object as a tree of {@link XMLNode} objects.
   <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */ public
";


%javamethodmodifiers SBase::getAnnotation() const "
/**
   * Returns the content of the \'annotation\' subelement of this object as
   * a tree of {@link XMLNode} objects.
   <p>
   * <p>
 * Whereas the SBML \'notes\' subelement is a container for content to be
 * shown directly to humans, the \'annotation\' element is a container for
 * optional software-generated content <em>not</em> meant to be shown to
 * humans.  Every object derived from {@link SBase} can have its own value for
 * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary well-formed XML data
 * content.
 <p>
 * SBML places a few restrictions on the organization of the content of
 * annotations; these are intended to help software tools read and write
 * the data as well as help reduce conflicts between annotations added by
 * different tools.  Please see the SBML specifications for more details. 
   <p>
   * The annotations returned by this method will be in XML form.  LibSBML
   * provides an object model and related interfaces for certain specific
   * kinds of annotations, namely model history information and RDF
   * content.  See the {@link ModelHistory}, {@link CVTerm} and {@link RDFAnnotationParser} classes
   * for more information about the facilities available.
   <p>
   * @return the annotation of this SBML object as a tree of {@link XMLNode} objects.
   <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */ public
";


%javamethodmodifiers SBase::getAnnotationString "
/**
   * Returns the content of the \'annotation\' subelement of this object as a
   * character string.
   <p>
   * <p>
 * Whereas the SBML \'notes\' subelement is a container for content to be
 * shown directly to humans, the \'annotation\' element is a container for
 * optional software-generated content <em>not</em> meant to be shown to
 * humans.  Every object derived from {@link SBase} can have its own value for
 * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary well-formed XML data
 * content.
 <p>
 * SBML places a few restrictions on the organization of the content of
 * annotations; these are intended to help software tools read and write
 * the data as well as help reduce conflicts between annotations added by
 * different tools.  Please see the SBML specifications for more details. 
   <p>
   * The annotations returned by this method will be in string form.  See the
   * method getAnnotation() for a version that returns annotations in XML form.
   <p>
   * @return the annotation of this SBML object as a character string.
   <p>
   * @see #getAnnotation()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */ public
";


%javamethodmodifiers SBase::getAnnotationString() const "
/**
   * Returns the content of the \'annotation\' subelement of this object as a
   * character string.
   <p>
   * <p>
 * Whereas the SBML \'notes\' subelement is a container for content to be
 * shown directly to humans, the \'annotation\' element is a container for
 * optional software-generated content <em>not</em> meant to be shown to
 * humans.  Every object derived from {@link SBase} can have its own value for
 * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary well-formed XML data
 * content.
 <p>
 * SBML places a few restrictions on the organization of the content of
 * annotations; these are intended to help software tools read and write
 * the data as well as help reduce conflicts between annotations added by
 * different tools.  Please see the SBML specifications for more details.
   <p>
   * The annotations returned by this method will be in string form.  See the
   * method getAnnotation() for a version that returns annotations in XML form.
   <p>
   * @return the annotation of this SBML object as a character string.
   <p>
   * @see #getAnnotation()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */ public
";


%javamethodmodifiers SBase::getNamespaces() const "
/**
   * Returns a list of the XML Namespaces declared on the SBML document
   * owning this object.
   <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and (in
   * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   <p>
   * @return the XML Namespaces associated with this SBML object, or <code>null</code>
   * in certain very usual circumstances where a namespace is not set.
   <p>
   * @see #getLevel()
   * @see #getVersion()
   */ public
";


%javamethodmodifiers SBase::getSBMLDocument() const "
/**
   * Returns the {@link SBMLDocument} object containing <em>this</em> object instance.
   <p>
   * <p>
 * LibSBML uses the class {@link SBMLDocument} as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * {@link SBMLDocument} object.  {@link SBMLDocument} corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
   <p>
   * This method allows the caller to obtain the {@link SBMLDocument} for the
   * current object.
   <p>
   * @return the parent {@link SBMLDocument} object of this SBML object.
   <p>
   * @see #getParentSBMLObject()
   * @see #getModel()
   */ public
";


%javamethodmodifiers SBase::getSBMLDocument "
/**
   * Returns the {@link SBMLDocument} object containing <em>this</em> object instance.
   <p>
   * <p>
 * LibSBML uses the class {@link SBMLDocument} as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * {@link SBMLDocument} object.  {@link SBMLDocument} corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
   <p>
   * This method allows the caller to obtain the {@link SBMLDocument} for the
   * current object.
   <p>
   * @return the parent {@link SBMLDocument} object of this SBML object.
   <p>
   * @see #getParentSBMLObject()
   * @see #getModel()
   */ public
";


%javamethodmodifiers SBase::getParentSBMLObject "
/**
   * Returns the parent SBML object containing this object.
   <p>
   * This returns the immediately-containing object.  This method is
   * convenient when holding an object nested inside other objects in an
   * SBML model.  
   <p>
   * @return the parent SBML object of this SBML object.
   <p>
   * @see #getSBMLDocument()
   * @see #getModel()
   */ public
";


%javamethodmodifiers SBase::getParentSBMLObject() const "
/**
   * Returns the parent SBML object containing this object.
   <p>
   * This returns the immediately-containing object.  This method is
   * convenient when holding an object nested inside other objects in an
   * SBML model.  
   <p>
   * @return the parent SBML object of this SBML object.
   <p>
   * @see #getSBMLDocument()
   * @see #getModel()
   */ public
";


%javamethodmodifiers SBase::getAncestorOfType(int type, const std::string pkgName = "core") "
/**
   * Returns the first ancestor object that has the given SBML type code from the given package.
   <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   <p>
   * This method searches the tree of objects that are parents of this
   * object, and returns the first one that has the given SBML type code from 
   * the given <code>pkgName</code>.
   <p>
   * @param type the SBML type code of the object sought
   <p>
   * @param pkgName (optional) the short name of an SBML Level&nbsp;3
   * package to which the sought-after object must belong
   <p>
   * @return the ancestor SBML object of this SBML object that corresponds
   * to the given SBML object type
   * code, or <code>null</code> if no ancestor exists.
   <p>
   * @warning The optional argument <code>pkgName</code> must be used for all type codes
   * from SBML Level&nbsp;3 packages.  Otherwise, the function will search the 
   * \'core\' namespace alone, not find any corresponding elements, and return 
   * null.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers SBase::getAncestorOfType(int type, const std::string pkgName = "core") const "
/**
   * Returns the first ancestor object that has the given SBML type code from the given package.
   <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   <p>
   * This method searches the tree of objects that are parents of this
   * object, and returns the first one that has the given SBML type code from 
   * the given <code>pkgName</code>.
   <p>
   * @param type the SBML type code of the object sought
   <p>
   * @param pkgName (optional) the short name of an SBML Level&nbsp;3
   * package to which the sought-after object must belong
   <p>
   * @return the ancestor SBML object of this SBML object that corresponds
   * to the given SBML object type
   * code, or <code>null</code> if no ancestor exists.
   <p>
   * @warning The optional argument <code>pkgName</code> must be used for all type codes
   * from SBML Level&nbsp;3 packages.  Otherwise, the function will search the 
   * \'core\' namespace alone, not find any corresponding elements, and return 
   * null.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers SBase::getSBOTerm() const "
/**
   * Returns the integer portion of the value of the \'sboTerm\' attribute of
   * this object.
   <p>
   * Beginning with SBML Level 2 Version 3, objects derived from {@link SBase} have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on {@link SBase} has data type <code>int</code>, and {@link SBO} identifiers
   * are stored simply as integers.  (For convenience, libSBML offers
   * methods for returning both the integer form and a text-string form of
   * the {@link SBO} identifier.)
   <p>
   * {@link SBO} terms are a type of optional annotation, and each different class
   * of SBML object derived from {@link SBase} imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of {@link SBO} and the \'sboTerm\' attribute.
   <p>
   * @return the value of the \'sboTerm\' attribute as an integer, or <code>-1</code>
   * if the value is not set.
   */ public
";


%javamethodmodifiers SBase::getSBOTermID() const "
/**
   * Returns the string representation of the \'sboTerm\' attribute of
   * this object.
   <p>
   * Beginning with SBML Level 2 Version 3, objects derived from {@link SBase} have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on {@link SBase} has data type <code>int</code>, and {@link SBO} identifiers
   * are stored simply as integers.  This method returns the entire {@link SBO}
   * identifier as a text string in the form \'SBO:NNNNNNN\'.
   <p>
   * {@link SBO} terms are a type of optional annotation, and each different class
   * of SBML object derived from {@link SBase} imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of {@link SBO} and the \'sboTerm\' attribute.
   <p>
   * @return the value of the \'sboTerm\' attribute as a string (its value
   * will be of the form \'SBO:NNNNNNN\'), or an empty string if
   * the value is not set.
   */ public
";


%javamethodmodifiers SBase::getSBOTermAsURL() const "
/**
   * Returns the URL representation of the \'sboTerm\' attribute of this
   * object.
   <p>
   * This method returns the entire {@link SBO} identifier as a text string in the
   * form <code style=\'margin-right:0; padding-right:0\'>http</code><code style=\'margin-left:0; padding-left:0\'>://identifiers.org/biomodels.sbo/SBO:NNNNNNN\'</code>.
   <p>
   * {@link SBO} terms are a type of optional annotation, and each different class
   * of SBML object derived from {@link SBase} imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of {@link SBO} and the \'sboTerm\' attribute.
   <p>
   * @return the value of the \'sboTerm\' attribute as an identifiers.org URL,
   * or an empty string if the value is not set.
   */ public
";


%javamethodmodifiers SBase::getLine() const "
/**
   * Returns the line number on which this object first appears in the XML
   * representation of the SBML document.
   <p>
   * @return the line number of this SBML object.
   <p>
   * @note The line number for each construct in an SBML model is set upon
   * reading the model.  The accuracy of the line number depends on the
   * correctness of the XML representation of the model, and on the
   * particular XML parser library being used.  The former limitation
   * relates to the following problem: if the model is actually invalid
   * XML, then the parser may not be able to interpret the data correctly
   * and consequently may not be able to establish the real line number.
   * The latter limitation is simply that different parsers seem to have
   * their own accuracy limitations, and out of all the parsers supported
   * by libSBML, none have been 100% accurate in all situations. (At this
   * time, libSBML supports the use of <a target=\'_blank\'
   * href=\'http://xmlsoft.org\'>libxml2</a>, <a target=\'_blank\'
   * href=\'http://expat.sourceforge.net/\'>Expat</a> and <a target=\'_blank\'
   * href=\'http://xerces.apache.org/xerces-c/\'>Xerces</a>.)
   <p>
   * @see #getColumn()
   */ public
";


%javamethodmodifiers SBase::getColumn() const "
/**
   * Returns the column number on which this object first appears in the XML
   * representation of the SBML document.
   <p>
   * @return the column number of this SBML object.
   <p>
   * @note The column number for each construct in an SBML model is set
   * upon reading the model.  The accuracy of the column number depends on
   * the correctness of the XML representation of the model, and on the
   * particular XML parser library being used.  The former limitation
   * relates to the following problem: if the model is actually invalid
   * XML, then the parser may not be able to interpret the data correctly
   * and consequently may not be able to establish the real column number.
   * The latter limitation is simply that different parsers seem to have
   * their own accuracy limitations, and out of all the parsers supported
   * by libSBML, none have been 100% accurate in all situations. (At this
   * time, libSBML supports the use of <a target=\'_blank\'
   * href=\'http://xmlsoft.org\'>libxml2</a>, <a target=\'_blank\'
   * href=\'http://expat.sourceforge.net/\'>Expat</a> and <a target=\'_blank\'
   * href=\'http://xerces.apache.org/xerces-c/\'>Xerces</a>.)
   <p>
   * @see #getLine()
   */ public
";


%javamethodmodifiers SBase::getModelHistory() const "
/**
   * Returns the {@link ModelHistory} object, if any, attached to this object.
   <p>
   * @return the {@link ModelHistory} object attached to this object, or <code>null</code> if
   * none exist.
   <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */ public
";


%javamethodmodifiers SBase::getModelHistory "
/**
   * Returns the {@link ModelHistory} object, if any, attached to this object.
   <p>
   * @return the {@link ModelHistory} object attached to this object, or <code>null</code> if
   * none exist.
   <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */ public
";


%javamethodmodifiers SBase::isSetMetaId() const "
/**
   * Predicate returning <code>true</code> if this object\'s \'metaid\' attribute is set.
   <p>
   * <p>
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support. 
   <p>
   * @return <code>true</code> if the \'metaid\' attribute of this SBML object is
   * set, <code>false</code> otherwise.
   <p>
   * @see #getMetaId()
   * @see #setMetaId(String metaid)
   */ public
";


%javamethodmodifiers SBase::isSetId() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::isSetName() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::isSetNotes() const "
/**
   * Predicate returning <code>true</code> if this
   * object\'s \'notes\' subelement exists and has content.
   <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   <p>
   * @return <code>true</code> if a \'notes\' subelement exists, <code>false</code> otherwise.
   <p>
   * @see #getNotes()
   * @see #getNotesString()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes, boolean addXHTMLMarkup)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::isSetAnnotation() const "
/**
   * Predicate returning <code>true</code> if this
   * object\'s \'annotation\' subelement exists and has content.
   <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   <p>
   * @return <code>true</code> if a \'annotation\' subelement exists, <code>false</code>
   * otherwise.
   <p>
   * @see #getAnnotation()
   * @see #getAnnotationString()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */ public
";


%javamethodmodifiers SBase::isSetSBOTerm() const "
/**
   * Predicate returning <code>true</code> if this
   * object\'s \'sboTerm\' attribute is set.
   <p>
   * @return <code>true</code> if the \'sboTerm\' attribute of this SBML object is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBase::setMetaId(const std::string& metaid) "
/**
   * Sets the value of the meta-identifier attribute of this object.
   <p>
   * <p>
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support. 
   <p>
   * The string <code>metaid</code> is copied.  
   <p>
   * @param metaid the identifier string to use as the value of the
   * \'metaid\' attribute
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @see #getMetaId()
   * @see #isSetMetaId()
   */ public
";


%javamethodmodifiers SBase::isSetModelHistory "
/**
   * Predicate returning <code>true</code> if this
   * object has a {@link ModelHistory} object attached to it.
   <p>
   * @return <code>true</code> if the {@link ModelHistory} of this object is set, 
   * <code>false</code> otherwise.
   <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */ public
";


%javamethodmodifiers SBase::setId(const std::string& sid) "
/** * @internal */ public
";


%javamethodmodifiers SBase::setName(const std::string& name) "
/** * @internal */ public
";


%javamethodmodifiers SBase::setAnnotation(const XMLNode* annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object.
   <p>
   * The content of <code>annotation</code> is copied, and any previous content of
   * this object\'s \'annotation\' subelement is deleted.
   <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   <p>
   * Call this method will result in any existing content of the
   * \'annotation\' subelement to be discarded.  Unless you have taken steps
   * to first copy and reconstitute any existing annotations into the 
   * <code>annotation</code> that is about to be assigned, it is likely that performing
   * such wholesale replacement is unfriendly towards other software
   * applications whose annotations are discarded.  An alternative may be
   * to use {@link SBase#appendAnnotation(XMLNode annotation)} or
   * {@link SBase#appendAnnotation(String annotation)}.
   <p>
   * @param annotation an XML structure that is to be used as the new content
   * of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */ public
";


%javamethodmodifiers SBase::setAnnotation(const std::string& annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object.
   <p>
   * The content of <code>annotation</code> is copied, and any previous content of
   * this object\'s \'annotation\' subelement is deleted.
   <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   <p>
   * Call this method will result in any existing content of the
   * \'annotation\' subelement to be discarded.  Unless you have taken steps
   * to first copy and reconstitute any existing annotations into the 
   * <code>annotation</code> that is about to be assigned, it is likely that performing
   * such wholesale replacement is unfriendly towards other software
   * applications whose annotations are discarded.  An alternative may be
   * to use {@link SBase#appendAnnotation(XMLNode annotation)} or
   * {@link SBase#appendAnnotation(String annotation)}.
   <p>
   * @param annotation an XML string that is to be used as the content
   * of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */ public
";


%javamethodmodifiers SBase::appendAnnotation(const XMLNode* annotation) "
/**
   * Appends the given <code>annotation</code> to the \'annotation\' subelement of this
   * object.
   <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a
   * target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type \'any\'</a>,
   * allowing essentially arbitrary well-formed XML data content.
   <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   <p>
   * Unlike {@link SBase#setAnnotation(XMLNode annotation)} or
   * {@link SBase#setAnnotation(String annotation)}, this method
   * allows other annotations to be preserved when an application adds its
   * own data.
   <p>
   * @param annotation an XML structure that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_ANNOTATION_NS LIBSBML_DUPLICATE_ANNOTATION_NS}
   * With \'unexpected attribute\' returned if the parent element does not have 
   * the \'metaid\' attribute set, and \'duplicate annotation\' set if the parent 
   * was already annotated with the annotation in question.
   *
   * </ul> <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */ public
";


%javamethodmodifiers SBase::appendAnnotation(const std::string& annotation) "
/**
   * Appends the given <code>annotation</code> to the \'annotation\' subelement of this
   * object.
   <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a
   * target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type \'any\'</a>,
   * allowing essentially arbitrary well-formed XML data content.
   <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   <p>
   * Unlike {@link SBase#setAnnotation(XMLNode annotation)} or
   * {@link SBase#setAnnotation(String annotation)}, this method
   * allows other annotations to be preserved when an application adds its
   * own data.
   <p>
   * @param annotation an XML string that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_ANNOTATION_NS LIBSBML_DUPLICATE_ANNOTATION_NS}
   * With \'unexpected attribute\' returned if the parent element does not have 
   * the \'metaid\' attribute set, and \'duplicate annotation\' set if the parent 
   * was already annotated with the annotation in question.
   *
   * </ul> <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #unsetAnnotation()
   */ public
";


%javamethodmodifiers SBase::removeTopLevelAnnotationElement(const std::string elementName, const std::string elementURI = "", bool removeEmpty = true) "
/**
   * Removes the top-level element within the \'annotation\' subelement of this
   * SBML object with the given name and optional URI.
   <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   <p>
   * Calling this method allows a particular annotation element to be removed
   * whilst the remaining annotations remain intact.
   <p>
   * @param elementName a string representing the name of the top level
   * annotation element that is to be removed
   * @param elementURI an optional string that is used to check both the name
   * and URI of the top level element to be removed
   * @param removeEmpty if after removing of the element, the annotation is 
   * empty, and the removeEmpty argument is true, the annotation node will be 
   * deleted (default). 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_ANNOTATION_NAME_NOT_FOUND LIBSBML_ANNOTATION_NAME_NOT_FOUND}
   * <li> {@link libsbmlConstants#LIBSBML_ANNOTATION_NS_NOT_FOUND LIBSBML_ANNOTATION_NS_NOT_FOUND}
   *
   * </ul> <p>
   * @see #replaceTopLevelAnnotationElement(XMLNode )
   * @see #replaceTopLevelAnnotationElement(String)
   */ public
";


%javamethodmodifiers SBase::replaceTopLevelAnnotationElement(const XMLNode* annotation) "
/**
   * Replaces the given top-level element within the \'annotation\' 
   * subelement of this SBML object and with the annotation element supplied.
   <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   <p>
   * This method determines the name of the element to be replaced from the
   * annotation argument. Functionally it is equivalent to calling <code>
   * removeTopLevelAnnotationElement(name)</code> followed by calling
   * <code>appendAnnotation(annotation_with_name)</code>, with the exception
   * that the placement of the annotation element remains the same.
   <p>
   * @param annotation {@link XMLNode} representing the replacement top level annotation 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #removeTopLevelAnnotationElement(String elementName, String elementURI)
   * @see #replaceTopLevelAnnotationElement(String)
   */ public
";


%javamethodmodifiers SBase::replaceTopLevelAnnotationElement(const std::string& annotation) "
/**
   * Replaces the given top-level element within the \'annotation\' 
   * subelement of this SBML object and with the annotation element supplied.
   <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   <p>
   * This method determines the name of the element to be replaced from the
   * annotation argument. Functionally it is equivalent to calling <code>
   * removeTopLevelAnnotationElement(name)</code> followed by calling
   * <code>appendAnnotation(annotation_with_name)</code>, with the exception
   * that the placement of the annotation element remains the same.
   <p>
   * @param annotation string representing the replacement top level annotation 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #removeTopLevelAnnotationElement(String elementName, String elementURI)
   * @see #replaceTopLevelAnnotationElement(XMLNode)
   */ public
";


%javamethodmodifiers SBase::setNotes(const XMLNode* notes) "
/**
   * Sets the value of the \'notes\' subelement of this SBML object.
   <p>
   * The content of <code>notes</code> is copied, and any existing content of this
   * object\'s \'notes\' subelement is deleted.
   <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   <p>
   * @param notes an XML structure that is to be used as the content of the
   * \'notes\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(String notes, boolean addXHTMLMarkup)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::setNotes(const std::string& notes, bool addXHTMLMarkup = false) "
/**
   * Sets the value of the \'notes\' subelement of this SBML object to a copy
   * of the string <code>notes</code>.
   <p>
   * The content of <code>notes</code> is copied, and any existing content of this
   * object\'s \'notes\' subelement is deleted.
   <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   <p>
   * The following code illustrates a very simple way of setting the notes
   * using this method.  Here, the object being annotated is the whole SBML
   * document, but that is for illustration purposes only; you could of
   * course use this same approach to annotate any other SBML component.
   <p>
<pre class=\'fragment\'>
{@link SBMLDocument} s = new {@link SBMLDocument}(3, 1);
s.setNotes(\'&lt;body xmlns=\'http://www.w3.org/1999/xhtml\'&gt;here is my note&lt;/p&gt;&lt;/body&gt;\');
</pre>
<p>
   * @param notes an XML string that is to be used as the content of the
   * \'notes\' subelement of this object
   <p>
   * @param addXHTMLMarkup a boolean indicating whether to wrap the contents
   * of the <code>notes</code> argument with XHTML paragraph (<code>&lt;p&gt;</code>)
   * tags.  This is appropriate when the string in <code>notes</code> does not already
   * containg the appropriate XHTML markup.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::appendNotes(const XMLNode* notes) "
/**
   * Appends the given <code>notes</code> to the \'notes\' subelement of this object.
   <p>
   * The content of <code>notes</code> is copied.
   <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   <p>
   * @param notes an XML node structure that is to appended to the content
   * of the \'notes\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes, boolean addXHTMLMarkup)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::appendNotes(const std::string& notes) "
/**
   * Appends the given <code>notes</code> to the \'notes\' subelement of this object.
   <p>
   * The content of the parameter <code>notes</code> is copied.
   <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   <p>
   * @param notes an XML string that is to appended to the content of
   * the \'notes\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes, boolean addXHTMLMarkup)
   * @see #appendNotes(XMLNode notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::setModelHistory(ModelHistory * history) "
/**
   * Sets the {@link ModelHistory} of this object.
   <p>
   * The content of <code>history</code> is copied, and this object\'s existing model
   * history content is deleted.
   <p>
   * @param history {@link ModelHistory} of this object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */ public
";


%javamethodmodifiers SBase::setSBMLDocument(SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers SBase::connectToParent(SBase* parent) "
/** * @internal */ public
";


%javamethodmodifiers SBase::setSBOTerm(int value) "
/**
   * Sets the value of the \'sboTerm\' attribute.
   <p>
   * Beginning with SBML Level 2 Version 3, objects derived from {@link SBase} have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on {@link SBase} has data type <code>int</code>, and {@link SBO} identifiers
   * are stored simply as integers. 
   <p>
   * {@link SBO} terms are a type of optional annotation, and each different class
   * of SBML object derived from {@link SBase} imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of {@link SBO} and the \'sboTerm\' attribute.
   <p>
   * @param value the NNNNNNN integer portion of the {@link SBO} identifier
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @see #setSBOTerm(String)
   */ public
";


%javamethodmodifiers SBase::setSBOTerm(const std::string &sboid) "
/**
   * Sets the value of the \'sboTerm\' attribute by string.
   <p>
   * Beginning with SBML Level 2 Version 3, objects derived from {@link SBase} have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on {@link SBase} has data type <code>int</code>, and {@link SBO} identifiers
   * are stored simply as integers.  This method lets you set the value of
   * \'sboTerm\' as a complete string of the form \'SBO:NNNNNNN\', whereas
   * setSBOTerm(int value) allows you to set it using the integer form.
   <p>
   * {@link SBO} terms are a type of optional annotation, and each different class
   * of SBML object derived from {@link SBase} imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of {@link SBO} and the \'sboTerm\' attribute.
   <p>
   * @param sboid the {@link SBO} identifier string of the form \'SBO:NNNNNNN\'
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @see #setSBOTerm(int value)
   */ public
";


%javamethodmodifiers SBase::setNamespaces(XMLNamespaces* xmlns) "
/**
   * Sets the namespaces relevant of this SBML object.
   <p>
   * The content of <code>xmlns</code> is copied, and this object\'s existing
   * namespace content is deleted.
   <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   <p>
   * @param xmlns the namespaces to set
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers SBase::unsetMetaId "
/**
   * Unsets the value of the \'metaid\' attribute of this SBML object.
   <p>
   * <p>
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support. 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers SBase::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this SBML object.
   <p>
   * Most (but not all) objects in SBML include two common attributes: \'id\'
   * and \'name\'.  The identifier given by an object\'s \'id\' attribute value
   * is used to identify the object within the SBML model definition.
   * Other objects can refer to the component using this identifier.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers SBase::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this SBML object.
   <p>
   * Most (but not all) objects in SBML include two common attributes: \'id\'
   * and \'name\'.  In contrast to the \'id\' attribute, the \'name\' attribute is
   * optional and is not intended to be used for cross-referencing purposes
   * within a model.  Its purpose instead is to provide a human-readable
   * label for the component.  The data type of \'name\' is the type
   * <code>string</code> defined in XML Schema.  SBML imposes no
   * restrictions as to the content of \'name\' attributes beyond those
   * restrictions defined by the <code>string</code> type in XML Schema.
   <p>
   * The recommended practice for handling \'name\' is as follows.  If a
   * software tool has the capability for displaying the content of \'name\'
   * attributes, it should display this content to the user as a
   * component\'s label instead of the component\'s \'id\'.  If the user
   * interface does not have this capability (e.g., because it cannot
   * display or use special characters in symbol names), or if the \'name\'
   * attribute is missing on a given component, then the user interface
   * should display the value of the \'id\' attribute instead.  (Script
   * language interpreters are especially likely to display \'id\' instead of
   * \'name\'.)
   <p>
   * As a consequence of the above, authors of systems that automatically
   * generate the values of \'id\' attributes should be aware some systems
   * may display the \'id\'\'s to the user.  Authors therefore may wish to
   * take some care to have their software create \'id\' values that are: (a)
   * reasonably easy for humans to type and read; and (b) likely to be
   * meaningful, for example by making the \'id\' attribute be an abbreviated
   * form of the name attribute value.
   <p>
   * An additional point worth mentioning is although there are
   * restrictions on the uniqueness of \'id\' values, there are no
   * restrictions on the uniqueness of \'name\' values in a model.  This
   * allows software applications leeway in assigning component identifiers.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers SBase::unsetNotes "
/**
   * Unsets the value of the \'notes\' subelement of this SBML object.
   <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes, boolean addXHTMLMarkup)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)
   */ public
";


%javamethodmodifiers SBase::unsetAnnotation "
/**
   * Unsets the value of the \'annotation\' subelement of this SBML object.
   <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #getAnnotation()
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   */ public
";


%javamethodmodifiers SBase::unsetSBOTerm "
/**
   * Unsets the value of the \'sboTerm\' attribute of this SBML object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * </ul>
   */ public
";


%javamethodmodifiers SBase::addCVTerm(CVTerm * term, bool newBag = false) "
/**
   * Adds a copy of the given {@link CVTerm} object to this SBML object.
   <p>
   * @param term the {@link CVTerm} to assign.
   <p>
   * @param newBag if <code>true</code>, creates a new RDF bag with the same identifier
   * as a previous bag, and if <code>false</code>, adds the term to an existing
   * RDF bag with the same type of qualifier as the term being added.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}, if
   * this object lacks a \'metaid\' attribute
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @note Since the CV Term uses the \'metaid\' attribute of the object as a
   * reference, if the object has no \'metaid\' attribute value set, then the
   * {@link CVTerm} will not be added.
   <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers SBase::getCVTerms "
/**
   * Returns a list of {@link CVTerm} objects in the annotations of this SBML
   * object.
   <p>
   * @return the list of CVTerms for this SBML object.
   */ public
";


%javamethodmodifiers SBase::getCVTerms() const "
/**
   * Returns a list of {@link CVTerm} objects in the annotations of this SBML
   * object.
   <p>
   * @return the list of CVTerms for this SBML object.
   */ public
";


%javamethodmodifiers SBase::getNumCVTerms "
/**
   * Returns the number of {@link CVTerm} objects in the annotations of this SBML
   * object.
   <p>
   * @return the number of CVTerms for this SBML object.
   */ public
";


%javamethodmodifiers SBase::getCVTerm(unsigned int n) "
/**
   * Returns the nth {@link CVTerm} in the list of CVTerms of this SBML
   * object.
   <p>
   * @param n long the index of the {@link CVTerm} to retrieve
   <p>
   * @return the nth {@link CVTerm} in the list of CVTerms for this SBML object.
   */ public
";


%javamethodmodifiers SBase::unsetCVTerms "
/**
   * Clears the list of {@link CVTerm} objects attached to this SBML object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers SBase::unsetModelHistory "
/**
   * Unsets the {@link ModelHistory} object attached to this object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */ public
";


%javamethodmodifiers SBase::getResourceBiologicalQualifier(std::string resource) "
/**
   * Returns the MIRIAM <em>biological qualifier</em> associated with the
   * given resource.
   <p>
   * In <a target=\'_blank\' href=\'http://biomodels.net/miriam\'>MIRIAM</a>,
   * qualifiers are an optional means of indicating the relationship
   * between a model component and its annotations.  There are two broad
   * kinds of annotations: <em>model</em> and <em>biological</em>.  The
   * latter kind is used to qualify the relationship between a model
   * component and a biological entity which it represents.  Examples of
   * relationships include \'is\' and \'has part\', but many others are
   * possible.  MIRIAM defines <a target=\'_blank\'
   * href=\'http://www.ebi.ac.uk/miriam/main/qualifiers/\'>numerous
   * relationship qualifiers</a> to enable different software tools to
   * qualify biological annotations in the same standardized way.  In
   * libSBML, the MIRIAM controlled-vocabulary annotations on an SBML model
   * element are represented using lists of {@link CVTerm} objects, and the
   * the MIRIAM biological qualifiers are represented using
   * values whose
   * names begin with <code>BQB_</code> in the interface class
   * {@link libsbmlConstants}.
   <p>
   * This method searches the controlled-vocabulary annotations
   * (i.e., the list of {@link CVTerm} objects) on the present object, then out of
   * those that have biological qualifiers, looks for an annotation to the
   * given <code>resource</code>.  If such an annotation is found, it returns the
   * type of biological qualifier associated with that resource as a 
   * value whose name
   * begins with <code>BQB_</code> from the interface
   * class {@link libsbmlConstants}.
   <p>
   * @param resource string representing the resource; e.g.,
   * <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   <p>
   * @return the qualifier associated with the resource,
   * or {@link libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN} if the
   * resource does not exist.
   <p>
   * @note The set of MIRIAM biological qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQB_</code> constants defined in {@link libsbmlConstants}
   * may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   */ public
";


%javamethodmodifiers SBase::getResourceModelQualifier(std::string resource) "
/**
   * Returns the MIRIAM <em>model qualifier</em> associated with the
   * given resource.
   <p>
   * In <a target=\'_blank\' href=\'http://biomodels.net/miriam\'>MIRIAM</a>,
   * qualifiers are an optional means of indicating the relationship
   * between a model component and its annotations.  There are two broad
   * kinds of annotations: <em>model</em> and <em>biological</em>.  The
   * former kind is used to qualify the relationship between a model
   * component and another modeling object.  An example qualifier is
   * \'isDerivedFrom\', to indicate that a given component of the model is
   * derived from the modeling object represented by the referenced
   * resource.  MIRIAM defines <a target=\'_blank\'
   * href=\'http://www.ebi.ac.uk/miriam/main/qualifiers/\'>numerous
   * relationship qualifiers</a> to enable different software tools to
   * qualify model annotations in the same standardized way.  In libSBML,
   * the MIRIAM controlled-vocabulary annotations on an SBML model element
   * are represented using lists of {@link CVTerm} objects, and the 
   * the MIRIAM model qualifiers are represented using
   * values whose
   * names begin with <code>BQM_</code> in the interface class
   * {@link libsbmlConstants}.
   <p>
   * This method method searches the controlled-vocabulary annotations
   * (i.e., the list of {@link CVTerm} objects) on the present object, then out of
   * those that have model qualifiers, looks for an annotation to the given
   * <code>resource</code>.  If such an annotation is found, it returns the type of
   * type of model qualifier associated with that resource as a 
   * value whose name
   * begins with <code>BQM_</code> from the interface
   * class {@link libsbmlConstants}.
   <p>
   * @param resource string representing the resource; e.g.,
   * <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   <p>
   * @return the model qualifier
   * type associated with the resource, or {@link libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN} if the resource does not exist.
   <p>
   * @note The set of MIRIAM model qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQM_</code> constants defined in {@link libsbmlConstants}
   * may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   */ public
";


%javamethodmodifiers SBase::getModel() const "
/**
   * Returns the {@link Model} object for the SBML Document in which the current object is located.
   <p>
   * @return the {@link Model} object for the SBML Document of this SBML object.
   <p>
   * @see #getParentSBMLObject()
   * @see #getSBMLDocument()
   */ public
";


%javamethodmodifiers SBase::getLevel() const "
/**
   * Returns the SBML Level of the {@link SBMLDocument} object containing <em>this</em>
   * object.
   <p>
   * <p>
 * LibSBML uses the class {@link SBMLDocument} as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * {@link SBMLDocument} object.  {@link SBMLDocument} corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
   <p>
   * @return the SBML level of this SBML object.
   <p>
   * @see #getVersion()
   * @see #getNamespaces()
   * @see #getPackageVersion()
   */ public
";


%javamethodmodifiers SBase::getVersion() const "
/**
   * Returns the Version within the SBML Level of the {@link SBMLDocument} object
   * containing <em>this</em> object.
   <p>
   * <p>
 * LibSBML uses the class {@link SBMLDocument} as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * {@link SBMLDocument} object.  {@link SBMLDocument} corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
   <p>
   * @return the SBML version of this SBML object.
   <p>
   * @see #getLevel()
   * @see #getNamespaces()
   */ public
";


%javamethodmodifiers SBase::getPackageVersion() const "
/**
   * Returns the Version of the SBML Level&nbsp;3 package to which this
   * element belongs to.
   <p>
   * @return the version of the SBML Level&nbsp;3 package to which this
   * element belongs. The value <code>0</code> will be returned if this element
   * belongs to the SBML Level&nbsp;3 Core package.
   <p>
   * @see #getLevel()
   * @see #getVersion()
   */ public
";


%javamethodmodifiers SBase::getPackageName() const "
/**
   * Returns the name of the SBML Level&nbsp;3 package in which this element
   * is defined.
   <p>
   * @return the name of the SBML package in which this element is defined.
   * The string <code>&quot;core&quot;</code> will be returned if this
   * element is defined in SBML Level&nbsp;3 Core. The string
   * <code>&quot;unknown&quot;</code> will be returned if this element is
   * not defined in any SBML package.
   */ public
";


%javamethodmodifiers SBase::getTypeCode() const "
/**
   * Returns the libSBML type code for this object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * <p>
 * Here follow some additional general information about libSBML type codes:
 <p>
 * <ul>
 * <li> The codes are the possible return values (integers) for the following
 * functions:
 * <ul>
 *     <li> {@link SBase#getTypeCode()}
 *     <li> {@link ListOf#getItemTypeCode()}
 * </ul>
 * (Compatibility note: in libSBML 5, the type of return values of these
 * functions changed from an enumeration to an integer for extensibility
 * in the face of different programming languages.)
 <p>
 * <li> Each package extension must define similar sets of values for each
 * {@link SBase} subclass (e.g. <code>SBMLLayoutTypeCode_t</code> for the SBML Level&nbsp;3
 * Layout extension, <code>SBMLFbcTypeCode_t</code> for the SBML Level&nbsp;3 Flux
 * Balance Constraints extension, etc.).
 <p>
 * <li> The value of each package-specific type code can be duplicated between
 * those of different packages.  (This is necessary because the development
 * of libSBML extensions for different SBML packages may be undertaken by
 * different developers at different times; requiring the developers to
 * coordinate their use of type codes would be nettlesome and probably
 * doomed to failure.)
 <p>
 * <li> To distinguish between the type codes of different packages, both the
 * return value of {@link SBase#getTypeCode()} and {@link SBase#getPackageName()} must be
 * checked.  This is particularly important for functions that take an SBML
 * type code as an argument, such as
 * {@link SBase#getAncestorOfType(int, String)}, which by
 * default assumes you are handing it a core type, and will return <code>null</code> if
 * the value you give it is actually from a package.
 *
 * </ul> <p>
 * The following example code illustrates the combined use of
 * {@link SBase#getPackageName()} and {@link SBase#getTypeCode()}:
 <p>
<pre class=\'fragment\'>
void example (SBase sb)
{
  String pkgName = sb.getPackageName();
  if (pkgName.equals(\'core\'))
  {
    switch (sb.getTypeCode())
    {
      case libsbml.SBML_MODEL:
         ....
         break;
      case libsbml.SBML_REACTION:
         ....
    }
  }
  else if (pkgName.equals(\'layout\'))
  {
    switch (sb.getTypeCode())
    {
      case libsbml.SBML_LAYOUT_LAYOUT:
         ....
         break;
      case libsbml.SBML_LAYOUT_REACTIONGLYPH:
         ....
    }
  }
  ...
}
</pre>
   <p>
   * @return the SBML object type
   * code of this SBML object, or {@link libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (the default).  The latter is possible because
   * subclasses of {@link SBase} are not required to implement this method to return
   * a type code.
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getPackageName()
   * @see #getElementName()
   */ public
";


%javamethodmodifiers SBase::hasValidLevelVersionNamespaceCombination "
/**
   * Predicate returning <code>true</code> if this object\'s level/version and namespace
   * values correspond to a valid SBML specification.
   <p>
   * The valid combinations of SBML Level, Version and Namespace as of this
   * release of libSBML are the following:
   * <ul>
   * <li> Level&nbsp;1 Version&nbsp;2: <code style=\'margin-right:0; padding-right:0\'>\'http</code><code style=\'margin-left:0; padding-left:0\'>://www.sbml.org/sbml/level1\'</code>
   * <li> Level&nbsp;2 Version&nbsp;1: <code style=\'margin-right:0; padding-right:0\'>\'http</code><code style=\'margin-left:0; padding-left:0\'>://www.sbml.org/sbml/level2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;2: <code style=\'margin-right:0; padding-right:0\'>\'http</code><code style=\'margin-left:0; padding-left:0\'>://www.sbml.org/sbml/level2/version2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;3: <code style=\'margin-right:0; padding-right:0\'>\'http</code><code style=\'margin-left:0; padding-left:0\'>://www.sbml.org/sbml/level2/version3\'</code>
   * <li> Level&nbsp;2 Version&nbsp;4: <code style=\'margin-right:0; padding-right:0\'>\'http</code><code style=\'margin-left:0; padding-left:0\'>://www.sbml.org/sbml/level2/version4\'</code>
   * <li> Level&nbsp;3 Version&nbsp;1 Core: <code style=\'margin-right:0; padding-right:0\'>\'http</code><code style=\'margin-left:0; padding-left:0\'>://www.sbml.org/sbml/level3/version1/core\'</code>
   * </ul>
   <p>
   * @return <code>true</code> if the level, version and namespace values of this 
   * SBML object correspond to a valid set of values, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBase::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * This is overridden by subclasses to return a string appropriate to the
   * SBML component.  For example, {@link Model} defines it as returning 
   * <code>\'model\'</code>, {@link CompartmentType} defines it as returning <code>\'compartmentType\'</code>,
   * and so on.
   */ public
";


%javamethodmodifiers SBase::toSBML "
/**
   * Returns a string consisting of a partial SBML corresponding to just
   * this object.
   <p>
   * @return the partial SBML that describes this SBML object.
   <p>
   * @warning <span class=\'warning\'>This is primarily provided for testing
   * and debugging purposes.  It may be removed in a future version of
   * libSBML.</span>
   */ public
";


%javamethodmodifiers SBase::toXMLNode "
/**
   * Returns this element as an {@link XMLNode}.
   <p>
   * @return this element as an {@link XMLNode}.
   <p>
   * @warning <span class=\'warning\'>This operation is computationally
   * expensive, because the element has to be fully serialized to a string
   * and then parsed into the {@link XMLNode} structure.  Attempting to convert a
   * large tree structure (e.g., a large {@link Model}) may consume significant
   * computer memory and time.</span>
   */ public
";


%javamethodmodifiers SBase::read(XMLNode& node, XMLErrorSeverityOverride_t flag = LIBSBML_OVERRIDE_DISABLED) "
/**
   * Reads (initializes) this SBML object by reading from the given {@link XMLNode}.
   <p>
   * @param node The {@link XMLNode} to read from.
   <p>
   * @param flag An optional flag that determines how how errors are logged
   * during the reading process.
   <p>
   * @warning <span class=\'warning\'>This method is computationally expensive,
   * because the given node has to be serialized to a string first.
   * Attempting to serialize a large tree structure (e.g., a large {@link Model}) may
   * consume significant computer memory and time.</span>
   */ public
";


%javamethodmodifiers SBase::getPlugin(const std::string& package) "
/**
   * Returns a plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension with the given package name or URI.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * @param package the name or URI of the package
   <p>
   * @return the plug-in object (the libSBML extension interface) of
   * a package extension with the given package name or URI.
   <p>
   * @see #getPlugin(long n)
   */ public
";


%javamethodmodifiers SBase::getPlugin(const std::string& package) const "
/**
   * Returns a plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension with the given package name or URI.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * @param package the name or URI of the package
   <p>
   * @return the plug-in object (the libSBML extension interface) of a
   * package extension with the given package name or URI.
   <p>
   * @see #getPlugin(long n)
   */ public
";


%javamethodmodifiers SBase::getPlugin(unsigned int n) "
/**
   * Returns the nth plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * @param n the index of the plug-in to return
   <p>
   * @return the nth plug-in object (the libSBML extension interface) of a
   * package extension.
   <p>
   * @see #getNumPlugins()
   * @see #getPlugin(String)
   */ public
";


%javamethodmodifiers SBase::getPlugin "
/**
   * Returns the nth plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * @param n the index of the plug-in to return
   <p>
   * @return the nth plug-in object (the libSBML extension interface) of a
   * package extension.
   <p>
   * @see #getNumPlugins()
   * @see #getPlugin(String)
   */ public
";


%javamethodmodifiers SBase::getDisabledPlugin(unsigned int n) "
/**
   * Returns the nth disabled plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * @param n the index of the disabled plug-in to return
   <p>
   * @return the nth disabled plug-in object (the libSBML extension interface) of a
   * package extension.
   <p>
   * @see #getNumDisabledPlugins()
   * @see #getPlugin(String)
   */ public
";


%javamethodmodifiers SBase::getDisabledPlugin "
/**
   * Returns the nth disabled plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * @param n the index of the disabled plug-in to return
   <p>
   * @return the nth disabled plug-in object (the libSBML extension interface) of a
   * package extension.
   <p>
   * @see #getNumDisabledPlugins()
   * @see #getPlugin(String)
   */ public
";


%javamethodmodifiers SBase::getNumPlugins() const "
/**
   * Returns the number of plug-in objects (extenstion interfaces) for SBML
   * Level&nbsp;3 package extensions known.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * @return the number of plug-in objects (extension interfaces) of
   * package extensions known by this instance of libSBML.
   <p>
   * @see #getPlugin(long n)
   */ public
";


%javamethodmodifiers SBase::getNumDisabledPlugins() const "
/**
   * Returns the number of disabled plug-in objects (extenstion interfaces) 
   * for SBML Level&nbsp;3 package extensions known.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * @return the number of disabled plug-in objects (extension interfaces) 
   * of package extensions known by this instance of libSBML.
   */ public
";


%javamethodmodifiers SBase::deleteDisabledPlugins(bool recursive=true) "
/** 
   * Deletes all information stored in disabled plugins. 
   <p>
   * @param recursive if <code>true</code>, the disabled information will be deleted
   * also from all child elements, otherwise only from this {@link SBase} element.
   <p>
   * @see #getNumDisabledPlugins()
   */ public
";


%javamethodmodifiers SBase::enablePackage(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables or disables the given SBML Level&nbsp;3 package on this object.
   <p>
   * This method enables the specified package on this object and other
   * objects connected by child-parent links in the same {@link SBMLDocument} object.
   * This method is the converse of
   * {@link SBase#disablePackage(String pkgURI, String pkgPrefix)}.
   <p>
   * @param pkgURI the URI of the package.
   <p>
   * @param pkgPrefix the XML prefix of the package
   <p>
   * @param flag whether to enable (<code>true</code>) or disable (<code>false</code>) the package
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_UNKNOWN LIBSBML_PKG_UNKNOWN}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_CONFLICTED_VERSION LIBSBML_PKG_CONFLICTED_VERSION}
   *
   * </ul> <p>
   * @see #disablePackage(String pkgURI, String pkgPrefix)
   */ public
";


%javamethodmodifiers SBase::disablePackage(const std::string& pkgURI, const std::string& pkgPrefix) "
/**
   * Disables the given SBML Level&nbsp;3 package on this object.
   <p>
   * This method disables the specified package on this object
   * and other objects connected by child-parent links in the same
   * {@link SBMLDocument} object.
   <p>
   * An example of when this may be useful is during construction of model
   * components when mixing existing and new models.  Suppose your
   * application read an SBML document containing a model that used the SBML
   * Hierarchical Model Composition (&ldquo;comp&rdquo;) package, and
   * extracted parts of that model in order to construct a new model in
   * memory.  The new, in-memory model will not accept a component drawn from
   * an other {@link SBMLDocument} with different package namespace declarations.
   * You could reconstruct the same namespaces in the in-memory model first,
   * but as a shortcut, you could also disable the package namespace on the
   * object being added.  Here is a code example to help clarify this:
   <p>
<pre class=\'fragment\'>
// We read in an SBML L3V1 model that uses the \'comp\' package namespace
{@link SBMLReader} reader = new {@link SBMLReader}();
{@link SBMLDocument} doc = reader.readSBML(\'sbml-file-with-comp-elements.xml\');

// We extract one of the species from the model we just read in.
{@link Species} s1 = doc.getModel().getSpecies(0);

// We construct a new model.  This model does not use the \'comp\' package.
{@link Model} newModel = new {@link Model}(3,1);

// The following will fail with an error, because addSpecies() will
// first check that the parent of the given object has namespaces
// declared, and will discover that s1 does but newModel does not.

// newModel-&gt;addSpecies(s1);

// However, if we disable the \'comp\' package on s1, then the call
// to addSpecies will work.

s1-&gt;disablePackage(\'http://www.sbml.org/sbml/level3/version1/comp/version1\',
                   \'comp\');
newModel.addSpecies(s1);
</pre>
<p>
   * @param pkgURI the URI of the package
   <p>
   * @param pkgPrefix the XML prefix of the package
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_UNKNOWN LIBSBML_PKG_UNKNOWN}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_CONFLICTED_VERSION LIBSBML_PKG_CONFLICTED_VERSION}
   *
   * </ul> <p>
   * @see #enablePackage(String pkgURI, String pkgPrefix, boolean flag)
   */ public
";


%javamethodmodifiers SBase::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers SBase::isPackageURIEnabled(const std::string& pkgURI) const "
/**
   * Predicate returning <code>true</code> if an SBML Level&nbsp;3 package with the
   * given URI is enabled with this object.
   <p>
   * @param pkgURI the URI of the package
   <p>
   * @return <code>true</code> if the given package is enabled within this object, @c 
   * false otherwise.
   <p>
   * @see #isPackageEnabled(String)
   */ public
";


%javamethodmodifiers SBase::isPackageEnabled(const std::string& pkgName) const "
/**
   * Predicate returning <code>true</code> if the given SBML Level&nbsp;3 package is
   * enabled with this object.
   <p>
   * The search ignores the package version.
   <p>
   * @param pkgName the name of the package
   <p>
   * @return <code>true</code> if the given package is enabled within this object, 
   * <code>false</code> otherwise.
   <p>
   * @see #isPackageURIEnabled(String)
   */ public
";


%javamethodmodifiers SBase::isPkgURIEnabled(const std::string& pkgURI) const "
/**
   * Predicate returning <code>true</code> if an SBML Level&nbsp;3 package with the
   * given URI is enabled with this object.
   <p>
   * @param pkgURI the URI of the package
   <p>
   * @return <code>true</code> if the given package is enabled within this object, @c 
   * false otherwise.
   <p>
   * @deprecated <div class=\'deprecated\'>Replaced in libSBML 5.2.0 by
   * {@link SBase#isPackageURIEnabled(String)}.
   * </div>
   <p>
   * @see #isPkgEnabled(String)
   */ public
";


%javamethodmodifiers SBase::isPkgEnabled(const std::string& pkgName) const "
/**
   * Predicate returning <code>true</code> if the given SBML Level&nbsp;3 package is
   * enabled with this object.
   <p>
   * The search ignores the package version.
   <p>
   * @param pkgName the name of the package
   <p>
   * @return <code>true</code> if the given package is enabled within this object, 
   * <code>false</code> otherwise.
   <p>
   * @deprecated <div class=\'deprecated\'>Replaced in libSBML 5.2.0 by
   * {@link SBase#isPackageEnabled(String)}.
   * </div>
   <p>
   * @see #isPkgURIEnabled(String)
   */ public
";


%javamethodmodifiers SBase::writeExtensionElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SBase::read(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers SBase::write(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SBase::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SBase::hasRequiredAttributes() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::hasRequiredElements() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::checkCompatibility(const SBase * object) const "
/** * @internal */ public
";


%javamethodmodifiers SBase::setSBMLNamespaces(SBMLNamespaces * sbmlns) "
/** * @internal */ public
";


%javamethodmodifiers SBase::setSBMLNamespacesAndOwn(SBMLNamespaces * sbmlns) "
/** * @internal */ public
";


%javamethodmodifiers SBase::getSBMLNamespaces() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::removeDuplicateAnnotations "
/** * @internal */ public
";


%javamethodmodifiers SBase::checkMathMLNamespace(const XMLToken elem) "
/** * @internal */ public
";


%javamethodmodifiers SBase::getDerivedUnitDefinition "
/** * @internal */ public
";


%javamethodmodifiers SBase::containsUndeclaredUnits "
/** * @internal */ public
";


%javamethodmodifiers SBase::removeFromParentAndDelete "
/**
   * Removes this object from its parent.
   <p>
   * If the parent was storing this object as a pointer, it is deleted.  If
   * not, it is simply cleared (as in {@link ListOf} objects).  This is a pure
   * virtual method, as every {@link SBase} element has different parents, and
   * therefore different methods of removing itself.  Will fail (and not
   * delete itself) if it has no parent object.  This function is designed to
   * be overridden, but for all objects whose parent is of the class {@link ListOf},
   * the default implementation will work.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers SBase::matchesSBMLNamespaces(const SBase * sb) "
/**
   * Returns <code>true</code> if this object\'s set of XML namespaces are the same
   * as the given object\'s XML namespaces.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sb an object to compare with respect to namespaces
   <p>
   * @return boolean, <code>true</code> if this object\'s collection of namespaces is
   * the same as <code>sb\'s</code>, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBase::matchesSBMLNamespaces(const SBase * sb) const "
/**
   * Returns <code>true</code> if this object\'s set of XML namespaces are the same
   * as the given object\'s XML namespaces.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sb an object to compare with respect to namespaces
   <p>
   * @return boolean, <code>true</code> if this object\'s collection of namespaces is
   * the same as <code>sb\'s</code>, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBase::matchesRequiredSBMLNamespacesForAddition(const SBase * sb) "
/**
   * Returns <code>true</code> if this object\'s set of XML namespaces are a subset
   * of the given object\'s XML namespaces.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sb an object to compare with respect to namespaces
   <p>
   * @return boolean, <code>true</code> if this object\'s collection of namespaces is
   * a subset of <code>sb\'s</code>, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBase::matchesRequiredSBMLNamespacesForAddition(const SBase * sb) const "
/**
   * Returns <code>true</code> if this object\'s set of XML namespaces are a subset
   * of the given object\'s XML namespaces.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sb an object to compare with respect to namespaces
   <p>
   * @return boolean, <code>true</code> if this object\'s collection of namespaces is
   * a subset of <code>sb\'s</code>, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBase::setUserData(void *userData) "
/**
   * Sets the user data of this element.
   <p>
   * <p>
 * The user data associated with an SBML object can be used by an application
 * developer to attach custom information to that object in the model.  In case
 * of a deep copy, this data will passed as-is.  The data attribute will never
 * be interpreted by libSBML.
   <p>
   * @param userData specifies the new user data.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers SBase::*getUserData() const "
/**
   * Returns the user data that has been previously set via setUserData().
   <p>
   * <p>
 * The user data associated with an SBML object can be used by an application
 * developer to attach custom information to that object in the model.  In case
 * of a deep copy, this data will passed as-is.  The data attribute will never
 * be interpreted by libSBML.
   <p>
   * @return the user data of this node, or <code>null</code> if no user data has been set.
   */ public
";


%javamethodmodifiers SBase::getURI() const "
/**
   * Gets the namespace URI to which this element belongs to.
   <p>
   * For example, all elements that belong to SBML Level 3 Version 1 Core
   * must would have the URI <code>\'http://www.sbml.org/sbml/level3/version1/core\'</code>;
   * all elements that belong to Layout Extension Version 1 for SBML Level 3
   * Version 1 Core must would have the URI
   * <code>\'http://www.sbml.org/sbml/level3/version1/layout/version1\'</code>.
   <p>
   * This function first returns the URI for this element by looking into the
   * {@link SBMLNamespaces} object of the document with the its package name.  If not
   * found, it will * return the XML namespace to which this element belongs.
   <p>
   * @return the URI of this element
   <p>
   * @see #getSBMLDocument()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers SBase::getPrefix() const "
/**
   * Returns the namespace prefix of this element.
   */ public
";


%javamethodmodifiers SBase::setElementText(const std::string &text) "
/** 
   * When overridden allows {@link SBase} elements to use the text included in between
   * the elements tags. The default implementation does nothing.
   <p>
   * @param text the text string found between the element tags.
   * @internal
   */ public
";


%javamethodmodifiers SBase::matchesCoreSBMLNamespace(const SBase * sb) "
/** * @internal */ public
";


%javamethodmodifiers SBase::matchesCoreSBMLNamespace(const SBase * sb) const "
/** * @internal */ public
";


%javamethodmodifiers SBase::SBase(unsigned int level, unsigned int version) "
/** * @internal */ public
";


%javamethodmodifiers SBase::SBase(SBMLNamespaces* sbmlns) "
/** * @internal */ public
";


%javamethodmodifiers SBase::SBase(const SBase& orig) "
/** * @internal */ public
";


%javamethodmodifiers SBase::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers SBase::hasValidLevelVersionNamespaceCombination(int typecode, XMLNamespaces *xmlns) "
/** * @internal */ public
";


%javamethodmodifiers SBase::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers SBase::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::getErrorLog "
/** * @internal */ public
";


%javamethodmodifiers SBase::logError(  unsigned int       id , const unsigned int level   = 2 , const unsigned int version = 3 , const std::string& details = "" ) "
/** * @internal */ public
";


%javamethodmodifiers SBase::logUnknownAttribute( const std::string& attribute, const unsigned int level, const unsigned int version, const std::string& element, const std::string& prefix="") "
/** * @internal */ public
";


%javamethodmodifiers SBase::logUnknownElement( const std::string& element, const unsigned int level, const unsigned int version ) "
/** * @internal */ public
";


%javamethodmodifiers SBase::logEmptyString( const std::string& attribute, const unsigned int level, const unsigned int version, const std::string& element) "
/** * @internal */ public
";


%javamethodmodifiers SBase::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SBase::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers SBase::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SBase::writeXMLNS(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SBase::syncAnnotation "
/** * @internal */ public
";


%javamethodmodifiers SBase::reconstructRDFAnnotation "
/** * @internal */ public
";


%javamethodmodifiers SBase::checkOrderAndLogError(SBase* object, int expected) "
/** * @internal */ public
";


%javamethodmodifiers SBase::checkListOfPopulated(SBase* object) "
/** * @internal */ public
";


%javamethodmodifiers SBase::checkDefaultNamespace(const XMLNamespaces* xmlns, const std::string& elementName, const std::string& prefix = "") "
/** * @internal */ public
";


%javamethodmodifiers SBase::checkAnnotation "
/** * @internal */ public
";


%javamethodmodifiers SBase::checkXHTML(const XMLNode *) "
/** * @internal */ public
";


%javamethodmodifiers SBase::loadPlugins(SBMLNamespaces *sbmlns) "
/** * @internal */ public
";


%javamethodmodifiers SBase::createExtensionObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers SBase::setElementNamespace(const std::string &uri) "
/** * @internal */ public
";


%javamethodmodifiers SBase::getElementNamespace() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::readExtensionAttributes(const XMLAttributes& attributes, const ExpectedAttributes* expectedAttributes = NULL) "
/** * @internal */ public
";


%javamethodmodifiers SBase::writeExtensionAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SBase::storeUnknownExtAttribute(const std::string& element, const XMLAttributes& xattr, unsigned int index) "
/** * @internal */ public
";


%javamethodmodifiers SBase::storeUnknownExtElement(XMLInputStream &stream) "
/** * @internal */ public
";


%javamethodmodifiers SBase::getSBMLPrefix() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::getRootElement "
/** * @internal */ public
";


%javamethodmodifiers SBase::getHasBeenDeleted() const "
/** * @internal */ public
";


%javamethodmodifiers SBase::setSBaseFields(const XMLToken& element) "
/** * @internal */ public
";


%javamethodmodifiers SBase::readAnnotation(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers SBase::removeDuplicatedResources(CVTerm *term, QualifierType_t type) "
/** * @internal */ public
";


%javamethodmodifiers SBase::addTermToExistingBag(CVTerm *term, QualifierType_t type) "
/** * @internal */ public
";


%javamethodmodifiers SBase::readNotes(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) ListOf "
/** 
 *  Parent class for libSBML\'s \'ListOfXYZ\' classes.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The {@link ListOf} class in libSBML is a utility class that serves as the parent
 * class for implementing the ListOf__ classes.  It provides methods for
 * working generically with the various SBML lists of objects in a program.
 * LibSBML uses this separate list class rather than ordinary
 * Java lists,
 * so that it can provide the methods and features associated with {@link SBase}.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers ListOf::ListOf(unsigned int level   = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION) "
/**
   * Creates a new {@link ListOf} object.
   <p>
   * @param level the SBML Level; if not assigned, defaults to the
   * value of {@link SBMLDocument#getDefaultLevel()}.
   <p>
   * @param version the Version within the SBML Level; if not assigned,
   * defaults to the value of {@link SBMLDocument#getDefaultVersion()}.
   <p>
   * <p>
 * @note Bare {@link ListOf} objects are
 * impossible to add to SBML models.  The {@link ListOf}
 * class is simply the base
 * of <em>other</em> classes in
 * libSBML.  Calling programs are not intended to create bare {@link ListOf}
 * objects themselves.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ListOf::ListOf(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOf} with a given {@link SBMLNamespaces} object.
   <p>
   * @param sbmlns the set of SBML namespaces that this {@link ListOf} should
   * contain.
   <p>
   * <p>
 * @note Bare {@link ListOf} objects are
 * impossible to add to SBML models.  The {@link ListOf}
 * class is simply the base
 * of <em>other</em> classes in
 * libSBML.  Calling programs are not intended to create bare {@link ListOf}
 * objects themselves.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers ListOf::ListOf(const ListOf& orig) "
/**
   * Copy constructor; creates a copy of this {@link ListOf}.
   <p>
   * @param orig the {@link ListOf} instance to copy.
   */ public
";


%javamethodmodifiers ListOf::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next item in the
   * list.
   */ public
";


%javamethodmodifiers ListOf::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOf} object.
   <p>
   * @return the (deep) copy of this {@link ListOf} object.
   */ public
";


%javamethodmodifiers ListOf::append(const SBase* item) "
/**
   * Adds an item to the end of this {@link ListOf}\'s list of items.
   <p>
   * This method makes a clone of the <code>item</code> handed to it.  This means that
   * when the {@link ListOf} object is destroyed, the original items will not be
   * destroyed.  For a method with an alternative ownership behavior, see the
   * {@link ListOf#appendAndOwn(SBase)} method.
   <p>
   * @param item the item to be added to the list.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #appendAndOwn(SBase item)
   * @see #appendFrom(ListOf list)
   */ public
";


%javamethodmodifiers ListOf::appendAndOwn(SBase* item) "
/**
   * Adds an item to the end of this {@link ListOf}\'s list of items.
   <p>
   * This method does not clone the <code>item</code> handed to it; instead, it assumes
   * ownership of it.  This means that when the {@link ListOf} is destroyed, the item
   * will be destroyed along with it.  For a method with an alternative
   * ownership behavior, see the {@link ListOf#append(SBase item)} method.
   <p>
   * @param item the item to be added to the list.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #append(SBase item)
   * @see #appendFrom(ListOf list)
   */ public
";


%javamethodmodifiers ListOf::appendFrom(const ListOf* list) "
/**
   * Adds a clone of a list of items to this {@link ListOf}\'s list.
   <p>
   * Note that because this clones the objects handed to it, the original
   * items will not be destroyed when this {@link ListOf} object is destroyed.
   <p>
   * @param list a list of items to be added.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #append(SBase item)
   * @see #appendAndOwn(SBase item)
   */ public
";


%javamethodmodifiers ListOf::insert(int location, const SBase* item) "
/**
   * Inserts an item at a given position in this {@link ListOf}\'s list of items.
   <p>
   * This variant of the method makes a clone of the <code>item</code> handed to it.
   * This means that when the {@link ListOf} is destroyed, the original <code>item</code> will
   * <em>not</em> be destroyed.
   <p>
   * @param location the location in the list where to insert the item.
   * @param item the item to be inserted to the list.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #insertAndOwn(int location, SBase item)
   */ public
";


%javamethodmodifiers ListOf::insertAndOwn(int location, SBase* item) "
/**
   * Inserts an item at a given position in this {@link ListOf}\'s list of items.
   <p>
   * This variant of the method makes a clone of the <code>item</code> handed to it.
   * This means that when the {@link ListOf} is destroyed, the original <code>item</code>
   * <em>will</em> be destroyed.
   <p>
   * @param location the location where to insert the item
   * @param item the item to be inserted to the list
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #insert(int location, SBase item)
   */ public
";


%javamethodmodifiers ListOf::get "
/**
   * Get an item from the list.
   <p>
   * @param n the index number of the item to get.
   <p>
   * @return the <em>n</em>th item in this {@link ListOf} items, or a null pointer if
   * the index number <code>n</code> refers to a nonexistent position in this list.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOf::get(unsigned int n) "
/**
   * Get an item from the list.
   <p>
   * @param n the index number of the item to get.
   <p>
   * @return the <em>n</em>th item in this {@link ListOf} items, or a null pointer if
   * the index number <code>n</code> refers to a nonexistent position in this list.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOf::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given identifier.
   <p>
   * This method searches this {@link ListOf}\'s list of items for SBML objects based
   * on their \'id\' attribute value in the model-wide <code>SId</code>
   * identifier namespace.
   <p>
   * @param id string representing the id of the object to find.
   <p>
   * @return the first element found with the given <code>id</code>, or <code>null</code> if no
   * such object is found.
   */ public
";


%javamethodmodifiers ListOf::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element found with the given meta-identifier.
   <p>
   * @param metaid string representing the \'metaid\' attribute of the object
   * to find.
   <p>
   * @return the first element found with the given <code>metaid</code>, or <code>null</code> if
   * no such object is found.
   */ public
";


%javamethodmodifiers ListOf::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child {@link SBase} objects.
   <p>
   * The values returned include all children of the objects in this {@link ListOf}
   * list, nested to an arbitrary depth.
   <p>
   * @return a List of pointers to all child objects.
   */ public
";


%javamethodmodifiers ListOf::clear(bool doDelete = true) "
/**
   * Removes all items in this {@link ListOf} object.
   <p>
   * If parameter <code>doDelete</code> is <code>true</code> (default), all items in this {@link ListOf}
   * object are deleted and cleared, and thus the caller doesn\'t have to
   * delete those items.  Otherwise, all items are cleared only from this
   * {@link ListOf} object; the caller is still responsible for deleting the actual
   * items.  (In the latter case, callers are advised to store pointers to
   * all items elsewhere before calling this function.)
   <p>
   * @param doDelete if <code>true</code> (default), all items are deleted and cleared.
   * Otherwise, all items are just cleared and not deleted.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ListOf::removeFromParentAndDelete "
/**
   * Removes all items in this {@link ListOf} object and deletes its properties too.
   <p>
   * This performs a call to clear() with an argument of <code>true</code> (thus removing
   * all the child objects in the list), followed by calls to various libSBML
   * <code>unset<em>Foo</em></code> methods to delete everything else: {@link CVTerm}
   * objects, model history objects, etc.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers ListOf::remove(unsigned int n) "
/**
   * Removes the <em>n</em>th item from this {@link ListOf} list of items and returns
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOf::size() const "
/**
   * Returns number of items in this {@link ListOf} list.
   <p>
   * @return the number of items in this {@link ListOf} items.
   */ public
";


%javamethodmodifiers ListOf::setSBMLDocument(SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers ListOf::getTypeCode() const "
/**
   * Returns the libSBML type code for this object, namely,
   * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF} (default).
   <p>
   * @note The various {@link ListOf} classes mostly differ from each other in what they
   * contain.  Hence, one must call getItemTypeCode() to fully determine the
   * class of this SBML object.
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getItemTypeCode()
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOf::getItemTypeCode() const "
/**
   * Get the type code of the objects contained in this {@link ListOf}.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * Classes that inherit from the {@link ListOf} class should override this method
   * to return the SBML type code for the objects contained in this {@link ListOf}.
   * If they do not, this method will return
   * {@link libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN}
   <p>
   * @return The {@link ListOf} base class contains no SBML objects, and therefore
   * this method returns {@link libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN}.
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOf::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link ListOf}, is
   * always <code>\'listOf\'.</code>
   <p>
   * @return the XML name of this element.
   */ public
";


%javamethodmodifiers ListOf::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOf::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers ListOf::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers ListOf::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers ListOf::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOf::isValidTypeForList(SBase * item) "
/** * @internal */ public
";


%typemap(javaimports) Model "
/** 
 *  An SBML model.
 <p>
 * In an SBML model definition, a single object of class {@link Model} serves as
 * the overall container for the lists of the various model components.
 * All of the lists are optional, but if a given list container is present
 * within the model, the list must not be empty; that is, it must have
 * length one or more.  The following are the components and lists
 * permitted in different Levels and Versions of SBML in
 * version 5.11.0
 * of libSBML:
 * <ul>
 * <li> In SBML Level 1, the components are: {@link UnitDefinition}, {@link Compartment},
 * {@link Species}, {@link Parameter}, {@link Rule}, and {@link Reaction}.  Instances of the classes are
 * placed inside instances of classes {@link ListOfUnitDefinitions},
 * {@link ListOfCompartments}, {@link ListOfSpecies}, {@link ListOfParameters}, {@link ListOfRules}, and
 * {@link ListOfReactions}.
 <p>
 * <li> In SBML Level 2 Version 1, the components are: {@link FunctionDefinition},
 * {@link UnitDefinition}, {@link Compartment}, {@link Species}, {@link Parameter}, {@link Rule}, {@link Reaction} and
 * {@link Event}.  Instances of the classes are placed inside instances of classes
 * {@link ListOfFunctionDefinitions}, {@link ListOfUnitDefinitions}, {@link ListOfCompartments},
 * {@link ListOfSpecies}, {@link ListOfParameters}, {@link ListOfRules}, {@link ListOfReactions}, and
 * {@link ListOfEvents}.
 <p>
 * <li> In SBML Level 2 Versions 2, 3 and 4, the components are:
 * {@link FunctionDefinition}, {@link UnitDefinition}, {@link CompartmentType}, {@link SpeciesType},
 * {@link Compartment}, {@link Species}, {@link Parameter}, {@link InitialAssignment}, {@link Rule}, {@link Constraint},
 * {@link Reaction} and {@link Event}.  Instances of the classes are placed inside
 * instances of classes {@link ListOfFunctionDefinitions}, {@link ListOfUnitDefinitions},
 * {@link ListOfCompartmentTypes}, {@link ListOfSpeciesTypes}, {@link ListOfCompartments},
 * {@link ListOfSpecies}, {@link ListOfParameters}, {@link ListOfInitialAssignments}, {@link ListOfRules},
 * {@link ListOfConstraints}, {@link ListOfReactions}, and {@link ListOfEvents}.
 <p>
 * <li> In SBML Level 3 Version 1, the components are: {@link FunctionDefinition},
 * {@link UnitDefinition}, {@link Compartment}, {@link Species}, {@link Parameter}, {@link InitialAssignment},
 * {@link Rule}, {@link Constraint}, {@link Reaction} and {@link Event}.  Instances of the classes are
 * placed inside instances of classes {@link ListOfFunctionDefinitions},
 * {@link ListOfUnitDefinitions}, {@link ListOfCompartments}, {@link ListOfSpecies},
 * {@link ListOfParameters}, {@link ListOfInitialAssignments}, {@link ListOfRules},
 * {@link ListOfConstraints}, {@link ListOfReactions}, and {@link ListOfEvents}.  
 * </ul>
 <p>
 * Although all the lists are optional, there are dependencies between SBML
 * components such that defining some components requires defining others.
 * An example is that defining a species requires defining a compartment,
 * and defining a reaction requires defining a species.  The dependencies
 * are explained in more detail in the SBML specifications.
 <p>
 * In addition to the above lists and attributes, the {@link Model} class in both
 * SBML Level&nbsp;2 and Level&nbsp;3 has the usual two attributes of \'id\'
 * and \'name\', and both are optional.  As is the case for other SBML
 * components with \'id\' and \'name\' attributes, they must be used according
 * to the guidelines described in the SBML specifications.  (Within the
 * frameworks of SBML Level&nbsp;2 and Level&nbsp;3 Version&nbsp;1 Core, a
 * {@link Model} object identifier has no assigned meaning, but extension packages
 * planned for SBML Level&nbsp;3 are likely to make use of this
 * identifier.)
 <p>
 * Finally, SBML Level&nbsp;3 has introduced a number of additional {@link Model}
 * attributes.  They are discussed in a separate section below.
 <p>
 * <h2>Approaches to creating objects using the libSBML API</h2>
 <p>
 * LibSBML provides two main mechanisms for creating objects: class
 * constructors
 * (e.g., <a href=\'org/sbml/libsbml/{@link Species}.html\'>Species()</a> ), 
 * and <code>create<span class=\'placeholder-nospace\'><em>Object</em></span>()</code>
 * methods (such as {@link Model#createSpecies()}) provided by certain <span
 * class=\'placeholder-nospace\'><em>Object</em></span> classes such as {@link Model}.  These
 * multiple mechanisms are provided by libSBML for flexibility and to
 * support different use-cases, but they also have different implications
 * for the overall model structure.
 <p>
 * In general, the recommended approach is to use the <code>create<span
 * class=\'placeholder-nospace\'><em>Object</em></span>()</code> methods.  These
 * methods both create an object <em>and</em> link it to the parent in one step.
 * Here is an example:<pre class=\'fragment\'>
// Create an {@link SBMLDocument} object in Level 3 Version 1 format:

{@link SBMLDocument} sbmlDoc = new {@link SBMLDocument}(3, 1);

// Create a {@link Model} object inside the {@link SBMLDocument} object and set
// its identifier.  The call returns a pointer to the {@link Model} object
// created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).  Note that
// the call to setId() returns a status code, and a real program
// should check this status code to make sure everything went okay.

{@link Model} model = sbmlDoc.createModel();
model.setId(&#34;BestModelEver&#34;);

// Create a {@link Species} object inside the {@link Model} and set its identifier.
// Similar to the lines above, this call returns a pointer to the {@link Species}
// object created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).  Note that, like
// with {@link Model}, the call to setId() returns a status code, and a real program
// should check this status code to make sure everything went okay.

{@link Species} sp = model.createSpecies();
sp.setId(&#34;BestSpeciesEver&#34;);
</pre>
 <p>
 * The <code>create<span
 * class=\'placeholder-nospace\'><em>Object</em></span>()</code> methods return a
 * pointer to the object created, but they also add the object to the
 * relevant list of object instances contained in the parent.  (These lists
 * become the <code>&lt;listOf<span
 * class=\'placeholder-nospace\'><em>Object</em></span>s&gt;</code> elements in the
 * finished XML rendition of SBML.)  In the example above,
 * {@link Model#createSpecies()} adds the created species directly to the
 * <code>&lt;listOfSpeciesgt;</code> list in the model.  Subsequently,
 * methods called on the species change the species in the model (which is
 * what is expected in most situations).
 <p>
 * <h2>Consistency and adherence to SBML specifications</h2>
 <p>
 * To make it easier for applications to do whatever they need,
 * libSBML version 5.11.0
 * is relatively lax when it comes to enforcing correctness and
 * completeness of models <em>during</em> model construction and editing.
 * Essentially, libSBML <em>will</em> <em>not</em> in most cases check automatically
 * that a model\'s components have valid attribute values, or that the
 * overall model is consistent and free of errors&mdash;even obvious errors
 * such as duplication of identifiers.  This allows applications great
 * leeway in how they build their models, but it means that software
 * authors must take deliberate steps to ensure that the model will be, in
 * the end, valid SBML.  These steps include such things as keeping track
 * of the identifiers used in a model, manually performing updates in
 * certain situations where an entity is referenced in more than one place
 * (e.g., a species that is referenced by multiple {@link SpeciesReference}
 * objects), and so on.
 <p>
 * That said, libSBML does provide powerful features for deliberately
 * performing validation of SBML when an application decides it is time to
 * do so.  The interfaces to these facilities are on the {@link SBMLDocument}
 * class, in the form of {@link SBMLDocument#checkInternalConsistency()} and
 * {@link SBMLDocument#checkConsistency()}.  Please refer to the documentation for
 * {@link SBMLDocument} for more information about this.
 <p>
 * While applications may play fast and loose and live like free spirits
 * during the construction and editing of SBML models, they should always
 * make sure to call {@link SBMLDocument#checkInternalConsistency()} and/or
 * {@link SBMLDocument#checkConsistency()} before writing out the final version of
 * an SBML model.
 <p>
 * <h2>Model attributes introduced in SBML Level&nbsp;3</h2>
 <p>
 * As mentioned above, the {@link Model} class has a number of optional attributes
 * in SBML Level&nbsp;3 Version&nbsp;1 Core.  These are \'substanceUnits\',
 * \'timeUnits\', \'volumeUnits\', \'areaUnits\', \'lengthUnits\', \'extentUnits\',
 * and \'conversionFactor.  The following provide more information about
 * them.
 <p>
 * <h3>The \'substanceUnits\' attribute</h3>
 <p>
 * The \'substanceUnits\' attribute is used to specify the unit of
 * measurement associated with substance quantities of {@link Species} objects that
 * do not specify units explicitly.  If a given {@link Species} object definition
 * does not specify its unit of substance quantity via the \'substanceUnits\'
 * attribute on the {@link Species} object instance, then that species inherits the
 * value of the {@link Model} \'substanceUnits\' attribute.  If the {@link Model} does not
 * define a value for this attribute, then there is no unit to inherit, and
 * all species that do not specify individual \'substanceUnits\' attribute
 * values then have <em>no</em> declared units for their quantities.  The
 * SBML Level&nbsp;3 Version&nbsp;1 Core specification provides more
 * details.
 <p>
 * Note that when the identifier of a species appears in a model\'s
 * mathematical expressions, the unit of measurement associated with that
 * identifier is <em>not solely determined</em> by setting \'substanceUnits\'
 * on {@link Model} or {@link Species}.  Please see the discussion about units given in
 * the documentation for the {@link Species} class.
 <p>
 * <h3>The \'timeUnits\' attribute</h3>
 <p>
 * The \'timeUnits\' attribute on SBML Level&nbsp;3\'s {@link Model} object is used to
 * specify the unit in which time is measured in the model.  This attribute
 * on {@link Model} is the <em>only</em> way to specify a unit for time in a model.
 * It is a global attribute; time is measured in the model everywhere in
 * the same way.  This is particularly relevant to {@link Reaction} and {@link RateRule}
 * objects in a model: all {@link Reaction} and {@link RateRule} objects in SBML define
 * per-time values, and the unit of time is given by the \'timeUnits\'
 * attribute on the {@link Model} object instance.  If the {@link Model} \'timeUnits\'
 * attribute has no value, it means that the unit of time is not defined
 * for the model\'s reactions and rate rules.  Leaving it unspecified in an
 * SBML model does not result in an invalid model in SBML Level&nbsp;3;
 * however, as a matter of best practice, we strongly recommend that all
 * models specify units of measurement for time.
 <p>
 * <h3>The \'volumeUnits\', \'areaUnits\', and \'lengthUnits\' attributes</h3>
 <p>
 * The attributes \'volumeUnits\', \'areaUnits\' and \'lengthUnits\' together are
 * used to set the units of measurements for the sizes of {@link Compartment}
 * objects in an SBML Level&nbsp;3 model when those objects do not
 * otherwise specify units.  The three attributes correspond to the most
 * common cases of compartment dimensions: \'volumeUnits\' for compartments
 * having a \'spatialDimensions\' attribute value of <code>\'3\'</code>, \'areaUnits\' for
 * compartments having a \'spatialDimensions\' attribute value of <code>\'2\'</code>, and
 * \'lengthUnits\' for compartments having a \'spatialDimensions\' attribute
 * value of <code>\'1\'.</code>  The attributes are not applicable to compartments
 * whose \'spatialDimensions\' attribute values are <em>not</em> one of <code>\'1\'</code>, 
 * <code>\'2\'</code> or <code>\'3\'.</code>
 <p>
 * If a given {@link Compartment} object instance does not provide a value for its
 * \'units\' attribute, then the unit of measurement of that compartment\'s
 * size is inherited from the value specified by the {@link Model} \'volumeUnits\',
 * \'areaUnits\' or \'lengthUnits\' attribute, as appropriate based on the
 * {@link Compartment} object\'s \'spatialDimensions\' attribute value.  If the {@link Model}
 * object does not define the relevant attribute, then there are no units
 * to inherit, and all {@link Compartment} objects that do not set a value for
 * their \'units\' attribute then have <em>no</em> units associated with
 * their compartment sizes.
 <p>
 * The use of three separate attributes is a carry-over from SBML
 * Level&nbsp;2.  Note that it is entirely possible for a model to define a
 * value for two or more of the attributes \'volumeUnits\', \'areaUnits\' and
 * \'lengthUnits\' simultaneously, because SBML models may contain
 * compartments with different numbers of dimensions.
 <p>
 * <h3>The \'extentUnits\' attribute</h3>
 <p>
 * Reactions are processes that occur over time.  These processes involve
 * events of some sort, where a single ``reaction event\'\' is one in which
 * some set of entities (known as reactants, products and modifiers in
 * SBML) interact, once.  The <em>extent</em> of a reaction is a measure of
 * how many times the reaction has occurred, while the time derivative of
 * the extent gives the instantaneous rate at which the reaction is
 * occurring.  Thus, what is colloquially referred to as the \'rate of the
 * reaction\' is in fact equal to the rate of change of reaction extent.
 <p>
 * In SBML Level&nbsp;3, the combination of \'extentUnits\' and \'timeUnits\'
 * defines the units of kinetic laws in SBML and establishes how the
 * numerical value of each {@link KineticLaw} object\'s mathematical formula is
 * meant to be interpreted in a model.  The units of the kinetic laws are
 * taken to be \'extentUnits\' divided by \'timeUnits\'.
 <p>
 * Note that this embodies an important principle in SBML Level&nbsp;3
 * models: <em>all reactions in an SBML model must have the same units</em>
 * for the rate of change of extent.  In other words, the units of all
 * reaction rates in the model <em>must be the same</em>.  There is only
 * one global value for \'extentUnits\' and one global value for \'timeUnits\'.
 <p>
 * <h3>The \'conversionFactor\' attribute</h3>
 <p>
 * The attribute \'conversionFactor\' in SBML Level&nbsp;3\'s {@link Model} object
 * defines a global value inherited by all {@link Species} object instances that do
 * not define separate values for their \'conversionFactor\' attributes.  The
 * value of this attribute must refer to a {@link Parameter} object instance
 * defined in the model.  The {@link Parameter} object in question must be a
 * constant; ie it must have its \'constant\' attribute value set to 
 * <code>\'true\'.</code>
 <p>
 * If a given {@link Species} object definition does not specify a conversion
 * factor via the \'conversionFactor\' attribute on {@link Species}, then the species
 * inherits the conversion factor specified by the {@link Model} \'conversionFactor\'
 * attribute.  If the {@link Model} does not define a value for this attribute,
 * then there is no conversion factor to inherit.  More information about
 * conversion factors is provided in the SBML Level&nbsp;3 Version&nbsp;1
 * specification.
 */
"


%javamethodmodifiers Model::Model(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Model} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Model}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Model}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Model::Model(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Model} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Model::Model(const Model& orig) "
/**
   * Copy constructor; creates a (deep) copy of the given {@link Model} object.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Model::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Constraint}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers Model::clone() const "
/**
   * Creates and returns a deep copy of this {@link Model} object.
   <p>
   * @return the (deep) copy of this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code>.
   <p>
   * This operation searches the model-wide <code>SId</code> identifier
   * type namespace
   <p>
   * @param id string representing the id of the object to find.
   <p>
   * @return pointer to the first element found with the given <code>id</code>, or 
   * <code>null</code> if no such object is found.
   */ public
";


%javamethodmodifiers Model::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given <code>metaid</code>.
   <p>
   * @param metaid string representing the meta-identifier of the object to
   * find.
   <p>
   * @return pointer to the first element found with the given <code>metaid</code>, or
   * null if no such object is found.
   */ public
";


%javamethodmodifiers Model::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child objects.
   <p>
   * This returns all child objects nested to an arbitrary depth.  If an
   * optional element filter is provided, only those objects for which the
   * <code>filter\'s</code> <code>filter()</code> method returns true will be added to 
   * the list.
   <p>
   * @param filter optional filter to apply to objects before putting them
   * into the list to be returned.
   <p>
   * @return a List* of pointers to all children objects.
   */ public
";


%javamethodmodifiers Model::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link Model}.
   <p>
   * @return the id of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link Model}.
   <p>
   * @return the name of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getSubstanceUnits() const "
/**
   * Returns the value of the \'substanceUnits\' attribute of this {@link Model}.
   <p>
   * @return the substanceUnits of this {@link Model}.
   <p>
   * @note The \'substanceUnits\' attribute is available in
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::getTimeUnits() const "
/**
   * Returns the value of the \'timeUnits\' attribute of this {@link Model}.
   <p>
   * @return the timeUnits of this {@link Model}.
   <p>
   * @note The \'timeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::getVolumeUnits() const "
/**
   * Returns the value of the \'volumeUnits\' attribute of this {@link Model}.
   <p>
   * @return the volumeUnits of this {@link Model}.
   <p>
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::getAreaUnits() const "
/**
   * Returns the value of the \'areaUnits\' attribute of this {@link Model}.
   <p>
   * @return the areaUnits of this {@link Model}.
   <p>
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::getLengthUnits() const "
/**
   * Returns the value of the \'lengthUnits\' attribute of this {@link Model}.
   <p>
   * @return the lengthUnits of this {@link Model}.
   <p>
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::getExtentUnits() const "
/**
   * Returns the value of the \'extentUnits\' attribute of this {@link Model}.
   <p>
   * @return the extentUnits of this {@link Model}.
   <p>
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::getConversionFactor() const "
/**
   * Returns the value of the \'conversionFactor\' attribute of this {@link Model}.
   <p>
   * @return the conversionFactor of this {@link Model}.
   <p>
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::isSetId() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'id\' attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Model::isSetName() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'name\' attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Model::isSetSubstanceUnits() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'substanceUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'substanceUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::isSetTimeUnits() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'timeUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'timeUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::isSetVolumeUnits() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'volumeUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'volumeUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::isSetAreaUnits() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'areaUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'areaUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::isSetLengthUnits() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'lengthUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'lengthUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::isSetExtentUnits() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'extentUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'extentUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::isSetConversionFactor() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'conversionFactor\' attribute is set.
   <p>
   * @return <code>true</code> if the \'conversionFactor\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link Model}.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Model::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link Model}.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Model::setSubstanceUnits(const std::string& units) "
/**
   * Sets the value of the \'substanceUnits\' attribute of this {@link Model}.
   <p>
   * The string in <code>units</code> is copied.
   <p>
   * @param units the new substanceUnits for the {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::setTimeUnits(const std::string& units) "
/**
   * Sets the value of the \'timeUnits\' attribute of this {@link Model}.
   <p>
   * The string in <code>units</code> is copied.
   <p>
   * @param units the new timeUnits for the {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'timeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::setVolumeUnits(const std::string& units) "
/**
   * Sets the value of the \'volumeUnits\' attribute of this {@link Model}.
   <p>
   * The string in <code>units</code> is copied.
   <p>
   * @param units the new volumeUnits for the {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::setAreaUnits(const std::string& units) "
/**
   * Sets the value of the \'areaUnits\' attribute of this {@link Model}.
   <p>
   * The string in <code>units</code> is copied.
   <p>
   * @param units the new areaUnits for the {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::setLengthUnits(const std::string& units) "
/**
   * Sets the value of the \'lengthUnits\' attribute of this {@link Model}.
   <p>
   * The string in <code>units</code> is copied.
   <p>
   * @param units the new lengthUnits for the {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::setExtentUnits(const std::string& units) "
/**
   * Sets the value of the \'extentUnits\' attribute of this {@link Model}.
   <p>
   * The string in <code>units</code> is copied.
   <p>
   * @param units the new extentUnits for the {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::setConversionFactor(const std::string& units) "
/**
   * Sets the value of the \'conversionFactor\' attribute of this {@link Model}.
   <p>
   * The string in <code>units</code> is copied.
   <p>
   * @param units the new conversionFactor for the {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Model::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Model::unsetSubstanceUnits "
/**
   * Unsets the value of the \'substanceUnits\' attribute of this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::unsetTimeUnits "
/**
   * Unsets the value of the \'timeUnits\' attribute of this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'timeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::unsetVolumeUnits "
/**
   * Unsets the value of the \'volumeUnits\' attribute of this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::unsetAreaUnits "
/**
   * Unsets the value of the \'areaUnits\' attribute of this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::unsetLengthUnits "
/**
   * Unsets the value of the \'lengthUnits\' attribute of this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::unsetExtentUnits "
/**
   * Unsets the value of the \'extentUnits\' attribute of this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::unsetConversionFactor "
/**
   * Unsets the value of the \'conversionFactor\' attribute of this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Model::addFunctionDefinition(const FunctionDefinition* fd) "
/**
   * Adds a copy of the given {@link FunctionDefinition} object to this {@link Model}.
   <p>
   * @param fd the {@link FunctionDefinition} to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createFunctionDefinition()
   */ public
";


%javamethodmodifiers Model::addUnitDefinition(const UnitDefinition* ud) "
/**
   * Adds a copy of the given {@link UnitDefinition} object to this {@link Model}.
   <p>
   * @param ud the {@link UnitDefinition} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createUnitDefinition()
   */ public
";


%javamethodmodifiers Model::addCompartmentType(const CompartmentType* ct) "
/**
   * Adds a copy of the given {@link CompartmentType} object to this {@link Model}.
   <p>
   * @param ct the {@link CompartmentType} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   <p>
   * @see #createCompartmentType()
   */ public
";


%javamethodmodifiers Model::addSpeciesType(const SpeciesType* st) "
/**
   * Adds a copy of the given {@link SpeciesType} object to this {@link Model}.
   <p>
   * @param st the {@link SpeciesType} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   <p>
   * @see #createSpeciesType()
   */ public
";


%javamethodmodifiers Model::addCompartment(const Compartment* c) "
/**
   * Adds a copy of the given {@link Compartment} object to this {@link Model}.
   <p>
   * @param c the {@link Compartment} object to add
   <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createCompartment()
   */ public
";


%javamethodmodifiers Model::addSpecies(const Species* s) "
/**
   * Adds a copy of the given {@link Species} object to this {@link Model}.
   <p>
   * @param s the {@link Species} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createSpecies()
   */ public
";


%javamethodmodifiers Model::addParameter(const Parameter* p) "
/**
   * Adds a copy of the given {@link Parameter} object to this {@link Model}.
   <p>
   * @param p the {@link Parameter} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createParameter()
   */ public
";


%javamethodmodifiers Model::addInitialAssignment(const InitialAssignment* ia) "
/**
   * Adds a copy of the given {@link InitialAssignment} object to this {@link Model}.
   <p>
   * @param ia the {@link InitialAssignment} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createInitialAssignment()
   */ public
";


%javamethodmodifiers Model::addRule(const Rule* r) "
/**
   * Adds a copy of the given {@link Rule} object to this {@link Model}.
   <p>
   * @param r the {@link Rule} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createAlgebraicRule()
   * @see #createAssignmentRule()
   * @see #createRateRule()
   */ public
";


%javamethodmodifiers Model::addConstraint(const Constraint* c) "
/**
   * Adds a copy of the given {@link Constraint} object to this {@link Model}.
   <p>
   * @param c the {@link Constraint} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createConstraint()
   */ public
";


%javamethodmodifiers Model::addReaction(const Reaction* r) "
/**
   * Adds a copy of the given {@link Reaction} object to this {@link Model}.
   <p>
   * @param r the {@link Reaction} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createReaction()
   */ public
";


%javamethodmodifiers Model::addEvent(const Event* e) "
/**
   * Adds a copy of the given {@link Event} object to this {@link Model}.
   <p>
   * @param e the {@link Event} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createEvent()
   */ public
";


%javamethodmodifiers Model::createFunctionDefinition "
/**
   * Creates a new {@link FunctionDefinition} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link FunctionDefinition} object created
   <p>
   * @see #addFunctionDefinition(FunctionDefinition fd)
   */ public
";


%javamethodmodifiers Model::createUnitDefinition "
/**
   * Creates a new {@link UnitDefinition} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link UnitDefinition} object created
   <p>
   * @see #addUnitDefinition(UnitDefinition ud)
   */ public
";


%javamethodmodifiers Model::createUnit "
/**
   * Creates a new {@link Unit} object within the last {@link UnitDefinition} object
   * created in this model and returns a pointer to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * The mechanism by which the {@link UnitDefinition} was created is not
   * significant.  If a {@link UnitDefinition} object does not exist in this model,
   * a new {@link Unit} is <em>not</em> created and <code>null</code> is returned instead.
   <p>
   * @return the {@link Unit} object created
   <p>
   * @see #addUnitDefinition(UnitDefinition ud)
   */ public
";


%javamethodmodifiers Model::createCompartmentType "
/**
   * Creates a new {@link CompartmentType} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link CompartmentType} object created
   <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   <p>
   * @see #addCompartmentType(CompartmentType ct)
   */ public
";


%javamethodmodifiers Model::createSpeciesType "
/**
   * Creates a new {@link SpeciesType} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link SpeciesType} object created
   <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   <p>
   * @see #addSpeciesType(SpeciesType st)
   */ public
";


%javamethodmodifiers Model::createCompartment "
/**
   * Creates a new {@link Compartment} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link Compartment} object created
   <p>
   * @see #addCompartment(Compartment c)
   */ public
";


%javamethodmodifiers Model::createSpecies "
/**
   * Creates a new {@link Species} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link Species} object created
   <p>
   * @see #addSpecies(Species s)
   */ public
";


%javamethodmodifiers Model::createParameter "
/**
   * Creates a new {@link Parameter} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link Parameter} object created
   <p>
   * @see #addParameter(Parameter p)
   */ public
";


%javamethodmodifiers Model::createInitialAssignment "
/**
   * Creates a new {@link InitialAssignment} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link InitialAssignment} object created
   <p>
   * @see #addInitialAssignment(InitialAssignment ia)
   */ public
";


%javamethodmodifiers Model::createAlgebraicRule "
/**
   * Creates a new {@link AlgebraicRule} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link AlgebraicRule} object created
   <p>
   * @see #addRule(Rule r)
   */ public
";


%javamethodmodifiers Model::createAssignmentRule "
/**
   * Creates a new {@link AssignmentRule} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link AssignmentRule} object created
   <p>
   * @see #addRule(Rule r)
   */ public
";


%javamethodmodifiers Model::createRateRule "
/**
   * Creates a new {@link RateRule} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link RateRule} object created
   <p>
   * @see #addRule(Rule r)
   */ public
";


%javamethodmodifiers Model::createConstraint "
/**
   * Creates a new {@link Constraint} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link Constraint} object created
   <p>
   * @see #addConstraint(Constraint c)
   */ public
";


%javamethodmodifiers Model::createReaction "
/**
   * Creates a new {@link Reaction} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link Reaction} object created
   <p>
   * @see #addReaction(Reaction r)
   */ public
";


%javamethodmodifiers Model::createReactant "
/**
   * Creates a new {@link SpeciesReference} object for a reactant inside the last
   * {@link Reaction} object in this {@link Model}, and returns a pointer to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * <p>
 * The mechanism by which the last {@link Reaction} object was created and added
 * to this {@link Model} is not significant.  It could have been created in a
 * variety of ways, for example using createReaction().  If a {@link Reaction}
 * does not exist for this model, a new {@link SpeciesReference} is <em>not</em>
 * created and <code>null</code> is returned instead.
   <p>
   * @return the {@link SpeciesReference} object created.  If a {@link Reaction} does not
   * exist for this model, a new {@link SpeciesReference} is <em>not</em> created and 
   * <code>null</code> is returned.
   */ public
";


%javamethodmodifiers Model::createProduct "
/**
   * Creates a new {@link SpeciesReference} object for a product inside the last
   * {@link Reaction} object in this {@link Model}, and returns a pointer to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * <p>
 * The mechanism by which the last {@link Reaction} object was created and added
 * to this {@link Model} is not significant.  It could have been created in a
 * variety of ways, for example using createReaction().  If a {@link Reaction}
 * does not exist for this model, a new {@link SpeciesReference} is <em>not</em>
 * created and <code>null</code> is returned instead.
   <p>
   * @return the {@link SpeciesReference} object created. If a {@link Reaction} does not
   * exist for this model, a new {@link SpeciesReference} is <em>not</em> created and 
   * <code>null</code> is returned.
   */ public
";


%javamethodmodifiers Model::createModifier "
/**
   * Creates a new {@link ModifierSpeciesReference} object for a modifier species
   * inside the last {@link Reaction} object in this {@link Model}, and returns a pointer
   * to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * <p>
 * The mechanism by which the last {@link Reaction} object was created and added
 * to this {@link Model} is not significant.  It could have been created in a
 * variety of ways, for example using createReaction().  If a {@link Reaction}
 * does not exist for this model, a new {@link SpeciesReference} is <em>not</em>
 * created and <code>null</code> is returned instead.
   <p>
   * @return the {@link SpeciesReference} object created.  If a {@link Reaction} does not
   * exist for this model, a new {@link SpeciesReference} is <em>not</em> created and 
   * <code>null</code> is returned.
   */ public
";


%javamethodmodifiers Model::createKineticLaw "
/**
   * Creates a new {@link KineticLaw} inside the last {@link Reaction} object created in
   * this {@link Model}, and returns a pointer to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * <p>
 * The mechanism by which the last {@link Reaction} object was created and added
 * to this {@link Model} is not significant.  It could have been created in a
 * variety of ways, for example using createReaction().  If a {@link Reaction}
 * does not exist for this model, a new {@link SpeciesReference} is <em>not</em>
 * created and <code>null</code> is returned instead.
   <p>
   * @return the {@link KineticLaw} object created.  If a {@link Reaction} does not exist for
   * this model, or a {@link Reaction} does exist but already has a {@link KineticLaw}, a new
   * {@link KineticLaw} is <em>not</em> created and <code>null</code> is returned.
   */ public
";


%javamethodmodifiers Model::createKineticLawParameter "
/**
   * Creates a new local {@link Parameter} inside the {@link KineticLaw} object of the last
   * {@link Reaction} created inside this {@link Model}, and returns a pointer to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * <p>
 * The last {@link KineticLaw} object in this {@link Model} could have been created in a
 * variety of ways.  For example, it could have been added using
 * createKineticLaw(), or it could be the result of using
 * {@link Reaction#createKineticLaw()} on the {@link Reaction} object created by a
 * createReaction().  If a {@link Reaction} does not exist for this model, or the
 * last {@link Reaction} does not contain a {@link KineticLaw} object, a new {@link Parameter} is
 * <em>not</em> created and <code>null</code> is returned instead.
   <p>
   * @return the {@link Parameter} object created.  If a {@link Reaction} does not exist for
   * this model, or a {@link KineticLaw} for the {@link Reaction} does not exist, a new
   * {@link Parameter} is <em>not</em> created and <code>null</code> is returned.
   */ public
";


%javamethodmodifiers Model::createKineticLawLocalParameter "
/**
   * Creates a new {@link LocalParameter} inside the {@link KineticLaw} object of the last
   * {@link Reaction} created inside this {@link Model}, and returns a pointer to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * <p>
 * The last {@link KineticLaw} object in this {@link Model} could have been created in a
 * variety of ways.  For example, it could have been added using
 * createKineticLaw(), or it could be the result of using
 * {@link Reaction#createKineticLaw()} on the {@link Reaction} object created by a
 * createReaction().  If a {@link Reaction} does not exist for this model, or the
 * last {@link Reaction} does not contain a {@link KineticLaw} object, a new {@link Parameter} is
 * <em>not</em> created and <code>null</code> is returned instead.
   <p>
   * @return the {@link Parameter} object created.  If a {@link Reaction} does not exist for
   * this model, or a {@link KineticLaw} for the {@link Reaction} does not exist, a new
   * {@link Parameter} is <em>not</em> created and <code>null</code> is returned.
   */ public
";


%javamethodmodifiers Model::createEvent "
/**
   * Creates a new {@link Event} inside this {@link Model} and returns it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * @return the {@link Event} object created
   */ public
";


%javamethodmodifiers Model::createEventAssignment "
/**
   * Creates a new {@link EventAssignment} inside the last {@link Event} object created in
   * this {@link Model}, and returns a pointer to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * <p>
 * The mechanism by which the last {@link Event} object in this model was created
 * is not significant.  It could have been created in a variety of ways,
 * for example by using createEvent().  If no {@link Event} object exists in this
 * {@link Model} object, a new {@link EventAssignment} is <em>not</em> created and <code>null</code> is
 * returned instead.
   <p>
   * @return the {@link EventAssignment} object created
   */ public
";


%javamethodmodifiers Model::createTrigger "
/**
   * Creates a new {@link Trigger} inside the last {@link Event} object created in
   * this {@link Model}, and returns a pointer to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * <p>
 * The mechanism by which the last {@link Event} object in this model was created
 * is not significant.  It could have been created in a variety of ways,
 * for example by using createEvent().  If no {@link Event} object exists in this
 * {@link Model} object, a new {@link EventAssignment} is <em>not</em> created and <code>null</code> is
 * returned instead.
   <p>
   * @return the {@link Trigger} object created
   */ public
";


%javamethodmodifiers Model::createDelay "
/**
   * Creates a new {@link Delay} inside the last {@link Event} object created in
   * this {@link Model}, and returns a pointer to it.
   <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   <p>
   * <p>
 * The mechanism by which the last {@link Event} object in this model was created
 * is not significant.  It could have been created in a variety of ways,
 * for example by using createEvent().  If no {@link Event} object exists in this
 * {@link Model} object, a new {@link EventAssignment} is <em>not</em> created and <code>null</code> is
 * returned instead.
   <p>
   * @return the {@link Delay} object created
   */ public
";


%javamethodmodifiers Model::setAnnotation(const XMLNode* annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of <code>annotation</code>.
   <p>
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the <code>annotation</code> that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   <p>
   * @param annotation an XML structure that is to be used as the content
   * of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #appendAnnotation(XMLNode annotation)
   */ public
";


%javamethodmodifiers Model::setAnnotation(const std::string& annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of <code>annotation</code>.
   <p>
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the <code>annotation</code> that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   <p>
   * @param annotation an XML string that is to be used as the content
   * of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #appendAnnotation(String annotation)
   */ public
";


%javamethodmodifiers Model::appendAnnotation(const XMLNode* annotation) "
/**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   <p>
   * The content in <code>annotation</code> is copied.  Unlike setAnnotation(), this
   * method allows other annotations to be preserved when an application
   * adds its own data.
   <p>
   * @param annotation an XML structure that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #setAnnotation(XMLNode annotation)
   */ public
";


%javamethodmodifiers Model::appendAnnotation(const std::string& annotation) "
/**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   <p>
   * The content in <code>annotation</code> is copied.  Unlike setAnnotation(), this 
   * method allows other annotations to be preserved when an application
   * adds its own data.
   <p>
   * @param annotation an XML string that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #setAnnotation(String annotation)
   */ public
";


%javamethodmodifiers Model::getListOfFunctionDefinitions() const "
/**
   * Get the {@link ListOfFunctionDefinitions} object in this {@link Model}.
   <p>
   * @return the list of FunctionDefinitions for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfFunctionDefinitions "
/**
   * Get the {@link ListOfFunctionDefinitions} object in this {@link Model}.
   <p>
   * @return the list of FunctionDefinitions for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfUnitDefinitions() const "
/**
   * Get the {@link ListOfUnitDefinitions} object in this {@link Model}.
   <p>
   * @return the list of UnitDefinitions for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfUnitDefinitions "
/**
   * Get the {@link ListOfUnitDefinitions} object in this {@link Model}.
   <p>
   * @return the list of UnitDefinitions for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfCompartmentTypes() const "
/**
   * Get the {@link ListOfCompartmentTypes} object in this {@link Model}.
   <p>
   * @return the list of CompartmentTypes for this {@link Model}.
   <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getListOfCompartmentTypes "
/**
   * Get the {@link ListOfCompartmentTypes} object in this {@link Model}.
   <p>
   * @return the list of CompartmentTypes for this {@link Model}.
   <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getListOfSpeciesTypes() const "
/**
   * Get the {@link ListOfSpeciesTypes} object in this {@link Model}.
   <p>
   * @return the list of SpeciesTypes for this {@link Model}.
   <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getListOfSpeciesTypes "
/**
   * Get the {@link ListOfSpeciesTypes} object in this {@link Model}.
   <p>
   * @return the list of SpeciesTypes for this {@link Model}.
   <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getListOfCompartments() const "
/**
   * Get the {@link ListOfCompartments} object in this {@link Model}.
   <p>
   * @return the list of Compartments for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfCompartments "
/**
   * Get the {@link ListOfCompartments} object in this {@link Model}.
   <p>
   * @return the list of Compartments for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfSpecies() const "
/**
   * Get the {@link ListOfSpecies} object in this {@link Model}.
   <p>
   * @return the list of {@link Species} for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfSpecies "
/**
   * Get the {@link ListOfSpecies} object in this {@link Model}.
   <p>
   * @return the list of {@link Species} for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfParameters() const "
/**
   * Get the {@link ListOfParameters} object in this {@link Model}.
   <p>
   * @return the list of Parameters for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfParameters "
/**
   * Get the {@link ListOfParameters} object in this {@link Model}.
   <p>
   * @return the list of Parameters for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfInitialAssignments() const "
/**
   * Get the {@link ListOfInitialAssignments} object in this {@link Model}.
   <p>
   * @return the list of InitialAssignments for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfInitialAssignments "
/**
   * Get the {@link ListOfInitialAssignments} object in this {@link Model}.
   <p>
   * @return the list of {@link InitialAssignment} for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfRules() const "
/**
   * Get the {@link ListOfRules} object in this {@link Model}.
   <p>
   * @return the list of Rules for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfRules "
/**
   * Get the {@link ListOfRules} object in this {@link Model}.
   <p>
   * @return the list of Rules for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfConstraints() const "
/**
   * Get the {@link ListOfConstraints} object in this {@link Model}.
   <p>
   * @return the list of Constraints for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfConstraints "
/**
   * Get the {@link ListOfConstraints} object in this {@link Model}.
   <p>
   * @return the list of Constraints for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfReactions() const "
/**
   * Get the {@link ListOfReactions} object in this {@link Model}.
   <p>
   * @return the list of Reactions for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfReactions "
/**
   * Get the {@link ListOfReactions} object in this {@link Model}.
   <p>
   * @return the list of Reactions for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfEvents() const "
/**
   * Get the {@link ListOfEvents} object in this {@link Model}.
   <p>
   * @return the list of Events for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getListOfEvents "
/**
   * Get the {@link ListOfEvents} object in this {@link Model}.
   <p>
   * @return the list of Events for this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getFunctionDefinition "
/**
   * Get the nth FunctionDefinitions object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link FunctionDefinition} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getFunctionDefinition(unsigned int n) "
/**
   * Get the nth FunctionDefinitions object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link FunctionDefinition} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getFunctionDefinition(const std::string& sid) const "
/**
   * Get a {@link FunctionDefinition} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link FunctionDefinition} in this {@link Model} with the identifier
   * <code>sid</code> or <code>null</code> if no such {@link FunctionDefinition} exists.
   */ public
";


%javamethodmodifiers Model::getFunctionDefinition(const std::string& sid) "
/**
   * Get a {@link FunctionDefinition} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link FunctionDefinition} in this {@link Model} with the identifier
   * <code>sid</code> or <code>null</code> if no such {@link FunctionDefinition} exists.
   */ public
";


%javamethodmodifiers Model::getUnitDefinition "
/**
   * Get the nth {@link UnitDefinition} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link UnitDefinition} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getUnitDefinition(unsigned int n) "
/**
   * Get the nth {@link UnitDefinition} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link UnitDefinition} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getUnitDefinition(const std::string& sid) const "
/**
   * Get a {@link UnitDefinition} based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link UnitDefinition} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link UnitDefinition} exists.
   */ public
";


%javamethodmodifiers Model::getUnitDefinition(const std::string& sid) "
/**
   * Get a {@link UnitDefinition} based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link UnitDefinition} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link UnitDefinition} exists.
   */ public
";


%javamethodmodifiers Model::getCompartmentType "
/**
   * Get the nth {@link CompartmentType} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link CompartmentType} of this {@link Model}.
   <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getCompartmentType(unsigned int n) "
/**
   * Get the nth {@link CompartmentType} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link CompartmentType} of this {@link Model}.
   <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getCompartmentType(const std::string& sid) const "
/**
   * Get a {@link CompartmentType} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link CompartmentType} in this {@link Model} with the identifier <code>sid</code>
   * or <code>null</code> if no such {@link CompartmentType} exists.
   <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getCompartmentType(const std::string& sid) "
/**
   * Get a {@link CompartmentType} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link CompartmentType} in this {@link Model} with the identifier <code>sid</code>
   * or <code>null</code> if no such {@link CompartmentType} exists.
   <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getSpeciesType "
/**
   * Get the nth {@link SpeciesType} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link SpeciesType} of this {@link Model}.
   <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getSpeciesType(unsigned int n) "
/**
   * Get the nth {@link SpeciesType} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link SpeciesType} of this {@link Model}.
   <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getSpeciesType(const std::string& sid) const "
/**
   * Get a {@link SpeciesType} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link SpeciesType} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link SpeciesType} exists.
   <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getSpeciesType(const std::string& sid) "
/**
   * Get a {@link SpeciesType} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link SpeciesType} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link SpeciesType} exists.
   <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getCompartment "
/**
   * Get the nth {@link Compartment} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Compartment} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getCompartment(unsigned int n) "
/**
   * Get the nth {@link Compartment} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Compartment} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getCompartment(const std::string& sid) const "
/**
   * Get a {@link Compartment} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Compartment} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link Compartment} exists.
   */ public
";


%javamethodmodifiers Model::getCompartment(const std::string& sid) "
/**
   * Get a {@link Compartment} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Compartment} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link Compartment} exists.
   */ public
";


%javamethodmodifiers Model::getSpecies "
/**
   * Get the nth {@link Species} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Species} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getSpecies(unsigned int n) "
/**
   * Get the nth {@link Species} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Species} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getSpecies(const std::string& sid) const "
/**
   * Get a {@link Species} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Species} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Species} exists.
   */ public
";


%javamethodmodifiers Model::getSpecies(const std::string& sid) "
/**
   * Get a {@link Species} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Species} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Species} exists.
   */ public
";


%javamethodmodifiers Model::getParameter "
/**
   * Get the nth {@link Parameter} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Parameter} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getParameter(unsigned int n) "
/**
   * Get the nth {@link Parameter} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Parameter} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getParameter(const std::string& sid) const "
/**
   * Get a {@link Parameter} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Parameter} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Parameter} exists.
   */ public
";


%javamethodmodifiers Model::getParameter(const std::string& sid) "
/**
   * Get a {@link Parameter} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Parameter} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Parameter} exists.
   */ public
";


%javamethodmodifiers Model::getInitialAssignment "
/**
   * Get the nth {@link InitialAssignment} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link InitialAssignment} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getInitialAssignment(unsigned int n) "
/**
   * Get the nth {@link InitialAssignment} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link InitialAssignment} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getInitialAssignment(const std::string& symbol) const "
/**
   * Get an {@link InitialAssignment} object based on the symbol to which it
   * assigns a value.
   <p>
   * @param symbol the symbol to search for.
   <p>
   * @return the {@link InitialAssignment} in this {@link Model} with the given \'symbol\'
   * attribute value or <code>null</code> if no such {@link InitialAssignment} exists.
   */ public
";


%javamethodmodifiers Model::getInitialAssignmentBySymbol(const std::string& symbol) const "
/**
   * Get an {@link InitialAssignment} object based on the symbol to which it
   * assigns a value.
   <p>
   * @param symbol the symbol to search for.
   <p>
   * @return the {@link InitialAssignment} in this {@link Model} with the given \'symbol\'
   * attribute value or <code>null</code> if no such {@link InitialAssignment} exists.
   */ public
";


%javamethodmodifiers Model::getInitialAssignment(const std::string& symbol) "
/**
   * Get an {@link InitialAssignment} object based on the symbol to which it
   * assigns a value.
   <p>
   * @param symbol the symbol to search for.
   <p>
   * @return the {@link InitialAssignment} in this {@link Model} with the given \'symbol\'
   * attribute value or <code>null</code> if no such {@link InitialAssignment} exists.
   */ public
";


%javamethodmodifiers Model::getInitialAssignmentBySymbol(const std::string& symbol) "
/**
   * Get an {@link InitialAssignment} object based on the symbol to which it
   * assigns a value.
   <p>
   * @param symbol the symbol to search for.
   <p>
   * @return the {@link InitialAssignment} in this {@link Model} with the given \'symbol\'
   * attribute value or <code>null</code> if no such {@link InitialAssignment} exists.
   */ public
";


%javamethodmodifiers Model::getRule "
/**
   * Get the nth {@link Rule} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Rule} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getRule(unsigned int n) "
/**
   * Get the nth {@link Rule} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Rule} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getRule(const std::string& variable) const "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getRule(const std::string& variable) "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getRuleByVariable(const std::string& variable) const "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getRuleByVariable(const std::string& variable) "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getAssignmentRule(const std::string& variable) const "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getAssignmentRule(const std::string& variable) "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getRateRule(const std::string& variable) const "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the symbol to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getRateRule(const std::string& variable) "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getAssignmentRuleByVariable(const std::string& variable) const "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getAssignmentRuleByVariable(const std::string& variable) "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getRateRuleByVariable(const std::string& variable) const "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getRateRuleByVariable(const std::string& variable) "
/**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   <p>
   * @param variable the variable to search for.
   <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */ public
";


%javamethodmodifiers Model::getConstraint "
/**
   * Get the nth {@link Constraint} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Constraint} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getConstraint(unsigned int n) "
/**
   * Get the nth {@link Constraint} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Constraint} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getReaction "
/**
   * Get the nth {@link Reaction} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Reaction} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getReaction(unsigned int n) "
/**
   * Get the nth {@link Reaction} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Reaction} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getReaction(const std::string& sid) const "
/**
   * Get a {@link Reaction} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Reaction} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Reaction} exists.
   */ public
";


%javamethodmodifiers Model::getReaction(const std::string& sid) "
/**
   * Get a {@link Reaction} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Reaction} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Reaction} exists.
   */ public
";


%javamethodmodifiers Model::getSpeciesReference(const std::string& sid) "
/**
   * Get a {@link SpeciesReference} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link SpeciesReference} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link SpeciesReference} exists.
   */ public
";


%javamethodmodifiers Model::getSpeciesReference(const std::string& sid) const "
/**
   * Get a {@link SpeciesReference} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link SpeciesReference} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link SpeciesReference} exists.
   */ public
";


%javamethodmodifiers Model::getModifierSpeciesReference(const std::string& sid) "
/**
   * Get a {@link ModifierSpeciesReference} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link ModifierSpeciesReference} in this {@link Model} with the 
   * identifier <code>sid</code> or <code>null</code>
   * if no such {@link ModifierSpeciesReference} exists.
   */ public
";


%javamethodmodifiers Model::getModifierSpeciesReference(const std::string& sid) const "
/**
   * Get a {@link ModifierSpeciesReference} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link ModifierSpeciesReference} in this {@link Model} with the 
   * identifier <code>sid</code> or <code>null</code>
   * if no such {@link ModifierSpeciesReference} exists.
   */ public
";


%javamethodmodifiers Model::getEvent "
/**
   * Get the nth {@link Event} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Event} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getEvent(unsigned int n) "
/**
   * Get the nth {@link Event} object in this {@link Model}.
   <p>
   * @param n the index of the object to return.
   <p>
   * @return the nth {@link Event} of this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getEvent(const std::string& sid) const "
/**
   * Get an {@link Event} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Event} in this {@link Model} with the identifier <code>sid</code> or <code>null</code> if
   * no such {@link Event} exists.
   */ public
";


%javamethodmodifiers Model::getEvent(const std::string& sid) "
/**
   * Get an {@link Event} object based on its identifier.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the {@link Event} in this {@link Model} with the identifier <code>sid</code> or <code>null</code> if
   * no such {@link Event} exists.
   */ public
";


%javamethodmodifiers Model::getNumFunctionDefinitions() const "
/**
   * Get the number of {@link FunctionDefinition} objects in this {@link Model}.
   <p>
   * @return the number of FunctionDefinitions in this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getNumUnitDefinitions() const "
/**
   * Get the number of {@link UnitDefinition} objects in this {@link Model}.
   <p>
   * @return the number of UnitDefinitions in this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getNumCompartmentTypes() const "
/**
   * Get the number of {@link CompartmentType} objects in this {@link Model}.
   <p>
   * @return the number of CompartmentTypes in this {@link Model}.
   <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getNumSpeciesTypes() const "
/**
   * Get the number of {@link SpeciesType} objects in this {@link Model}.
   <p>
   * @return the number of SpeciesTypes in this {@link Model}.
   <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%javamethodmodifiers Model::getNumCompartments() const "
/**
   * Get the number of {@link Compartment} objects in this {@link Model}.
   <p>
   * @return the number of Compartments in this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getNumSpecies() const "
/**
   * Get the number of Specie objects in this {@link Model}.
   <p>
   * @return the number of {@link Species} in this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getNumSpeciesWithBoundaryCondition() const "
/**
   * Get the number of {@link Species} in this {@link Model} having their
   * \'boundaryCondition\' attribute value set to <code>true.</code>
   <p>
   * @return the number of {@link Species} in this {@link Model} with boundaryCondition set
   * to true.
   */ public
";


%javamethodmodifiers Model::getNumParameters() const "
/**
   * Get the number of {@link Parameter} objects in this {@link Model}.
   <p>
   * @return the number of Parameters in this {@link Model}.  Parameters defined in
   * KineticLaws are not included.
   */ public
";


%javamethodmodifiers Model::getNumInitialAssignments() const "
/**
   * Get the number of {@link InitialAssignment} objects in this {@link Model}.
   <p>
   * @return the number of InitialAssignments in this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getNumRules() const "
/**
   * Get the number of {@link Rule} objects in this {@link Model}.
   <p>
   * @return the number of Rules in this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getNumConstraints() const "
/**
   * Get the number of {@link Constraint} objects in this {@link Model}.
   <p>
   * @return the number of Constraints in this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getNumReactions() const "
/**
   * Get the number of {@link Reaction} objects in this {@link Model}.
   <p>
   * @return the number of Reactions in this {@link Model}.
   */ public
";


%javamethodmodifiers Model::getNumEvents() const "
/**
   * Get the number of {@link Event} objects in this {@link Model}.
   <p>
   * @return the number of Events in this {@link Model}.
   */ public
";


%javamethodmodifiers Model::removeFromParentAndDelete "
/**
   * Remove this {@link Model} from its parent {@link SBMLDocument} object.
   <p>
   * This works by finding this {@link Model}\'s parent {@link SBMLDocument} and then calling
   * <code>setModel(null)</code> on it, indirectly deleting itself.
   * Overridden from the {@link SBase} function since the parent is not a {@link ListOf}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Model::renameAllIds(IdentifierTransformer* idTransformer, ElementFilter* filter=NULL) "
/** * @internal */ public
";


%javamethodmodifiers Model::renameIDs(List* elements, IdentifierTransformer* idTransformer) "
/** * @internal */ public
";


%javamethodmodifiers Model::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Model::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Model::isBoolean(const ASTNode* node) const "
/** * @internal */ public
";


%javamethodmodifiers Model::convertL1ToL2 "
/** * @internal */ public
";


%javamethodmodifiers Model::convertL1ToL3 "
/** * @internal */ public
";


%javamethodmodifiers Model::convertL2ToL3 "
/** * @internal */ public
";


%javamethodmodifiers Model::convertL2ToL1(bool strict = false) "
/** * @internal */ public
";


%javamethodmodifiers Model::convertL3ToL1 "
/** * @internal */ public
";


%javamethodmodifiers Model::convertL3ToL2(bool strict = false) "
/** * @internal */ public
";


%javamethodmodifiers Model::addModifiers "
/** * @internal */ public
";


%javamethodmodifiers Model::addConstantAttribute "
/** * @internal */ public
";


%javamethodmodifiers Model::setSpatialDimensions(double dims = 3.0) "
/** * @internal */ public
";


%javamethodmodifiers Model::addDefinitionsForDefaultUnits "
/** * @internal */ public
";


%javamethodmodifiers Model::convertParametersToLocals(unsigned int level, unsigned int version) "
/** * @internal */ public
";


%javamethodmodifiers Model::setSpeciesReferenceConstantValueAndStoichiometry "
/** * @internal */ public
";


%javamethodmodifiers Model::removeMetaId "
/** * @internal */ public
";


%javamethodmodifiers Model::removeSBOTerms(bool strict) "
/** * @internal */ public
";


%javamethodmodifiers Model::removeHasOnlySubstanceUnits "
/** * @internal */ public
";


%javamethodmodifiers Model::removeSBOTermsNotInL2V2(bool strict) "
/** * @internal */ public
";


%javamethodmodifiers Model::removeDuplicateTopLevelAnnotations "
/** * @internal */ public
";


%javamethodmodifiers Model::removeParameterRuleUnits(bool strict) "
/** * @internal */ public
";


%javamethodmodifiers Model::convertStoichiometryMath "
/** * @internal */ public
";


%javamethodmodifiers Model::assignRequiredValues "
/** * @internal */ public
";


%javamethodmodifiers Model::dealWithModelUnits "
/** * @internal */ public
";


%javamethodmodifiers Model::dealWithStoichiometry "
/** * @internal */ public
";


%javamethodmodifiers Model::dealWithEvents(bool strict) "
/** * @internal */ public
";


%javamethodmodifiers Model::convertToL2Strict "
/** * @internal */ public
";


%javamethodmodifiers Model::setSBMLDocument(SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers Model::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_MODEL SBML_MODEL} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Model::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Model}, is
   * always <code>\'model\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'model\'.</code>
   */ public
";


%javamethodmodifiers Model::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers Model::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Model::populateListFormulaUnitsData "
/**
   * Populates the internal list of derived units for this {@link Model} object.
   <p>
   * This method tells libSBML to (re)calculate all units for all components
   * of the enclosing {@link Model} object.  The result is stored in an internal list
   * of unit data.  Users can access the resulting data by calling the method
   * {@link SBase#getDerivedUnitDefinition()} available on most objects.  (The name
   * \'formula units data\' is drawn from the name of the internal objects
   * libSBML uses to store the data; note that these internal objects are not
   * exposed to callers, because callers can interact with the results using
   * the ordinary SBML unit objects.)
   <p>
   * This method is used by libSBML itself in the validator concerned with
   * unit consistency.  The unit consistency validator (like all other
   * validators in libSBML) is invoked by using
   * {@link SBMLDocument#checkConsistency()}, with the consistency checks for the
   * category {@link libsbmlConstants#LIBSBML_CAT_UNITS_CONSISTENCY LIBSBML_CAT_UNITS_CONSISTENCY} turned on.  The method
   * populateListFormulaUnitsData() does not need to be called prior to
   * invoking the validator if unit consistency checking has not been turned
   * off.  This method is only provided for cases when callers have a special
   * need to force the unit data to be recalculated.  For instance, during
   * construction of a model, a caller may want to interrogate libSBML\'s
   * inferred units without invoking full-blown model validation; this is a
   * scenario in which calling populateListFormulaUnitsData() may be useful.
   <p>
   * @warning Computing and inferring units is a time-consuming operation.
   * Callers may want to call isPopulatedListFormulaUnitsData() to determine
   * whether the units may already have been computed, to save themselves the
   * need of invoking unit inference unnecessarily.
   <p>
   * @see #isPopulatedListFormulaUnitsData()
   */ public
";


%javamethodmodifiers Model::isPopulatedListFormulaUnitsData "
/**
   * Predicate returning <code>true</code> if libSBML has derived units for the
   * components of this model.
   <p>
   * LibSBML can infer the units of measurement associated with different
   * elements of a model.  When libSBML does that, it builds a complex
   * internal structure during a resource-intensive operation.  This is done
   * automatically only when callers invoke validation (via
   * {@link SBMLDocument#checkConsistency()}) and have not turned off the unit
   * validation option.
   <p>
   * Callers can force units to be recalculated by calling
   * populateListFormulaUnitsData().  To avoid calling that method
   * unnecessarily, calling programs may first want to invoke this method
   * (isPopulatedListFormulaUnitsData()) to determine whether it is even
   * necessary.
   <p>
   * @return <code>true</code> if the units have already been computed, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Model::addFormulaUnitsData(const FormulaUnitsData* fud) "
/** * @internal */ public
";


%javamethodmodifiers Model::createFormulaUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getFormulaUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getFormulaUnitsData(unsigned int n) "
/** * @internal */ public
";


%javamethodmodifiers Model::getFormulaUnitsData(const std::string& sid, int typecode) const "
/** * @internal */ public
";


%javamethodmodifiers Model::getFormulaUnitsData(const std::string& sid, int) "
/** * @internal */ public
";


%javamethodmodifiers Model::getFormulaUnitsDataForVariable(const std::string& sid) "
/** * @internal */ public
";


%javamethodmodifiers Model::getFormulaUnitsDataForAssignment(const std::string& sid) "
/** * @internal */ public
";


%javamethodmodifiers Model::getNumFormulaUnitsData() const "
/** * @internal */ public
";


%javamethodmodifiers Model::getListFormulaUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getListFormulaUnitsData() const "
/** * @internal */ public
";


%javamethodmodifiers Model::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if all the required elements for this {@link Model}
   * object have been set.
   <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers Model::removeFunctionDefinition(unsigned int n) "
/**
   * Removes the nth {@link FunctionDefinition} object from this {@link Model} object and 
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link FunctionDefinition} object to remove
   <p>
   * @return the {@link FunctionDefinition} object removed, or <code>null</code> if the given
   * index is out of range.
   */ public
";


%javamethodmodifiers Model::removeFunctionDefinition(const std::string& sid) "
/**
   * Removes the {@link FunctionDefinition} object with the given identifier from this {@link Model} 
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link FunctionDefinition} object to remove
   <p>
   * @return the {@link FunctionDefinition} object removed, or <code>null</code> if no
   * {@link FunctionDefinition} object with the identifier exists in this {@link Model}
   * object.
   */ public
";


%javamethodmodifiers Model::removeUnitDefinition(unsigned int n) "
/**
   * Removes the nth {@link UnitDefinition} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link UnitDefinition} object to remove
   <p>
   * @return the {@link UnitDefinition} object removed., or <code>null</code> if the given
   * index is out of range.
   */ public
";


%javamethodmodifiers Model::removeUnitDefinition(const std::string& sid) "
/**
   * Removes the {@link UnitDefinition} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link UnitDefinition} object to remove
   <p>
   * @return the {@link UnitDefinition} object removed, or <code>null</code> if no
   * {@link UnitDefinition} object with the identifier exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeCompartmentType(unsigned int n) "
/**
   * Removes the nth {@link CompartmentType} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link CompartmentType} object to remove
   <p>
   * @return the ComapartmentType object removed, or <code>null</code> if the given
   * index is out of range.
   */ public
";


%javamethodmodifiers Model::removeCompartmentType(const std::string& sid) "
/**
   * Removes the {@link CompartmentType} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the object to remove
   <p>
   * @return the {@link CompartmentType} object removed, or <code>null</code> if no
   * {@link CompartmentType} object with the identifier exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeSpeciesType(unsigned int n) "
/**
   * Removes the nth {@link SpeciesType} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link SpeciesType} object to remove
   <p>
   * @return the {@link SpeciesType} object removed, or <code>null</code> if the given index is
   * out of range.
   */ public
";


%javamethodmodifiers Model::removeSpeciesType(const std::string& sid) "
/**
   * Removes the {@link SpeciesType} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link SpeciesType} object to remove
   <p>
   * @return the {@link SpeciesType} object removed, or <code>null</code> if no {@link SpeciesType}
   * object with the identifier exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeCompartment(unsigned int n) "
/**
   * Removes the nth {@link Compartment} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link Compartment} object to remove
   <p>
   * @return the {@link Compartment} object removed, or <code>null</code> if the given index is
   * out of range.
   */ public
";


%javamethodmodifiers Model::removeCompartment(const std::string& sid) "
/**
   * Removes the {@link Compartment} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link Compartment} object to remove
   <p>
   * @return the {@link Compartment} object removed, or <code>null</code> if no {@link Compartment}
   * object with the identifier exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeSpecies(unsigned int n) "
/**
   * Removes the nth {@link Species} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link Species} object to remove
   <p>
   * @return the {@link Species} object removed, or <code>null</code> if the given index is out
   * of range.
   */ public
";


%javamethodmodifiers Model::removeSpecies(const std::string& sid) "
/**
   * Removes the {@link Species} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link Species} object to remove
   <p>
   * @return the {@link Species} object removed, or <code>null</code> if no {@link Species} object with
   * the identifier exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeParameter(unsigned int n) "
/**
   * Removes the nth {@link Parameter} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link Parameter} object to remove
   <p>
   * @return the {@link Parameter} object removed, or <code>null</code> if the given index is
   * out of range.
   */ public
";


%javamethodmodifiers Model::removeParameter(const std::string& sid) "
/**
   * Removes the {@link Parameter} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link Parameter} object to remove
   <p>
   * @return the {@link Parameter} object removed, or <code>null</code> if no {@link Parameter} object
   * with the identifier exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeInitialAssignment(unsigned int n) "
/**
   * Removes the nth {@link InitialAssignment} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link InitialAssignment} object to remove
   <p>
   * @return the {@link InitialAssignment} object removed, or <code>null</code> if the given
   * index is out of range.
   */ public
";


%javamethodmodifiers Model::removeInitialAssignment(const std::string& symbol) "
/**
   * Removes the {@link InitialAssignment} object with the given \'symbol\' attribute 
   * from this {@link Model} object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param symbol the \'symbol\' attribute of the {@link InitialAssignment} object to remove
   <p>
   * @return the {@link InitialAssignment} object removed, or <code>null</code> if no
   * {@link InitialAssignment} object with the \'symbol\' attribute exists in this
   * {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeRule(unsigned int n) "
/**
   * Removes the nth {@link Rule} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link Rule} object to remove
   <p>
   * @return the {@link Rule} object removed, or <code>null</code> if the given index is out of
   * range.
   */ public
";


%javamethodmodifiers Model::removeRule(const std::string& variable) "
/**
   * Removes the {@link Rule} object with the given \'variable\' attribute from this {@link Model} 
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param variable the \'variable\' attribute of the {@link Rule} object to remove
   <p>
   * @return the {@link Rule} object removed, or <code>null</code> if no {@link Rule} object with the
   * \'variable\' attribute exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeRuleByVariable(const std::string& variable) "
/**
   * Removes the {@link Rule} object with the given \'variable\' attribute from this {@link Model} 
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param variable the \'variable\' attribute of the {@link Rule} object to remove
   <p>
   * @return the {@link Rule} object removed, or <code>null</code> if no {@link Rule} object with the
   * \'variable\' attribute exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeConstraint(unsigned int n) "
/**
   * Removes the nth {@link Constraint} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link Constraint} object to remove
   <p>
   * @return the {@link Constraint} object removed, or <code>null</code> if the given index is
   * out of range.
   */ public
";


%javamethodmodifiers Model::removeReaction(unsigned int n) "
/**
   * Removes the nth {@link Reaction} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link Reaction} object to remove
   <p>
   * @return the {@link Reaction} object removed, or <code>null</code> if the given index is
   * out of range.
   */ public
";


%javamethodmodifiers Model::removeReaction(const std::string& sid) "
/**
   * Removes the {@link Reaction} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link Reaction} object to remove
   <p>
   * @return the {@link Reaction} object removed, or <code>null</code> if no {@link Reaction} object
   * with the identifier exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::removeEvent(unsigned int n) "
/**
   * Removes the nth {@link Event} object from this {@link Model} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link Event} object to remove
   <p>
   * @return the {@link Event} object removed, or <code>null</code> if the given index is out
   * of range.
   */ public
";


%javamethodmodifiers Model::removeEvent(const std::string& sid) "
/**
   * Removes the {@link Event} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link Event} object to remove
   <p>
   * @return the {@link Event} object removed, or <code>null</code> if no {@link Event} object with the
   * identifier exists in this {@link Model} object.
   */ public
";


%javamethodmodifiers Model::appendFrom(const Model* model) "
/**
   * Copies a given {@link Model} object\'s subcomponents and appends the copies to
   * the appropriate places in this {@link Model}.
   <p>
   * This method also calls the <code>appendFrom</code> method on all libSBML
   * plug-in objects.
   <p>
   * <p>
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
   <p>
   * @param model the {@link Model} to merge with this one.
   */ public
";


%javamethodmodifiers Model::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers Model::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers Model::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers Model::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Model::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Model::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Model::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Model::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Model::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Model::syncAnnotation "
/** * @internal */ public
";


%javamethodmodifiers Model::populatePerTimeUnitDefinition(FormulaUnitsData *fud) "
/** * @internal */ public
";


%javamethodmodifiers Model::createSpeciesReferenceUnitsData(SpeciesReference* sr, UnitFormulaFormatter* unitFormatter) "
/** * @internal */ public
";


%javamethodmodifiers Model::removeListFormulaUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::createSubstanceUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getL3SubstanceUD "
/** * @internal */ public
";


%javamethodmodifiers Model::getSubstanceUD "
/** * @internal */ public
";


%javamethodmodifiers Model::createTimeUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getL3TimeUD "
/** * @internal */ public
";


%javamethodmodifiers Model::getTimeUD "
/** * @internal */ public
";


%javamethodmodifiers Model::createVolumeUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getL3VolumeUD "
/** * @internal */ public
";


%javamethodmodifiers Model::getVolumeUD "
/** * @internal */ public
";


%javamethodmodifiers Model::createAreaUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getL3AreaUD "
/** * @internal */ public
";


%javamethodmodifiers Model::getAreaUD "
/** * @internal */ public
";


%javamethodmodifiers Model::createLengthUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getL3LengthUD "
/** * @internal */ public
";


%javamethodmodifiers Model::getLengthUD "
/** * @internal */ public
";


%javamethodmodifiers Model::createExtentUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getL3ExtentUD "
/** * @internal */ public
";


%javamethodmodifiers Model::createSubstancePerTimeUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::getL3SubstancePerTimeUD(FormulaUnitsData* fud) "
/** * @internal */ public
";


%javamethodmodifiers Model::getSubstancePerTimeUD "
/** * @internal */ public
";


%javamethodmodifiers Model::createCompartmentUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::createSpeciesUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::createL3SpeciesUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::createParameterUnitsData "
/** * @internal */ public
";


%javamethodmodifiers Model::createUnitsDataFromMath(UnitFormulaFormatter * unitFormatter, FormulaUnitsData * fud, const ASTNode * math) "
/** * @internal */ public
";


%javamethodmodifiers Model::createInitialAssignmentUnitsData(UnitFormulaFormatter * unitFormatter) "
/** * @internal */ public
";


%javamethodmodifiers Model::createRuleUnitsData(UnitFormulaFormatter * unitFormatter) "
/** * @internal */ public
";


%javamethodmodifiers Model::createReactionUnitsData(UnitFormulaFormatter * unitFormatter) "
/** * @internal */ public
";


%javamethodmodifiers Model::createEventUnitsData(UnitFormulaFormatter * unitFormatter) "
/** * @internal */ public
";


%javamethodmodifiers Model::createDelayUnitsData(UnitFormulaFormatter* unitFormatter, Event * e, const std::string& eventId) "
/** * @internal */ public
";


%javamethodmodifiers Model::createPriorityUnitsData(UnitFormulaFormatter* unitFormatter, Priority * p, const std::string& eventId) "
/** * @internal */ public
";


%javamethodmodifiers Model::createEventAssignmentUnitsData(UnitFormulaFormatter* unitFormatter, EventAssignment * ea, const std::string& eventId) "
/** * @internal */ public
";


%javamethodmodifiers Model::createLocalParameterUnitsData(KineticLaw * kl, UnitFormulaFormatter * unitFormatter) "
/** * @internal */ public
";


%typemap(javaimports) SBMLDocument "
/** 
 *  Overall SBML container object.
 <p>
 * LibSBML uses the class {@link SBMLDocument} as a top-level
 * container for storing SBML content and data associated with it (such as
 * warnings and error messages).  The two primary means of reading an SBML
 * model, {@link SBMLReader#readSBML(String filename)} and
 * {@link SBMLReader#readSBMLFromString(String xml)}, both return an {@link SBMLDocument}
 * object.  From there, callers can inquire about any errors encountered
 * (e.g., using {@link SBMLDocument#getNumErrors()}), access the {@link Model} object, and
 * perform other actions such as consistency-checking and model
 * translation.
 <p>
 * When creating fresh models programmatically, the starting point is
 * typically the creation of an {@link SBMLDocument} object instance.  The
 * {@link SBMLDocument} constructor accepts arguments for the SBML Level and
 * Version of the model to be created.  After creating the {@link SBMLDocument}
 * object, calling programs then typically call {@link SBMLDocument#createModel()}
 * almost immediately, and then proceed to call the methods on the {@link Model}
 * object to fill out the model\'s contents.
 <p>
 * {@link SBMLDocument} corresponds roughly to the class <i>Sbml</i> defined in the
 * SBML Level&nbsp;2 specification and <i>SBML</i> in the Level&nbsp;3
 * specification.  It does not have a direct correspondence in SBML
 * Level&nbsp;1.  (However, to make matters simpler for applications,
 * libSBML creates an {@link SBMLDocument} no matter whether the model is
 * Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)  In its barest form, when written out in
 * XML format for (e.g.) SBML Level&nbsp;2 Version&nbsp;4, the corresponding
 * structure is the following:
 * <pre class=\'fragment\'>
&lt;sbml xmlns=\'http://www.sbml.org/sbml/level2/version4\' level=\'2\' version=\'4\'&gt;
  ...
&lt;/sbml&gt;</pre>
 <p>
 * {@link SBMLDocument} is derived from {@link SBase}, and therefore contains the usual {@link SBase}
 * attributes (in SBML Level&nbsp;2 and Level&nbsp;3) of \'metaid\' and \'sboTerm\', as
 * well as the subelements \'notes\' and \'annotation\'.  It also contains the
 * attributes \'level\' and \'version\' indicating the Level and Version of the
 * SBML data structure.  These can be accessed using the methods defined by
 * the {@link SBase} class for that purpose.
 <p>
 * <h2>Checking consistency and adherence to SBML specifications</h2>
 <p>
 * One of the most important features of libSBML is its ability to perform
 * SBML validation to ensure that a model adheres to the SBML specification
 * for whatever Level+Version combination the model uses.  {@link SBMLDocument}
 * provides the methods for running consistency-checking and validation
 * rules on the SBML content.
 <p>
 * First, a brief explanation of the rationale is in order.  In libSBML
 * versions up to and including the version&nbsp;3.3.x series, the
 * individual methods for creating and setting attributes and other
 * components were quite lenient, and allowed a caller to compose SBML
 * entities that might not, in the end, represent valid SBML.  This allowed
 * applications the freedom to do things such as save incomplete models
 * (which is useful when models are being developed over long periods of
 * time).  In the version&nbsp;4.x series, libSBML is somewhat stricter,
 * but still permits structures to be created independently and the results
 * to be combined in a separate step.  In all these cases, it means that a
 * separate validation step is necessary when a calling program finally
 * wants to finish a complete SBML document.
 <p>
 * The primary interface to this validation facility is {@link SBMLDocument}\'s
 * {@link SBMLDocument#checkInternalConsistency()} and
 * {@link SBMLDocument#checkConsistency()}.  The former verifies the basic
 * internal consistency and syntax of an SBML document, and the latter
 * implements more elaborate validation rules (both those defined by the
 * SBML specifications, as well as additional rules offered by libSBML).
 <p>
 * The checks performed by {@link SBMLDocument#checkInternalConsistency()} are
 * hardwired and cannot be changed by calling programs, but the validation
 * performed by {@link SBMLDocument#checkConsistency()} is under program control
 * using the method {@link SBMLDocument#setConsistencyChecks(int categ, boolean
 * onoff)}.  Applications can selectively disable specific kinds of checks
 * that they may not be interested by calling
 * {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)} with
 * appropriate parameters.
 <p>
 * These methods have slightly different relevance depending on whether a
 * model is created programmaticaly from scratch, or whether it is read in
 * from a file or data stream.  The following list summarizes the possible
 * scenarios.
 <p>
 * <em>Scenario 1: Creating a model from scratch</em>.  Before writing out
 * the model, 
 <p>
 * <ul>
 * <li> Call {@link SBMLDocument#checkInternalConsistency()}, then inquire about
 * the results by calling {@link SBMLDocument#getNumErrors()}
 <p>
 * <li> Call {@link SBMLDocument#setConsistencyChecks(int categ, boolean
 * onoff)}  to configure
 * which checks will be performed by {@link SBMLDocument#checkConsistency()}
 <p>
 * <li> Call {@link SBMLDocument#checkConsistency()}, then inquire about the results by
 * calling {@link SBMLDocument#getNumErrors()}
 *
 * </ul> <p>
 * <em>Scenario 2: Reading a model from a file or data stream.</em> After
 * reading the model,
 <p>
 * <ul>
 * <li> Basic consistency checks will have been performed automatically by
 * libSBML upon reading the content, so you only need to inquire about the
 * results by using {@link SBMLDocument#getNumErrors()}
 <p>
 * <li> Call {@link SBMLDocument#setConsistencyChecks(int categ, boolean
 * onoff)}  to configure
 * which checks are performed by {@link SBMLDocument#checkConsistency()}
 <p>
 * <li> Call {@link SBMLDocument#checkConsistency()}, then inquire about the results
 * by calling {@link SBMLDocument#getNumErrors()}
 *
 * </ul> <p>
 * <h2>Converting documents between Levels and Versions of SBML</h2>
 <p>
 * LibSBML provides facilities for limited translation of SBML between
 * Levels and Versions of the SBML specifications.  The method for doing is
 * is {@link SBMLDocument#setLevelAndVersion(long lev, long ver, boolean strict)} .  In 
 * general, models can be converted upward without difficulty (e.g., from
 * SBML Level&nbsp;1 to Level&nbsp;2, or from an earlier Version of
 * Level&nbsp;2 to the latest Version of Level&nbsp;2).  Sometimes models
 * can be translated downward as well, if they do not use constructs
 * specific to more advanced Levels of SBML.
 <p>
 * Calling {@link SBMLDocument#setLevelAndVersion(long lev, long ver, boolean strict)}  will not <em>necessarily</em> lead
 * to a successful conversion.  The method will return a boolean value
 * to indicate success or failure.  Callers must check the error log (see 
 * next section) attached to the {@link SBMLDocument} object after calling
 * {@link SBMLDocument#setLevelAndVersion(long lev, long ver)}  in order to assess whether any
 * problems arose.
 <p>
 * If an application is interested in translating to a lower Level and/or
 * Version of SBML within a Level, the following methods allow for prior
 * assessment of whether there is sufficient compatibility to make a
 * translation possible:
 <p>
 * <ul>
 * <li> {@link SBMLDocument#checkL1Compatibility()},
 * <li> {@link SBMLDocument#checkL2v1Compatibility()},
 * <li> {@link SBMLDocument#checkL2v2Compatibility()},
 * <li> {@link SBMLDocument#checkL2v3Compatibility()}, 
 * <li> {@link SBMLDocument#checkL2v4Compatibility()}, and
 * <li> {@link SBMLDocument#checkL3v1Compatibility()}.
 *
 * </ul> <p>
 * Some changes between Versions of SBML Level&nbsp;2 may lead to
 * unexpected behaviors when attempting conversions in either direction.
 * For example, SBML Level&nbsp;2 Version&nbsp;4 relaxed the requirement
 * for consistency in units of measurement between expressions annd
 * quantities in a model.  As a result, a model written in Version&nbsp;4,
 * if converted to Version&nbsp;3 with no other changes, may fail
 * validation as a Version&nbsp;3 model because Version&nbsp;3 imposed
 * stricter requirements on unit consistency.
 <p>
 * Other changes between SBML Level 2 and Level 3 make downward conversions
 * challenging.  In some cases, it means that a model converted to
 * Level&nbsp;2 from Level&nbsp;3 will contain attributes that were not
 * explicitly given in the Level&nbsp;3 model, because in Level&nbsp;2
 * these attributes may have been optional or have default values.
 <p>
 * <h2>Error handling</h2>
 <p>
 * Upon reading a model, {@link SBMLDocument} logs any problems encountered while
 * reading the model from the file or data stream.  The log contains
 * objects that record diagnostic information about any notable issues that
 * arose.  Whether the problems are warnings or errors, they are both
 * reported through a single common interface involving the object class
 * {@link SBMLError}.
 <p>
 * The methods {@link SBMLDocument#getNumErrors()}, {@link SBMLDocument#getError(long n)}  and
 * {@link SBMLDocument#printErrors()} allow callers to interact with the warnings
 * or errors logged.  Alternatively, callers may retrieve the entire log as
 * an {@link SBMLErrorLog} object using the method {@link SBMLDocument#getErrorLog()}.
 * The {@link SBMLErrorLog} object provides some alternative methods for
 * interacting with the set of errors and warnings.  In either case,
 * applications typically should first call {@link SBMLDocument#getNumErrors()} to
 * find out if any issues have been logged after specific libSBML
 * operations such as the ones discussed in the sections above.  If they
 * have, then an application will should proceed to inspect the individual
 * reports using either the direct interfaces on {@link SBMLDocument} or using the
 * methods on the {@link SBMLErrorLog} object.
 */
"


%javamethodmodifiers SBMLDocument::getDefaultLevel "
/**
   * The default SBML Level of new {@link SBMLDocument} objects.
   <p>
   * <p>
 * This \'default Level\' corresponds to the most recent SBML specification
 * Level available at the time libSBML version 5.11.0 was released.  The default Level is used by
 * {@link SBMLDocument} if no Level is explicitly specified at the time of the
 * construction of an {@link SBMLDocument} instance.
   <p>
   * @return an integer indicating the most recent SBML specification Level
   <p>
   * 
   <p>
   * @see SBMLDocument#getDefaultVersion() 
   */ public
";


%javamethodmodifiers SBMLDocument::getDefaultVersion "
/**
   * The default Version of new {@link SBMLDocument} objects.
   <p>
   * <p>
 * This \'default Version\' corresponds to the most recent Version within the
 * most recent Level of SBML available at the time libSBML version
 * 5.11.0 was released.  The default Version is
 * used by {@link SBMLDocument} if no Version is explicitly specified at the time of
 * the construction of an {@link SBMLDocument} instance. 
   <p>
   * @return an integer indicating the most recent SBML specification
   * Version
   <p>
   * 
   <p>
   * @see SBMLDocument#getDefaultLevel() 
   */ public
";


%javamethodmodifiers SBMLDocument::SBMLDocument(unsigned int level = 0, unsigned int version = 0) "
/**
   * Creates a new {@link SBMLDocument}, optionally with given values for the SBML
   * Level and Version.
   <p>
   * If <em>both</em> the SBML Level and Version attributes are not
   * specified, the SBML document is treated as having the latest Level and
   * Version of SBML as determined by {@link SBMLDocument#getDefaultLevel()} and
   * {@link SBMLDocument#getDefaultVersion()}; <em>however</em>, the {@link SBMLDocument}
   * object is otherwise left blank.  In particular, the blank {@link SBMLDocument}
   * object has no associated XML attributes, including (but not limited
   * to) an XML namespace declaration.  The XML namespace declaration is
   * not added until the model is written out, <em>or</em> the method
   * {@link SBMLDocument#setLevelAndVersion(long, long, boolean)}
   * is called.  This may be important to keep in mind
   * if an application needs to add additional XML namespace declarations
   * on the <code>&lt;sbml&gt;</code> element.  Application writers should
   * either provide values for <code>level</code> and <code>version</code> on the call to this
   * constructor, or else call
   * {@link SBMLDocument#setLevelAndVersion(long, long, boolean)}
   * shortly after creating the {@link SBMLDocument} object.
   <p>
   * @param level an integer for the SBML Level
   <p>
   * @param version an integer for the Version within the SBML Level
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   <p>
   * @see SBMLDocument#setLevelAndVersion(long, long, boolean)
   * @see #getDefaultLevel()
   * @see #getDefaultVersion()
   */ public
";


%javamethodmodifiers SBMLDocument::SBMLDocument(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link SBMLDocument} using the given {@link SBMLNamespaces} object 
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   */ public
";


%javamethodmodifiers SBMLDocument::SBMLDocument(const SBMLDocument& orig) "
/**
   * Copy constructor; creates a copy of this {@link SBMLDocument}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers SBMLDocument::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link SBMLDocument}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers SBMLDocument::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLDocument} object.
   <p>
   * @return the (deep) copy of this {@link SBMLDocument} object.
   */ public
";


%javamethodmodifiers SBMLDocument::isSetModel() const "
/**
  * Returns <code>true</code> if the {@link Model} object has been set, otherwise 
  * returns <code>false.</code>
  <p>
  * @return <code>true</code> if the {@link Model} object has been set
  */ public
";


%javamethodmodifiers SBMLDocument::getModel() const "
/**
   * Returns the {@link Model} object stored in this {@link SBMLDocument}.
   <p>
   * It is important to note that this method <em>does not create</em> a
   * {@link Model} instance.  The model in the {@link SBMLDocument} must have been created
   * at some prior time, for example using {@link SBMLDocument#createModel()} 
   * or {@link SBMLDocument#setModel(Model)}.
   * This method returns <code>null</code> if a model does not yet exist.
   <p>
   * @return the {@link Model} contained in this {@link SBMLDocument}.
   <p>
   * @see #createModel()
   */ public
";


%javamethodmodifiers SBMLDocument::getModel "
/**
   * Returns the {@link Model} object stored in this {@link SBMLDocument}.
   <p>
   * It is important to note that this method <em>does not create</em> a
   * {@link Model} instance.  The model in the {@link SBMLDocument} must have been created
   * at some prior time, for example using {@link SBMLDocument#createModel()} 
   * or {@link SBMLDocument#setModel(Model)}.
   * This method returns <code>null</code> if a model does not yet exist.
   <p>
   * @return the {@link Model} contained in this {@link SBMLDocument}.
   <p>
   * @see #createModel()
   */ public
";


%javamethodmodifiers SBMLDocument::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id string representing the id of objects to find
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers SBMLDocument::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given <code>metaid</code>, or
   * itself if it has the given <code>metaid</code>, or <code>null</code> if no such object is
   * found.
   <p>
   * @param metaid string representing the metaid of objects to find
   <p>
   * @return pointer to the first element found with the given <code>metaid</code>.
   */ public
";


%javamethodmodifiers SBMLDocument::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child {@link SBase} objects, including those nested to an
   * arbitrary depth
   <p>
   * @return a List of pointers to all children objects.
   */ public
";


%javamethodmodifiers SBMLDocument::expandFunctionDefinitions "
/**
   * Removes {@link FunctionDefinition} constructs from the document and expands
   * any instances of their use within <code>&lt;math&gt;</code> elements.
   <p>
   * For example, suppose a {@link Model} contains a {@link FunctionDefinition} with
   * identifier <code>\'f\'</code> representing the math expression: <em>f(x, y) = x *
   * y</em>.  Suppose further that there is a reaction in which the
   * <code>&lt;math&gt;</code> element of the {@link KineticLaw} object contains
   * <code>f(s, p)</code>, where <code>s</code> and <code>p</code> are other identifiers
   * defined in the model.  The outcome of invoking this method is that the
   * <code>&lt;math&gt;</code> of the {@link KineticLaw} now represents the
   * expression <em>s * p</em> and the model no longer contains any
   * {@link FunctionDefinition} objects.
   <p>
   * @return boolean <code>true</code> if the transformation was successful, 
   * <code>false</code>, otherwise.
   <p>
   * @note This function will check the consistency of a model before
   * attemptimg the transformation.  If the model is not valid SBML, the
   * transformation will not be performed and the function will return 
   * <code>false.</code>
   */ public
";


%javamethodmodifiers SBMLDocument::expandInitialAssignments "
/**
   * Removes {@link InitialAssignment} constructs from the document and
   * replaces them with appropriate values.
   <p>
   * For example, suppose a {@link Model} contains a {@link InitialAssignment} to a symbol
   * <code>\'k\'</code> where <code>\'k\'</code> is the identifier of a {@link Parameter}.  The outcome of
   * invoking this method is that the \'value\' attribute of the {@link Parameter}
   * definition is set to the result calculated using the {@link InitialAssignment}
   * object\'s <code>&lt;math&gt;</code> formula, and the corresponding
   * {@link InitialAssignment} is then removed from the {@link Model}.
   <p>
   * @return boolean <code>true</code> if the transformation was successful, 
   * <code>false</code>, otherwise.
   <p>
   * @note This function will check the consistency of a model before
   * attemptimg the transformation.  If the model is not valid SBML, the
   * transformation will not be performed and the function will return 
   * <code>false.</code>  As part of that process, this method will check that it has
   * values for any components referred to by the <code>&lt;math&gt;</code>
   * elements of {@link InitialAssignment} objects.  In cases where not all of the
   * values have been declared (e.g., if the mathematical expression refers
   * to model entities that have no declared values), the {@link InitialAssignment}
   * in question will <em>not</em> be removed and this method will return 
   * <code>false.</code>
   */ public
";


%javamethodmodifiers SBMLDocument::setLevelAndVersion(unsigned int level, unsigned int version, bool strict = true, bool ignorePackages = false) "
/**
   * Sets the SBML Level and Version of this {@link SBMLDocument} instance,
   * attempting to convert the model as needed.
   <p>
   * This method is the principal way in libSBML to convert models between
   * Levels and Versions of SBML.  Generally, models can be converted
   * upward without difficulty (e.g., from SBML Level&nbsp;1 to
   * Level&nbsp;2, or from an earlier Version of Level&nbsp;2 to the latest
   * Version of Level&nbsp;2).  Sometimes models can be translated downward
   * as well, if they do not use constructs specific to more advanced
   * Levels of SBML.
   <p>
   * Before calling this method, callers may check compatibility directly
   * using the methods {@link SBMLDocument#checkL1Compatibility()},
   * {@link SBMLDocument#checkL2v1Compatibility()},
   * {@link SBMLDocument#checkL2v2Compatibility()},
   * {@link SBMLDocument#checkL2v3Compatibility()},
   * {@link SBMLDocument#checkL2v4Compatibility()}, and
   * {@link SBMLDocument#checkL3v1Compatibility()}.
   <p>
   * The valid combinations of SBML Level and Version as of this release
   * of libSBML are the following: 
   * <ul>
   * <li> Level&nbsp;1 Version&nbsp;2
   * <li> Level&nbsp;2 Version&nbsp;1
   * <li> Level&nbsp;2 Version&nbsp;2
   * <li> Level&nbsp;2 Version&nbsp;3
   * <li> Level&nbsp;2 Version&nbsp;4
   * <li> Level&nbsp;3 Version&nbsp;1
   * </ul>
   <p>
   * Strict conversion applies the additional criteria that both the
   * source and the target model must be consistent SBML.  Users can
   * control the consistency checks that are applied using the
   * {@link SBMLDocument#setConsistencyChecksForConversion(int, boolean)} method.  If either
   * the source or the potential target model have validation errors, the
   * conversion is not performed.  When a strict conversion is successful,
   * the underlying SBML object model is altered to reflect the new level
   * and version.  Thus, information that cannot be converted
   * (e.g. sboTerms) will be lost.
   <p>
   * @param level the desired SBML Level
   <p>
   * @param version the desired Version within the SBML Level
   <p>
   * @param strict boolean indicating whether to check consistency
   * of both the source and target model when performing
   * conversion (defaults to <code> true </code>)
   <p>
   * @param ignorePackages boolean indicating whether the presence of
   * packages should be ignored by the conversion routine 
   * (defaults to <code> false </code>)
   <p>
   * @return <code>true</code> if the level and version of the document were
   * successfully set to the requested values (which may have required
   * conversion of the model), <code>false</code> otherwise.
   <p>
   * @note Calling this method will not <em>necessarily</em> lead to a successful
   * conversion.  If the conversion fails, it will be logged in the error
   * list associated with this {@link SBMLDocument}.  Callers should consult
   * getNumErrors() to find out if the conversion succeeded without
   * problems.  For conversions from Level&nbsp;2 to Level&nbsp;1, callers
   * can also check the Level of the model after calling this method to
   * find out whether it is Level&nbsp;1.  (If the conversion to
   * Level&nbsp;1 failed, the Level of this model will be left unchanged.)
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   <p>
   * @see #checkL1Compatibility()
   * @see #checkL2v1Compatibility()
   * @see #checkL2v2Compatibility()
   * @see #checkL2v3Compatibility()
   * @see #checkL2v4Compatibility()
   * @see #checkL3v1Compatibility()
   * @see #checkL3v1Compatibility()
   */ public
";


%javamethodmodifiers SBMLDocument::updateSBMLNamespace(const std::string& package, unsigned int level, unsigned int version) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::setModel(const Model* m) "
/**
   * Sets the {@link Model} for this {@link SBMLDocument} to a copy of the given {@link Model}.
   <p>
   * @param m the new {@link Model} to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   *
   * </ul> <p>
   * @see #createModel()
   * @see #getModel()
   */ public
";


%javamethodmodifiers SBMLDocument::createModel(const std::string& sid = "") "
/**
   * Creates a new {@link Model} inside this {@link SBMLDocument}, and returns a pointer to
   * it.
   <p>
   * In SBML Level&nbsp;2, the use of an identifier on a {@link Model} object is
   * optional.  This method takes an optional argument, <code>sid</code>, for setting
   * the identifier.  If not supplied, the identifier attribute on the
   * {@link Model} instance is not set.
   <p>
   * @param sid the identifier of the new {@link Model} to create.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   <p>
   * @see #getModel()
   * @see SBMLDocument#setModel(Model)
   */ public
";


%javamethodmodifiers SBMLDocument::setLocationURI(const std::string& uri) "
/**
   * Sets the location of this {@link SBMLDocument}.
   <p>
   * Called automatically when readSBMLFromFile is used, but may be set
   * manually as well.
   */ public
";


%javamethodmodifiers SBMLDocument::getLocationURI() const "
/**
   * Get the location of this {@link SBMLDocument}.
   <p>
   * If this document was read from a file or had its location set manually,
   * that filename or set location will be returned, otherwise, an empty
   * string is returned.
   */ public
";


%javamethodmodifiers SBMLDocument::getLocationURI "
/**
   * Get the location of this {@link SBMLDocument}.
   <p>
   * If this document was read from a file or had its location set manually,
   * that filename or set location will be returned, otherwise, an empty
   * string is returned.
   */ public
";


%javamethodmodifiers SBMLDocument::setConsistencyChecks(SBMLErrorCategory_t category, bool apply) "
/**
   * Controls the consistency checks that are performed when
   * {@link SBMLDocument#checkConsistency()} is called.
   <p>
   * This method works by adding or subtracting consistency checks from the
   * set of all possible checks that {@link SBMLDocument#checkConsistency()} knows
   * how to perform.  This method may need to be called multiple times in
   * order to achieve the desired combination of checks.  The first
   * argument (<code>category</code>) in a call to this method indicates the category
   * of consistency/error checks that are to be turned on or off, and the
   * second argument (<code>apply</code>, a boolean) indicates whether to turn it on
   * (value of <code>true</code>) or off (value of <code>false</code>).
   <p>
   * The possible categories (values to the argument <code>category</code>) are the
   * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>
   * in the interface class {@link libsbmlConstants}.
   * The following are the possible choices:
   <p>
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_GENERAL_CONSISTENCY LIBSBML_CAT_GENERAL_CONSISTENCY}:
   * Correctness and consistency of specific SBML language constructs.
   * Performing this set of checks is highly recommended.  With respect to
   * the SBML specification, these concern failures in applying the
   * validation rules numbered 2xxxx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY}:
   * Correctness and consistency of identifiers used for model entities.  An
   * example of inconsistency would be using a species identifier in a
   * reaction rate formula without first having declared the species.  With
   * respect to the SBML specification, these concern failures in applying
   * the validation rules numbered 103xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_UNITS_CONSISTENCY LIBSBML_CAT_UNITS_CONSISTENCY}:
   * Consistency of measurement units associated with quantities in a model.
   * With respect to the SBML specification, these concern failures in
   * applying the validation rules numbered 105xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY}:
   * Syntax of MathML constructs.  With respect to the SBML specification,
   * these concern failures in applying the validation rules numbered 102xx
   * in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_SBO_CONSISTENCY LIBSBML_CAT_SBO_CONSISTENCY}:
   * Consistency and validity of SBO identifiers (if any) used in the model.
   * With respect to the SBML specification, these concern failures in
   * applying the validation rules numbered 107xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_OVERDETERMINED_MODEL LIBSBML_CAT_OVERDETERMINED_MODEL}:
   * Static analysis of whether the system of equations implied by a model is
   * mathematically overdetermined.  With respect to the SBML specification,
   * this is validation rule #10601 in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_MODELING_PRACTICE LIBSBML_CAT_MODELING_PRACTICE}:
   * Additional checks for recommended good modeling practice. (These are
   * tests performed by libSBML and do not have equivalent SBML validation
   * rules.)  </ul>
   <p>
   * <em>By default, all validation checks are applied</em> to the model in
   * an {@link SBMLDocument} object <em>unless</em>
   * {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)}
   * is called to indicate that only a subset should be applied.  Further,
   * this default (i.e., performing all checks) applies separately to
   * <em>each new {@link SBMLDocument} object</em> created.  In other words, each
   * time a model is read using {@link SBMLReader#readSBML(String filename)},
   * {@link SBMLReader#readSBMLFromString(String xml)},
   * or the global functions readSBML() and readSBMLFromString(), a new
   * {@link SBMLDocument} is created and for that document, a call to
   * {@link SBMLDocument#checkConsistency()} will default to applying all possible checks.
   * Calling programs must invoke
   * {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)}
   * for each such new model if they wish to change the consistency checks
   * applied.
   <p>
   * @param category a value drawn from * the set of SBML error categories indicating the
   * consistency checking/validation to be turned on or off.
   <p>
   * @param apply a boolean indicating whether the checks indicated by
   * <code>category</code> should be applied or not.
   <p>
   * @see SBMLDocument#checkConsistency()
   */ public
";


%javamethodmodifiers SBMLDocument::setConsistencyChecksForConversion(SBMLErrorCategory_t category, bool apply) "
/**
   * Controls the consistency checks that are performed when
   * {@link SBMLDocument#setLevelAndVersion(long, long, boolean)} is called.
   <p>
   * This method works by adding or subtracting consistency checks from the
   * set of all possible checks that may be performed to avoid conversion
   * to or from an invalid document.  This method may need to be called 
   * multiple times in
   * order to achieve the desired combination of checks.  The first
   * argument (<code>category</code>) in a call to this method indicates the category
   * of consistency/error checks that are to be turned on or off, and the
   * second argument (<code>apply</code>, a boolean) indicates whether to turn it on
   * (value of <code>true</code>) or off (value of <code>false</code>).
   <p>
   * The possible categories (values to the argument <code>category</code>) are the
   * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>
   * in the interface class {@link libsbmlConstants}.
   * The following are the possible choices:
   <p>
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_GENERAL_CONSISTENCY LIBSBML_CAT_GENERAL_CONSISTENCY}:
   * Correctness and consistency of specific SBML language constructs.
   * Performing this set of checks is highly recommended.  With respect to
   * the SBML specification, these concern failures in applying the
   * validation rules numbered 2xxxx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY}:
   * Correctness and consistency of identifiers used for model entities.  An
   * example of inconsistency would be using a species identifier in a
   * reaction rate formula without first having declared the species.  With
   * respect to the SBML specification, these concern failures in applying
   * the validation rules numbered 103xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_UNITS_CONSISTENCY LIBSBML_CAT_UNITS_CONSISTENCY}:
<p>
   * Consistency of measurement units associated with quantities in a model.
   * With respect to the SBML specification, these concern failures in
   * applying the validation rules numbered 105xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY}:
   * Syntax of MathML constructs.  With respect to the SBML specification,
   * these concern failures in applying the validation rules numbered 102xx
   * in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_SBO_CONSISTENCY LIBSBML_CAT_SBO_CONSISTENCY}:
   * Consistency and validity of SBO identifiers (if any) used in the model.
   * With respect to the SBML specification, these concern failures in
   * applying the validation rules numbered 107xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_OVERDETERMINED_MODEL LIBSBML_CAT_OVERDETERMINED_MODEL}:
   * Static analysis of whether the system of equations implied by a model is
   * mathematically overdetermined.  With respect to the SBML specification,
   * this is validation rule #10601 in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   <p>
   * <li> {@link libsbmlConstants#LIBSBML_CAT_MODELING_PRACTICE LIBSBML_CAT_MODELING_PRACTICE}:
   * Additional checks for recommended good modeling practice. (These are
   * tests performed by libSBML and do not have equivalent SBML validation
   * rules.)
   * </ul>
   <p>
   * <em>By default, all validation checks are applied</em> to the model in
   * an {@link SBMLDocument} object <em>unless</em>
   * {@link SBMLDocument#setConsistencyChecks(int, boolean)}
   * is called to indicate that only a subset should be applied.  Further,
   * this default (i.e., performing all checks) applies separately to
   * <em>each new {@link SBMLDocument} object</em> created.  In other words, each
   * time a model is read using {@link SBMLReader#readSBML(String)},
   * {@link SBMLReader#readSBMLFromString(String)},
   * or the global functions readSBML() and readSBMLFromString(), a new
   * {@link SBMLDocument} is created and for that document, a call to
   * {@link SBMLDocument#checkConsistency()} will default to applying all possible checks.
   * Calling programs must invoke
   * {@link SBMLDocument#setConsistencyChecks(int, boolean)}
   * for each such new model if they wish to change the consistency checks
   * applied.
   <p>
   * @param category a value drawn from * the set of SBML error categories indicating the consistency
   * checking/validation to be turned on or off.
   <p>
   * @param apply a boolean indicating whether the checks indicated by
   * <code>category</code> should be applied or not.
   <p>
   * @see SBMLDocument#setLevelAndVersion(long, long, boolean)
   */ public
";


%javamethodmodifiers SBMLDocument::checkConsistency "
/**
   * Performs consistency checking and validation on this SBML document.
   <p>
   * If this method returns a nonzero value (meaning, one or more
   * consistency checks have failed for SBML document), the failures may be
   * due to warnings <em>or</em> errors.  Callers should inspect the severity
   * flag in the individual {@link SBMLError} objects returned by
   * {@link SBMLDocument#getError(long)} to determine the nature of the failures.
   <p>
   * @return the number of failed checks (errors) encountered.
   <p>
   * @see SBMLDocument#checkInternalConsistency()
   */ public
";


%javamethodmodifiers SBMLDocument::validateSBML "
/**
   * Performs consistency checking and validation on this SBML document.
   <p>
   * If this method returns a nonzero value (meaning, one or more
   * consistency checks have failed for SBML document), the failures may be
   * due to warnings <em>or</em> errors.  Callers should inspect the severity
   * flag in the individual {@link SBMLError} objects returned by
   * {@link SBMLDocument#getError(long)} to determine the nature of the failures.
   <p>
   * @note unlike checkConsistency this method will write the document
   *       in order to determine all errors for the document. This will 
   *       also clear the error log. 
   <p>
   * @return the number of failed checks (errors) encountered.
   <p>
   * @see SBMLDocument#checkConsistency()
   */ public
";


%javamethodmodifiers SBMLDocument::checkInternalConsistency "
/**
   * Performs consistency checking on libSBML\'s internal representation of 
   * an SBML {@link Model}.
   <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long)}.
   <p>
   * @return the number of failed checks (errors) encountered.
   <p>
   * The distinction between this method and
   * {@link SBMLDocument#checkConsistency()} is that this method reports on
   * fundamental syntactic and structural errors that violate the XML
   * Schema for SBML; by contrast, {@link SBMLDocument#checkConsistency()}
   * performs more elaborate model verifications and also validation
   * according to the validation rules written in the appendices of the
   * SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 specification documents.
   <p>
   * @see SBMLDocument#checkConsistency()
   */ public
";


%javamethodmodifiers SBMLDocument::checkL1Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;1 and can be converted
   * to Level&nbsp;1.
   <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long)}.
   <p>
   * @return the number of failed checks (errors) encountered.
   */ public
";


%javamethodmodifiers SBMLDocument::checkL2v1Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;1 and can
   * be converted to Level&nbsp;2 Version&nbsp;1.
   <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long)}.
   <p>
   * @return the number of failed checks (errors) encountered.
   */ public
";


%javamethodmodifiers SBMLDocument::checkL2v2Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;2 and can
   * be converted to Level&nbsp;2 Version&nbsp;2.
   <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long)}.
   <p>
   * @return the number of failed checks (errors) encountered.
   */ public
";


%javamethodmodifiers SBMLDocument::checkL2v3Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;3 and can
   * be converted to Level&nbsp;2 Version&nbsp;3.
   <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long)}.
   <p>
   * @return the number of failed checks (errors) encountered.
   */ public
";


%javamethodmodifiers SBMLDocument::checkL2v4Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;4 and can
   * be converted to Level&nbsp;2 Version&nbsp;4.
   <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long)}.
   <p>
   * @return the number of failed checks (errors) encountered.
   */ public
";


%javamethodmodifiers SBMLDocument::checkL3v1Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;3 Version&nbsp;1 and can
   * be converted to Level&nbsp;3 Version&nbsp;1.
   <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long)}.
   <p>
   * @return the number of failed checks (errors) encountered.
   */ public
";


%javamethodmodifiers SBMLDocument::getError "
/**
   * Returns the nth error or warning encountered during parsing,
   * consistency checking, or attempted translation of this model.
   <p>
   * Callers can use method {@link XMLError#getSeverity()} on the result to assess
   * the severity of the problem.  The possible severity levels range from
   * informational messages to fatal errors.
   <p>
   * @return the error or warning indexed by integer <code>n</code>, or return 
   * <code>null</code> if <code>n &gt; (getNumErrors() - 1)</code>.
   <p>
   * @param n the integer index of the error sought.
   <p>
   * @see SBMLDocument#getNumErrors()
   */ public
";


%javamethodmodifiers SBMLDocument::getErrorWithSeverity "
/**
   * Returns the nth error or warning with the given severity
   * encountered during parsing, consistency checking, or attempted
   * translation of this model.
   <p>
   * @return the error or warning indexed by integer <code>n</code>, or return 
   * <code>null</code> if <code>n &gt; (getNumErrors(severity) - 1)</code>.
   <p>
   * @param n the integer index of the error sought.
   * @param severity the severity of the error sought.
   <p>
   * @see SBMLDocument#getNumErrors()
   */ public
";


%javamethodmodifiers SBMLDocument::getNumErrors() const "
/**
   * Returns the number of errors or warnings encountered during parsing,
   * consistency checking, or attempted translation of this model.
   <p>
   * @return the number of errors or warnings encountered
   <p>
   * @see SBMLDocument#getError(long n)
   */ public
";


%javamethodmodifiers SBMLDocument::getNumErrors "
/**
   * Returns the number of errors or warnings encountered with the given 
   * severity during parsing,
   * consistency checking, or attempted translation of this model.
   <p>
   * @param severity the severity of the error sought. 
   <p>
   * @return the number of errors or warnings encountered
   <p>
   * @see SBMLDocument#getError(long n)
   */ public
";


%javamethodmodifiers SBMLDocument::printErrors(std::ostream& stream = std::cerr) const "
/**
   * Prints all the errors or warnings encountered trying to parse,
   * check, or translate this SBML document.
   <p>
   * It prints the text to the stream given by the optional parameter 
   * <code>stream</code>.  If no parameter is given, it prints the output to the
   * standard error stream.
   <p>
   * If no errors have occurred, i.e., <code>getNumErrors() == 0</code>, no
   * output will be sent to the stream.
   <p>
   * The format of the output is:
   * <pre class=\'fragment\'>
   N error(s):
     line NNN: (id) message
 </pre>
   <p>
   * @param stream the ostream or ostringstream object indicating where
   * the output should be printed.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   <p>
   * @see #getNumErrors()
   * @see #getErrorLog()
   * @see SBMLDocument#getError(long n)
   */ public
";


%javamethodmodifiers SBMLDocument::printErrors "
/**
    * Prints all the errors or warnings with the given severity encountered 
    * trying to parse, check, or translate this SBML document.
    <p>
    * It prints the text to the stream given by the parameter 
    * <code>stream</code>.  
    <p>
    * If no errors have occurred, i.e., <code>getNumErrors(severity) == 0</code>, no
    * output will be sent to the stream.
    <p>
    * The format of the output is:
    * <pre class=\'fragment\'>
    N error(s):
      line NNN: (id) message
</pre>
    <p>
    * @param stream the ostream or ostringstream object indicating where
    * the output should be printed.
    * @param severity of the errors sought.
    <p>
    * @see #getNumErrors(long severity)
    * @see #getErrorLog()
    * @see SBMLDocument#getErrorWithSeverity(long n, long severity)
    */ public
";


%javamethodmodifiers SBMLDocument::setSBMLDocument(SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::convert(const ConversionProperties& props) "
/**
   * Converts this document using the converter that best matches
   * the given conversion properties. 
   <p>
   * @param props the conversion properties to use
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_CONVERSION_NOT_AVAILABLE LIBSBML_CONV_CONVERSION_NOT_AVAILABLE}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLDocument::enablePackageInternal(const std::string& pkgURI,const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_DOCUMENT SBML_DOCUMENT} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see SBMLDocument#getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers SBMLDocument::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link SBMLDocument},
   * is always <code>\'sbml\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'sbml\'.</code>
   */ public
";


%javamethodmodifiers SBMLDocument::getErrorLog "
/**
   * Returns the list of errors or warnings logged during parsing, 
   * consistency checking, or attempted translation of this model.
   <p>
   * @return the {@link SBMLErrorLog} used for this {@link SBMLDocument}
   <p>
   * @see SBMLDocument#getNumErrors()
   */ public
";


%javamethodmodifiers SBMLDocument::getErrorLog() const "
/**
   * Returns a constant pointer to the list of errors or warnings 
   * logged during parsing, consistency checking, or attempted translation 
   * of this model.
   <p>
   * @return the {@link SBMLErrorLog} used for this {@link SBMLDocument}
   <p>
   * @see SBMLDocument#getNumErrors()
   */ public
";


%javamethodmodifiers SBMLDocument::getNamespaces() const "
/**
   * Returns a list of XML Namespaces associated with the XML content
   * of this SBML document.
   <p>
   * @return the XML Namespaces associated with this SBML object
   */ public
";


%javamethodmodifiers SBMLDocument::enableDefaultNS(const std::string& package, bool flag) "
/**
   * Set/unset default namespace to each top-level element defined in the
   * given package extension.
   <p>
   * This works by adding a <code>xmlns=&quot;...&quot;</code> attribute.  No
   * prefix will be written when writing elements defined in the given
   * package extension if <code>true</code> is given as second argument.
   <p>
   * @param package the name or URI of the package extension.
   * @param flag boolean value to indicate whether to write a namespace
   * prefix.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_UNKNOWN_VERSION LIBSBML_PKG_UNKNOWN_VERSION}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLDocument::isEnabledDefaultNS(const std::string& package) "
/**
   * Returns <code>true</code> if a default namespace is added to each top-level
   * element defined in the given package extension, otherwise returns
   * <code>false.</code>
   <p>
   * This basically checks if the attribute
   * <code>xmlns=&quot;...&quot;</code> is present.
   <p>
   * @param package the name or URI of the package extension.
   <p>
   * @return a boolean 
   */ public
";


%javamethodmodifiers SBMLDocument::setPackageRequired(const std::string& package, bool flag) "
/**
   * Sets the <code>required</code> attribute value of the given package
   * extension.
   <p>
   * @note The name of package must not be given if the package is not
   * enabled.
   <p>
   * @param package the name or URI of the package extension.
   * @param flag Boolean value indicating whether the package is required.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_UNKNOWN_VERSION LIBSBML_PKG_UNKNOWN_VERSION}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLDocument::getPackageRequired(const std::string& package) "
/**
   * Returns the <code>required</code> attribute of the given package
   * extension.
   <p>
   * @note The name of package must not be given if the package is not
   * enabled.
   <p>
   * @param package the name or URI of the package extension.
   <p>
   * @return Boolean flag indicating whether the package is flagged as
   * being required.
   */ public
";


%javamethodmodifiers SBMLDocument::isSetPackageRequired(const std::string& package) "
/**
   * Returns <code>true</code> if the required attribute of the given package extension
   * is defined, otherwise returns <code>false.</code>
   <p>
   * @note The name of package must not be given if the package is not
   * enabled.
   <p>
   * @param package the name or URI of the package extension.
   <p>
   * @return a Boolean
   */ public
";


%javamethodmodifiers SBMLDocument::isIgnoredPackage(const std::string& pkgURI) "
/**
   * Returns <code>true</code> if the given package extension is one of an ignored
   * packages, otherwise returns <code>false.</code>
   <p>
   * An ignored package is one that is defined to be used in this SBML
   * document, but the package is not enabled in this copy of libSBML.
   <p>
   * @param pkgURI the URI of the package extension.
   <p>
   * @return a Boolean, <code>true</code> if the package is being ignored and
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLDocument::isDisabledIgnoredPackage(const std::string& pkgURI) "
/**
   * Returns <code>true</code> if the given package extension is one of an ignored
   * packages that has been disabled, otherwise returns <code>false.</code>
   <p>
   * An ignored package is one that is defined to be used in this SBML
   * document, but the package is not enabled in this copy of libSBML.
   * It may have been disabled to avoid reproducing the package
   * information when writing out the file.
   <p>
   * @param pkgURI the URI of the package extension.
   <p>
   * @return a Boolean, <code>true</code> if the package is being ignored and
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLDocument::setPkgRequired(const std::string& package, bool flag) "
/**
   * Sets the value of the <code>required</code> attribute for the given
   * package.
   <p>
   * @note The name of package must not be given if the package is not
   * enabled.
   <p>
   * @param package the name or URI of the package extension.
   * @param flag a Boolean value.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_UNKNOWN_VERSION LIBSBML_PKG_UNKNOWN_VERSION}
   *
   * </ul> <p>
   * @deprecated <div class=\'deprecated\'>Replaced in libSBML 5.2.0 by
   * setPackageRequired(String, boolean)
   </div>
   * */ public
";


%javamethodmodifiers SBMLDocument::getPkgRequired(const std::string& package) "
/**
   * Returns the <code>required</code> attribute of the given package
   * extension.
   <p>
   * @note The name of package must not be given if the package is not
   * enabled.
   <p>
   * @param package the name or URI of the package extension.
   <p>
   * @return a Boolean value indicating whether the package is flagged as
   * being required in this SBML document.
   <p>
   * @deprecated <div class=\'deprecated\'>Replaced in libSBML 5.2.0 by
   * getPackageRequired(String)
   </div>
   * */ public
";


%javamethodmodifiers SBMLDocument::isSetPkgRequired(const std::string& package) "
/**
   * Returns <code>true</code> if the required attribute of the given package extension
   * is defined, otherwise returns <code>false.</code>
   <p>
   * @note The name of package must not be given if the package is not
   * enabled.
   <p>
   * @param package the name or URI of the package extension.
   <p>
   * @return a Boolean value.
   <p>
   * @deprecated <div class=\'deprecated\'>Replaced in libSBML 5.2.0 by
   * isSetPackageRequired(String)
   </div>
   * */ public
";


%javamethodmodifiers SBMLDocument::isIgnoredPkg(const std::string& pkgURI) "
/**
   * Returns <code>true</code> if the given package extension is one of ignored
   * packages, otherwise returns <code>false.</code>
   <p>
   * An ignored package is one that is defined to be used in this SBML
   * document, but the package is not enabled in this copy of libSBML.
   <p>
   * @param pkgURI the URI of the package extension.
   <p>
   * @return a boolean
   <p>
   * @deprecated <div class=\'deprecated\'>Replaced in libSBML 5.2.0 by
   * isIgnoredPackage(String)
   </div>
   * */ public
";


%javamethodmodifiers SBMLDocument::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::getApplicableValidators() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::getConversionValidators() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::setApplicableValidators(unsigned char appl) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::setConversionValidators(unsigned char appl) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::getNumValidators() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::clearValidators "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::addValidator(const SBMLValidator* validator) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::getValidator(unsigned int index) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::addUnknownPackageRequired(const std::string& pkgURI, const std::string& prefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::hasUnknownPackage(const std::string& pkgURI) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocument::writeXMLNS(XMLOutputStream& stream) const "
/** * @internal */ public
";


%typemap(javaimports) FunctionDefinition "
/** 
 *  A user-defined function in an SBML model.
 <p>
 * The {@link FunctionDefinition} structure associates an identifier with a
 * function definition.  This identifier can then be used as the function
 * called in subsequent MathML content elsewhere in an SBML model.
 <p>
 * {@link FunctionDefinition} has one required attribute, \'id\', to give the
 * function a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A {@link FunctionDefinition} instance can also have
 * an optional \'name\' attribute of type <code>string.</code>  Identifiers and names
 * must be used according to the guidelines described in the SBML
 * specification (e.g., Section 3.3 in the Level 2 Version 4
 * specification).
 <p>
 * {@link FunctionDefinition} has a required \'math\' subelement containing a MathML
 * expression defining the function body.  The content of this element can
 * only be a MathML \'lambda\' element.  The \'lambda\' element must begin with
 * zero or more \'bvar\' elements, followed by any other of the elements in
 * the MathML subset allowed in SBML Level 2 <em>except</em> \'lambda\' (i.e., a
 * \'lambda\' element cannot contain another \'lambda\' element).  This is the
 * only place in SBML where a \'lambda\' element can be used.  The function
 * defined by a {@link FunctionDefinition} is only available for use in other
 * MathML elements that <em>follow</em> the {@link FunctionDefinition} definition in the
 * model.  (These restrictions prevent recursive and mutually-recursive
 * functions from being expressed.)
 <p>
 * A further restriction on the content of \'math\' is that it cannot contain
 * references to variables other than the variables declared to the
 * \'lambda\' itself.  That is, the contents of MathML \'ci\' elements inside
 * the body of the \'lambda\' can only be the variables declared by its
 * \'bvar\' elements, or the identifiers of other {@link FunctionDefinition}
 * instances in the model.  This means must be written so that all
 * variables or parameters used in the MathML content are passed to them
 * via their function parameters.  In SBML Level&nbsp;2, this restriction
 * applies also to the MathML <code>csymbol</code> elements for <em>time</em> and 
 * <em>delay</em>; in SBML Level&nbsp;3, it additionally applies to the <code>csymbol</code>
 * element for <em>avogadro</em>.
 <p>
 * @note Function definitions (also informally known as user-defined
 * functions) were introduced in SBML Level 2.  They have purposefully
 * limited capabilities.  A function cannot reference parameters or other
 * model quantities outside of itself; values must be passed as parameters
 * to the function.  Moreover, recursive and mutually-recursive functions
 * are not permitted.  The purpose of these limitations is to balance power
 * against complexity of implementation.  With the restrictions as they
 * are, function definitions could be implemented as textual
 * substitutions&mdash;they are simply macros.  Software implementations
 * therefore do not need the full function-definition machinery typically
 * associated with programming languages.
 * <br><br>
 * Another important point to note is {@link FunctionDefinition} does not
 * have a separate attribute for defining the units of the value returned
 * by the function.  The units associated with the function\'s return value,
 * when the function is called from within MathML expressions elsewhere in
 * SBML, are simply the overall units of the expression in
 * {@link FunctionDefinition}\'s \'math\' subelement when applied to the arguments
 * supplied in the call to the function.  Ascertaining these units requires
 * performing dimensional analysis on the expression.  (Readers may wonder
 * why there is no attribute.  The reason is that having a separate
 * attribute for declaring the units would not only be redundant, but also
 * lead to the potential for having conflicting information.  In the case
 * of a conflict between the declared units and those of the value actually
 * returned by the function, the only logical resolution rule would be to
 * assume that the correct units are those of the expression anyway.)
 */
"


%typemap(javaimports) ListOfFunctionDefinitions "
/** 
 *  A list of {@link FunctionDefinition} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers FunctionDefinition::FunctionDefinition(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link FunctionDefinition} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link FunctionDefinition}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link FunctionDefinition}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers FunctionDefinition::FunctionDefinition(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link FunctionDefinition} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers FunctionDefinition::FunctionDefinition(const FunctionDefinition& orig) "
/**
   * Copy constructor; creates a copy of this {@link FunctionDefinition}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers FunctionDefinition::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link FunctionDefinition}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link FunctionDefinition} in
   * the list of function definitions.
   */ public
";


%javamethodmodifiers FunctionDefinition::clone() const "
/**
   * Creates and returns a deep copy of this {@link FunctionDefinition} object.
   <p>
   * @return the (deep) copy of this {@link FunctionDefinition} object.
   */ public
";


%javamethodmodifiers FunctionDefinition::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link FunctionDefinition}.
   <p>
   * @return the id of this {@link FunctionDefinition}.
   */ public
";


%javamethodmodifiers FunctionDefinition::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link FunctionDefinition}.
   <p>
   * @return the name of this {@link FunctionDefinition}.
   */ public
";


%javamethodmodifiers FunctionDefinition::getMath() const "
/**
   * Get the mathematical formula of this {@link FunctionDefinition}.
   <p>
   * @return an {@link ASTNode}, the value of the \'math\' subelement of this
   * {@link FunctionDefinition}
   */ public
";


%javamethodmodifiers FunctionDefinition::isSetId() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link FunctionDefinition}\'s \'id\' attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link FunctionDefinition} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers FunctionDefinition::isSetName() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link FunctionDefinition}\'s \'name\' attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link FunctionDefinition} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers FunctionDefinition::isSetMath() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link FunctionDefinition}\'s \'math\' subelement contains a value.
   <p>
   * @return <code>true</code> if the \'math\' for this {@link FunctionDefinition} is set,
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers FunctionDefinition::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link FunctionDefinition}.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link FunctionDefinition}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers FunctionDefinition::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link FunctionDefinition}.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link FunctionDefinition}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers FunctionDefinition::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' subelement of this {@link FunctionDefinition} to the Abstract
   * Syntax Tree given in <code>math</code>.
   <p>
   * @param math an AST containing the mathematical expression to
   * be used as the formula for this {@link FunctionDefinition}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers FunctionDefinition::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link FunctionDefinition}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers FunctionDefinition::getArgument "
/**
   * Get the <code>n</code>th argument to this function.
   <p>
   * Callers should first find out the number of arguments to the function
   * by calling getNumArguments().
   <p>
   * @param n an integer index for the argument sought.
   <p>
   * @return the nth argument (bound variable) passed to this
   * {@link FunctionDefinition}.
   <p>
   * @see #getNumArguments()
   */ public
";


%javamethodmodifiers FunctionDefinition::getArgument(const std::string& name) const "
/**
   * Get the argument named <code>name</code> to this {@link FunctionDefinition}.
   <p>
   * @param name the exact name (case-sensitive) of the sought-after
   * argument
   <p>
   * @return the argument (bound variable) having the given name, or <code>null</code> if
   * no such argument exists.
   */ public
";


%javamethodmodifiers FunctionDefinition::getBody() const "
/**
   * Get the mathematical expression that is the body of this
   * {@link FunctionDefinition} object.
   <p>
   * @return the body of this {@link FunctionDefinition} as an Abstract Syntax
   * Tree, or <code>null</code> if no body is defined.
   */ public
";


%javamethodmodifiers FunctionDefinition::getBody "
/**
   * Get the mathematical expression that is the body of this
   * {@link FunctionDefinition} object.
   <p>
   * @return the body of this {@link FunctionDefinition} as an Abstract Syntax
   * Tree, or <code>null</code> if no body is defined.
   */ public
";


%javamethodmodifiers FunctionDefinition::isSetBody() const "
/**
   * Predicate returning <code>true</code> if the body of this
   * {@link FunctionDefinition} has set.
   <p>
   * @return <code>true</code> if the body of this {@link FunctionDefinition} is 
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers FunctionDefinition::getNumArguments() const "
/**
   * Get the number of arguments (bound variables) taken by this
   * {@link FunctionDefinition}.
   <p>
   * @return the number of arguments (bound variables) that must be passed
   * to this {@link FunctionDefinition}.
   */ public
";


%javamethodmodifiers FunctionDefinition::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_FUNCTION_DEFINITION SBML_FUNCTION_DEFINITION} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers FunctionDefinition::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * {@link FunctionDefinition}, is always <code>\'functionDefinition\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'functionDefinition\'.</code>
   */ public
";


%javamethodmodifiers FunctionDefinition::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers FunctionDefinition::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link FunctionDefinition} object
   * have been set.
   <p>
   * The required attributes for a {@link FunctionDefinition} object are:
   * <ul>
   * <li> \'id\'
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers FunctionDefinition::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link FunctionDefinition} object
   * have been set.
   <p>
   * @note The required elements for a {@link FunctionDefinition} object are:
   * <ul>
   * <li> \'math\'
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers FunctionDefinition::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the <code>UnitSIdRef</code> attributes on this element.
   <p>
   * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
   <p>
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of <code>oldid</code>.  If any matches are found,
   * the matching identifiers are replaced with <code>newid</code>.  The method does
   * <em>not</em> descend into child elements.
   <p>
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%javamethodmodifiers FunctionDefinition::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers FunctionDefinition::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers FunctionDefinition::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers FunctionDefinition::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers FunctionDefinition::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers FunctionDefinition::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::ListOfFunctionDefinitions(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfFunctionDefinitions} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::ListOfFunctionDefinitions(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfFunctionDefinitions} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfFunctionDefinitions} object to be created.
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfFunctionDefinitions} object.
   <p>
   * @return the (deep) copy of this {@link ListOfFunctionDefinitions} object.
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link FunctionDefinition} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for the objects contained in this ListOf:
   * {@link libsbmlConstants#SBML_FUNCTION_DEFINITION SBML_FUNCTION_DEFINITION} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfFunctionDefinitions}, the XML element name is 
   * <code>\'listOfFunctionDefinitions\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfFunctionDefinitions\'.</code>
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::get(unsigned int n) "
/**
   * Get a {@link FunctionDefinition} from the {@link ListOfFunctionDefinitions}.
   <p>
   * @param n the index number of the {@link FunctionDefinition} to get.
   <p>
   * @return the nth {@link FunctionDefinition} in this {@link ListOfFunctionDefinitions}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::get "
/**
   * Get a {@link FunctionDefinition} from the {@link ListOfFunctionDefinitions}.
   <p>
   * @param n the index number of the {@link FunctionDefinition} to get.
   <p>
   * @return the nth {@link FunctionDefinition} in this {@link ListOfFunctionDefinitions}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::get(const std::string& sid) "
/**
   * Get a {@link FunctionDefinition} from the {@link ListOfFunctionDefinitions}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link FunctionDefinition} to get.
   <p>
   * @return {@link FunctionDefinition} in this {@link ListOfFunctionDefinitions}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link FunctionDefinition} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::get(const std::string& sid) const "
/**
   * Get a {@link FunctionDefinition} from the {@link ListOfFunctionDefinitions}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link FunctionDefinition} to get.
   <p>
   * @return {@link FunctionDefinition} in this {@link ListOfFunctionDefinitions}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link FunctionDefinition} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfFunctionDefinitions} items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfFunctionDefinitions} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfFunctionDefinitions::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers UnitKind_equals(UnitKind_t uk1, UnitKind_t uk2) "
/**
 * Tests for logical equality between two given <code>UNIT_KIND_</code>
 * code values.
 <p>
 * This function behaves exactly like C\'s <code>==</code> operator, except
 * for the following two cases:
 * <ul>
  * <li>{@link libsbmlConstants#UNIT_KIND_LITER UNIT_KIND_LITER} <code>==</code> {@link libsbmlConstants#UNIT_KIND_LITRE UNIT_KIND_LITRE}
 * <li>{@link libsbmlConstants#UNIT_KIND_METER UNIT_KIND_METER} <code>==</code> {@link libsbmlConstants#UNIT_KIND_METRE UNIT_KIND_METRE}
 * </ul>
 <p>
 * In the two cases above, C equality comparison would yield <code>false</code>
 * (because each of the above is a distinct enumeration value), but
 * this function returns <code>true.</code>
 <p>
 * @param uk1 a <code>UNIT_KIND_</code> value 
 * @param uk2 a second <code>UNIT_KIND_</code> value to compare to <code>uk1</code>
 <p>
 * @return nonzero (for <code>true</code>) if <code>uk1</code> is logically equivalent to 
 * <code>uk2</code>, zero (for <code>false</code>) otherwise.
 <p>
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for {@link Unit}.
 */ public
";


%javamethodmodifiers UnitKind_forName(const char *name) "
/**
 * Converts a text string naming a kind of unit to its corresponding
 * libSBML <code>UNIT_KIND_</code> constant/enumeration value.
 <p>
 * @param name a string, the name of a predefined base unit in SBML
 <p>
 * @return a value the set of <code>UNIT_KIND_</code> codes
 * defined in class {@link libsbmlConstants}, corresponding to the string
 * <code>name</code> (determined in a case-insensitive manner).
 <p>
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for {@link Unit}.
 */ public
";


%javamethodmodifiers UnitKind_toString(UnitKind_t uk) "
/**
 * Converts a unit code to a text string equivalent.
 <p>
 * @param uk a value from the set of <code>UNIT_KIND_</code> codes
 * defined in the class {@link libsbmlConstants}
 <p>
 * @return the name corresponding to the given unit code.
 <p>
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for {@link Unit}.
 <p>
 * @warning The string returned is a static data value.  The caller does not
 * own the returned string and is therefore not allowed to modify it.
 */ public
";


%javamethodmodifiers UnitKind_isValidUnitKindString(const char *str, unsigned int level, unsigned int version) "
/**
 * Predicate for testing whether a given string corresponds to a
 * predefined libSBML unit code.
 <p>
 * @param str a text string naming a base unit defined by SBML
 * @param level the Level of SBML
 * @param version the Version within the Level of SBML
 <p>
 * @return nonzero (for <code>true</code>) if string is the name of a valid
 * <code>UNIT_KIND_</code> value, zero (for <code>false</code>) otherwise.
 <p>
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for {@link Unit}.
 */ public
";


%typemap(javaimports) Unit "
/** 
 *  A single unit referenced in an SBML <em>unit definition</em>.
 <p>
 * The SBML unit definition facility uses two classes of objects,
 * {@link UnitDefinition} and {@link Unit}.  The approach to defining units in SBML is
 * compositional; for example, <em>meter second<sup> &ndash;2</sup></em> is
 * constructed by combining a {@link Unit} object representing <em>meter</em> with
 * another {@link Unit} object representing <em>second<sup> &ndash;2</sup></em>.
 * The combination is wrapped inside a {@link UnitDefinition}, which provides for
 * assigning an identifier and optional name to the combination.  The
 * identifier can then be referenced from elsewhere in a model.  Thus, the
 * {@link UnitDefinition} class is the container, and {@link Unit} instances are placed
 * inside {@link UnitDefinition} instances.
 <p>
 * A {@link Unit} has four attributes named \'kind\', \'exponent\', \'scale\'
 * and \'multiplier\'.  It represents a (possibly transformed) reference to a
 * base unit.  The attribute \'kind\' on {@link Unit} indicates the chosen base unit.
 * Its value must be one of the text strings listed below; this list
 * corresponds to SBML Level&nbsp;3 Version&nbsp;1 Core:
 <p>
 * <p>
<table border=\'0\' class=\'centered text-table width80 normal-font code\'
       style=\'border: none !important\'>
<tr>
<td>ampere</td><td>farad</td><td>joule</td><td>lux</td><td>radian</td><td>volt</td>
</tr>
<tr>
<td>avogadro</td><td>gram</td><td>katal</td><td>metre</td><td>second</td><td>watt</td>
</tr>
<tr>
<td>becquerel</td><td>gray</td><td>kelvin</td><td>mole</td><td>siemens</td><td>weber</td>
</tr>
<tr>
<td>candela</td><td>henry</td><td>kilogram</td><td>newton</td><td>sievert</td>
</tr>
<tr>
<td>coulomb</td><td>hertz</td><td>litre</td><td>ohm</td><td>steradian</td>
</tr>
<tr>
<td>dimensionless</td><td>item</td><td>lumen</td><td>pascal</td><td>tesla</td>
</tr>
</table>
 <p>
 * A few small differences exist between the Level&nbsp;3 list of base
 * units and the list defined in other Level/Version combinations of SBML.
 * Specifically, Levels of SBML before Level&nbsp;3 do not define 
 * <code>avogadro</code>; conversely, Level&nbsp;2 Version&nbsp;1 defines <code>Celsius</code>,
 * and Level&nbsp;1 defines <code>celsius</code>, <code>meter</code>, and <code>liter</code>, none of
 * which are available in Level&nbsp;3.  In libSBML, each of the predefined
 * base unit names is represented by an enumeration value whose name begins with the characters
 * <code>UNIT_KIND_</code>, discussed in a separate section below.
 <p>
 * The attribute named \'exponent\' on {@link Unit} represents an exponent on the
 * unit.  In SBML Level&nbsp;2, the attribute is optional and has a default
 * value of <code>1</code> (one); in SBML Level&nbsp;3, the attribute is mandatory
 * and there is no default value.  A {@link Unit} also has an attribute
 * called \'scale\'; its value must be an integer exponent for a power-of-ten
 * multiplier used to set the scale of the unit.  For example, a unit
 * having a \'kind\' value of <code>gram</code> and a \'scale\' value of <code>-3</code> signifies
 * 10<sup>&nbsp;&ndash;3</sup> &#215; gram, or milligrams.  In SBML
 * Level&nbsp;2, the attribute is optional and has a default value of <code>0</code>
 * (zero), because 10<sup> 0</sup> = 1; in SBML Level&nbsp;3, the attribute
 * is mandatory and has no default value.  Lastly, the attribute named
 * \'multiplier\' can be used to multiply the unit by a real-numbered factor;
 * this enables the definition of units that are not power-of-ten multiples
 * of SI units.  For instance, a multiplier of 0.3048 could be used to
 * define <code>foot</code> as a measure of length in terms of a <code>metre.</code>  The
 * \'multiplier\' attribute is optional in SBML Level&nbsp;2, where it has a
 * default value of <code>1</code> (one); in SBML Level&nbsp;3, the attribute is
 * mandatory and has not default value.
 <p>
 * * <h3><a class=\'anchor\' name=\'UnitKind_t\'>Unit identification codes</a></h3>
 <p>
 * As discussed above, SBML defines a set of base units which serves as the
 * starting point for new unit definitions.  This set of base units
 * consists of the SI units and a small number of additional convenience
 * units.
 <p>
 * In SBML Level&nbsp;2 Versions before
 * Version&nbsp;3, there existed an enumeration of units called 
 * <code>UnitKind.</code>  In Version&nbsp;3, this enumeration was removed and the
 * identifier class <code>UnitSId</code> redefined to include the previous 
 * <code>UnitKind</code> values as reserved symbols.  This change has no net effect on
 * permissible models, their representation or their syntax.  The purpose
 * of the change in the SBML specification was simply to clean up an
 * inconsistency about the contexts in which these values were usable.
 * However, libSBML maintains UnitKind in the form of of a set of static
 * integer constants whose names begin with the characters
 * <code>UNIT_KIND_</code>.  These constants are defined in the class
 * <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.
 <p>
 * As a consequence of the fact that libSBML supports models in all Levels
 * and Versions of SBML, libSBML\'s set of <code>UNIT_KIND_</code> values is a union
 * of all the possible base unit names defined in the different SBML
 * specifications.  However, not every base unit is allowed in every
 * Level+Version combination of SBML.  Note in particular the following
 * exceptions:
 * <ul>
 * <li> The alternate spelling <code>\'meter\'</code> is included in
 * addition to the official SI spelling <code>\'metre\'.</code>  This spelling is only
 * permitted in SBML Level&nbsp;1 models.
 <p>
 * <li> The alternate spelling <code>\'liter\'</code> is included in addition to the
 * official SI spelling <code>\'litre\'.</code>  This spelling is only permitted in
 * SBML Level&nbsp;1 models.
 <p>
 * <li> The unit <code>\'Celsius\'</code> is included because of its presence in
 * specifications of SBML prior to SBML Level&nbsp;2 Version&nbsp;3.
 <p>
 * <li> The unit <code>avogadro</code> was introduced in SBML Level&nbsp;3, and
 * is only permitted for use in SBML Level&nbsp;3 models.
 * </ul>
 <p>
 * The table below lists the unit
 * constants defined in libSBML, and their meanings. 
 <p>
 * <table border=\"0\" class=\"centered text-table width80 normal-font alt-row-colors\">
 <tr>
     <th align=\"left\" width=\"200\">Enumerator</th>
     <th align=\"left\">Meaning</th>
 </tr>
<tr><td><code>UNIT_KIND_AMPERE</code></td><td>The ampere unit.</td></tr>
<tr><td><code>UNIT_KIND_AVOGADRO</code></td><td>The unit
<code>dimensionless</code> multiplied by the numerical value of Avogadro's
constant. (<span class=\"warning\">Only usable in SBML Level&nbsp;3 models.</span>)</td></tr>
<tr><td><code>UNIT_KIND_BECQUEREL</code></td><td>The becquerel unit.</td></tr>
<tr><td><code>UNIT_KIND_CANDELA</code></td><td>The candela unit.</td></tr>
<tr><td><code>UNIT_KIND_CELSIUS</code></td><td>The Celsius unit. (<span
class=\"warning\">Only usable in SBML Level&nbsp;1 and SBML Level&nbsp;2
Version&nbsp;1 models.</span>)</td></tr>
<tr><td><code>UNIT_KIND_COULOMB</code></td><td>The coulomb unit.</td></tr>
<tr><td><code>UNIT_KIND_DIMENSIONLESS</code></td><td>A pseudo-unit
indicating a dimensionless quantity.</td></tr>
<tr><td><code>UNIT_KIND_FARAD</code></td><td>The farad unit.</td></tr>
<tr><td><code>UNIT_KIND_GRAM</code></td><td>The gram unit.</td></tr>
<tr><td><code>UNIT_KIND_GRAY</code></td><td>The gray unit.</td></tr>
<tr><td><code>UNIT_KIND_HENRY</code></td><td>The henry unit.</td></tr>
<tr><td><code>UNIT_KIND_HERTZ</code></td><td>The hertz unit.</td></tr>
<tr><td><code>UNIT_KIND_ITEM</code></td><td>A pseudo-unit representing a
single \"thing\".</td></tr>
<tr><td><code>UNIT_KIND_JOULE</code></td><td>The joule unit.</td></tr>
<tr><td><code>UNIT_KIND_KATAL</code></td><td>The katal unit.</td></tr>
<tr><td><code>UNIT_KIND_KELVIN</code></td><td>The kelvin unit.</td></tr>
<tr><td><code>UNIT_KIND_KILOGRAM</code></td><td>The kilogram unit.</td></tr>
<tr><td><code>UNIT_KIND_LITER</code></td><td>Alternate spelling of litre.</td></tr>
<tr><td><code>UNIT_KIND_LITRE</code></td><td>The litre unit.</td></tr>
<tr><td><code>UNIT_KIND_LUMEN</code></td><td>The lumen unit.</td></tr>
<tr><td><code>UNIT_KIND_LUX</code></td><td>The lux unit.</td></tr>
<tr><td><code>UNIT_KIND_METER</code></td><td>Alternate spelling of metre.</td></tr>
<tr><td><code>UNIT_KIND_METRE</code></td><td>The metre unit.</td></tr>
<tr><td><code>UNIT_KIND_MOLE</code></td><td>The mole unit.</td></tr>
<tr><td><code>UNIT_KIND_NEWTON</code></td><td>The newton unit.</td></tr>
<tr><td><code>UNIT_KIND_OHM</code></td><td>The ohm unit.</td></tr>
<tr><td><code>UNIT_KIND_PASCAL</code></td><td>The pascal unit.</td></tr>
<tr><td><code>UNIT_KIND_RADIAN</code></td><td>The radian unit.</td></tr>
<tr><td><code>UNIT_KIND_SECOND</code></td><td>The second unit.</td></tr>
<tr><td><code>UNIT_KIND_SIEMENS</code></td><td>The siemens unit.</td></tr>
<tr><td><code>UNIT_KIND_SIEVERT</code></td><td>The sievert unit.</td></tr>
<tr><td><code>UNIT_KIND_STERADIAN</code></td><td>The steradian unit.</td></tr>
<tr><td><code>UNIT_KIND_TESLA</code></td><td>The tesla unit.</td></tr>
<tr><td><code>UNIT_KIND_VOLT</code></td><td>The volt unit.</td></tr>
<tr><td><code>UNIT_KIND_WATT</code></td><td>The watt unit.</td></tr>
<tr><td><code>UNIT_KIND_WEBER</code></td><td>The weber unit.</td></tr>
<tr><td><code>UNIT_KIND_INVALID</code></td><td>Marker used by libSBML
to indicate an invalid or unset unit.</td></tr>
</table>


 */
"


%typemap(javaimports) ListOfUnits "
/** 
 *  A list of {@link Unit} objects.
 <p>
 * {@link ListOfUnits} is entirely contained within {@link UnitDefinition}.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers Unit::Unit(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Unit} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Unit}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Unit}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Unit::Unit(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Unit} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Unit::Unit(const Unit& orig) "
/**
   * Copy constructor; creates a copy of this {@link Unit}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Unit::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Unit}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Unit} in the list
   * of units within which this {@link Unit} is embedded (i.e., in the {@link ListOfUnits}
   * located in the enclosing {@link UnitDefinition} instance).
   */ public
";


%javamethodmodifiers Unit::clone() const "
/**
   * Creates and returns a deep copy of this {@link Unit} object.
   <p>
   * @return the (deep) copy of this {@link Unit} object.
   */ public
";


%javamethodmodifiers Unit::initDefaults "
/**
   * Initializes the fields of this {@link Unit} object to \'typical\' default
   * values.
   <p>
   * The SBML {@link Unit} component has slightly different aspects and default
   * attribute values in different SBML Levels and Versions.  This method
   * sets the values to certain common defaults, based mostly on what they
   * are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets attribute \'exponent\' to <code>1</code>
   * <li> Sets attribute \'scale\' to <code>0</code>
   * <li> Sets attribute \'multiplier\' to <code>1.0</code>
   * </ul>
   <p>
   * The \'kind\' attribute is left unchanged.
   */ public
";


%javamethodmodifiers Unit::getKind() const "
/**
   * Returns the \'kind\' of {@link Unit} this is.
   <p>
   * @return the value of the \'kind\' attribute of this {@link Unit} as a
   * value from the set of constants whose names begin
   * with <code>UNIT_KIND_</code> defined in the class
   * <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.
   */ public
";


%javamethodmodifiers Unit::getExponent() const "
/**
   * Returns the value of the \'exponent\' attribute of this unit.
   <p>
   * @return the \'exponent\' value of this {@link Unit}, as an integer.
   */ public
";


%javamethodmodifiers Unit::getExponentAsDouble() const "
/**
   * Returns the value of the \'exponent\' attribute of this unit.
   <p>
   * @return the \'exponent\' value of this {@link Unit}, as a double.
   */ public
";


%javamethodmodifiers Unit::getScale() const "
/**
   * Returns the value of the \'scale\' attribute of this unit.
   <p>
   * @return the \'scale\' value of this {@link Unit}, as an integer.
   */ public
";


%javamethodmodifiers Unit::getMultiplier() const "
/**
   * Returns the value of the \'multiplier\' attribute of this {@link Unit}.
   <p>
   * @return the \'multiplier\' value of this {@link Unit}, as a double.
   */ public
";


%javamethodmodifiers Unit::getOffset() const "
/**
   * Returns the value of the \'offset\' attribute of this {@link Unit}.
   <p>
   * @return the \'offset\' value of this {@link Unit}, as a double.
   <p>
   * <p>
 * @warning <span class=\'warning\'>The \'offset\' attribute is only available in
 * SBML Level&nbsp;2 Version&nbsp;1.  This attribute is not present in SBML
 * Level&nbsp;2 Version&nbsp;2 or above.  When producing SBML models using
 * these later specifications, modelers and software tools need to account
 * for units with offsets explicitly.  The SBML specification document
 * offers a number of suggestions for how to achieve this.  LibSBML methods
 * such as this one related to \'offset\' are retained for compatibility with
 * earlier versions of SBML Level&nbsp;2, but their use is strongly
 * discouraged.</span>
   */ public
";


%javamethodmodifiers Unit::isAmpere() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>ampere.</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>ampere</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isAvogadro() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>avogadro.</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>avogadro</code>, <code>false</code>
   * otherwise.
   <p>
   * @note The unit <code>avogadro</code> was introduced in SBML Level&nbsp;3, and
   * is only permitted for use in SBML Level&nbsp;3 models.
   */ public
";


%javamethodmodifiers Unit::isBecquerel() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>becquerel</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>becquerel</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isCandela() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>candela</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>candela</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isCelsius() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>Celsius</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>Celsius</code>, <code>false</code>
   * otherwise. 
   <p>
   * @warning <span class=\'warning\'>The predefined unit <code>Celsius</code> was
   * removed from the list of predefined units in SBML Level&nbsp;2
   * Version&nbsp;2 at the same time that the \'offset\' attribute was removed
   * from {@link Unit} definitions.  LibSBML methods such as this one related to 
   * <code>Celsius</code> are retained in order to support SBML Level&nbsp;2
   * Version&nbsp;1, but their use is strongly discouraged.</span>
   */ public
";


%javamethodmodifiers Unit::isCoulomb() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>coulomb</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>coulomb</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isDimensionless() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind 
   * <code>dimensionless.</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>dimensionless</code>, <code>false</code>
   <p>
   * otherwise.
   */ public
";


%javamethodmodifiers Unit::isFarad() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>farad</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>farad</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isGram() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>gram</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>gram</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isGray() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>gray</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>gray</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isHenry() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>henry</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>henry</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isHertz() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>hertz</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>hertz</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isItem() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>item</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>item</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isJoule() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>joule</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>joule</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isKatal() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>katal</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>katal</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isKelvin() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>kelvin</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>kelvin</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isKilogram() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>kilogram</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>kilogram</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isLitre() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>litre</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>litre</code> or \'liter\', 
   * <code>false</code> 
   * otherwise.
   */ public
";


%javamethodmodifiers Unit::isLumen() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>lumen</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>lumen</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isLux() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>lux</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>lux</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isMetre() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>metre</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>metre</code> or \'meter\', 
   * <code>false</code> 
   * otherwise.
   */ public
";


%javamethodmodifiers Unit::isMole() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>mole</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>mole</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isNewton() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>newton</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>newton</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isOhm() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>ohm</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>ohm</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isPascal() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>pascal</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>pascal</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isRadian() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>radian</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>radian</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isSecond() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>second</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>second</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isSiemens() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>siemens</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>siemens</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isSievert() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>sievert</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>sievert</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isSteradian() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>steradian</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>steradian</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isTesla() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>tesla</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>tesla</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isVolt() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>volt</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>volt</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isWatt() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>watt</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>watt</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isWeber() const "
/**
   * Predicate for testing whether this {@link Unit} is of the kind <code>weber</code>
   <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>weber</code>, <code>false</code>
   * otherwise. 
   */ public
";


%javamethodmodifiers Unit::isSetKind() const "
/**
   * Predicate to test whether the \'kind\' attribute of this {@link Unit} is set.
   <p>
   * @return <code>true</code> if the \'kind\' attribute of this {@link Unit} is set, 
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Unit::isSetExponent() const "
/**
   * Predicate to test whether the \'exponent\' attribute of this {@link Unit} 
   * is set.
   <p>
   * @return <code>true</code> if the \'exponent\' attribute of this {@link Unit} is set, 
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Unit::isSetScale() const "
/**
   * Predicate to test whether the \'scale\' attribute of this {@link Unit} 
   * is set.
   <p>
   * @return <code>true</code> if the \'scale\' attribute of this {@link Unit} is set, 
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Unit::isSetMultiplier() const "
/**
   * Predicate to test whether the \'multiplier\' attribute of this {@link Unit} 
   * is set.
   <p>
   * @return <code>true</code> if the \'multiplier\' attribute of this {@link Unit} is set, 
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Unit::setKind(UnitKind_t kind) "
/**
   * Sets the \'kind\' attribute value of this {@link Unit}.
   <p>
   * @param kind a unit identifier chosen from the set of constants whose
   * names begin with <code>UNIT_KIND_</code> in <code><a
   * href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Unit::setExponent(int value) "
/**
   * Sets the \'exponent\' attribute value of this {@link Unit}.
   <p>
   * @param value the integer to which the attribute \'exponent\' should be set
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Unit::setExponent(double value) "
/**
   * Sets the \'exponent\' attribute value of this {@link Unit}.
   <p>
   * @param value the double to which the attribute \'exponent\' should be set
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers Unit::setScale(int value) "
/**
   * Sets the \'scale\' attribute value of this {@link Unit}.
   <p>
   * @param value the integer to which the attribute \'scale\' should be set
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers Unit::setMultiplier(double value) "
/**
   * Sets the \'multipler\' attribute value of this {@link Unit}.
   <p>
   * @param value the floating-point value to which the attribute
   * \'multiplier\' should be set
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * </ul>
   */ public
";


%javamethodmodifiers Unit::setOffset(double value) "
/**
   * Sets the \'offset\' attribute value of this {@link Unit}.
   <p>
   * @param value the float-point value to which the attribute \'offset\'
   * should set
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * <p>
 * @warning <span class=\'warning\'>The \'offset\' attribute is only available in
 * SBML Level&nbsp;2 Version&nbsp;1.  This attribute is not present in SBML
 * Level&nbsp;2 Version&nbsp;2 or above.  When producing SBML models using
 * these later specifications, modelers and software tools need to account
 * for units with offsets explicitly.  The SBML specification document
 * offers a number of suggestions for how to achieve this.  LibSBML methods
 * such as this one related to \'offset\' are retained for compatibility with
 * earlier versions of SBML Level&nbsp;2, but their use is strongly
 * discouraged.</span>
   */ public
";


%javamethodmodifiers Unit::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_UNIT SBML_UNIT} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getPackageName()
   * @see #getElementName()
   */ public
";


%javamethodmodifiers Unit::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Unit}, is
   * always <code>\'unit\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'unit\'.</code> 
   */ public
";


%javamethodmodifiers Unit::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Unit::isBuiltIn(const std::string& name, unsigned int level) "
/**
   * Predicate to test whether a given string is the name of a
   * predefined SBML unit.
   <p>
   * @param name a string to be tested against the predefined unit names
   <p>
   * @param level the Level of SBML for which the determination should be
   * made.  This is necessary because there are a few small differences
   * in allowed units between SBML Level&nbsp;1 and Level&nbsp;2.
   <p>
   * @return <code>true</code> if <code>name</code> is one of the five SBML predefined unit
   * identifiers (<code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or 
   * <code>\'time\'</code>), <code>false</code> otherwise.
   <p>
   * @note The predefined unit identifiers <code>\'length\'</code> and <code>\'area\'</code> were
   * added in Level&nbsp;2 Version&nbsp;1.
   <p>
   * 
   */ public
";


%javamethodmodifiers Unit::isUnitKind(const std::string& name, unsigned int level, unsigned int version) "
/**
   * Predicate to test whether a given string is the name of a valid
   * base unit in SBML (such as <code>\'gram\'</code> or <code>\'mole\'</code>).
   <p>
   * This method exists because prior to SBML Level&nbsp;2 Version&nbsp;3,
   * an enumeration called <code>UnitKind</code> was defined by SBML.  This enumeration
   * was removed in SBML Level&nbsp;2 Version&nbsp;3 and its values were
   * folded into the space of values of a type called <code>UnitSId.</code>  This method
   * therefore has less significance in SBML Level&nbsp;2 Version&nbsp;3
   * and Level&nbsp;2 Version&nbsp;4, but remains for backward
   * compatibility and support for reading models in older Versions of
   * Level&nbsp;2.
   <p>
   * @param name a string to be tested
   <p>
   * @param level a long integer representing the SBML specification
   * Level 
   <p>
   * @param version a long integer representing the SBML specification
   * Version
   <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   <p>
   * @note The allowed unit names differ between SBML Levels&nbsp;1
   * and&nbsp;2 and again slightly between Level&nbsp;2 Versions&nbsp;1
   * and&nbsp;2.
   <p>
   * 
   */ public
";


%javamethodmodifiers Unit::areIdentical(Unit * unit1, Unit * unit2) "
/**
   * Predicate returning <code>true</code> if two
   * {@link Unit} objects are identical.
   <p>
   * Two {@link Unit} objects are considered to be <em>identical</em> if they match in
   * all attributes.  (Contrast this to the method areEquivalent(Unit u1, Unit u2), which compares {@link Unit} objects only with respect
   * to certain attributes.)
   <p>
   * @param unit1 the first {@link Unit} object to compare
   * @param unit2 the second {@link Unit} object to compare
   <p>
   * @return <code>true</code> if all the attributes of unit1 are identical
   * to the attributes of unit2, <code>false</code> otherwise.
   <p>
   * 
   <p>
   * @see Unit#areEquivalent(Unit u1, Unit u2) 
   */ public
";


%javamethodmodifiers Unit::areEquivalent(Unit * unit1, Unit * unit2) "
/**
   * Predicate returning <code>true</code> if 
   * {@link Unit} objects are equivalent.
   <p>
   * Two {@link Unit} objects are considered to be <em>equivalent</em> either if (1) both
   * have a \'kind\' attribute value of <code>dimensionless</code>, or (2) their \'kind\',
   * \'exponent\' and (for SBML Level&nbsp;2 Version&nbsp;1) \'offset\'
   * attribute values are equal. (Contrast this to the method
   * areIdentical(Unit, Unit), which compares {@link Unit} objects with respect to all
   * attributes, not just the \'kind\' and \'exponent\'.)
   <p>
   * @param unit1 the first {@link Unit} object to compare
   * @param unit2 the second {@link Unit} object to compare
   <p>
   * @return <code>true</code> if the \'kind\' and \'exponent\' attributes of unit1 are
   * identical to the kind and exponent attributes of unit2, <code>false</code>
   * otherwise.
   <p>
   * 
   <p>
   * @see Unit#areIdentical(Unit u1, Unit u2) 
   */ public
";


%javamethodmodifiers Unit::removeScale(Unit * unit) "
/**
   * Manipulates the attributes of the {@link Unit} to express the unit with the 
   * value of the scale attribute reduced to zero.
   <p>
   * For example, 1 millimetre can be expressed as a {@link Unit} with kind=
   * <code>\'metre\'</code> multiplier=<code>\'1\'</code> scale=<code>\'-3\'</code> exponent=<code>\'1\'.</code> It can also be
   * expressed as a {@link Unit} with kind=<code>\'metre\'</code>
   * multiplier=<code>\'0.001\'</code> scale=<code>\'0\'</code> exponent=<code>\'1\'.</code>
   <p>
   * @param unit the {@link Unit} object to manipulate.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * 
   <p>
   * @see Unit#convertToSI(Unit u) 
   * @see Unit#merge(Unit u1, Unit u2) 
   */ public
";


%javamethodmodifiers Unit::merge(Unit * unit1, Unit * unit2) "
/**
   * Merges two {@link Unit} objects with the same \'kind\' attribute value into a
   * single {@link Unit}.
   <p>
   * For example, the following,
   * <pre class=\'fragment\'>
 &lt;unit kind=\'metre\' exponent=\'2\'/&gt;
 &lt;unit kind=\'metre\' exponent=\'1\'/&gt;
 </pre>
   * would be merged to become
   * <pre class=\'fragment\'>
 &lt;unit kind=\'metre\' exponent=\'3\'/&gt;
 </pre>
   <p>
   * @param unit1 the first {@link Unit} object; the result of the operation is
   * left as a new version of this unit, modified in-place.  Not modified if
   * the two units have different kinds.
   <p>
   * @param unit2 the second {@link Unit} object to merge with the first
   <p>
   * 
   <p>
   * @see Unit#convertToSI(Unit u) 
   * @see Unit#removeScale(Unit u) 
   */ public
";


%javamethodmodifiers Unit::convertToSI(const Unit * unit) "
/**
   * Returns a {@link UnitDefinition} object containing the given <code>unit</code> converted
   * to the appropriate SI unit.
   <p>
   * This method exists because some units can be expressed in terms of
   * others when the same physical dimension is involved.  For example, one
   * hertz is identical to 1&nbsp;sec<sup>-1</sup>, one litre is equivalent
   * to 1 cubic decametre, and so on.
   <p>
   * @param unit the {@link Unit} object to convert to SI
   <p>
   * @return a {@link UnitDefinition} object containing the SI unit.
   <p>
   * 
   <p>
   * @see Unit#merge(Unit u1, Unit u2) 
   */ public
";


%javamethodmodifiers Unit::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Unit} object
   * have been set.
   <p>
   * The required attributes for a {@link Unit} object are:
   * <ul>
   * <li> \'kind\'
   * <li> \'exponent\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'multiplier\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'scale\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Unit::setExponentUnitChecking(double value) "
/** * @internal */ public
";


%javamethodmodifiers Unit::getExponentUnitChecking "
/** * @internal */ public
";


%javamethodmodifiers Unit::getExponentUnitChecking() const "
/** * @internal */ public
";


%javamethodmodifiers Unit::isUnitChecking "
/** * @internal */ public
";


%javamethodmodifiers Unit::isUnitChecking() const "
/** * @internal */ public
";


%javamethodmodifiers Unit::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Unit::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Unit::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Unit::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Unit::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Unit::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Unit::isL1UnitKind(const std::string& name) "
/** * @internal */ public
";


%javamethodmodifiers Unit::isL2V1UnitKind(const std::string& name) "
/** * @internal */ public
";


%javamethodmodifiers Unit::isL2UnitKind(const std::string& name) "
/** * @internal */ public
";


%javamethodmodifiers Unit::isL3UnitKind(const std::string& name) "
/** * @internal */ public
";


%javamethodmodifiers Unit::isExplicitlySetExponent() const "
/** * @internal */ public
";


%javamethodmodifiers Unit::isExplicitlySetMultiplier() const "
/** * @internal */ public
";


%javamethodmodifiers Unit::isExplicitlySetScale() const "
/** * @internal */ public
";


%javamethodmodifiers Unit::isExplicitlySetOffset() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfUnits::ListOfUnits(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfUnits} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfUnits::ListOfUnits(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfUnits} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfUnits} object to be created.
   */ public
";


%javamethodmodifiers ListOfUnits::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfUnits} object.
   <p>
   * @return the (deep) copy of this {@link ListOfUnits} object.
   */ public
";


%javamethodmodifiers ListOfUnits::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Unit} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for objects contained in this list:
   * {@link libsbmlConstants#SBML_UNIT SBML_UNIT} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfUnits::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfUnits}, the XML element name is <code>\'listOfUnits\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfUnits\'.</code>
   */ public
";


%javamethodmodifiers ListOfUnits::get(unsigned int n) "
/**
   * Get a {@link Unit} from the {@link ListOfUnits}.
   <p>
   * @param n the index number of the {@link Unit} to get.
   <p>
   * @return the nth {@link Unit} in this {@link ListOfUnits}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfUnits::get "
/**
   * Get a {@link Unit} from the {@link ListOfUnits}.
   <p>
   * @param n the index number of the {@link Unit} to get.
   <p>
   * @return the nth {@link Unit} in this {@link ListOfUnits}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfUnits::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfUnits} items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfUnits::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfUnits::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) UnitDefinition "
/** 
 *  A definition of a unit used in an SBML model.
 <p>
 * Units of measurement may be supplied in a number of contexts in an SBML
 * model.  The SBML unit definition facility uses two classes of objects,
 * {@link UnitDefinition} and {@link Unit}.  The approach to defining units in SBML is
 * compositional; for example, <em>meter second<sup> &ndash;2</sup></em> is
 * constructed by combining a {@link Unit} object representing <em>meter</em> with
 * another {@link Unit} object representing <em>second<sup> &ndash;2</sup></em>.
 * The combination is wrapped inside a {@link UnitDefinition}, which provides for
 * assigning an identifier and optional name to the combination.  The
 * identifier can then be referenced from elsewhere in a model.  Thus, the
 * {@link UnitDefinition} class is the container, and {@link Unit} instances are placed
 * inside {@link UnitDefinition} instances.
 <p>
 * Two points are worth discussing in the context of SBML units.  First,
 * unit declarations in SBML models are <em>optional</em>.  The consequence of
 * this is that a model must be numerically self-consistent independently
 * of unit declarations, for the benefit of software tools that cannot
 * interpret or manipulate units.  {@link Unit} declarations in SBML are thus more
 * akin to a type of annotation; they can indicate intentions, and can be
 * used by model readers for checking the consistency of the model,
 * labeling simulation output, etc., but any transformations of values
 * implied by different units must be incorporated <em>explicitly</em> into a
 * model.
 <p>
 * Second, the vast majority of situations that require new SBML unit
 * definitions involve simple multiplicative combinations of base units and
 * factors.  An example is <em>moles per litre per second</em>.  What
 * distinguishes these sorts of unit definitions from more complex ones is
 * that they may be expressed without the use of an additive offset from a
 * zero point.  The use of offsets complicates all unit definition systems,
 * yet in the domain of SBML, the real-life cases requiring offsets are few
 * (and in fact, to the best of our knowledge, only involve temperature).
 * Consequently, the SBML unit system has been consciously designed to
 * simplify implementation of unit support for the most common cases in
 * systems biology.  The cost of this simplification is to require units
 * with offsets to be handled explicitly by the modeler.
 <p>
 * <h2>Summary of the {@link UnitDefinition} construct</h2>
 <p>
 * {@link UnitDefinition} has two attributes and one subelement.  The two
 * attributes are \'id\' and \'name\', and the subelement is {@link ListOfUnits}.
 <p>
 * The required attribute \'id\' and optional attribute \'name\' are both
 * strings.  The \'id\' attribute is used to give the defined unit a unique
 * identifier by which other parts of an SBML model definition can refer to
 * it.  The \'name\' attribute is intended to be used for giving the unit
 * definition an optional human-readable name.  Please see the <a
 * href=\'#unitdef-id\'>next section</a> for information about the values
 * permitted for \'id\'.
 <p>
 * A {@link UnitDefinition} must contain exactly one {@link ListOfUnits}, and this list
 * must contain one or more {@link Unit} definitions; see the definitions of these
 * other object classes for more information about them.  The following
 * example illustrates a complete unit definition (when written in XML)
 * when they all the pieces are combined together.  This defines \'mmls\'
 * to be millimoles per litre per second.
 * <pre class=\'fragment\'>
 &lt;listOfUnitDefinitions&gt;
     &lt;unitDefinition id=\'mmls\'&gt;
         &lt;listOfUnits&gt;
             &lt;unit kind=\'mole\'   scale=\'-3\'/&gt;
             &lt;unit kind=\'litre\'  exponent=\'-1\'/&gt;
             &lt;unit kind=\'second\' exponent=\'-1\'/&gt;
         &lt;/listOfUnits&gt;
     &lt;/unitDefinition&gt;
 &lt;/listOfUnitDefinitions&gt;
 </pre>
 <p>
 * <h2>Special considerations for {@link Unit} object identifiers</h2>
 <p>
 * The attribute \'id\' in {@link UnitDefinition} cannot be given simply any value,
 * and the precise details of the values permitted differ slightly between
 * Levels of SBML:
 * <ul>
 <p>
 * <li> The \'id\' of a {@link UnitDefinition} must <em>not</em> contain a value from the
 * list of SBML\'s predefined base unit names (i.e., the strings <code>gram</code>, 
 * <code>litre</code>, etc.).  In SBML Level&nbsp;3, this list consists of the
 * following:
 <p>
 * <p>
<table border=\'0\' class=\'centered text-table width80 normal-font code\'
       style=\'border: none !important\'>
<tr>
<td>ampere</td><td>farad</td><td>joule</td><td>lux</td><td>radian</td><td>volt</td>
</tr>
<tr>
<td>avogadro</td><td>gram</td><td>katal</td><td>metre</td><td>second</td><td>watt</td>
</tr>
<tr>
<td>becquerel</td><td>gray</td><td>kelvin</td><td>mole</td><td>siemens</td><td>weber</td>
</tr>
<tr>
<td>candela</td><td>henry</td><td>kilogram</td><td>newton</td><td>sievert</td>
</tr>
<tr>
<td>coulomb</td><td>hertz</td><td>litre</td><td>ohm</td><td>steradian</td>
</tr>
<tr>
<td>dimensionless</td><td>item</td><td>lumen</td><td>pascal</td><td>tesla</td>
</tr>
</table>
 <p>
 * This list of predefined base units is nearly identical in SBML
 * Level&nbsp;2 Version&nbsp;4, the exception being that Level&nbsp;2 does
 * not define <code>avogadro.</code>  SBML Level&nbsp;2 Version&nbsp;1 (and <em>only</em>
 * this Level+Version combination) provides an additional predefined unit
 * name, <code>Celsius</code>, not available in Level&nbsp;3.  Finally, SBML
 * Level&nbsp;1 Versions&nbsp;2&ndash;3 provide two more additional
 * predefined unit names, <code>meter</code> and <code>liter.</code>  This is explained in
 * somewhat greater detail in the description of the {@link Unit} class.
 <p>
 * <ul>
 * <li> In SBML Level&nbsp;2 (all Versions), there is an additional set of
 * reserved identifiers: <code>substance</code>, <code>volume</code>, <code>area</code>, <code>length</code>, and
 * <code>time.</code>  Using one of these values for the attribute \'id\' of a
 * {@link UnitDefinition} has the effect of redefining the model-wide default units
 * for the corresponding quantities.  The list of special unit names in
 * SBML Level&nbsp;2 is given in the table below:
 * </ul>
 <p>
 *   <table border=\"0\" class=\"centered text-table width80 normal-font alt-row-colors\">
 <tr>
     <th align=\"left\">Identifier</th>
     <th align=\"left\">Possible scalable units</th>
     <th align=\"left\">Default units</th>
 </tr>
<tr><td><code>substance</code></td><td>mole, item, gram, kilogram, dimensionless</td><td>mole</td></tr>
<tr><td><code>volume</code></td><td>litre, cubic metre, dimensionless</td><td>litre</td></tr>
<tr><td><code>area</code></td><td>square metre, dimensionless</td><td>square metre</td></tr>
<tr><td><code>length</code></td><td>metre, dimensionless</td><td>metre</td></tr>
<tr><td><code>time</code></td><td>second, dimensionless</td><td>second</td></tr>
</table>


 <p>
 * Also, SBML Level&nbsp;2 imposes two limitations on redefining the
 * predefined unit <code>substance</code>, <code>volume</code>, <code>area</code>, <code>length</code>, and 
 * <code>time:</code> (1) The {@link UnitDefinition} of a predefined SBML unit can only contain
 * a single {@link Unit} object within it.  (2) The value of the \'kind\' attribute
 * in a {@link Unit} instance must be drawn from one of the values in the second
 * column of the table above.
 <p>
 * The special unit names <code>substance</code>, <code>volume</code>, <code>area</code>, <code>length</code>, and
 * <code>time</code> are not defined by SBML Level&nbsp;3, which uses a different
 * approach to setting model-wide inherited units.
 <p>
 * <h2>Further comments about SBML\'s unit definition system</h2>
 <p>
 * The vast majority of modeling situations requiring new SBML unit
 * definitions involve simple multiplicative combinations of base units and
 * factors.  An example of this might be <em>moles per litre per
 * second</em>.  What distinguishes these sorts of simpler unit definitions
 * from more complex ones is that they may be expressed without the use of
 * an additive offset from a zero point.  The use of offsets complicates
 * all unit definition systems, yet in the domain of SBML the real-life
 * cases requiring offsets are few (and in fact, to the best of our
 * knowledge, only involve temperature).  Consequently, the SBML unit
 * system has been consciously designed in a way that attempts to simplify
 * implementation of unit support for the most common cases in systems
 * biology.
 <p>
 * As of SBML Level&nbsp;2 Version&nbsp;2, {@link Unit} no longer has the
 * attribute called \'offset\' introduced in SBML Level&nbsp;2
 * Version&nbsp;1.  It turned out that the general case involving units
 * with offsets was incorrectly defined, and few (if any) developers even
 * attempted to support offset-based units in their software.  In the
 * development of Level&nbsp;2 Version&nbsp;2, a consensus among SBML
 * developers emerged that a fully generalized unit scheme is <em>so</em>
 * confusing and complicated that it actually <em>impedes</em> interoperability.
 * SBML Level&nbsp;2 Version&nbsp;2, Version&nbsp;3 and Version&nbsp;4 acknowledge this
 * reality by reducing and simplifying the unit system, specifically by
 * removing the \'offset\' attribute on {@link Unit} and <code>Celsius</code> as a pre-defined
 * unit.
 <p>
 * The following guidelines suggest methods for handling units that do
 * require the use of zero offsets for their definitions:
 * <ul>
 * <li> <em>Handling Celsius</em>.  A model in which certain quantities are
 *   temperatures measured in degrees Celsius can be converted
 *   straightforwardly to a model in which those temperatures are in
 *   kelvin.  A software tool could do this by performing a straightforward
 *   substitution using the following relationship: <em>T<sub> kelvin</sub> =
 *   T<sub>Celsius</sub> + 273.15</em>.  In every mathematical formula of the
 *   model where a quantity (call it <em>x</em>) in degrees Celsius appears,
 *   replace <em>x</em> with <em>x<sub>k</sub>+ 273.15</em>, where
 *   <em>x<sub>k</sub></em> is now in kelvin.  An alternative approach would 
 *   be to use a {@link FunctionDefinition} object to define a function encapsulating this
 *   relationship above and then using that in the rest of the model as
 *   needed.  Since Celsius is a commonly-used unit, software tools could
 *   help users by providing users with the ability to express temperatures
 *   in Celsius in the tools\' interfaces, and making substitutions
 *   automatically when writing out the SBML.
 <p>
 * <li> <em>Other units requiring offsets</em>.  One approach to handling
 *   other kinds of units is to use a {@link FunctionDefinition} to define a function
 *   encapsulating the necessary mathematical relationship, then
 *   substituting a call to this function wherever the original quantity
 *   appeared in the model.  For example, here is a possible definition for
 *   converting Fahrenheit to Celsius degrees:
 *   <pre class=\'fragment\'>
 &lt;functionDefinition id=\'Fahrenheit_to_kelvin\'&gt;
     &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt;
         &lt;lambda&gt;
             &lt;bvar&gt;&lt;ci&gt; temp_in_fahrenheit &lt;/ci&gt;&lt;/bvar&gt;
             &lt;apply&gt;
                 &lt;divide/&gt;
                 &lt;apply&gt;
                     &lt;plus/&gt;
                     &lt;ci&gt; temp_in_fahrenheit &lt;/ci&gt;
                     &lt;cn&gt; 459.67 &lt;/cn&gt;
                 &lt;/apply&gt;
                 &lt;cn&gt; 1.8 &lt;/cn&gt;
             &lt;/apply&gt;
         &lt;/lambda&gt;
     &lt;/math&gt;
 &lt;/functionDefinition&gt;
 </pre>
 <p>
 * <li> An alternative approach not requiring the use of function definitions
 *   is to use an {@link AssignmentRule} for each variable in Fahrenheit units.
 *   The {@link AssignmentRule} could compute the conversion from Fahrenheit to
 *   (say) kelvin, assign its value to a variable (in Kelvin units), and
 *   then that variable could be used elsewhere in the model.
 <p>
 * <li> Still another approach is to rewrite the mathematical formulas of a
 *   model to directly incorporate the conversion formula wherever the
 *   original quantity appeared.
 * </ul>
 <p>
 * Please consult the SBML specifications for more information about this
 * and other issues involving units.
 */
"


%typemap(javaimports) ListOfUnitDefinitions "
/** 
 *  A list of {@link UnitDefinition} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers UnitDefinition::UnitDefinition(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link UnitDefinition} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link UnitDefinition}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link UnitDefinition}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers UnitDefinition::UnitDefinition(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link UnitDefinition} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers UnitDefinition::UnitDefinition(const UnitDefinition& orig) "
/**
   * Copy constructor; creates a copy of this {@link UnitDefinition}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers UnitDefinition::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link UnitDefinition}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link UnitDefinition} in the
   * list of units within which this {@link UnitDefinition} is embedded (i.e., in
   * the {@link ListOfUnitDefinitions} located in the enclosing {@link Model} instance).
   */ public
";


%javamethodmodifiers UnitDefinition::clone() const "
/**
   * Creates and returns a deep copy of this {@link UnitDefinition} object.
   <p>
   * @return the (deep) copy of this {@link UnitDefinition} object.
   */ public
";


%javamethodmodifiers UnitDefinition::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id string representing the id of objects to find.
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers UnitDefinition::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given <code>metaid</code>, or
   * <code>null</code> if no such object is found.
   <p>
   * @param metaid string representing the metaid of objects to find
   <p>
   * @return pointer to the first element found with the given <code>metaid</code>.
   */ public
";


%javamethodmodifiers UnitDefinition::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child {@link SBase} objects, including those nested to an
   * arbitrary depth
   <p>
   * @return a List of pointers to all children objects.
   */ public
";


%javamethodmodifiers UnitDefinition::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link UnitDefinition}.
   <p>
   * @return the id of this {@link UnitDefinition}.
   */ public
";


%javamethodmodifiers UnitDefinition::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link UnitDefinition}.
   <p>
   * @return the name of this {@link UnitDefinition}.
   */ public
";


%javamethodmodifiers UnitDefinition::isSetId() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link UnitDefinition}\'s \'id\' attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link UnitDefinition} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::isSetName() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link UnitDefinition}\'s \'name\' attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link UnitDefinition} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link UnitDefinition}.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link UnitDefinition}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers UnitDefinition::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link UnitDefinition}.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link UnitDefinition}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers UnitDefinition::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link UnitDefinition}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers UnitDefinition::isVariantOfArea() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'area\'.</code>
   <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>area</code>, meaning square metres with only abritrary variations
   * in scale or multiplier values; <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::isVariantOfLength() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'length\'.</code>
   <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>length</code>, meaning metres with only abritrary variations in scale
   * or multiplier values; <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::isVariantOfSubstance() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'substance\'.</code>
   <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>substance</code>, meaning moles or items (and grams or kilograms from
   * SBML Level&nbsp;2 Version&nbsp;2 onwards) with only abritrary variations
   * in scale or multiplier values; <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::isVariantOfTime() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'time\'.</code>
   <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>time</code>, meaning seconds with only abritrary variations in scale or
   * multiplier values; <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::isVariantOfVolume() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'volume\'.</code>
   <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>volume</code>, meaning litre or cubic metre with only abritrary
   * variations in scale or multiplier values; <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::isVariantOfDimensionless() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the unit <code>\'dimensionless\'.</code>
   <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of 
   * <code>dimensionless</code>, meaning dimensionless with only abritrary variations in
   * scale or multiplier values; <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::isVariantOfMass() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'mass\'.</code>
   <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of mass units,
   * meaning gram or kilogram with only abritrary variations in scale or
   * multiplier values; <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::isVariantOfSubstancePerTime() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit <code>\'substance\'</code> divided by the predefined
   * unit <code>\'time\'.</code>
   <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>substance</code> per predefined unit <code>time</code>, meaning it contains two
   * units one of which is a variant of substance and the other is a
   * variant of time which an exponent of -1; <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::addUnit(const Unit* u) "
/**
   * Adds a copy of the given {@link Unit} to this {@link UnitDefinition}.
   <p>
   * @param u the {@link Unit} instance to add to this {@link UnitDefinition}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createUnit()
   */ public
";


%javamethodmodifiers UnitDefinition::createUnit "
/**
   * Creates a new and empty {@link Unit}, adds it to this {@link UnitDefinition}\'s list of
   * units, and returns it.
   <p>
   * @return a newly constructed (and empty) {@link Unit} instance.
   <p>
   * @note It is worth emphasizing that the attribute \'kind\' value of a
   * {@link Unit} is a required attribute for a valid {@link Unit} definition.  The
   * createUnit() method does not assign a valid kind to the constructed
   * unit (instead, it sets the \'kind\' to {@link libsbmlConstants#UNIT_KIND_INVALID UNIT_KIND_INVALID}).
   * Callers are cautioned to set the newly-constructed {@link Unit}\'s kind using
   * {@link Unit#setKind(int)} soon after calling this method.
   <p>
   * @see #addUnit(Unit u)
   */ public
";


%javamethodmodifiers UnitDefinition::getListOfUnits() const "
/**
   * Returns the list of Units for this {@link UnitDefinition} instance.
   * @return the {@link ListOfUnits} value for this {@link UnitDefinition}.
   */ public
";


%javamethodmodifiers UnitDefinition::getListOfUnits "
/**
   * Returns the list of Units for this {@link UnitDefinition} instance.
   * @return the {@link ListOfUnits} value for this {@link UnitDefinition}.
   */ public
";


%javamethodmodifiers UnitDefinition::getUnit(unsigned int n) "
/**
   * Returns a specific {@link Unit} instance belonging to this {@link UnitDefinition}.
   <p>
   * @param n an integer, the index of the {@link Unit} to be returned.
   <p>
   * @return the nth {@link Unit} of this {@link UnitDefinition}.
   <p>
   * @see #getNumUnits()
   */ public
";


%javamethodmodifiers UnitDefinition::getUnit "
/**
   * Returns a specific {@link Unit} instance belonging to this {@link UnitDefinition}.
   <p>
   * @param n an integer, the index of the {@link Unit} to be returned.
   <p>
   * @return the nth {@link Unit} of this {@link UnitDefinition}.
   */ public
";


%javamethodmodifiers UnitDefinition::getNumUnits() const "
/**
   * Returns the number of {@link Unit} objects contained within this
   * {@link UnitDefinition}.
   <p>
   * @return an integer representing the number of Units in this
   * {@link UnitDefinition}.
   */ public
";


%javamethodmodifiers UnitDefinition::removeUnit(unsigned int n) "
/**
   * Removes the nth {@link Unit} object from this {@link UnitDefinition} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link Unit} object to remove
   <p>
   * @return the {@link Unit} object removed, or <code>null</code> if the given index 
   * is out of range.
   */ public
";


%javamethodmodifiers UnitDefinition::setSBMLDocument(SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::getTypeCode() const "
/**
   * Returns the libSBML type code for this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_UNIT_DEFINITION SBML_UNIT_DEFINITION} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getPackageName()
   * @see #getElementName()
   */ public
";


%javamethodmodifiers UnitDefinition::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link UnitDefinition},
   * is always <code>\'unitDefinition\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'unitDefinition\'.</code>
   */ public
";


%javamethodmodifiers UnitDefinition::simplify(UnitDefinition * ud) "
/**
   * Simplifies the {@link UnitDefinition} such that any given kind of {@link Unit} object
   * occurs only once in the {@link ListOfUnits}.
   <p>
   * For example, the following definition,
   * <pre class=\'fragment\'>
 &lt;unitDefinition&gt;
  &lt;listOfUnits&gt;
    &lt;unit kind=\'metre\' exponent=\'1\'/&gt;
    &lt;unit kind=\'metre\' exponent=\'2\'/&gt;
  &lt;/listOfUnits&gt;
 &lt;unitDefinition&gt;
 </pre>
   * will be simplified to 
   * <pre class=\'fragment\'>
 &lt;unitDefinition&gt;
   &lt;listOfUnits&gt;
     &lt;unit kind=\'metre\' exponent=\'3\'/&gt;
   &lt;/listOfUnits&gt;
 &lt;unitDefinition&gt;
 </pre>
   <p>
   * @param ud the {@link UnitDefinition} object to be simplified.
   <p>
   * 
   */ public
";


%javamethodmodifiers UnitDefinition::reorder(UnitDefinition * ud) "
/**
   * Alphabetically orders the {@link Unit} objects within the {@link ListOfUnits} of a
   * {@link UnitDefinition}.
   <p>
   * @param ud the {@link UnitDefinition} object whose units are to be reordered.
   <p>
   * 
   */ public
";


%javamethodmodifiers UnitDefinition::convertToSI(const UnitDefinition *ud) "
/**
   * Convert a given {@link UnitDefinition} into a new {@link UnitDefinition} object
   * that uses SI units.
   <p>
   * @param ud the {@link UnitDefinition} object to convert to SI
   <p>
   * @return a new {@link UnitDefinition} object representing the results of the
   * conversion.
   <p>
   * 
   */ public
";


%javamethodmodifiers UnitDefinition::areIdentical(const UnitDefinition * ud1, const UnitDefinition * ud2) "
/**
   * Predicate returning <code>true</code> if two
   * {@link UnitDefinition} objects are identical.
   <p>
   * For the purposes of performing this comparison, two {@link UnitDefinition}
   * objects are considered identical when they contain identical lists of
   * {@link Unit} objects.  Pairs of {@link Unit} objects in the lists are in turn
   * considered identical if they satisfy the predicate
   * {@link Unit#areIdentical(Unit, Unit)}.
   * The predicate compares every attribute of the
   * {@link Unit} objects.
   <p>
   * @param ud1 the first {@link UnitDefinition} object to compare
   * @param ud2 the second {@link UnitDefinition} object to compare
   <p>
   * @return <code>true</code> if all the {@link Unit} objects in ud1 are identical to the
   * {@link Unit} objects of ud2, <code>false</code> otherwise.
   <p>
   * 
   <p>
   * @see UnitDefinition#areEquivalent(UnitDefinition  ud1, UnitDefinition  ud2)
   * @see Unit#areIdentical(Unit  unit1, Unit  unit2)
   */ public
";


%javamethodmodifiers UnitDefinition::areEquivalent(const UnitDefinition *ud1 , const UnitDefinition * ud2) "
/**
   * Predicate returning <code>true</code> if two
   * {@link UnitDefinition} objects are equivalent.
   <p>
   * For the purposes of performing this comparison, two {@link UnitDefinition}
   * objects are considered equivalent when they contain <em>equivalent</em>
   * list of {@link Unit} objects.  {@link Unit} objects are in turn considered equivalent
   * if they satisfy the predicate
   * {@link Unit#areEquivalent(Unit, Unit)}.
   * The predicate tests a subset of the objects\'s attributes.
   <p>
   * @param ud1 the first {@link UnitDefinition} object to compare
   <p>
   * @param ud2 the second {@link UnitDefinition} object to compare
   <p>
   * @return <code>true</code> if all the {@link Unit} objects in ud1 are equivalent
   * to the {@link Unit} objects in ud2, <code>false</code> otherwise.
   <p>
   * 
   <p>
   * @see UnitDefinition#areIdentical(UnitDefinition  ud1, UnitDefinition  ud2)
   * @see Unit#areEquivalent(Unit  unit1, Unit  unit2)
   */ public
";


%javamethodmodifiers UnitDefinition::areIdenticalSIUnits(const UnitDefinition * ud1, const UnitDefinition * ud2) "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::combine(UnitDefinition * ud1, UnitDefinition * ud2) "
/**
   * Combines two {@link UnitDefinition} objects into a single {@link UnitDefinition}.
   <p>
   * This takes {@link UnitDefinition} objects <code>ud1</code> and <code>ud2</code>, and creates a
   * {@link UnitDefinition} object that expresses the product of the units of 
   * <code>ud1</code> and <code>ud2</code>.
   <p>
   * @param ud1 the first {@link UnitDefinition} object 
   * @param ud2 the second {@link UnitDefinition} object
   <p>
   * @return a {@link UnitDefinition} which represents the product of the 
   * units of the two argument UnitDefinitions.
   <p>
   * 
   */ public
";


%javamethodmodifiers UnitDefinition::divide(UnitDefinition * ud1, UnitDefinition * ud2) "
/**
   * Combines two {@link UnitDefinition} objects into a single {@link UnitDefinition} as
   * a division.
   <p>
   * This takes {@link UnitDefinition} objects <code>ud1</code> and <code>ud2</code>, and creates a
   * {@link UnitDefinition} object that expresses the division of the units of 
   * <code>ud1</code> and <code>ud2</code>.
   <p>
   * @param ud1 the first {@link UnitDefinition} object 
   * @param ud2 the second {@link UnitDefinition} object
   <p>
   * @return a {@link UnitDefinition} which represents the division of the 
   * units of the two argument UnitDefinitions.
   <p>
   * 
   */ public
";


%javamethodmodifiers UnitDefinition::printUnits(const UnitDefinition * ud, bool compact = false) "
/**
   * Expresses the given definition in a plain-text form.
   <p>
   * For example,
   * {@link UnitDefinition#printUnits(UnitDefinition)}
   * applied to
   * <pre class=\'fragment\'>
 &lt;unitDefinition&gt;
  &lt;listOfUnits&gt;
    &lt;unit kind=\'metre\' exponent=\'1\'/&gt;
    &lt;unit kind=\'second\' exponent=\'-2\'/&gt;
  &lt;/listOfUnits&gt;
 &lt;unitDefinition&gt;
 </pre>
   * will return the string <code>\'metre (exponent = 1, multiplier = 1,
   * scale = 0) second (exponent = -2, multiplier = 1, scale = 0)\'</code>
   * or, if the optional parameter <code>compact</code> is given the value <code>true</code>,
   * the string <code>\'(1 metre)^1 (1 second)^-2\'</code>.  This method may
   * be useful for printing unit information to human users, or in
   * debugging software, or other situations.
   <p>
   * @param ud the {@link UnitDefinition} object
   * @param compact boolean indicating whether the compact form
   * should be used (defaults to false)
   <p>
   * @return a string expressing the unit definition defined by the given
   * {@link UnitDefinition} object <code>ud</code>.
   <p>
   * 
   */ public
";


%javamethodmodifiers UnitDefinition::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link UnitDefinition} object
   * have been set.
   <p>
   * The required attributes for a {@link UnitDefinition} object are:
   * <ul>
   * <li> \'id\'
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers UnitDefinition::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link UnitDefinition} object
   * have been set.
   <p>
   * @note The required elements for a {@link Constraint} object are:
   * <ul>
   * <li> \'listOfUnits\' (required in SBML Level&nbsp;2 only, optional in Level&nbsp;3)
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers UnitDefinition::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers UnitDefinition::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOfUnitDefinitions::ListOfUnitDefinitions(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfUnitDefinitions} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::ListOfUnitDefinitions(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfUnitDefinitions} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfUnitDefinitions} object to be created.
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfUnitDefinitions} object.
   <p>
   * @return the (deep) copy of this {@link ListOfUnitDefinitions} object.
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link UnitDefinition} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for objects contained in this list:
   * {@link libsbmlConstants#SBML_UNIT_DEFINITION SBML_UNIT_DEFINITION} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfUnitDefinitions}, the XML element name is 
   * <code>\'listOfUnitDefinitions\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfUnitDefinitions\'.</code>
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::get(unsigned int n) "
/**
   * Get a {@link UnitDefinition} from the {@link ListOfUnitDefinitions}.
   <p>
   * @param n the index number of the {@link UnitDefinition} to get.
   <p>
   * @return the nth {@link UnitDefinition} in this {@link ListOfUnitDefinitions}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::get "
/**
   * Get a {@link UnitDefinition} from the {@link ListOfUnitDefinitions}.
   <p>
   * @param n the index number of the {@link UnitDefinition} to get.
   <p>
   * @return the nth {@link UnitDefinition} in this {@link ListOfUnitDefinitions}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::get(const std::string& sid) "
/**
   * Get a {@link UnitDefinition} from the {@link ListOfUnitDefinitions}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link UnitDefinition} to get.
   <p>
   * @return {@link UnitDefinition} in this {@link ListOfUnitDefinitions}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link UnitDefinition} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::get(const std::string& sid) const "
/**
   * Get a {@link UnitDefinition} from the {@link ListOfUnitDefinitions}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link UnitDefinition} to get.
   <p>
   * @return {@link UnitDefinition} in this {@link ListOfUnitDefinitions}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link UnitDefinition} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * Note that UnitDefinitions themselves are in the UnitId namespace, not
   * the SId namespace, so no {@link UnitDefinition} object will be returned from
   * this function (and is the reason we override the base
   * ListOf.getElementBySId function here).
   <p>
   * @param id string representing the id of objects to find
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfUnitDefinitions} items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfUnitDefinitions} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfUnitDefinitions::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfUnitDefinitions::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) CompartmentType "
/** 
 *  A <em>compartment type</em> in SBML Level&nbsp;2.
 <p>
 * SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 provide the <em>compartment
 * type</em> as a grouping construct that can be used to establish a
 * relationship between multiple {@link Compartment} objects.  A {@link CompartmentType}
 * object only has an identity, and this identity can only be used to
 * indicate that particular {@link Compartment} objects in the model belong to this
 * type.  This may be useful for conveying a modeling intention, such as
 * when a model contains many similar compartments, either by their
 * biological function or the reactions they carry.  Without a compartment
 * type construct, it would be impossible within SBML itself to indicate
 * that all of the compartments share an underlying conceptual relationship
 * because each SBML compartment must be given a unique and separate
 * identity.  {@link Compartment} types have no mathematical meaning in
 * SBML&mdash;they have no effect on a model\'s mathematical interpretation.
 * Simulators and other numerical analysis software may ignore
 * {@link CompartmentType} definitions and references to them in a model.
 <p>
 * There is no mechanism in SBML Level 2 for representing hierarchies of
 * compartment types.  One {@link CompartmentType} instance cannot be the subtype
 * of another {@link CompartmentType} instance; SBML provides no means of defining
 * such relationships.
 <p>
 * As with other major structures in SBML, {@link CompartmentType} has a mandatory
 * attribute, \'id\', used to give the compartment type an identifier.  The
 * identifier must be a text string conforming to the identifer syntax
 * permitted in SBML.  {@link CompartmentType} also has an optional \'name\'
 * attribute, of type <code>string.</code>  The \'id\' and \'name\' must be used
 * according to the guidelines described in the SBML specification (e.g.,
 * Section 3.3 in the Level 2 Version 4 specification).
 <p>
 * {@link CompartmentType} was introduced in SBML Level 2 Version 2.  It is not
 * available in SBML Level&nbsp;1 nor in Level&nbsp;3.
 <p>
 * @see Compartment
 * @see ListOfCompartmentTypes
 * @see SpeciesType
 * @see ListOfSpeciesTypes
 */
"


%typemap(javaimports) ListOfCompartmentTypes "
/** 
 *  A list of {@link CompartmentType} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers CompartmentType::CompartmentType(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link CompartmentType} object using the given SBML <code>level</code> and
   * <code>version</code> values.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link CompartmentType}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link CompartmentType}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers CompartmentType::CompartmentType(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link CompartmentType} object using the given {@link SBMLNamespaces}
   * object <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * It is worth emphasizing that although this constructor does not take an
   * identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link CompartmentType} object is required to have a
   * value.  Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method setId(String).
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers CompartmentType::CompartmentType(const CompartmentType& orig) "
/**
   * Copy constructor; creates a copy of this {@link CompartmentType} object.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers CompartmentType::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link CompartmentType}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link CompartmentType} object in
   * the list of compartment types.
   */ public
";


%javamethodmodifiers CompartmentType::clone() const "
/**
   * Creates and returns a deep copy of this {@link CompartmentType} object.
   <p>
   * @return the (deep) copy of this {@link CompartmentType} object.
   */ public
";


%javamethodmodifiers CompartmentType::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link CompartmentType} object.
   <p>
   * @return the identifier of this {@link CompartmentType} object.
   <p>
   * @see #getName()
   * @see #setId(String)
   * @see #unsetId()
   * @see #isSetId()
   */ public
";


%javamethodmodifiers CompartmentType::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link CompartmentType}
   * object.
   <p>
   * @return the name of this {@link CompartmentType} object.
   <p>
   * @see #getId()
   * @see #isSetName()
   * @see #setName(String)
   * @see #unsetName()
   */ public
";


%javamethodmodifiers CompartmentType::isSetId() const "
/**
   * Predicate returning <code>true</code> if this {@link CompartmentType} object\'s \'id\'
   * attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link CompartmentType} object is
   * set, <code>false</code> otherwise.
   <p>
   * @see #getId()
   * @see #unsetId()
   * @see #setId(String)
   */ public
";


%javamethodmodifiers CompartmentType::isSetName() const "
/**
   * Predicate returning <code>true</code> if this {@link CompartmentType} object\'s \'name\'
   * attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link CompartmentType} object
   * is set, <code>false</code> otherwise.
   <p>
   * @see #getName()
   * @see #setName(String)
   * @see #unsetName()
   */ public
";


%javamethodmodifiers CompartmentType::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link CompartmentType} object.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link CompartmentType}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @see #getId()
   * @see #unsetId()
   * @see #isSetId()
   */ public
";


%javamethodmodifiers CompartmentType::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link CompartmentType} object.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link CompartmentType}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @see #getName()
   * @see #isSetName()
   * @see #unsetName()
   */ public
";


%javamethodmodifiers CompartmentType::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link CompartmentType} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #getName()
   * @see #setName(String)
   * @see #isSetName()
   */ public
";


%javamethodmodifiers CompartmentType::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_COMPARTMENT_TYPE SBML_COMPARTMENT_TYPE} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers CompartmentType::getElementName() const "
/**
   * Returns the XML element name of this object
   <p>
   * For {@link CompartmentType}, the element name is always <code>\'compartmentType\'.</code>
   <p>
   * @return the name of this element.
   <p>
   * @see #getTypeCode()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers CompartmentType::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers CompartmentType::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link CompartmentType} object have been set.
   <p>
   * The required attributes for a {@link CompartmentType} object are:
   * <ul>
   * <li> \'id\'
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers CompartmentType::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers CompartmentType::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers CompartmentType::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers CompartmentType::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOfCompartmentTypes::ListOfCompartmentTypes(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfCompartmentTypes} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::ListOfCompartmentTypes(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfCompartmentTypes} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfCompartmentTypes} object to be created.
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfCompartmentTypes} object.
   <p>
   * @return the (deep) copy of this {@link ListOfCompartmentTypes} object.
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link CompartmentType} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance: {@link libsbmlConstants#SBML_COMPARTMENT_TYPE SBML_COMPARTMENT_TYPE} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfCompartmentTypes}, the XML element name is 
   * <code>\'listOfCompartmentTypes\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfCompartmentTypes\'.</code>
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::get(unsigned int n) "
/**
   * Get a {@link CompartmentType} object from the {@link ListOfCompartmentTypes}.
   <p>
   * @param n the index number of the {@link CompartmentType} object to get.
   <p>
   * @return the nth {@link CompartmentType} object in this {@link ListOfCompartmentTypes}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::get "
/**
   * Get a {@link CompartmentType} object from the {@link ListOfCompartmentTypes}.
   <p>
   * @param n the index number of the {@link CompartmentType} object to get.
   <p>
   * @return the nth {@link CompartmentType} object in this {@link ListOfCompartmentTypes}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::get(const std::string& sid) "
/**
   * Get a {@link CompartmentType} object from the {@link ListOfCompartmentTypes}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier
   * of the {@link CompartmentType} object to get.
   <p>
   * @return {@link CompartmentType} object in this {@link ListOfCompartmentTypes}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link CompartmentType} object exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::get(const std::string& sid) const "
/**
   * Get a {@link CompartmentType} object from the {@link ListOfCompartmentTypes}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier
   * of the {@link CompartmentType} object to get.
   <p>
   * @return {@link CompartmentType} object in this {@link ListOfCompartmentTypes}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link CompartmentType} object exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfCompartmentTypes} items
   * and returns a pointer to it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfCompartmentTypes} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfCompartmentTypes::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfCompartmentTypes::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) SpeciesType "
/** 
 *  A <em>species type</em> in SBML Level 2.
 <p>
 * The term <em>species</em> <em>type</em> refers to reacting entities independent of
 * location.  These include simple ions (e.g., protons, calcium), simple
 * molecules (e.g., glucose, ATP), large molecules (e.g., RNA,
 * polysaccharides, and proteins), and others.
 <p>
 * SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 provide an explicit
 * {@link SpeciesType} class of object to enable {@link Species} objects of the same type
 * to be related together.  {@link SpeciesType} is a conceptual construct; the
 * existence of {@link SpeciesType} objects in a model has no effect on the model\'s
 * numerical interpretation.  Except for the requirement for uniqueness of
 * species/species type combinations located in compartments, simulators
 * and other numerical analysis software may ignore {@link SpeciesType} definitions
 * and references to them in a model.
 <p>
 * There is no mechanism in SBML Level 2 for representing hierarchies of
 * species types.  One {@link SpeciesType} object cannot be the subtype of another
 * {@link SpeciesType} object; SBML provides no means of defining such
 * relationships.
 <p>
 * As with other major structures in SBML, {@link SpeciesType} has a mandatory
 * attribute, \'id\', used to give the species type an identifier.  The
 * identifier must be a text string conforming to the identifer syntax
 * permitted in SBML.  {@link SpeciesType} also has an optional \'name\' attribute,
 * of type <code>string.</code>  The \'id\' and \'name\' must be used according to the
 * guidelines described in the SBML specification (e.g., Section 3.3 in
 * the Level&nbsp;2 Version&nbsp;4 specification).
 <p>
 * {@link SpeciesType} was introduced in SBML Level 2 Version 2.  It is not
 * available in SBML Level&nbsp;1 nor in Level&nbsp;3.
 <p>
 * @see Species
 * @see ListOfSpeciesTypes
 * @see CompartmentType
 * @see ListOfCompartmentTypes
 */
"


%typemap(javaimports) ListOfSpeciesTypes "
/** 
 *  A list of {@link SpeciesType} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers SpeciesType::SpeciesType(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link SpeciesType} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link SpeciesType}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link SpeciesType}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers SpeciesType::SpeciesType(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link SpeciesType} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link SpeciesType} object is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method {@link SBase#setId(String)}.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers SpeciesType::SpeciesType(const SpeciesType& orig) "
/**
   * Copy constructor; creates a copy of this {@link SpeciesType}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers SpeciesType::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link SpeciesType}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link SpeciesType} in
   * the list of compartment types.
   */ public
";


%javamethodmodifiers SpeciesType::clone() const "
/**
   * Creates and returns a deep copy of this {@link SpeciesType} object.
   <p>
   * @return the (deep) copy of this {@link SpeciesType} object.
   */ public
";


%javamethodmodifiers SpeciesType::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link SpeciesType}.
   <p>
   * @return the id of this {@link SpeciesType}.
   */ public
";


%javamethodmodifiers SpeciesType::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link SpeciesType}.
   <p>
   * @return the name of this {@link SpeciesType}.
   */ public
";


%javamethodmodifiers SpeciesType::isSetId() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesType}\'s \'id\' attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link SpeciesType} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SpeciesType::isSetName() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesType}\'s \'name\' attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link SpeciesType} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SpeciesType::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link SpeciesType}.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link SpeciesType}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers SpeciesType::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link SpeciesType}.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link SpeciesType}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers SpeciesType::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link SpeciesType}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers SpeciesType::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_SPECIES_TYPE SBML_SPECIES_TYPE} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers SpeciesType::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * {@link SpeciesType}, is always <code>\'compartmentType\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'compartmentType\'.</code>
   */ public
";


%javamethodmodifiers SpeciesType::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SpeciesType::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link SpeciesType} object
   * have been set.
   <p>
   * The required attributes for a {@link SpeciesType} object are:
   * <ul>
   * <li> \'id\'
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SpeciesType::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesType::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesType::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesType::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOfSpeciesTypes::ListOfSpeciesTypes(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfSpeciesTypes} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::ListOfSpeciesTypes(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfSpeciesTypes} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfSpeciesTypes} object to be created.
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfSpeciesTypes} object.
   <p>
   * @return the (deep) copy of this {@link ListOfSpeciesTypes} object.
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link SpeciesType} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for objects contained in this list:
   * {@link libsbmlConstants#SBML_SPECIES_TYPE SBML_SPECIES_TYPE} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfSpeciesTypes}, the XML element name is 
   * <code>\'listOfSpeciesTypes\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfSpeciesTypes\'.</code>
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::get(unsigned int n) "
/**
   * Get a {@link SpeciesType} from the {@link ListOfSpeciesTypes}.
   <p>
   * @param n the index number of the {@link SpeciesType} to get.
   <p>
   * @return the nth {@link SpeciesType} in this {@link ListOfSpeciesTypes}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::get "
/**
   * Get a {@link SpeciesType} from the {@link ListOfSpeciesTypes}.
   <p>
   * @param n the index number of the {@link SpeciesType} to get.
   <p>
   * @return the nth {@link SpeciesType} in this {@link ListOfSpeciesTypes}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::get(const std::string& sid) "
/**
   * Get a {@link SpeciesType} from the {@link ListOfSpeciesTypes}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link SpeciesType} to get.
   <p>
   * @return {@link SpeciesType} in this {@link ListOfSpeciesTypes}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link SpeciesType} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::get(const std::string& sid) const "
/**
   * Get a {@link SpeciesType} from the {@link ListOfSpeciesTypes}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link SpeciesType} to get.
   <p>
   * @return {@link SpeciesType} in this {@link ListOfSpeciesTypes}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link SpeciesType} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfSpeciesTypes} items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfSpeciesTypes} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfSpeciesTypes::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfSpeciesTypes::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) Compartment "
/** 
 *  An SBML compartment, where species are located.
 <p>
 * A compartment in SBML represents a bounded space in which species are
 * located.  Compartments do not necessarily have to correspond to actual
 * structures inside or outside of a biological cell.
 <p>
 * It is important to note that although compartments are optional in the
 * overall definition of {@link Model}, every species in an SBML model must be
 * located in a compartment.  This in turn means that if a model defines
 * any species, the model must also define at least one compartment.  The
 * reason is simply that species represent physical things, and therefore
 * must exist <em>somewhere</em>.  Compartments represent the <em>somewhere</em>.
 <p>
 * {@link Compartment} has one required attribute, \'id\', to give the compartment a
 * unique identifier by which other parts of an SBML model definition can
 * refer to it.  A compartment can also have an optional \'name\' attribute
 * of type <code>string.</code>  Identifiers and names must be used according to the
 * guidelines described in the SBML specifications.
 <p>
 * {@link Compartment} also has an optional attribute \'spatialDimensions\' that is
 * used to indicate the number of spatial dimensions possessed by the
 * compartment.  Most modeling scenarios involve compartments with integer
 * values of \'spatialDimensions\' of <code>3</code> (i.e., a three-dimensional
 * compartment, which is to say, a volume), or 2 (a two-dimensional
 * compartment, a surface), or <code>1</code> (a one-dimensional compartment, a
 * line).  In SBML Level&nbsp;3, the type of this attribute is <code>double</code>,
 * there are no restrictions on the permitted values of the
 * \'spatialDimensions\' attribute, and there are no default values.  In SBML
 * Level&nbsp;2, the value must be a positive <code>integer</code>, and the default
 * value is <code>3</code>; the permissible values in SBML Level&nbsp;2 are <code>3</code>, 
 * <code>2</code>, <code>1</code>, and <code>0</code> (for a point).
 <p>
 * Another optional attribute on {@link Compartment} is \'size\', representing the 
 * <em>initial</em> total size of that compartment in the model.  The \'size\' attribute
 * must be a floating-point value and may represent a volume (if the
 * compartment is a three-dimensional one), or an area (if the compartment is
 * two-dimensional), or a length (if the compartment is one-dimensional).
 * There is no default value of compartment size in SBML Level&nbsp;2 or
 * Level&nbsp;3.  In particular, a missing \'size\' value <em>does not imply
 * that the compartment size is 1</em>.  (This is unlike the definition of
 * compartment \'volume\' in SBML Level&nbsp;1.)  When the compartment\'s
 * \'spatialDimensions\' attribute does not have a value of <code>0</code>, a missing
 * value of \'size\' for a given compartment signifies that the value either is
 * unknown, or to be obtained from an external source, or determined by an
 * {@link InitialAssignment}, {@link AssignmentRule}, {@link AlgebraicRule} or {@link RateRule}
 * object elsewhere in the model.  In SBML
 * Level&nbsp;2, there are additional special requirements on the values of
 * \'size\'; we discuss them in a <a href=\'#comp-l2\'>separate section
 * below</a>.
 <p>
 * The units associated with a compartment\'s \'size\' attribute value may be
 * set using the optional attribute \'units\'.  The rules for setting and
 * using compartment size units differ between SBML Level&nbsp;2 and
 * Level&nbsp;3, and are discussed separately below.
 <p>
 * Finally, the optional {@link Compartment} attribute named \'constant\' is used to
 * indicate whether the compartment\'s size stays constant after simulation
 * begins.  A value of <code>true</code> indicates the compartment\'s \'size\' cannot be
 * changed by any other construct except {@link InitialAssignment}; a value of 
 * <code>false</code> indicates the compartment\'s \'size\' can be changed by other
 * constructs in SBML.  In SBML Level&nbsp;2, there is an additional
 * explicit restriction that if \'spatialDimensions\'=<code>\'0\'</code>, the value
 * cannot be changed by {@link InitialAssignment} either.  Further, in
 * Level&nbsp;2, \'constant\' has a default value of <code>true.</code>  In SBML
 * Level&nbsp;3, there is no default value for the \'constant\' attribute.
 <p>
 * <h2>Additional considerations in SBML Level&nbsp;2</h2>
 <p>
 * In SBML Level&nbsp;2, the default units of compartment size, and the kinds
 * of units allowed as values of the attribute \'units\', interact with the
 * number of spatial dimensions of the compartment.  The value of the \'units\'
 * attribute of a {@link Compartment} object must
 * be one of the base units (see {@link Unit}), or the predefined unit identifiers 
 * <code>volume</code>, <code>area</code>, <code>length</code> or <code>dimensionless</code>, or a new unit defined by a
 * {@link UnitDefinition} object in the enclosing
 * {@link Model}, subject to the restrictions detailed in the following table:
 <p>
 * <table border=\'0\' class=\'centered text-table width80 normal-font alt-row-colors\'
 *        style=\'padding-bottom: 0.5em\'>
 * <caption class=\'top-caption\'>Restrictions on values permitted for
 * compartment <code>size</code> and <code>units</code> attributes.</caption>
 *  <tr>
 *      <th align=\'left\' valign=\'bottom\'>
 *        Value of<br><code>spatialDimensions</code>
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 *        <code>size</code><br>allowed?
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 *        <code>units</code><br>allowed?
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 * 	  Allowable kinds of units
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 * 	  Default value of attribute <code>units</code>
 *      </th>
 *  </tr>
 *  <tr>
 *      <td><code>3</code></td>
 *      <td>yes</td>
 *      <td>yes</td>
 *      <td>units of volume, or <code>dimensionless</code></td>
 *      <td><code>volume</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>2</code></td>
 *      <td>yes</td>
 *      <td>yes</td>
 *      <td>units of area, or <code>dimensionless</code></td>
 *      <td><code>area</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>1</code></td>
 *      <td>yes</td>
 *      <td>yes</td>
 *      <td>units of length, or <code>dimensionless</code></td>
 *      <td><code>length</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>0</code></td>
 *      <td>no</td>
 *      <td>no</td>
 *      <td>(no units allowed)</td>
 *      <td></td>
 *  </tr>
 *  </tr>
 * </table>
 <p>
 * In SBML Level&nbsp;2, the units of the compartment size, as defined by the
 * \'units\' attribute or (if \'units\' is not set) the default value listed in
 * the table above, are used in the following ways when the compartment has
 * a \'spatialDimensions\' value greater than <code>0:</code>
 * <ul>
 * <li> The value of the \'units\' attribute is used as the units of the
 * compartment identifier when the identifier appears as a numerical
 * quantity in a mathematical formula expressed in MathML.
 <p>
 * <li> The <code>math</code> element of an {@link AssignmentRule} or {@link InitialAssignment}
 * referring to this compartment must have identical units.
 <p>
 * <li> In {@link RateRule} objects that set the rate of change of the compartment\'s
 * size, the units of the rule\'s <code>math</code> element must be identical to the
 * compartment\'s \'units\' attribute divided by the default <em>time</em> units.
 * (In other words, the units for the rate of change of compartment size
 * are <em>compartment size</em>/<em>time</em> units.
 <p>
 * <li> When a {@link Species} is to be treated in terms of concentrations or
 * density, the units of the spatial size portion of the concentration
 * value (i.e., the denominator in the units formula <em>substance</em>/
 * <em>size</em>) are those indicated by the value of the \'units\' attribute on the
 * compartment in which the species is located.
 * </ul>
 <p>
 * Compartments with \'spatialDimensions\'=<code>0</code> require special treatment in
 * this framework.  As implied above, the \'size\' attribute must not have a
 * value on an SBML Level&nbsp;2 {@link Compartment}
 * object if the \'spatialDimensions\'
 * attribute has a value of <code>0.</code>  An additional related restriction is that
 * the \'constant\' attribute must default to or be set to <code>true</code> if the value
 * of the \'spatialDimensions\' attribute is <code>0</code>, because a zero-dimensional
 * compartment cannot ever have a size.
 <p>
 * If a compartment has no size or dimensional units, how should such a
 * compartment\'s identifier be interpreted when it appears in mathematical
 * formulas?  The answer is that such a compartment\'s identifier should not
 * appear in mathematical formulas in the first place&mdash;it has no
 * value, and its value cannot change.  Note also that a zero-dimensional
 * compartment is a point, and species located at points can only be
 * described in terms of amounts, not spatially-dependent measures such as
 * concentration.  Since SBML {@link KineticLaw} formulas are already in terms of
 * <em>substance</em>/<em>time</em> and not (say) <em>concentration</em>/<em>time</em>, volume
 * or other factors in principle are not needed for species located in
 * zero-dimensional compartments.
 <p>
 * Finally, in SBML Level&nbsp;2 Versions 2&ndash;4, each compartment in a
 * model may optionally be designated as belonging to a particular
 * compartment <em>type</em>.  The optional attribute \'compartmentType\' is used
 * identify the compartment type represented by the {@link Compartment} structure.
 * The \'compartmentType\' attribute\'s value must be the identifier of a
 * {@link CompartmentType} instance defined in the model.  If the \'compartmentType\'
 * attribute is not present on a particular compartment definition, a
 * unique virtual compartment type is assumed for that compartment, and no
 * other compartment can belong to that compartment type.  The values of
 * \'compartmentType\' attributes on compartments have no effect on the
 * numerical interpretation of a model.  Simulators and other numerical
 * analysis software may ignore \'compartmentType\' attributes.  The
 * \'compartmentType\' attribute and the {@link CompartmentType}
 * class of objects are
 * not present in SBML Level&nbsp;3 Core nor in SBML Level&nbsp;1.
 <p>
 * <h2>Additional considerations in SBML Level&nbsp;3</h2>
 <p>
 * One difference between SBML Level&nbsp;3 and lower Levels of SBML is
 * that there are no restrictions on the permissible values of the
 * \'spatialDimensions\' attribute, and there is no default value defined for
 * the attribute.  The value of \'spatialDimensions\' does not have to be an
 * integer, either; this is to allow for the possibility of representing
 * structures with fractal dimensions.
 <p>
 * The number of spatial dimensions possessed by a compartment cannot enter
 * into mathematical formulas, and therefore cannot directly alter the
 * numerical interpretation of a model.  However, the value of
 * \'spatialDimensions\' <em>does</em> affect the interpretation of the units
 * associated with a compartment\'s size.  Specifically, the value of
 * \'spatialDimensions\' is used to select among the {@link Model} attributes
 * \'volumeUnits\', \'areaUnits\' and \'lengthUnits\' when a {@link Compartment}
 * structure does not define a value for its
 * \'units\' attribute.
 <p>
 * The \'units\' attribute may be left unspecified for a given compartment in a
 * model; in that case, the compartment inherits the unit of measurement
 * specified by one of the attributes on the enclosing {@link Model}
 * object instance.  The applicable
 * attribute on {@link Model} depends on the value of the compartment\'s
 * \'spatialDimensions\' attribute; the relationship is shown in the table
 * below.  If the {@link Model} object does not
 * define the relevant attribute (\'volumeUnits\', \'areaUnits\' or
 * \'lengthUnits\') for a given \'spatialDimensions\' value, the unit associated
 * with that {@link Compartment} object\'s size is
 * undefined.  If <em>both</em> \'spatialDimensions\' and \'units\' are left unset on
 * a given {@link Compartment} object instance,
 * then no unit can be chosen from among the {@link Model}\'s \'volumeUnits\',
 * \'areaUnits\' or \'lengthUnits\' attributes (even if the {@link Model} instance
 * provides values for those attributes), because there is no basis to select
 * between them and there is no default value of \'spatialDimensions\'.
 * Leaving the units of compartments\' sizes undefined in an SBML model does
 * not render the model invalid; however, as a matter of best practice, we
 * strongly recommend that all models specify the units of measurement for
 * all compartment sizes.
 <p>
 * <table border=\'0\' class=\'centered text-table width80 normal-font alt-row-colors\'
 *        style=\'padding-bottom: 0.5em\'>
 * <caption class=\'top-caption\'>Interpretation of the {@link Compartment} \'units\' attribute.</caption>
 *  <tr>
 *      <th align=\'left\' valign=\'bottom\'>
 *        Value of attribute<br>\'spatialDimensions\'
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 *        Attribute of {@link Model} used<br>for inheriting the unit
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 *        Recommended candidate units
 *      </th>
 *  </tr>
 *  <tr>
 *      <td><code>3</code></td>
 *      <td>&quot;volumeUnits&quot;</td>
 *      <td>units of volume, or <code>dimensionless</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>2</code></td>
 *      <td>&quot;areaUnits&quot;</td>
 *      <td>units of area, or <code>dimensionless</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>1</code></td>
 *      <td>&quot;lengthUnits&quot;</td>
 *      <td>units of length, or <code>dimensionless</code></td>
 *  </tr>
 *  <tr>
 *      <td><em>other</em></td>
 *      <td><em>no units inherited</em></td>
 *      <td><em>no specific recommendations</em></td>
 *  </tr>
 *  </tr>
 * </table>
 <p>
 * The unit of measurement associated with a compartment\'s size, as defined
 * by the \'units\' attribute or (if \'units\' is not set) the inherited value
 * from {@link Model} according to the table above, is used in the following ways:
 <p>
 * <ul>
 <p>
 * <li> When the identifier of the compartment appears as a numerical
 * quantity in a mathematical formula expressed in MathML, it represents
 * the size of the compartment, and the unit associated with the size is
 * the value of the \'units\' attribute.
 <p>
 * <li> When a {@link Species} is to be treated in terms of concentrations or
 * density, the unit associated with the spatial size portion of the
 * concentration value (i.e., the denominator in the formula
 * <em>amount</em>/<em>size</em>) is specified by the value of the \'units\'
 * attribute on the compartment in which the species is located.
 <p>
 * <li> The \'math\' elements of {@link AssignmentRule}, {@link InitialAssignment} and
 * {@link EventAssignment} objects setting the
 * value of the compartment size should all have the same units as the unit
 * associated with the compartment\'s size.
 <p>
 * <li> In a {@link RateRule} object that defines a
 * rate of change for a compartment\'s size, the unit of the rule\'s \'math\'
 * element should be identical to the compartment\'s \'units\' attribute divided
 * by the model-wide unit of <em>time</em>.  (In other words, {<em>unit of
 * compartment size</em>}/{<em>unit of time</em>}.)
 <p>
 * </ul>
 <p>
 * <h2>Other aspects of {@link Compartment}</h2>
 <p>
 * In SBML Level&nbsp;1 and Level&nbsp;2, {@link Compartment} has an optional
 * attribute named \'outside\', whose value can be the identifier of another
 * {@link Compartment} object defined in the
 * enclosing {@link Model} object.  Doing so means
 * that the other compartment contains it or is outside of it.  This enables
 * the representation of simple topological relationships between
 * compartments, for those simulation systems that can make use of the
 * information (e.g., for drawing simple diagrams of compartments).  It is
 * worth noting that in SBML, there is no relationship between compartment
 * sizes when compartment positioning is expressed using the \'outside\'
 * attribute.  The size of a given compartment does not in any sense include
 * the sizes of other compartments having it as the value of their \'outside\'
 * attributes.  In other words, if a compartment <em>B</em> has the identifier of
 * compartment <em>A</em> as its \'outside\' attribute value, the size of <em>A</em> does
 * not include the size of <em>B</em>.  The compartment sizes are separate.
 <p>
 * In Level&nbsp;2, there are two restrictions on the \'outside\' attribute.
 * First, because a compartment with \'spatialDimensions\' of <code>0</code> has no
 * size, such a compartment cannot act as the container of any other
 * compartment <em>except</em> compartments that <em>also</em> have
 * \'spatialDimensions\' values of <code>0.</code>  Second, the directed graph formed
 * by representing {@link Compartment} structures as vertexes and the \'outside\'
 * attribute values as edges must be acyclic.  The latter condition is
 * imposed to prevent a compartment from being contained inside itself.  In
 * the absence of a value for \'outside\', compartment definitions in SBML
 * Level&nbsp;2 do not have any implied spatial relationships between each
 * other.
 */
"


%typemap(javaimports) ListOfCompartments "
/** 
 *  A list of {@link Compartment} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers Compartment::Compartment(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Compartment} object using the given SBML <code>level</code> and 
   * <code>version</code> values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Compartment}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Compartment}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Compartment::Compartment(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Compartment} object using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * It is worth emphasizing that although this constructor does not take an
   * identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link Compartment} object is required to have a
   * value.  Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method {@link Compartment#setId(String id)}.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Compartment::Compartment(const Compartment& orig) "
/**
   * Copy constructor.
   <p>
   * This creates a copy of a {@link Compartment} object.
   <p>
   * @param orig the {@link Compartment} instance to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Compartment::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Compartment}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Compartment} object in the
   * list of compartments within which this {@link Compartment} object is embedded (i.e.,
   * the {@link ListOfCompartments} in the parent {@link Model}).
   */ public
";


%javamethodmodifiers Compartment::clone() const "
/**
   * Creates and returns a deep copy of this {@link Compartment} object.
   <p>
   * @return the (deep) copy of this {@link Compartment} object.
   */ public
";


%javamethodmodifiers Compartment::initDefaults "
/**
   * Initializes the fields of this {@link Compartment} object to \'typical\' default
   * values.
   <p>
   * The SBML {@link Compartment} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   <p>
   * <ul>
   * <li> Sets attribute \'spatialDimensions\' to <code>3</code>
   * <li> Sets attribute \'constant\' to <code>true</code>
   * <li> (Applies to Level&nbsp;1 models only) Sets attribute \'volume\' to <code>1.0</code>
   * <li> (Applies to Level&nbsp;3 models only) Sets attribute \'units\' to <code>litre</code>
   * </ul>
   */ public
";


%javamethodmodifiers Compartment::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link Compartment} object.
   <p>
   * @return the identifier of this {@link Compartment} object.
   <p>
   * @see #getName()
   * @see #setId(String)
   * @see #unsetId()
   * @see #isSetId()
   */ public
";


%javamethodmodifiers Compartment::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link Compartment} object.
   <p>
   * @return the name of this {@link Compartment} object.
   <p>
   * @see #getId()
   * @see #isSetName()
   * @see #setName(String)
   * @see #unsetName()
   */ public
";


%javamethodmodifiers Compartment::getCompartmentType() const "
/**
   * Get the value of the \'compartmentType\' attribute of this {@link Compartment}
   * object.
   <p>
   * @return the value of the \'compartmentType\' attribute of this
   * {@link Compartment} object as a string.
   <p>
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   <p>
   * @see #isSetCompartmentType()
   * @see #setCompartmentType(String)
   * @see #unsetCompartmentType()
   */ public
";


%javamethodmodifiers Compartment::getSpatialDimensions() const "
/**
   * Get the number of spatial dimensions of this {@link Compartment} object.
   <p>
   * @return the value of the \'spatialDimensions\' attribute of this
   * {@link Compartment} object as a long integereger
   <p>
   * <p>
 * @note In SBML Level&nbsp;3, the data type of the \'spatialDimensions\'
 * attribute is <code>double</code>, whereas in Level&nbsp;2, it is <code>integer.</code>  To
 * avoid backward compatibility issues, libSBML provides two separate methods
 * for obtaining the value as either an integer or a type <code>double</code>, for
 * models where it is relevant.
   <p>
   * @see #getSpatialDimensionsAsDouble()
   * @see #setSpatialDimensions(long)
   * @see #isSetSpatialDimensions()
   * @see #unsetSpatialDimensions()
   */ public
";


%javamethodmodifiers Compartment::getSpatialDimensionsAsDouble() const "
/**
   * Get the number of spatial dimensions of this {@link Compartment} object,
   * as a double.
   <p>
   * @return the value of the \'spatialDimensions\' attribute of this
   * {@link Compartment} object as a double, or <code>NaN</code> if this model is not in SBML
   * Level&nbsp;3 format.
   <p>
   * <p>
 * @note In SBML Level&nbsp;3, the data type of the \'spatialDimensions\'
 * attribute is <code>double</code>, whereas in Level&nbsp;2, it is <code>integer.</code>  To
 * avoid backward compatibility issues, libSBML provides two separate methods
 * for obtaining the value as either an integer or a type <code>double</code>, for
 * models where it is relevant.
   <p>
   * @see #getSpatialDimensions()
   * @see #setSpatialDimensions(long)
   * @see #isSetSpatialDimensions()
   * @see #unsetSpatialDimensions()
   */ public
";


%javamethodmodifiers Compartment::getSize() const "
/**
   * Get the size of this {@link Compartment} object.
   <p>
   * <p>
 * In SBML Level&nbsp;1, compartments are always three-dimensional
 * constructs and only have volumes, whereas in SBML Level&nbsp;2 and higher,
 * compartments may be other than three-dimensional, and therefore the
 * \'volume\' attribute is named \'size\' in Level&nbsp;2 and above.  LibSBML
 * provides both {@link Compartment#getSize()} and {@link Compartment#getVolume()}
 * for easier support of different SBML Levels.
   <p>
   * @return the value of the \'size\' attribute (\'volume\' in Level&nbsp;1) of
   * this {@link Compartment} object as a floating-point number.
   <p>
   * @note This method is identical to
   * {@link Compartment#getVolume()}.
   <p>
   * @see #getVolume()
   * @see #isSetSize()
   * @see #setSize(double)
   * @see #unsetSize()
   */ public
";


%javamethodmodifiers Compartment::getVolume() const "
/**
   * Get the volume of this {@link Compartment} object.
   <p>
   * <p>
 * In SBML Level&nbsp;1, compartments are always three-dimensional
 * constructs and only have volumes, whereas in SBML Level&nbsp;2 and higher,
 * compartments may be other than three-dimensional, and therefore the
 * \'volume\' attribute is named \'size\' in Level&nbsp;2 and above.  LibSBML
 * provides both {@link Compartment#getSize()} and {@link Compartment#getVolume()}
 * for easier support of different SBML Levels.
   <p>
   * @return the value of the \'volume\' attribute (\'size\' in Level&nbsp;2) of
   * this {@link Compartment} object, as a floating-point number.
   <p>
   * <p>
 * @note The attribute \'volume\' only exists by that name in SBML
 * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
 * named \'size\'.  In SBML Level&nbsp;1, a compartment\'s volume has a default
 * value (<code>1.0</code>) and therefore methods such as
 * {@link Compartment#isSetVolume()}
 * will always return <code>true</code> for a Level&nbsp;1 model.  In Level&nbsp;2, a
 * compartment\'s size (the equivalent of SBML Level&nbsp;1\'s \'volume\') is
 * optional and has no default value, and therefore may or may not be set.
   <p>
   * @note This method is identical to
   * {@link Compartment#getSize()}.
   <p>
   * @see #getSize()
   * @see #isSetVolume()
   * @see #setVolume(double)
   * @see #unsetVolume()
   */ public
";


%javamethodmodifiers Compartment::getUnits() const "
/**
   * Get the units of this {@link Compartment} object\'s size.
   <p>
   * The value of an SBML compartment\'s \'units\' attribute establishes the
   * unit of measurement associated with the compartment\'s size.
   <p>
   * @return the value of the \'units\' attribute of this {@link Compartment} object,
   * as a string.  An empty string indicates that no units have been assigned
   * to the value of the size.
   <p>
   * <p>
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
   <p>
   * @see #isSetUnits()
   * @see #setUnits(String)
   * @see #unsetUnits()
   */ public
";


%javamethodmodifiers Compartment::getOutside() const "
/**
   * Get the identifier, if any, of the {@link Compartment} object that is designated
   * as being outside of <em>this</em> one.
   <p>
   * @return the value of the \'outside\' attribute of this {@link Compartment} object.
   <p>
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   <p>
   * @see #isSetOutside()
   * @see #setOutside(String)
   * @see #unsetOutside()
   */ public
";


%javamethodmodifiers Compartment::getConstant() const "
/**
   * Get the value of the \'constant\' attribute of this {@link Compartment} object.
   <p>
   * @return <code>true</code> if this {@link Compartment} object\'s size is flagged as being
   * constant, <code>false</code> otherwise.
   <p>
   * @see #isSetConstant()
   * @see #setConstant(boolean)
   */ public
";


%javamethodmodifiers Compartment::isSetId() const "
/**
   * Predicate returning <code>true</code> if this {@link Compartment} object\'s \'id\' attribute
   * is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Compartment} object is
   * set, <code>false</code> otherwise.
   <p>
   * @see #getId()
   * @see #unsetId()
   * @see #setId(String)
   */ public
";


%javamethodmodifiers Compartment::isSetName() const "
/**
   * Predicate returning <code>true</code> if this {@link Compartment} object\'s \'name\'
   * attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Compartment} object is
   * set, <code>false</code> otherwise.
   <p>
   * @see #getName()
   * @see #setName(String)
   * @see #unsetName()
   */ public
";


%javamethodmodifiers Compartment::isSetCompartmentType() const "
/**
   * Predicate returning <code>true</code> if this {@link Compartment} object\'s
   * \'compartmentType\' attribute is set.
   <p>
   * @return <code>true</code> if the \'compartmentType\' attribute of this {@link Compartment}
   * is set, <code>false</code> otherwise.
   <p>
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   <p>
   * @see #setCompartmentType(String)
   * @see #getCompartmentType()
   * @see #unsetCompartmentType()
   */ public
";


%javamethodmodifiers Compartment::isSetSize() const "
/**
   * Predicate returning <code>true</code> if this {@link Compartment} object\'s \'size\'
   * attribute is set.
   <p>
   * This method is similar but not identical to
   * {@link Compartment#isSetVolume()}.  The latter
   * should be used in the context of SBML Level&nbsp;1 models instead of
   * {@link Compartment#isSetSize()}
   * because {@link Compartment#isSetVolume()}
   * performs extra processing to take into account the difference in
   * default values between SBML Levels&nbsp;1 and&nbsp;2.
   <p>
   * @return <code>true</code> if the \'size\' attribute (\'volume\' in Level&nbsp;2) of
   * this {@link Compartment} object is set, <code>false</code> otherwise.
   <p>
   * @see #isSetVolume()
   * @see #setSize(double)
   * @see #getSize()
   * @see #unsetSize()
   */ public
";


%javamethodmodifiers Compartment::isSetVolume() const "
/**
   * Predicate returning <code>true</code> if this {@link Compartment} object\'s \'volume\'
   * attribute is set.
   <p>
   * This method is similar but not identical to
   * {@link Compartment#isSetSize()}.  The latter
   * should not be used in the context of SBML Level&nbsp;1 models because the
   * present method performs extra processing to take into account
   * the difference in default values between SBML Levels&nbsp;1 and&nbsp;2.
   <p>
   * @return <code>true</code> if the \'volume\' attribute (\'size\' in Level&nbsp;2 and
   * above) of this {@link Compartment} object is set, <code>false</code> otherwise.
   <p>
   * <p>
 * @note The attribute \'volume\' only exists by that name in SBML
 * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
 * named \'size\'.  In SBML Level&nbsp;1, a compartment\'s volume has a default
 * value (<code>1.0</code>) and therefore methods such as
 * {@link Compartment#isSetVolume()}
 * will always return <code>true</code> for a Level&nbsp;1 model.  In Level&nbsp;2, a
 * compartment\'s size (the equivalent of SBML Level&nbsp;1\'s \'volume\') is
 * optional and has no default value, and therefore may or may not be set.
   <p>
   * @see #isSetSize()
   * @see #getVolume()
   * @see #setVolume(double)
   * @see #unsetVolume()
   */ public
";


%javamethodmodifiers Compartment::isSetUnits() const "
/**
   * Predicate returning <code>true</code> if this {@link Compartment} object\'s \'units\'
   * attribute is set.
   <p>
   * @return <code>true</code> if the \'units\' attribute of this {@link Compartment} object is
   * set, <code>false</code> otherwise.
   <p>
   * <p>
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
   <p>
   * @see #setUnits(String)
   * @see #getUnits()
   * @see #unsetUnits()
   */ public
";


%javamethodmodifiers Compartment::isSetOutside() const "
/**
   * Predicate returning <code>true</code> if this {@link Compartment} object\'s \'outside\'
   * attribute is set.
   <p>
   * @return <code>true</code> if the \'outside\' attribute of this {@link Compartment} object is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   <p>
   * @see #getOutside()
   * @see #setOutside(String)
   * @see #unsetOutside()
   */ public
";


%javamethodmodifiers Compartment::isSetSpatialDimensions() const "
/**
   * Predicate returning <code>true</code> if this {@link Compartment} object\'s
   * \'spatialDimensions\' attribute is set.
   <p>
   * @return <code>true</code> if the \'spatialDimensions\' attribute of this
   * {@link Compartment} object is set, <code>false</code> otherwise.
   <p>
   * @see #getSpatialDimensions()
   * @see #setSpatialDimensions(long)
   * @see #unsetSpatialDimensions()
   */ public
";


%javamethodmodifiers Compartment::isSetConstant() const "
/**
   * Predicate returning <code>true</code> if this {@link Compartment} object\'s \'constant\'
   * attribute is set.
   <p>
   * @return <code>true</code> if the \'constant\' attribute of this {@link Compartment} object is
   * set, <code>false</code> otherwise.
   <p>
   * @see #getConstant()
   * @see #setConstant(boolean)
   */ public
";


%javamethodmodifiers Compartment::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link Compartment} object.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link Compartment} object. If
   * the string is <code>null</code>, this method will return
   * {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @see #getId()
   * @see #unsetId()
   * @see #isSetId()
   */ public
";


%javamethodmodifiers Compartment::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link Compartment} object.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link Compartment} object. If the string is 
   * <code>null</code>, this method will return
   * {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @see #getName()
   * @see #isSetName()
   * @see #unsetName()
   */ public
";


%javamethodmodifiers Compartment::setCompartmentType(const std::string& sid) "
/**
   * Sets the \'compartmentType\' attribute of this {@link Compartment} object.
   <p>
   * @param sid the identifier of a {@link CompartmentType} object defined elsewhere
   * in this {@link Model}. If the string is <code>null</code>, this method will return
   * {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   <p>
   * @see #isSetCompartmentType()
   * @see #getCompartmentType()
   * @see #unsetCompartmentType()
   */ public
";


%javamethodmodifiers Compartment::setSpatialDimensions(unsigned int value) "
/**
   * Sets the \'spatialDimensions\' attribute of this {@link Compartment} object.
   <p>
   * @param value a long integereger indicating the number of dimensions
   * of this compartment.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @see #getSpatialDimensions()
   * @see #isSetSpatialDimensions()
   * @see #unsetSpatialDimensions()
   */ public
";


%javamethodmodifiers Compartment::setSpatialDimensions(double value) "
/**
   * Sets the \'spatialDimensions\' attribute of this {@link Compartment} object as a double.
   <p>
   * @param value a double indicating the number of dimensions
   * of this compartment.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @see #getSpatialDimensions()
   * @see #isSetSpatialDimensions()
   * @see #unsetSpatialDimensions()
   */ public
";


%javamethodmodifiers Compartment::setSize(double value) "
/**
   * Sets the \'size\' attribute (or \'volume\' in SBML Level&nbsp;1) of this
   * {@link Compartment} object.
   <p>
   * @param value a <code>double</code> representing the size of this compartment
   * instance in whatever units are in effect for the compartment.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @note This method is identical to
   * {@link Compartment#setVolume(double value)}.
   <p>
   * @see #setVolume(double)
   * @see #getSize()
   * @see #isSetSize()
   * @see #unsetSize()
   */ public
";


%javamethodmodifiers Compartment::setVolume(double value) "
/**
   * Sets the \'volume\' attribute (or \'size\' in SBML Level&nbsp;2) of this
   * {@link Compartment} object.
   <p>
   * This method is identical to
   * {@link Compartment#setSize(double value)}
   * and is provided for compatibility between SBML Level&nbsp;1 and
   * higher Levels of SBML.
   <p>
   * @param value a <code>double</code> representing the volume of this compartment
   * instance in whatever units are in effect for the compartment.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * <p>
 * @note The attribute \'volume\' only exists by that name in SBML
 * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
 * named \'size\'.  In SBML Level&nbsp;1, a compartment\'s volume has a default
 * value (<code>1.0</code>) and therefore methods such as
 * {@link Compartment#isSetVolume()}
 * will always return <code>true</code> for a Level&nbsp;1 model.  In Level&nbsp;2, a
 * compartment\'s size (the equivalent of SBML Level&nbsp;1\'s \'volume\') is
 * optional and has no default value, and therefore may or may not be set.
   <p>
   * @see #setSize(double)
   * @see #getVolume()
   * @see #isSetVolume()
   * @see #unsetVolume()
   */ public
";


%javamethodmodifiers Compartment::setUnits(const std::string& sid) "
/**
   * Sets the \'units\' attribute of this {@link Compartment} object.
   <p>
   * @param sid the identifier of the defined units to use.  If <code>sid</code> is 
   * <code>null</code>, then this method will return
   * {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @see #isSetUnits()
   * @see #getUnits()
   * @see #unsetUnits()
   */ public
";


%javamethodmodifiers Compartment::setOutside(const std::string& sid) "
/**
   * Sets the \'outside\' attribute of this {@link Compartment} object.
   <p>
   * @param sid the identifier of a compartment that encloses this one. If 
   * <code>sid</code> is <code>null</code>, then this method will return
   * {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   <p>
   * @see #isSetOutside()
   * @see #getOutside()
   * @see #unsetOutside()
   */ public
";


%javamethodmodifiers Compartment::setConstant(bool value) "
/**
   * Sets the value of the \'constant\' attribute of this {@link Compartment} object.
   <p>
   * @param value a boolean indicating whether the size/volume of this
   * compartment should be considered constant (<code>true</code>) or variable
   * (<code>false</code>).
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @see #isSetConstant()
   * @see #getConstant()
   */ public
";


%javamethodmodifiers Compartment::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Compartment::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Compartment::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link Compartment} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #getName()
   * @see #setName(String)
   * @see #isSetName()
   */ public
";


%javamethodmodifiers Compartment::unsetCompartmentType "
/**
   * Unsets the value of the \'compartmentType\' attribute of this {@link Compartment} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   <p>
   * @see #setCompartmentType(String sid)
   * @see #isSetCompartmentType()
   * @see #getCompartmentType()
   */ public
";


%javamethodmodifiers Compartment::unsetSize "
/**
   * Unsets the value of the \'size\' attribute of this {@link Compartment} object.
   <p>
   * In SBML Level&nbsp;1, a compartment\'s volume has a default value (
   * <code>1.0</code>) and therefore <em>should always be set</em>.  Calling this method
   * on a Level&nbsp;1 model resets the value to <code>1.0</code> rather than actually
   * unsetting it.  In Level&nbsp;2, a compartment\'s \'size\' is optional with
   * no default value, and unsetting it will result in the compartment having
   * no defined size.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note This method is identical to
   * {@link Compartment#unsetVolume()}.
   <p>
   * @see #unsetVolume()
   * @see #getSize()
   * @see #isSetSize()
   * @see #setSize(double)
   */ public
";


%javamethodmodifiers Compartment::unsetVolume "
/**
   * Unsets the value of the \'volume\' attribute of this {@link Compartment} object.
   <p>
   * This method is identical to
   * {@link Compartment#unsetSize()}.  Please refer
   * to that method\'s documentation for more information about its behavior.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note The attribute \'volume\' only exists by that name in SBML
 * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
 * named \'size\'.  In SBML Level&nbsp;1, a compartment\'s volume has a default
 * value (<code>1.0</code>) and therefore methods such as
 * {@link Compartment#isSetVolume()}
 * will always return <code>true</code> for a Level&nbsp;1 model.  In Level&nbsp;2, a
 * compartment\'s size (the equivalent of SBML Level&nbsp;1\'s \'volume\') is
 * optional and has no default value, and therefore may or may not be set.
   <p>
   * @see #unsetSize()
   * @see #getVolume()
   * @see #setVolume(double)
   * @see #isSetVolume()
   */ public
";


%javamethodmodifiers Compartment::unsetUnits "
/**
   * Unsets the value of the \'units\' attribute of this {@link Compartment} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #isSetUnits()
   * @see #setUnits(String)
   * @see #getUnits()
   */ public
";


%javamethodmodifiers Compartment::unsetOutside "
/**
   * Unsets the value of the \'outside\' attribute of this {@link Compartment} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   <p>
   * @see #isSetOutside()
   * @see #getOutside()
   * @see #setOutside(String)
   */ public
";


%javamethodmodifiers Compartment::unsetSpatialDimensions "
/**
   * Unsets the value of the \'spatialDimensions\' attribute of this
   * {@link Compartment} object.
   <p>
   * In SBML Levels prior to Level&nbsp;3, compartments must always have a
   * value for the number of dimensions.  Consequently, calling this method
   * on a model of SBML Level 1&ndash;2 will result in a return value of
   * {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note This function is only valid for SBML Level&nbsp;3.
   <p>
   * @see #getSpatialDimensions()
   * @see #isSetSpatialDimensions()
   * @see #setSpatialDimensions(long)
   */ public
";


%javamethodmodifiers Compartment::getDerivedUnitDefinition "
/**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Compartment} object\'s designated size.
   <p>
   * <p>
 * Compartments in SBML have an attribute (\'units\') for declaring the
 * units of measurement intended for the value of the compartment\'s size.  In
 * the absence of a value given for this attribute, the units are inherited
 * from values either defined on the enclosing {@link Model} (in SBML Level&nbsp;3)
 * or in defaults (in SBML Level&nbsp;2).  This method returns a
 * {@link UnitDefinition} object
 * based on how this compartment\'s units are interpreted according to the
 * relevant SBML guidelines, or it returns <code>null</code> if no units have been
 * declared and no defaults are defined by the relevant SBML specification.
 <p>
 * Note that unit declarations for
 * {@link Compartment} objects 
 * are specified in terms of the <em>identifier</em> of a unit,
 * but <em>this</em> method returns an object ,
 * not a unit identifier.  It does this by constructing an appropriate
 * {@link UnitDefinition} object.  For
 * SBML Level&nbsp;2 models, it will do this even when the value of the
 * \'units\' attribute is one of the special SBML Level&nbsp;2 unit identifiers
 * <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or <code>\'time\'.</code>  Callers
 * may find this useful in conjunction with the helper methods provided by
 * the {@link UnitDefinition}
 * class for comparing different {@link UnitDefinition} objects.
   <p>
   * @return a {@link UnitDefinition} that expresses the units of this
   * {@link Compartment} object, or <code>null</code> if one cannot be constructed.
   <p>
   * <p>
 * @note The libSBML system for unit analysis depends on the model as a
 * whole.  In cases where the
 * {@link Compartment} object has not
 * yet been added to a model, or the model itself is incomplete, unit
 * analysis is not possible, and consequently this method will return 
 * <code>null.</code>
   <p>
   * @see #isSetUnits()
   * @see #getUnits()
   */ public
";


%javamethodmodifiers Compartment::getDerivedUnitDefinition() const "
/**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Compartment} object\'s designated size.
   <p>
   * <p>
 * Compartments in SBML have an attribute (\'units\') for declaring the
 * units of measurement intended for the value of the compartment\'s size.  In
 * the absence of a value given for this attribute, the units are inherited
 * from values either defined on the enclosing {@link Model} (in SBML Level&nbsp;3)
 * or in defaults (in SBML Level&nbsp;2).  This method returns a
 * {@link UnitDefinition} object
 * based on how this compartment\'s units are interpreted according to the
 * relevant SBML guidelines, or it returns <code>null</code> if no units have been
 * declared and no defaults are defined by the relevant SBML specification.
 <p>
 * Note that unit declarations for
 * {@link Compartment} objects 
 * are specified in terms of the <em>identifier</em> of a unit,
 * but <em>this</em> method returns an object ,
 * not a unit identifier.  It does this by constructing an appropriate
 * {@link UnitDefinition} object.  For
 * SBML Level&nbsp;2 models, it will do this even when the value of the
 * \'units\' attribute is one of the special SBML Level&nbsp;2 unit identifiers
 * <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or <code>\'time\'.</code>  Callers
 * may find this useful in conjunction with the helper methods provided by
 * the {@link UnitDefinition}
 * class for comparing different {@link UnitDefinition} objects.
   <p>
   * @return a {@link UnitDefinition} that expresses the units of this
   * {@link Compartment} object, or <code>null</code> if one cannot be constructed.
   <p>
   * <p>
 * @note The libSBML system for unit analysis depends on the model as a
 * whole.  In cases where the
 * {@link Compartment} object has not
 * yet been added to a model, or the model itself is incomplete, unit
 * analysis is not possible, and consequently this method will return 
 * <code>null.</code>
   <p>
   * @see #isSetUnits()
   * @see #getUnits()
   */ public
";


%javamethodmodifiers Compartment::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_COMPARTMENT SBML_COMPARTMENT} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Compartment::getElementName() const "
/**
   * Returns the XML element name of this object
   <p>
   * For {@link Compartment}, the XML element name is always <code>\'compartment\'.</code>
   <p>
   * @return the name of this element.
   */ public
";


%javamethodmodifiers Compartment::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Compartment::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link Compartment} object have been set.
   <p>
   * The required attributes for a {@link Compartment} object are:
   * <ul>
   * <li> \'id\' (or \'name\' in SBML Level&nbsp;1)
   * <li> \'constant\' (in SBML Level&nbsp;3 only)
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Compartment::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Compartment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Compartment::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Compartment::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Compartment::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Compartment::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Compartment::isExplicitlySetSpatialDimensions() const "
/** * @internal */ public
";


%javamethodmodifiers Compartment::isExplicitlySetConstant() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfCompartments::ListOfCompartments(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfCompartments} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfCompartments::ListOfCompartments(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfCompartments} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfCompartments} object to be created.
   */ public
";


%javamethodmodifiers ListOfCompartments::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfCompartments} object.
   <p>
   * @return the (deep) copy of this {@link ListOfCompartments} object.
   */ public
";


%javamethodmodifiers ListOfCompartments::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Compartment} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance: {@link libsbmlConstants#SBML_COMPARTMENT SBML_COMPARTMENT} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfCompartments::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfCompartments}, the XML element name is always
   * <code>\'listOfCompartments\'.</code>
   <p>
   * @return the name of this element.
   */ public
";


%javamethodmodifiers ListOfCompartments::get(unsigned int n) "
/**
   * Get a {@link Compartment} object from the {@link ListOfCompartments}.
   <p>
   * @param n the index number of the {@link Compartment} object to get.
   <p>
   * @return the nth {@link Compartment} object in this {@link ListOfCompartments}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartments::get "
/**
   * Get a {@link Compartment} object from the {@link ListOfCompartments}.
   <p>
   * @param n the index number of the {@link Compartment} object to get.
   <p>
   * @return the nth {@link Compartment} object in this {@link ListOfCompartments}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartments::get(const std::string& sid) "
/**
   * Get a {@link Compartment} object from the {@link ListOfCompartments}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier
   * of the {@link Compartment} object to get.
   <p>
   * @return {@link Compartment} object in this {@link ListOfCompartments}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link Compartment} object exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartments::get(const std::string& sid) const "
/**
   * Get a {@link Compartment} object from the {@link ListOfCompartments}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier
   * of the {@link Compartment} object to get.
   <p>
   * @return {@link Compartment} object in this {@link ListOfCompartments}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link Compartment} object exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartments::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfCompartments} items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfCompartments::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfCompartments} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfCompartments::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfCompartments::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) Species "
/** 
 *  An SBML <em>species</em> &ndash; a pool of entities.
 <p>
 * A <em>species</em> in SBML refers to a pool of entities that (a) are
 * considered indistinguishable from each other for the purposes of the
 * model, (b) participate in reactions, and (c) are located in a specific
 * <em>compartment</em>.  The SBML {@link Species} object class is intended to represent
 * these pools.
 <p>
 * As with other major constructs in SBML, {@link Species} has a mandatory
 * attribute, \'id\', used to give the species type an identifier in the
 * model.  The identifier must be a text string conforming to the identifer
 * syntax permitted in SBML.  {@link Species} also has an optional \'name\'
 * attribute, of type <code>string.</code>  The \'id\' and \'name\' must be used
 * according to the guidelines described in the SBML specifications.
 <p>
 * The required attribute \'compartment\' is used to identify the compartment
 * in which the species is located.  The attribute\'s value must be the
 * identifier of an existing {@link Compartment} object.  It is important to note
 * that there is no default value for the \'compartment\' attribute on
 * {@link Species}; every species in an SBML model must be assigned a compartment
 * <em>explicitly</em>.  (This also implies that every model with one or more
 * {@link Species} objects must define at least one {@link Compartment} object.)
 <p>
 * <h2>The initial amount and concentration of a species</h2>
 <p>
 * The optional attributes \'initialAmount\' and \'initialConcentration\', both
 * having a data type of <code>double</code>, can be used to set the <em>initial</em>
 * quantity of the species in the compartment where the species is located.
 * These attributes are mutually exclusive; i.e., <em>only one</em> can
 * have a value on any given instance of a {@link Species} object.  Missing
 * \'initialAmount\' and \'initialConcentration\' values implies that their
 * values either are unknown, or to be obtained from an external source, or
 * determined by an {@link InitialAssignment} or other SBML construct elsewhere in
 * the model.
 <p>
 * A species\' initial quantity in SBML is set by the \'initialAmount\' or
 * \'initialConcentration\' attribute exactly once.  If the \'constant\'
 * attribute is <code>true</code>, then the value of the species\' quantity is fixed
 * and cannot be changed except by an {@link InitialAssignment}.  These methods
 * differ in that the \'initialAmount\' and \'initialConcentration\' attributes
 * can only be used to set the species quantity to a literal floating-point
 * number, whereas the use of an {@link InitialAssignment} object allows the value
 * to be set using an arbitrary mathematical expression (which, thanks to
 * MathML\'s expressiveness, may evaluate to a rational number).  If the
 * species\' \'constant\' attribute is <code>false</code>, the species\' quantity value
 * may be overridden by an {@link InitialAssignment} or changed by {@link AssignmentRule}
 * or {@link AlgebraicRule}, and in addition, for <em>t &gt; 0</em>, it may also be
 * changed by a {@link RateRule}, {@link Event} objects, and as a result of being a
 * reactant or product in one or more {@link Reaction} objects.  (However, some
 * constructs are mutually exclusive; see the SBML specifications for the
 * precise details.)  It is not an error to define \'initialAmount\' or
 * \'initialConcentration\' on a species and also redefine the value using an
 * {@link InitialAssignment}, but the \'initialAmount\' or \'initialConcentration\'
 * setting in that case is ignored.  The SBML specifications provide
 * additional information about the semantics of assignments, rules and
 * values for simulation time <em>t</em> &#8804; <em>0</em>.
 <p>
 * SBML Level&nbsp;2 additionally stipulates that in cases where a species\'
 * compartment has a \'spatialDimensions\' value of <code>0</code> (zero), the species
 * cannot have a value for \'initialConcentration\' because the concepts of
 * concentration and density break down when a container has zero
 * dimensions.
 <p>
 * <h2>The units of a species\' amount or concentration</h2>
 <p>
 * When the attribute \'initialAmount\' is set, the unit of measurement
 * associated with the value of \'initialAmount\' is specified by the {@link Species}
 * attribute \'substanceUnits\'.  When the \'initialConcentration\' attribute
 * is set, the unit of measurement associated with this concentration value
 * is {<em>unit of amount</em>} divided by {<em>unit of size</em>}, where
 * the {<em>unit of amount</em>} is specified by the {@link Species}
 * \'substanceUnits\' attribute, and the {<em>unit of size</em>} is specified
 * by the \'units\' attribute of the {@link Compartment} object in which the species
 * is located.  Note that in either case, a unit of <em>amount</em> is
 * involved and determined by the \'substanceUnits\' attribute.  Note
 * <strong>these two attributes alone do not determine the units of the
 * species when the species identifier appears in a mathematical
 * expression</strong>; <em>that</em> aspect is determined by the attribute
 * \'hasOnlySubstanceUnits\' discussed below.
 <p>
 * In SBML Level&nbsp;3, if the \'substanceUnits\' attribute is not set on a
 * given {@link Species} object instance, then the unit of <em>amount</em> for that
 * species is inherited from the \'substanceUnits\' attribute on the
 * enclosing {@link Model} object instance.  If that attribute on {@link Model} is not set
 * either, then the unit associated with the species\' quantity is
 * undefined.
 <p>
 * In SBML Level&nbsp;2, if the \'substanceUnits\' attribute is not set on a
 * given {@link Species} object instance, then the unit of <em>amount</em> for that
 * species is taken from the predefined SBML unit identifier 
 * <code>\'substance\'.</code>  The value assigned to \'substanceUnits\' must be chosen from
 * one of the following possibilities: one of the base unit identifiers
 * defined in SBML, the built-in unit identifier <code>\'substance\'</code>, or the
 * identifier of a new unit defined in the list of unit definitions in the
 * enclosing {@link Model} object.  The chosen units for \'substanceUnits\' must be
 * be <code>\'dimensionless\'</code>, <code>\'mole\'</code>, <code>\'item\'</code>, <code>\'kilogram\'</code>, <code>\'gram\'</code>,
 * or units derived from these.
 <p>
 * As noted at the beginning of this section, simply setting
 * \'initialAmount\' or \'initialConcentration\' alone does <em>not</em> determine
 * whether a species identifier represents an amount or a concentration
 * when it appears elsewhere in an SBML model.  The role of the attribute
 * \'hasOnlySubstanceUnits\' is to indicate whether the units of the species,
 * when the species identifier appears in mathematical formulas, are
 * intended to be concentration or amount.  The attribute takes on a
 * boolean value.  In SBML Level&nbsp;3, the attribute has no default value
 * and must always be set in a model; in SBML Level&nbsp;2, it has a
 * default value of <code>false.</code>
 <p>
 * The <em>units of the species</em> are used in the following ways:
 * <ul>
<p>
 * <li> When the species\' identifier appears in a MathML formula, it
 * represents the species\' quantity, and the unit of measurement associated
 * with the quantity is as described above.
 <p>
 * <li> The \'math\' elements of {@link AssignmentRule}, {@link InitialAssignment} and
 * {@link EventAssignment} objects referring to this species should all have the
 * same units as the unit of measurement associated with the species
 * quantity.
 <p>
 * <li> In a {@link RateRule} object that defines the rate of change of the
 * species\' quantity, the unit associated with the rule\'s \'math\' element
 * should be equal to the unit of the species\' quantity divided by the
 * model-wide unit of <em>time</em>; in other words, {<em>unit of species
 * quantity</em>}/{<em>unit of time</em>}.
 <p>
 * </ul>
 <p>
 * <h2>The \'constant\' and \'boundaryCondition\' attributes</h2>
 <p>
 * The {@link Species} object class has two boolean attributes named \'constant\' and
 * \'boundaryCondition\', used to indicate whether and how the quantity of
 * that species can vary during a simulation.  In SBML Level&nbsp;2 they
 * are optional; in SBML Level&nbsp;3 they are mandatory.  The following
 * table shows how to interpret the combined values of these attributes.
 <p>
 * <table border=\"0\" class=\"centered text-table width80 normal-font alt-row-colors\">
<caption class=\"top-caption\">Interpretation
of species' <code>constant</code> and <code>boundaryCondition</code>
attributes.</caption>
 <tr>
     <th align=\"left\" valign=\"bottom\">
       <code>constant</code><br>value
     </th>
     <th align=\"left\" valign=\"bottom\">
       <code>boundaryCondition</code><br>value
     </th>
     <th align=\"left\" valign=\"bottom\">
       Can have<br>assignment<br>or rate rule?
     </th>
     <th align=\"left\" valign=\"bottom\">
       Can be<br>reactant<br>or product?
     </th>
     <th align=\"left\" valign=\"bottom\">
       Species' quantity<br>can be changed by
     </th>
 </tr>
 <tr>
     <td><code>true</code></td>
     <td><code>true</code></td>
     <td>no</td>
     <td>yes</td>
     <td>(never changes)</td>
 </tr>
 <tr>
     <td><code>false</code></td>
     <td><code>true</code></td>
     <td>yes</td>
     <td>yes</td>
     <td>rules and events</td>
 </tr>
 <tr>
     <td><code>true</code></td>
     <td><code>false</code></td>
     <td>no</td>
     <td>no</td>
     <td>(never changes)</td>
 </tr>
 <tr>
     <td><code>false</code></td>
     <td><code>false</code></td>
     <td>yes</td>
     <td>yes</td>
     <td>reactions <em>or</em> rules (but not both at the same time), and events</td>
 </tr>
</table>


 <p>
 * By default, when a species is a product or reactant of one or more
 * reactions, its quantity is determined by those reactions.  In SBML, it
 * is possible to indicate that a given species\' quantity is <em>not</em>
 * determined by the set of reactions even when that species occurs as a
 * product or reactant; i.e., the species is on the <em>boundary</em> of
 * the reaction system, and its quantity is not determined by the
 * reactions.  The boolean attribute \'boundaryCondition\' can be used to
 * indicate this.  A value of <code>false</code> indicates that the species <em>is</em>
 * part of the reaction system.  In SBML Level&nbsp;2, the attribute has a
 * default value of <code>false</code>, while in SBML Level&nbsp;3, it has no
 * default.
 <p>
 * The \'constant\' attribute indicates whether the species\' quantity can be
 * changed at all, regardless of whether by reactions, rules, or constructs
 * other than {@link InitialAssignment}.  A value of <code>false</code> indicates that the
 * species\' quantity can be changed.  (This is also a common value because
 * the purpose of most simulations is precisely to calculate changes in
 * species quantities.)  In SBML Level&nbsp;2, the attribute has a default
 * value of <code>false</code>, while in SBML Level&nbsp;3, it has no default.  Note
 * that the initial quantity of a species can be set by an
 * {@link InitialAssignment} irrespective of the value of the \'constant\' attribute.
 <p>
 * In practice, a \'boundaryCondition\' value of <code>true</code> means a differential
 * equation derived from the reaction definitions should not be generated
 * for the species.  However, the species\' quantity may still be changed by
 * {@link AssignmentRule}, {@link RateRule}, {@link AlgebraicRule}, {@link Event}, and {@link InitialAssignment}
 * constructs if its \'constant\' attribute is <code>false.</code>  Conversely, if the
 * species\' \'constant\' attribute is <code>true</code>, then its value cannot be
 * changed by anything except {@link InitialAssignment}.
 <p>
 * A species having \'boundaryCondition\'=<code>false</code> and \'constant\'=<code>false</code>
 * can appear as a product and/or reactant of one or more reactions in the
 * model.  If the species is a reactant or product of a reaction, it must
 * <em>not</em> also appear as the target of any {@link AssignmentRule} or {@link RateRule}
 * object in the model.  If instead the species has \'boundaryCondition\'=
 * <code>false</code> and \'constant\'=<code>true</code>, then it cannot appear as a reactant or
 * product, or as the target of any {@link AssignmentRule}, {@link RateRule} or
 * {@link EventAssignment} object in the model.
 <p>
 * <h2>The conversionFactor attribute in SBML Level&nbsp;3</h2>
 <p>
 * In SBML Level&nbsp;3, {@link Species} has an additional optional attribute,
 * \'conversionFactor\', that defines a conversion factor that applies to a
 * particular species.  The value must be the identifier of a {@link Parameter}
 * object instance defined in the model.  That {@link Parameter} object must be a
 * constant, meaning its \'constant\' attribute must be set to <code>true.</code>
 * If a given {@link Species} object definition defines a value for its
 * \'conversionFactor\' attribute, it takes precedence over any factor
 * defined by the {@link Model} object\'s \'conversionFactor\' attribute.
 <p>
 * The unit of measurement associated with a species\' quantity can be
 * different from the unit of extent of reactions in the model.  SBML
 * Level&nbsp;3 avoids implicit unit conversions by providing an explicit
 * way to indicate any unit conversion that might be required.  The use of
 * a conversion factor in computing the effects of reactions on a species\'
 * quantity is explained in detail in the SBML Level&nbsp;3 specification
 * document.  Because the value of the \'conversionFactor\' attribute is the
 * identifier of a {@link Parameter} object, and because parameters can have units
 * attached to them, the transformation from reaction extent units to
 * species units can be completely specified using this approach.
 <p>
 * Note that the unit conversion factor is <strong>only applied when
 * calculating the effect of a reaction on a species</strong>.  It is not
 * used in any rules or other SBML constructs that affect the species, and
 * it is also not used when the value of the species is referenced in a
 * mathematical expression.
 <p>
 * <h2>The speciesType attribute in SBML Level&nbsp;2 Versions&nbsp;2&ndash;4</h2>
 <p>
 * In SBML Level&nbsp;2 Versions&nbsp;2&ndash;4, each species in a model
 * may optionally be designated as belonging to a particular species type.
 * The optional attribute \'speciesType\' is used to identify the species
 * type of the chemical entities that make up the pool represented by the
 * {@link Species} objects.  The attribute\'s value must be the identifier of an
 * existing {@link SpeciesType} object in the model.  If the \'speciesType\'
 * attribute is not present on a particular species definition, it means
 * the pool contains chemical entities of a type unique to that pool; in
 * effect, a virtual species type is assumed for that species, and no other
 * species can belong to that species type.  The value of \'speciesType\'
 * attributes on species have no effect on the numerical interpretation of
 * a model; simulators and other numerical analysis software may ignore
 * \'speciesType\' attributes.
 <p>
 * There can be only one species of a given species type in any given
 * compartment of a model.  More specifically, for all {@link Species} objects
 * having a value for the \'speciesType\' attribute, the pair
 * <center>
 * (\'speciesType\' attribute value, \'compartment\' attribute value)
 * </center>
 <p>
 * must be unique across the set of all {@link Species} object in a model.
 <p>
 * <h2>The spatialSizeUnits attribute in SBML Level&nbsp;2 Versions&nbsp;1&ndash;2</h2>
 <p>
 * In versions of SBML Level&nbsp;2 before Version&nbsp;3, the class
 * {@link Species} included an attribute called \'spatialSizeUnits\', which allowed
 * explicitly setting the units of size for initial concentration.  LibSBML
 * retains this attribute for compatibility with older definitions of
 * Level&nbsp;2, but its use is strongly discouraged because many software
 * tools do no properly interpret this unit declaration and it is
 * incompatible with all SBML specifications after Level&nbsp;2
 * Version&nbsp;3.
 <p>
 * <h2>Additional considerations for interpreting the numerical value of a species</h2>
 <p>
 * {@link Species} are unique in SBML in that they have a kind of duality: a
 * species identifier may stand for either substance amount (meaning, a
 * count of the number of individual entities) or a concentration or
 * density (meaning, amount divided by a compartment size).  The previous
 * sections explain the meaning of a species identifier when it is
 * referenced in a mathematical formula or in rules or other SBML
 * constructs; however, it remains to specify what happens to a species
 * when the compartment in which it is located changes in size.
 <p>
 * When a species definition has a \'hasOnlySubstanceUnits\' attribute value
 * of <code>false</code> and the size of the compartment in which the species is
 * located changes, the default in SBML is to assume that it is the
 * concentration that must be updated to account for the size change.  This
 * follows from the principle that, all other things held constant, if a
 * compartment simply changes in size, the size change does not in itself
 * cause an increase or decrease in the number of entities of any species
 * in that compartment.  In a sense, the default is that the <em>amount</em> of
 * a species is preserved across compartment size changes.  Upon such size
 * changes, the value of the concentration or density must be recalculated
 * from the simple relationship <em>concentration = amount / size</em> if
 * the value of the concentration is needed (for example, if the species
 * identifier appears in a mathematical formula or is otherwise referenced
 * in an SBML construct).  There is one exception: if the species\' quantity
 * is determined by an {@link AssignmentRule}, {@link RateRule}, {@link AlgebraicRule}, or an
 * {@link EventAssignment} and the species has a \'hasOnlySubstanceUnits\' attribute
 * value of <code>false</code>, it means that the <em>concentration</em> is assigned
 * by the rule or event; in that case, the <em>amount</em> must be
 * calculated when the compartment size changes.  (Events also require
 * additional care in this situation, because an event with multiple
 * assignments could conceivably reassign both a species quantity and a
 * compartment size simultaneously.  Please refer to the SBML
 * specifications for the details.)
 <p>
 * Note that the above only matters if a species has a
 * \'hasOnlySubstanceUnits\' attribute value of <code>false</code>, meaning that the
 * species identifier refers to a concentration wherever the identifier
 * appears in a mathematical formula.  If instead the attribute\'s value is
 * <code>true</code>, then the identifier of the species <em>always</em> stands for
 * an amount wherever it appears in a mathematical formula or is referenced
 * by an SBML construct.  In that case, there is never a question about
 * whether an assignment or event is meant to affect the amount or
 * concentration: it is always the amount.
 <p>
 * A particularly confusing situation can occur when the species has
 * \'constant\' attribute value of <code>true</code> in combination with a
 * \'hasOnlySubstanceUnits\' attribute value of <code>false.</code>  Suppose this
 * species is given a value for \'initialConcentration\'.  Does a \'constant\'
 * value of <code>true</code> mean that the concentration is held constant if the
 * compartment size changes?  No; it is still the amount that is kept
 * constant across a compartment size change.  The fact that the species
 * was initialized using a concentration value is irrelevant.
 */
"


%typemap(javaimports) ListOfSpecies "
/** 
 *  A list of {@link Species} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers Species::Species(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Species} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Species}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Species}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Species::Species(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Species} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link Species} is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method {@link Species#setId(String)}.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Species::Species(const Species& orig) "
/**
   * Copy constructor; creates a copy of this {@link Species} object.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Species::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Species}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers Species::clone() const "
/**
   * Creates and returns a deep copy of this {@link Species} object.
   <p>
   * @return the (deep) copy of this {@link Species} object.
   */ public
";


%javamethodmodifiers Species::initDefaults "
/**
   * Initializes the fields of this {@link Species} object to \'typical\' defaults
   * values.
   <p>
   * The SBML {@link Species} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets \'boundaryCondition\' to <code>false</code>
   * <li> Sets \'constant\' to <code>false</code>
   * <li> sets \'hasOnlySubstanceUnits\' to <code>false</code>
   * <li> (Applies to Level&nbsp;3 models only) Sets attribute \'substanceUnits\' to <code>mole</code>
   * </ul>
   */ public
";


%javamethodmodifiers Species::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link Species} object.
   <p>
   * @return the id of this {@link Species} object.
   */ public
";


%javamethodmodifiers Species::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link Species} object.
   <p>
   * @return the name of this {@link Species} object.
   */ public
";


%javamethodmodifiers Species::getSpeciesType() const "
/**
   * Get the type of this {@link Species} object object.
   <p>
   * @return the value of the \'speciesType\' attribute of this
   * {@link Species} as a string.
   <p>
   * @note The \'speciesType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%javamethodmodifiers Species::getCompartment() const "
/**
   * Get the compartment in which this species is located.
   <p>
   * The compartment is designated by its identifier.
   <p>
   * @return the value of the \'compartment\' attribute of this {@link Species}
   * object, as a string.
   */ public
";


%javamethodmodifiers Species::getInitialAmount() const "
/**
   * Get the value of the \'initialAmount\' attribute.
   <p>
   * @return the initialAmount of this {@link Species}, as a float-point number.
   */ public
";


%javamethodmodifiers Species::getInitialConcentration() const "
/**
   * Get the value of the \'initialConcentration\' attribute.
   <p>
   * @return the initialConcentration of this {@link Species},, as a float-point
   * number.
   <p>
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::getSubstanceUnits() const "
/**
   * Get the value of the \'substanceUnits\' attribute.
   <p>
   * @return the value of the \'substanceUnits\' attribute of this {@link Species},
   * as a string.  An empty string indicates that no units have been
   * assigned.
   <p>
   * <p>
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
   <p>
   * @see #isSetSubstanceUnits()
   * @see #setSubstanceUnits(String sid)
   */ public
";


%javamethodmodifiers Species::getSpatialSizeUnits() const "
/**
   * Get the value of the \'spatialSizeUnits\' attribute.
   <p>
   * @return the value of the \'spatialSizeUnits\' attribute of this {@link Species}
   * object, as a string.
   <p>
   * <p>
 * @warning <span class=\'warning\'>In versions of SBML Level&nbsp;2 before
 * Version&nbsp;3, the class {@link Species} included an attribute called
 * \'spatialSizeUnits\', which allowed explicitly setting the units of size for
 * initial concentration.  This attribute was removed in SBML Level&nbsp;2
 * Version&nbsp;3.  LibSBML retains this attribute for compatibility with
 * older definitions of Level&nbsp;2, but its use is strongly discouraged
 * because it is incompatible with Level&nbsp;2 Version&nbsp;3 and
 * Level&nbsp;2 Version&nbsp;4.</span>
   */ public
";


%javamethodmodifiers Species::getUnits() const "
/**
   * Get the value of the \'units\' attribute.
   <p>
   * @return the units of this {@link Species} (L1 only).
   <p>
   * <p>
 * @note The \'units\' attribute is defined only in SBML Level&nbsp;1.  In
 * SBML Level&nbsp;2 and Level&nbsp;3, it has been replaced by a
 * combination of \'substanceUnits\' and the units of the {@link Compartment}
 * object in which a species is located.  In SBML Level&nbsp;2
 * Versions&nbsp;1&ndash;2, an additional attribute \'spatialSizeUnits\'
 * helps determine the units of the species quantity, but this attribute
 * was removed in later versions of SBML Level&nbsp;2. 
   */ public
";


%javamethodmodifiers Species::getHasOnlySubstanceUnits() const "
/**
   * Get the value of the \'hasOnlySubstanceUnits\' attribute.
   <p>
   * @return <code>true</code> if this {@link Species}\' \'hasOnlySubstanceUnits\' attribute
   * value is nonzero, <code>false</code> otherwise.
   <p>
   * @note The \'hasOnlySubstanceUnits\' attribute does not exist in SBML
   * Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::getBoundaryCondition() const "
/**
   * Get the value of the \'boundaryCondition\' attribute.
   <p>
   * @return <code>true</code> if this {@link Species}\' \'boundaryCondition\' attribute value
   * is nonzero, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Species::getCharge() const "
/**
   * Get the value of the \'charge\' attribute.
   <p>
   * @return the charge of this {@link Species} object.
   <p>
   * <p>
 * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
 * attribute on {@link Species} is deprecated and in SBML Level&nbsp;3 it does
 * not exist at all.  Its use strongly discouraged.  Its presence is
 * considered a misfeature in earlier definitions of SBML because its
 * implications for the mathematics of a model were never defined, and in
 * any case, no known modeling system ever used it.  Instead, models take
 * account of charge values directly in their definitions of species by
 * (for example) having separate species identities for the charged and
 * uncharged versions of the same species.  This allows the condition to
 * affect model mathematics directly.  LibSBML retains this method for
 * easier compatibility with SBML Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::getConstant() const "
/**
   * Get the value of the \'constant\' attribute.
   <p>
   * @return <code>true</code> if this {@link Species}\'s \'constant\' attribute value is
   * nonzero, <code>false</code> otherwise.
   <p>
   * @note The attribute \'constant\' is only available in SBML Levels&nbsp;2
   * and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::getConversionFactor() const "
/**
   * Get the value of the \'conversionFactor\' attribute.
   <p>
   * @return the conversionFactor of this {@link Species}, as a string.
   <p>
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on {@link Species} in SBML Levels&nbsp;1
   * and&nbsp;2.
   */ public
";


%javamethodmodifiers Species::isSetId() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'id\' attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Species::isSetName() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'name\' attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Species::isSetSpeciesType() const "
/**
   * Predicate returning <code>true</code> if this {@link Species} object\'s
   * \'speciesType\' attribute is set.
   <p>
   * @return <code>true</code> if the \'speciesType\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'speciesType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%javamethodmodifiers Species::isSetCompartment() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'compartment\' attribute is set.
   <p>
   * @return <code>true</code> if the \'compartment\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Species::isSetInitialAmount() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'initialAmount\' attribute is set.
   <p>
   * @return <code>true</code> if the \'initialAmount\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   <p>
   * @note In SBML Level&nbsp;1, {@link Species}\' \'initialAmount\' is required and
   * therefore <em>should always be set</em>.  (However, in Level&nbsp;1, the
   * attribute has no default value either, so this method will not return
   * <code>true</code> until a value has been assigned.)  In SBML Level&nbsp;2,
   * \'initialAmount\' is optional and as such may or may not be set.
   */ public
";


%javamethodmodifiers Species::isSetInitialConcentration() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'initialConcentration\' attribute is set.
   <p>
   * @return <code>true</code> if the \'initialConcentration\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::isSetSubstanceUnits() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'substanceUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'substanceUnits\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Species::isSetSpatialSizeUnits() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'spatialSizeUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'spatialSizeUnits\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   <p>
   * <p>
 * @warning <span class=\'warning\'>In versions of SBML Level&nbsp;2 before
 * Version&nbsp;3, the class {@link Species} included an attribute called
 * \'spatialSizeUnits\', which allowed explicitly setting the units of size for
 * initial concentration.  This attribute was removed in SBML Level&nbsp;2
 * Version&nbsp;3.  LibSBML retains this attribute for compatibility with
 * older definitions of Level&nbsp;2, but its use is strongly discouraged
 * because it is incompatible with Level&nbsp;2 Version&nbsp;3 and
 * Level&nbsp;2 Version&nbsp;4.</span>
   */ public
";


%javamethodmodifiers Species::isSetUnits() const "
/**
   * Predicate returning <code>true</code> if
   * this {@link Species} object\'s \'units\' attribute is set.
   <p>
   * @return <code>true</code> if the \'units\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Species::isSetCharge() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'charge\' attribute is set.
   <p>
   * @return <code>true</code> if the \'charge\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   <p>
   * <p>
 * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
 * attribute on {@link Species} is deprecated and in SBML Level&nbsp;3 it does
 * not exist at all.  Its use strongly discouraged.  Its presence is
 * considered a misfeature in earlier definitions of SBML because its
 * implications for the mathematics of a model were never defined, and in
 * any case, no known modeling system ever used it.  Instead, models take
 * account of charge values directly in their definitions of species by
 * (for example) having separate species identities for the charged and
 * uncharged versions of the same species.  This allows the condition to
 * affect model mathematics directly.  LibSBML retains this method for
 * easier compatibility with SBML Level&nbsp;1. 
   */ public
";


%javamethodmodifiers Species::isSetConversionFactor() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'conversionFactor\' attribute is set.
   <p>
   * @return <code>true</code> if the \'conversionFactor\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on {@link Species} in SBML Levels&nbsp;1
   * and&nbsp;2.
   */ public
";


%javamethodmodifiers Species::isSetBoundaryCondition() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'boundaryCondition\' attribute is set.
   <p>
   * @return <code>true</code> if the \'boundaryCondition\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Species::isSetHasOnlySubstanceUnits() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'hasOnlySubstanceUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'hasOnlySubstanceUnits\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'hasOnlySubstanceUnits\' attribute does not exist in SBML
   * Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::isSetConstant() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'constant\' attribute is set.
   <p>
   * @return <code>true</code> if the \'constant\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The attribute \'constant\' is only available in SBML Levels&nbsp;2
   * and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link Species} object.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link Species}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Species::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link Species} object.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link Species}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Species::setSpeciesType(const std::string& sid) "
/**
   * Sets the \'speciesType\' attribute of this {@link Species} object.
   <p>
   * @param sid the identifier of a {@link SpeciesType} object defined elsewhere
   * in this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The \'speciesType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%javamethodmodifiers Species::setCompartment(const std::string& sid) "
/**
   * Sets the \'compartment\' attribute of this {@link Species} object.
   <p>
   * @param sid the identifier of a {@link Compartment} object defined elsewhere
   * in this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Species::setInitialAmount(double value) "
/**
   * Sets the \'initialAmount\' attribute of this {@link Species} and marks the field
   * as set.
   <p>
   * This method also unsets the \'initialConcentration\' attribute.
   <p>
   * @param value the value to which the \'initialAmount\' attribute should
   * be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers Species::setInitialConcentration(double value) "
/**
   * Sets the \'initialConcentration\' attribute of this {@link Species} and marks
   * the field as set.
   <p>
   * This method also unsets the \'initialAmount\' attribute.
   <p>
   * @param value the value to which the \'initialConcentration\' attribute
   * should be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::setSubstanceUnits(const std::string& sid) "
/**
   * Sets the \'substanceUnits\' attribute of this {@link Species} object.
   <p>
   * @param sid the identifier of the unit to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Species::setSpatialSizeUnits(const std::string& sid) "
/**
   * (SBML Level&nbsp;2 Versions&nbsp;1&ndash;2) Sets the \'spatialSizeUnits\' attribute of this {@link Species} object.
   <p>
   * @param sid the identifier of the unit to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * <p>
 * @warning <span class=\'warning\'>In versions of SBML Level&nbsp;2 before
 * Version&nbsp;3, the class {@link Species} included an attribute called
 * \'spatialSizeUnits\', which allowed explicitly setting the units of size for
 * initial concentration.  This attribute was removed in SBML Level&nbsp;2
 * Version&nbsp;3.  LibSBML retains this attribute for compatibility with
 * older definitions of Level&nbsp;2, but its use is strongly discouraged
 * because it is incompatible with Level&nbsp;2 Version&nbsp;3 and
 * Level&nbsp;2 Version&nbsp;4.</span>
   */ public
";


%javamethodmodifiers Species::setUnits(const std::string& sname) "
/**
   * (SBML Level&nbsp;1 only) Sets the units of this {@link Species} object.
   <p>
   * @param sname the identifier of the unit to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
  */ public
";


%javamethodmodifiers Species::setHasOnlySubstanceUnits(bool value) "
/**
   * Sets the \'hasOnlySubstanceUnits\' attribute of this {@link Species} object.
   <p>
   * @param value boolean value for the \'hasOnlySubstanceUnits\' attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The \'hasOnlySubstanceUnits\' attribute does not exist in SBML
   * Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::setBoundaryCondition(bool value) "
/**
   * Sets the \'boundaryCondition\' attribute of this {@link Species} object.
   <p>
   * @param value boolean value for the \'boundaryCondition\' attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers Species::setCharge(int value) "
/**
   * Sets the \'charge\' attribute of this {@link Species} object.
   <p>
   * @param value an integer to which to set the \'charge\' to.
   <p>
   * <p>
 * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
 * attribute on {@link Species} is deprecated and in SBML Level&nbsp;3 it does
 * not exist at all.  Its use strongly discouraged.  Its presence is
 * considered a misfeature in earlier definitions of SBML because its
 * implications for the mathematics of a model were never defined, and in
 * any case, no known modeling system ever used it.  Instead, models take
 * account of charge values directly in their definitions of species by
 * (for example) having separate species identities for the charged and
 * uncharged versions of the same species.  This allows the condition to
 * affect model mathematics directly.  LibSBML retains this method for
 * easier compatibility with SBML Level&nbsp;1. 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * </ul>
   */ public
";


%javamethodmodifiers Species::setConstant(bool value) "
/**
   * Sets the \'constant\' attribute of this {@link Species} object.
   <p>
   * @param value a boolean value for the \'constant\' attribute
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The attribute \'constant\' is only available in SBML Levels&nbsp;2
   * and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::setConversionFactor(const std::string& sid) "
/**
   * Sets the value of the \'conversionFactor\' attribute of this {@link Species} object.
   <p>
   * The string in <code>sid</code> is copied.
   <p>
   * @param sid the new conversionFactor for the {@link Species}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on {@link Species} in SBML Levels&nbsp;1
   * and&nbsp;2.
   */ public
";


%javamethodmodifiers Species::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link Species} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Species::unsetSpeciesType "
/**
   * Unsets the \'speciesType\' attribute value of this {@link Species} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The attribute \'speciesType\' is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%javamethodmodifiers Species::unsetInitialAmount "
/**
   * Unsets the \'initialAmount\' attribute value of this {@link Species} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Species::unsetInitialConcentration "
/**
   * Unsets the \'initialConcentration\' attribute value of this {@link Species} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */ public
";


%javamethodmodifiers Species::unsetSubstanceUnits "
/**
   * Unsets the \'substanceUnits\' attribute value of this {@link Species} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Species::unsetSpatialSizeUnits "
/**
   * Unsets the \'spatialSizeUnits\' attribute value of this {@link Species} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @warning <span class=\'warning\'>In versions of SBML Level&nbsp;2 before
 * Version&nbsp;3, the class {@link Species} included an attribute called
 * \'spatialSizeUnits\', which allowed explicitly setting the units of size for
 * initial concentration.  This attribute was removed in SBML Level&nbsp;2
 * Version&nbsp;3.  LibSBML retains this attribute for compatibility with
 * older definitions of Level&nbsp;2, but its use is strongly discouraged
 * because it is incompatible with Level&nbsp;2 Version&nbsp;3 and
 * Level&nbsp;2 Version&nbsp;4.</span>
   */ public
";


%javamethodmodifiers Species::unsetUnits "
/**
   * Unsets the \'units\' attribute value of this {@link Species} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Species::unsetCharge "
/**
   * Unsets the \'charge\' attribute
   * value of this {@link Species} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
 * attribute on {@link Species} is deprecated and in SBML Level&nbsp;3 it does
 * not exist at all.  Its use strongly discouraged.  Its presence is
 * considered a misfeature in earlier definitions of SBML because its
 * implications for the mathematics of a model were never defined, and in
 * any case, no known modeling system ever used it.  Instead, models take
 * account of charge values directly in their definitions of species by
 * (for example) having separate species identities for the charged and
 * uncharged versions of the same species.  This allows the condition to
 * affect model mathematics directly.  LibSBML retains this method for
 * easier compatibility with SBML Level&nbsp;1. 
   */ public
";


%javamethodmodifiers Species::unsetConversionFactor "
/**
   * Unsets the \'conversionFactor\' attribute value of this {@link Species} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on {@link Species} in SBML Levels&nbsp;1
   * and&nbsp;2.
   */ public
";


%javamethodmodifiers Species::getDerivedUnitDefinition "
/**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Species}\' amount or concentration.
   <p>
   * {@link Species} in SBML have an attribute (\'substanceUnits\') for declaring the
   * units of measurement intended for the species\' amount or concentration
   * (depending on which one applies).  In the absence of a value given for
   * \'substanceUnits\', the units are taken from the enclosing {@link Model}\'s
   * definition of <code>\'substance\'</code> or <code>\'substance\'</code>/<em>(size of the
   * compartment)</em> in which the species is located, or finally, if
   * these are not redefined by the {@link Model}, the relevant SBML default units
   * for those quantities.  Following that procedure, the method
   * {@link Species#getDerivedUnitDefinition()}
   * returns a {@link UnitDefinition} based on the
   * interpreted units of this species\'s amount or concentration.
   <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   <p>
   * Note also that unit declarations for {@link Species} are in terms of the 
   * <em>identifier</em> of a unit, but this method returns a {@link UnitDefinition} object,
   * not a unit identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  Callers may find this particularly useful when used
   * in conjunction with the helper methods on {@link UnitDefinition} for comparing
   * different {@link UnitDefinition} objects.
   <p>
   * In SBML Level&nbsp;2 specifications prior to Version&nbsp;3, {@link Species}
   * includes an additional attribute named \'spatialSizeUnits\', which
   * allows explicitly setting the units of size for initial concentration.
   * The {@link Species#getDerivedUnitDefinition()}
   * takes this into account for models
   * expressed in SBML Level&nbsp;2 Versions&nbsp;1 and&nbsp;2.
   <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Species}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #getSubstanceUnits()
   */ public
";


%javamethodmodifiers Species::getDerivedUnitDefinition() const "
/**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Species}\' amount or concentration.
   <p>
   * {@link Species} in SBML have an attribute (\'substanceUnits\') for declaring the
   * units of measurement intended for the species\' amount or concentration
   * (depending on which one applies).  In the absence of a value given for
   * \'substanceUnits\', the units are taken from the enclosing {@link Model}\'s
   * definition of <code>\'substance\'</code> or <code>\'substance\'</code>/<em>(size of the
   * compartment)</em> in which the species is located, or finally, if
   * these are not redefined by the {@link Model}, the relevant SBML default units
   * for those quantities.  Following that procedure, the method
   * {@link Species#getDerivedUnitDefinition()}
   * returns a {@link UnitDefinition} based on the
   * interpreted units of this species\'s amount or concentration.
   <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   <p>
   * Note also that unit declarations for {@link Species} are in terms of the 
   * <em>identifier</em> of a unit, but this method returns a {@link UnitDefinition} object,
   * not a unit identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  Callers may find this particularly useful when used
   * in conjunction with the helper methods on {@link UnitDefinition} for comparing
   * different {@link UnitDefinition} objects.
   <p>
   * In SBML Level&nbsp;2 specifications prior to Version&nbsp;3, {@link Species}
   * includes an additional attribute named \'spatialSizeUnits\', which
   * allows explicitly setting the units of size for initial concentration.
   * The {@link Species#getDerivedUnitDefinition()}
   * takes this into account for models
   * expressed in SBML Level&nbsp;2 Versions&nbsp;1 and&nbsp;2.
   <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Species}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #getSubstanceUnits()
   */ public
";


%javamethodmodifiers Species::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_SPECIES SBML_SPECIES} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Species::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Species}, is
   * always <code>\'species\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'species\'.</code>
   */ public
";


%javamethodmodifiers Species::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Species::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Species} object
   * have been set.
   <p>
   * The required attributes for a {@link Species} object are:
   * <ul>
   * <li> \'id\' (or \'name\' in SBML Level&nbsp;1)
   * <li> \'compartment\'
   * <li> \'initialAmount\' (required in SBML Level&nbsp;1 only; optional otherwise)
   * <li> \'hasOnlySubstanceUnits\' (required in SBML Level&nbsp;3; optional in SBML Level&nbsp;2)
   * <li> \'boundaryCondition\' (required in SBML Level&nbsp;3; optional in Levels&nbsp;1 and&nbsp;2)
   * <li> \'constant\' (required in SBML Level&nbsp;3; optional in SBML Level&nbsp;2)
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Species::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Species::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Species::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Species::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Species::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Species::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Species::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Species::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Species::isExplicitlySetBoundaryCondition() const "
/** * @internal */ public
";


%javamethodmodifiers Species::isExplicitlySetConstant() const "
/** * @internal */ public
";


%javamethodmodifiers Species::isExplicitlySetHasOnlySubsUnits() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfSpecies::ListOfSpecies(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfSpecies} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfSpecies::ListOfSpecies(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfSpecies} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfSpecies} object to be created.
   */ public
";


%javamethodmodifiers ListOfSpecies::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfSpecies} object.
   <p>
   * @return the (deep) copy of this {@link ListOfSpecies} object.
   */ public
";


%javamethodmodifiers ListOfSpecies::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Species} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for objects contained in this list:
   * {@link libsbmlConstants#SBML_SPECIES SBML_SPECIES} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfSpecies::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For ListOfSpeciess, the XML element name is <code>\'listOfSpeciess\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfSpeciess\'.</code>
   */ public
";


%javamethodmodifiers ListOfSpecies::get(unsigned int n) "
/**
   * Get a {@link Species} from the {@link ListOfSpecies}.
   <p>
   * @param n the index number of the {@link Species} to get.
   <p>
   * @return the nth {@link Species} in this {@link ListOfSpecies}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpecies::get "
/**
   * Get a {@link Species} from the {@link ListOfSpecies}.
   <p>
   * @param n the index number of the {@link Species} to get.
   <p>
   * @return the nth {@link Species} in this {@link ListOfSpecies}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpecies::get(const std::string& sid) "
/**
   * Get a {@link Species} from the {@link ListOfSpecies}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link Species} to get.
   <p>
   * @return {@link Species} in this {@link ListOfSpecies}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link Species} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpecies::get(const std::string& sid) const "
/**
   * Get a {@link Species} from the {@link ListOfSpecies}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link Species} to get.
   <p>
   * @return {@link Species} in this {@link ListOfSpecies}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link Species} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpecies::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfSpeciess items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpecies::remove(const std::string& sid) "
/**
   * Removes item in this ListOfSpeciess items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfSpecies::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfSpecies::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) Parameter "
/** 
 *  An SBML parameter: a named symbol with a value.
 <p>
 * A {@link Parameter} is used in SBML to define a symbol associated with a value;
 * this symbol can then be used in mathematical formulas in a model.  By
 * default, parameters have constant value for the duration of a
 * simulation, and for this reason are called <em>parameters</em> instead of 
 * <em>variables</em> in SBML, although it is crucial to understand that <em>SBML
 * parameters represent both concepts</em>.  Whether a given SBML
 * parameter is intended to be constant or variable is indicated by the
 * value of its \'constant\' attribute.
 <p>
 * SBML\'s {@link Parameter} has a required attribute, \'id\', that gives the
 * parameter a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A parameter can also have an optional
 * \'name\' attribute of type <code>string.</code>  Identifiers and names must be used
 * according to the guidelines described in the SBML specifications.
 <p>
 * The optional attribute \'value\' determines the value (of type <code>double</code>)
 * assigned to the parameter.  A missing value for \'value\' implies that
 * the value either is unknown, or to be obtained from an external source,
 * or determined by an initial assignment.  The unit of measurement
 * associated with the value of the parameter can be specified using the
 * optional attribute \'units\'.  Here we only mention briefly some notable
 * points about the possible unit choices, but readers are urged to consult
 * the SBML specification documents for more information:
 * <ul>
 <p>
 * <li> In SBML Level&nbsp;3, there are no constraints on the units that
 * can be assigned to parameters in a model; there are also no units to
 * inherit from the enclosing {@link Model} object (unlike the case for, e.g.,
 * {@link Species} and {@link Compartment}).
 <p>
 * <li> In SBML Level&nbsp;2, the value assigned to the parameter\'s \'units\'
 * attribute must be chosen from one of the following possibilities: one of
 * the base unit identifiers defined in SBML; one of the built-in unit
 * identifiers <code>\'substance\'</code>, <code>\'time\'</code>, <code>\'volume\'</code>, <code>\'area\'</code> or 
 * <code>\'length\'</code>; or the identifier of a new unit defined in the list of unit
 * definitions in the enclosing {@link Model} structure.  There are no constraints
 * on the units that can be chosen from these sets.  There are no default
 * units for parameters.
 * </ul>
 <p>
 * The {@link Parameter} structure has another boolean attribute named \'constant\'
 * that is used to indicate whether the parameter\'s value can vary during a
 * simulation.  (In SBML Level&nbsp;3, the attribute is mandatory and must
 * be given a value; in SBML Levels below Level&nbsp;3, the attribute is
 * optional.)  A value of <code>true</code> indicates the parameter\'s value cannot be
 * changed by any construct except {@link InitialAssignment}.  Conversely, if the
 * value of \'constant\' is <code>false</code>, other constructs in SBML, such as rules
 * and events, can change the value of the parameter.
 <p>
 * SBML Level&nbsp;3 uses a separate object class, {@link LocalParameter}, for
 * parameters that are local to a {@link Reaction}\'s {@link KineticLaw}.  In Levels prior
 * to SBML Level&nbsp;3, the {@link Parameter} class is used both for definitions
 * of global parameters, as well as reaction-local parameters stored in a
 * list within {@link KineticLaw} objects.  {@link Parameter} objects that are local to a
 * reaction (that is, those defined within the {@link KineticLaw} structure of a
 * {@link Reaction}) cannot be changed by rules and therefore are <em>implicitly
 * always constant</em>; consequently, in SBML Level&nbsp;2, parameter
 * definitions within {@link Reaction} structures should <em>not</em> have their
 * \'constant\' attribute set to <code>false.</code>
 <p>
 * What if a global parameter has its \'constant\' attribute set to <code>false</code>,
 * but the model does not contain any rules, events or other constructs
 * that ever change its value over time?  Although the model may be
 * suspect, this situation is not strictly an error.  A value of <code>false</code>
 * for \'constant\' only indicates that a parameter <em>can</em> change value, not
 * that it <em>must</em>.
 <p>
 * As with all other major SBML components, {@link Parameter} is derived from
 * {@link SBase}, and the methods defined on {@link SBase} are available on {@link Parameter}.
 <p>
 * @note The use of the term <em>parameter</em> in SBML sometimes leads to
 * confusion among readers who have a particular notion of what something
 * called \'parameter\' should be.  It has been the source of heated debate,
 * but despite this, no one has yet found an adequate replacement term that
 * does not have different connotations to different people and hence leads
 * to confusion among <em>some</em> subset of users.  Perhaps it would have been
 * better to have two constructs, one called <em>constants</em> and the other
 * called <em>variables</em>.  The current approach in SBML is simply more
 * parsimonious, using a single {@link Parameter} construct with the boolean flag
 * \'constant\' indicating which flavor it is.  In any case, readers are
 * implored to look past their particular definition of a <em>parameter</em> and
 * simply view SBML\'s {@link Parameter} as a single mechanism for defining both
 * constants and (additional) variables in a model.  (We write 
 * <em>additional</em> because the species in a model are usually considered to be
 * the central variables.)  After all, software tools are not required to
 * expose to users the actual names of particular SBML constructs, and
 * thus tools can present to their users whatever terms their designers
 * feel best matches their target audience.
 <p>
 * @see ListOfParameters
 */
"


%typemap(javaimports) ListOfParameters "
/** 
 *  A list of {@link Parameter} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers Parameter::Parameter(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Parameter} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Parameter}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Parameter}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Parameter::Parameter(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Parameter} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link Parameter} is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor if no identifier is provided as an argument.  Setting the
   * identifier can be accomplished using the method
   * setId(String id).
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Parameter::Parameter(const Parameter& orig) "
/**
   * Copy constructor; creates a copy of a {@link Parameter}.
   <p>
   * @param orig the {@link Parameter} instance to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Parameter::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Parameter}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, indicating
   * whether the Visitor would like to visit the next {@link Parameter} object in
   * the list of parameters within which <em>the</em> present object is
   * embedded.
   */ public
";


%javamethodmodifiers Parameter::clone() const "
/**
   * Creates and returns a deep copy of this {@link Parameter} object.
   <p>
   * @return the (deep) copy of this {@link Parameter} object.
   */ public
";


%javamethodmodifiers Parameter::initDefaults "
/**
   * Initializes the fields of this {@link Parameter} object to \'typical\' defaults
   * values.
   <p>
   * The SBML {@link Parameter} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.  Many
   * SBML object classes defined by libSBML have an initDefaults() method
   * to set the values to certain common defaults, based mostly on what
   * they are in SBML Level&nbsp;2.  In the case of {@link Parameter}, this method
   * only sets the value of the \'constant\' attribute to <code>true.</code>
   <p>
   * @see #getConstant()
   * @see #isSetConstant()
   * @see #setConstant(boolean)
   */ public
";


%javamethodmodifiers Parameter::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link Parameter}.
   <p>
   * @return the id of this {@link Parameter}.
   */ public
";


%javamethodmodifiers Parameter::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link Parameter}.
   <p>
   * @return the name of this {@link Parameter}.
   */ public
";


%javamethodmodifiers Parameter::getValue() const "
/**
   * Gets the numerical value of this {@link Parameter}.
   <p>
   * @return the value of the \'value\' attribute of this {@link Parameter}, as a
   * number of type <code>double.</code>
   <p>
   * @note <b>It is crucial</b> that callers not blindly call
   * {@link Parameter#getValue()} without first using {@link Parameter#isSetValue()} to
   * determine whether a value has ever been set.  Otherwise, the value
   * return by {@link Parameter#getValue()} may not actually represent a value
   * assigned to the parameter.  The reason is simply that the data type
   * <code>double</code> in a program always has <em>some</em> value.  A separate test is
   * needed to determine whether the value is a true model value, or
   * uninitialized data in a computer\'s memory location.
   <p>
   * @see #isSetValue()
   * @see #setValue(double value)
   * @see #getUnits()
   */ public
";


%javamethodmodifiers Parameter::getUnits() const "
/**
   * Gets the units defined for this {@link Parameter}.
   <p>
   * The value of an SBML parameter\'s \'units\' attribute establishes the
   * unit of measurement associated with the parameter\'s value.
   <p>
   * @return the value of the \'units\' attribute of this {@link Parameter}, as a
   * string.  An empty string indicates that no units have been assigned.
   <p>
   * <p>
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
   <p>
   * @see #isSetUnits()
   * @see #setUnits(String)
   * @see #getValue()
   */ public
";


%javamethodmodifiers Parameter::getConstant() const "
/**
   * Gets the value of the \'constant\' attribute of this {@link Parameter} instance.
   <p>
   * @return <code>true</code> if this {@link Parameter} is declared as being constant,
   * <code>false</code> otherwise.
   <p>
   * <p>
 * @note Readers who view the documentation for {@link LocalParameter} may be
 * confused about the presence of this method.  LibSBML derives
 * {@link LocalParameter} from {@link Parameter}; however, this does not precisely match
 * the object hierarchy defined by SBML Level&nbsp;3, where
 * {@link LocalParameter} is derived directly from {@link SBase} and not {@link Parameter}.  We
 * believe this arrangement makes it easier for libSBML users to program
 * applications that work with both SBML Level&nbsp;2 and SBML
 * Level&nbsp;3, but programmers should also keep in mind this difference
 * exists.  A side-effect of libSBML\'s scheme is that certain methods on
 * {@link LocalParameter} that are inherited from {@link Parameter} do not actually have
 * relevance to {@link LocalParameter} objects.  An example of this is the
 * methods pertaining to {@link Parameter}\'s attribute \'constant\' (i.e.,
 * isSetConstant(), setConstant(), and getConstant()).
   <p>
   * @see #isSetConstant()
   * @see #setConstant(boolean)
   */ public
";


%javamethodmodifiers Parameter::isSetId() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Parameter}\'s \'id\' attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Parameter} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Parameter::isSetName() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Parameter}\'s \'name\' attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Parameter} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Parameter::isSetValue() const "
/**
   * Predicate returning <code>true</code> if the
   * \'value\' attribute of this {@link Parameter} is set.
   <p>
   * In SBML definitions after SBML Level&nbsp;1 Version&nbsp;1,
   * parameter values are optional and have no defaults.  If a model read
   * from a file does not contain a setting for the \'value\' attribute of a
   * parameter, its value is considered unset; it does not default to any
   * particular value.  Similarly, when a {@link Parameter} object is created in
   * libSBML, it has no value until given a value.  The
   * {@link Parameter#isSetValue()} method allows calling applications to
   * determine whether a given parameter\'s value has ever been set.
   <p>
   * In SBML Level&nbsp;1 Version&nbsp;1, parameters are required to have
   * values and therefore, the value of a {@link Parameter} <b>should always be
   * set</b>.  In Level&nbsp;1 Version&nbsp;2 and beyond, the value is
   * optional and as such, the \'value\' attribute may or may not be set.
   <p>
   * @return <code>true</code> if the value of this {@link Parameter} is set,
   * <code>false</code> otherwise.
   <p>
   * @see #getValue()
   * @see #setValue(double value)
   */ public
";


%javamethodmodifiers Parameter::isSetUnits() const "
/**
   * Predicate returning <code>true</code> if the
   * \'units\' attribute of this {@link Parameter} is set.
   <p>
   * @return <code>true</code> if the \'units\' attribute of this {@link Parameter} is
   * set, <code>false</code> otherwise.
   <p>
   * <p>
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
   */ public
";


%javamethodmodifiers Parameter::isSetConstant() const "
/**
   * Predicate returning <code>true</code> if the
   * \'constant\' attribute of this {@link Parameter} is set.
   <p>
   * @return <code>true</code> if the \'constant\' attribute of this {@link Parameter} is
   * set, <code>false</code> otherwise.
   <p>
   * <p>
 * @note Readers who view the documentation for {@link LocalParameter} may be
 * confused about the presence of this method.  LibSBML derives
 * {@link LocalParameter} from {@link Parameter}; however, this does not precisely match
 * the object hierarchy defined by SBML Level&nbsp;3, where
 * {@link LocalParameter} is derived directly from {@link SBase} and not {@link Parameter}.  We
 * believe this arrangement makes it easier for libSBML users to program
 * applications that work with both SBML Level&nbsp;2 and SBML
 * Level&nbsp;3, but programmers should also keep in mind this difference
 * exists.  A side-effect of libSBML\'s scheme is that certain methods on
 * {@link LocalParameter} that are inherited from {@link Parameter} do not actually have
 * relevance to {@link LocalParameter} objects.  An example of this is the
 * methods pertaining to {@link Parameter}\'s attribute \'constant\' (i.e.,
 * isSetConstant(), setConstant(), and getConstant()).
   <p>
   * @see #getConstant()
   * @see #setConstant(boolean)
   */ public
";


%javamethodmodifiers Parameter::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link Parameter}.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link Parameter}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Parameter::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link Parameter}.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link Parameter}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Parameter::setValue(double value) "
/**
   * Sets the \'value\' attribute of this {@link Parameter} to the given <code>double</code>
   * value and marks the attribute as set.
   <p>
   * @param value a <code>double</code>, the value to assign
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers Parameter::setUnits(const std::string& units) "
/**
   * Sets the \'units\' attribute of this {@link Parameter} to a copy of the given
   * units identifier <code>units</code>.
   <p>
   * @param units a string, the identifier of the units to assign to this
   * {@link Parameter} instance
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Parameter::setConstant(bool flag) "
/**
   * Sets the \'constant\' attribute of this {@link Parameter} to the given boolean
   * <code>flag</code>.
   <p>
   * @param flag a boolean, the value for the \'constant\' attribute of this
   * {@link Parameter} instance
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * <p>
 * @note Readers who view the documentation for {@link LocalParameter} may be
 * confused about the presence of this method.  LibSBML derives
 * {@link LocalParameter} from {@link Parameter}; however, this does not precisely match
 * the object hierarchy defined by SBML Level&nbsp;3, where
 * {@link LocalParameter} is derived directly from {@link SBase} and not {@link Parameter}.  We
 * believe this arrangement makes it easier for libSBML users to program
 * applications that work with both SBML Level&nbsp;2 and SBML
 * Level&nbsp;3, but programmers should also keep in mind this difference
 * exists.  A side-effect of libSBML\'s scheme is that certain methods on
 * {@link LocalParameter} that are inherited from {@link Parameter} do not actually have
 * relevance to {@link LocalParameter} objects.  An example of this is the
 * methods pertaining to {@link Parameter}\'s attribute \'constant\' (i.e.,
 * isSetConstant(), setConstant(), and getConstant()).
   <p>
   * @see #getConstant()
   * @see #isSetConstant()
   */ public
";


%javamethodmodifiers Parameter::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link Parameter}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Parameter::unsetValue "
/**
   * Unsets the \'value\' attribute of this {@link Parameter} instance.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * In SBML Level&nbsp;1 Version&nbsp;1, parameters are required to have
   * values and therefore, the value of a {@link Parameter} <b>should always be
   * set</b>.  In SBML Level&nbsp;1 Version&nbsp;2 and beyond, the value
   * is optional and as such, the \'value\' attribute may or may not be set.
   */ public
";


%javamethodmodifiers Parameter::unsetUnits "
/**
   * Unsets the \'units\' attribute of this {@link Parameter} instance.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Parameter::getDerivedUnitDefinition "
/**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Parameter}\'s value.
   <p>
   * Parameters in SBML have an attribute (\'units\') for declaring the units
   * of measurement intended for the parameter\'s value.  <b>No defaults are
   * defined</b> by SBML in the absence of a definition for \'units\'.  This
   * method returns a {@link UnitDefinition} object based on the units declared for
   * this {@link Parameter} using its \'units\' attribute, or it returns <code>null</code> if
   * no units have been declared.
   <p>
   * Note that unit declarations for {@link Parameter} objects are specified in
   * terms of the <em>identifier</em> of a unit (e.g., using setUnits()), but
   * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
   * identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.For SBML Level&nbsp;2 models, it will do this even when
   * the value of the \'units\' attribute is one of the special SBML
   * Level&nbsp;2 unit identifiers <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>,
   * <code>\'length\'</code> or <code>\'time\'.</code>  Callers may find this useful in conjunction
   * with the helper methods provided by the {@link UnitDefinition} class for
   * comparing different {@link UnitDefinition} objects.
   <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Parameter}, or <code>null</code> if one cannot be constructed.
   <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link Parameter} object has not yet been added to
   * a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return <code>null.</code>
   <p>
   * @see #isSetUnits()
   */ public
";


%javamethodmodifiers Parameter::getDerivedUnitDefinition() const "
/**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Parameter}\'s value.
   <p>
   * Parameters in SBML have an attribute (\'units\') for declaring the units
   * of measurement intended for the parameter\'s value.  <b>No defaults are
   * defined</b> by SBML in the absence of a definition for \'units\'.  This
   * method returns a {@link UnitDefinition} object based on the units declared for
   * this {@link Parameter} using its \'units\' attribute, or it returns <code>null</code> if
   * no units have been declared.
   <p>
   * Note that unit declarations for {@link Parameter} objects are specified in
   * terms of the <em>identifier</em> of a unit (e.g., using setUnits()), but
   * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
   * identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  For SBML Level&nbsp;2 models, it will do this even
   * when the value of the \'units\' attribute is one of the predefined SBML
   * units <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or 
   * <code>\'time\'.</code>  Callers may find this useful in conjunction with the helper
   * methods provided by the {@link UnitDefinition} class for comparing different
   * {@link UnitDefinition} objects.
   <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Parameter}, or <code>null</code> if one cannot be constructed.
   <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link Parameter} object has not yet been added to
   * a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return <code>null.</code>
   <p>
   * @see #isSetUnits()
   */ public
";


%javamethodmodifiers Parameter::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_PARAMETER SBML_PARAMETER} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Parameter::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Parameter}, is
   * always <code>\'parameter\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'parameter\'.</code>
   */ public
";


%javamethodmodifiers Parameter::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Parameter::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Parameter} object
   * have been set.
   <p>
   * The required attributes for a {@link Parameter} object are:
   * <ul>
   * <li> \'id\' (or \'name\' in SBML Level&nbsp;1)
   * <li> \'value\' (required in Level&nbsp;1, optional otherwise)
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Parameter::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the <code>UnitSIdRef</code> attributes on this element.
   <p>
   * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
   <p>
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of <code>oldid</code>.  If any matches are found,
   * the matching identifiers are replaced with <code>newid</code>.  The method does
   * <em>not</em> descend into child elements.
   <p>
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%javamethodmodifiers Parameter::setCalculatingUnits(bool calculatingUnits) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::Parameter(SBMLNamespaces* sbmlns, bool isLocal) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Parameter::isExplicitlySetConstant() const "
/** * @internal */ public
";


%javamethodmodifiers Parameter::inferUnits(Model* m, bool globalParameter) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::inferUnitsFromAssignments(UnitFormulaFormatter *uff, Model *m) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::inferUnitsFromRules(UnitFormulaFormatter *uff, Model *m) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::inferUnitsFromReactions(UnitFormulaFormatter *uff, Model *m) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::inferUnitsFromEvents(UnitFormulaFormatter *uff, Model *m) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::inferUnitsFromEvent(Event * e, UnitFormulaFormatter *uff, Model *m) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::inferUnitsFromKineticLaw(KineticLaw* kl, UnitFormulaFormatter *uff, Model *m) "
/** * @internal */ public
";


%javamethodmodifiers Parameter::getCalculatingUnits() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfParameters::ListOfParameters(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfParameters} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfParameters::ListOfParameters(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfParameters} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfParameters} object to be created.
   */ public
";


%javamethodmodifiers ListOfParameters::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfParameters} object.
   <p>
   * @return the (deep) copy of this {@link ListOfParameters} object.
   */ public
";


%javamethodmodifiers ListOfParameters::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Parameter} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this objects contained in this list:
   * {@link libsbmlConstants#SBML_PARAMETER SBML_PARAMETER} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfParameters::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfParameters}, the XML element name is <code>\'listOfParameters\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfParameters\'.</code>
   */ public
";


%javamethodmodifiers ListOfParameters::get(unsigned int n) "
/**
   * Returns the {@link Parameter} object located at position <code>n</code> within this
   * {@link ListOfParameters} instance.
   <p>
   * @param n the index number of the {@link Parameter} to get.
   <p>
   * @return the nth {@link Parameter} in this {@link ListOfParameters}.  If the index <code>n</code>
   * is out of bounds for the length of the list, then <code>null</code> is returned.
   <p>
   * @see #size()
   * @see #get(String sid)
   */ public
";


%javamethodmodifiers ListOfParameters::get "
/**
   * Returns the {@link Parameter} object located at position <code>n</code> within this
   * {@link ListOfParameters} instance.
   <p>
   * @param n the index number of the {@link Parameter} to get.
   <p>
   * @return the nth {@link Parameter} in this {@link ListOfParameters}.  If the index <code>n</code>
   * is out of bounds for the length of the list, then <code>null</code> is returned.
   <p>
   * @see #size()
   * @see #get(String sid)
   */ public
";


%javamethodmodifiers ListOfParameters::get(const std::string& sid) "
/**
   * Returns the first {@link Parameter} object matching the given identifier.
   <p>
   * @param sid a string, the identifier of the {@link Parameter} to get.
   <p>
   * @return the {@link Parameter} object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching <code>sid</code>, then <code>null</code> is returned.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfParameters::get(const std::string& sid) const "
/**
   * Returns the first {@link Parameter} object matching the given identifier.
   <p>
   * @param sid a string representing the identifier of the {@link Parameter} to
   * get.
   <p>
   * @return the {@link Parameter} object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching <code>sid</code>, then <code>null</code> is returned.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfParameters::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfParameters}, and returns a pointer
   * to it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If the index number <code>n</code> is out of
   * bounds for the length of the list, then <code>null</code> is returned.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfParameters::remove(const std::string& sid) "
/**
   * Removes the first {@link Parameter} object in this {@link ListOfParameters}
   * matching the given identifier, and returns a pointer to it.
   <p>
   * @param sid the identifier of the item to remove.
   <p>
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If none of the items have an identifier
   * matching <code>sid</code>, then <code>null</code> is returned.
   */ public
";


%javamethodmodifiers ListOfParameters::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfParameters::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) LocalParameter "
/** 
 *  A parameter inside an SBML <em>reaction</em> definition.
 <p>
 * {@link LocalParameter} has been introduced in SBML Level&nbsp;3 to serve as the
 * object class for parameter definitions that are intended to be local to
 * a {@link Reaction}.  Objects of class {@link LocalParameter} never appear at the {@link Model}
 * level; they are always contained within {@link ListOfLocalParameters} lists
 * which are in turn contained within {@link KineticLaw} objects.
 <p>
 * Like its global {@link Parameter} counterpart, the {@link LocalParameter} object class
 * is used to define a symbol associated with a value; this symbol can then
 * be used in a model\'s mathematical formulas (and specifically, for
 * {@link LocalParameter}, reaction rate formulas).  Unlike {@link Parameter}, the
 * {@link LocalParameter} class does not have a \'constant\' attribute: local
 * parameters within reactions are <em>always</em> constant.
 <p>
 * {@link LocalParameter} has one required attribute, \'id\', to give the
 * parameter a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A parameter can also have an optional
 * \'name\' attribute of type <code>string.</code>  Identifiers and names must be used
 * according to the guidelines described in the SBML specifications.
 <p>
 * The optional attribute \'value\' determines the value (of type <code>double</code>)
 * assigned to the parameter.  A missing value for \'value\' implies that
 * the value either is unknown, or to be obtained from an external source,
 * or determined by an initial assignment.  The unit of measurement
 * associated with the value of the parameter can be specified using the
 * optional attribute \'units\'.  Here we only mention briefly some notable
 * points about the possible unit choices, but readers are urged to consult
 * the SBML specification documents for more information:
 * <ul>
 <p>
 * <li> In SBML Level&nbsp;3, there are no constraints on the units that
 * can be assigned to parameters in a model; there are also no units to
 * inherit from the enclosing {@link Model} object.
 <p>
 * <li> In SBML Level&nbsp;2, the value assigned to the parameter\'s \'units\'
 * attribute must be chosen from one of the following possibilities: one of
 * the base unit identifiers defined in SBML; one of the built-in unit
 * identifiers <code>\'substance\'</code>, <code>\'time\'</code>, <code>\'volume\'</code>, <code>\'area\'</code> or 
 * <code>\'length\'</code>; or the identifier of a new unit defined in the list of unit
 * definitions in the enclosing {@link Model} structure.  There are no constraints
 * on the units that can be chosen from these sets.  There are no default
 * units for local parameters.
 * </ul>
 <p>
 * As with all other major SBML components, {@link LocalParameter} is derived from
 * {@link SBase}, and the methods defined on {@link SBase} are available on {@link LocalParameter}.
 <p>
 * @warning <span class=\'warning\'>LibSBML derives {@link LocalParameter} from
 * {@link Parameter}; however, this does not precisely match the object hierarchy
 * defined by SBML Level&nbsp;3, where {@link LocalParameter} is derived directly
 * from {@link SBase} and not {@link Parameter}.  We believe this arrangement makes it easier
 * for libSBML users to program applications that work with both SBML
 * Level&nbsp;2 and SBML Level&nbsp;3, but programmers should also keep in
 * mind this difference exists.  A side-effect of libSBML\'s scheme is that
 * certain methods on {@link LocalParameter} that are inherited from {@link Parameter} do not
 * actually have relevance to {@link LocalParameter} objects.  An example of this is
 * the methods pertaining to {@link Parameter}\'s attribute \'constant\' (i.e.,
 * isSetConstant(), setConstant(), and getConstant()).</span>
 <p>
 * @see ListOfLocalParameters
 * @see KineticLaw
 */
"


%typemap(javaimports) ListOfLocalParameters "
/** 
 *  A list of {@link LocalParameter} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers LocalParameter::LocalParameter(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link LocalParameter} object with the given SBML <code>level</code> and
   * <code>version</code> values.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link LocalParameter}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LocalParameter}.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers LocalParameter::LocalParameter(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link LocalParameter} object with the given {@link SBMLNamespaces}
   * object <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link LocalParameter} is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor if no identifier is provided as an argument.  Setting the
   * identifier can be accomplished using the method
   * setId(String id).
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers LocalParameter::LocalParameter(const LocalParameter& orig) "
/**
   * Copy constructor; creates a copy of a given {@link LocalParameter} object.
   <p>
   * @param orig the {@link LocalParameter} instance to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers LocalParameter::LocalParameter(const Parameter& orig) "
/**
   * Copy constructor; creates a {@link LocalParameter} object by copying
   * the attributes of a given {@link Parameter} object.
   <p>
   * @param orig the {@link Parameter} instance to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers LocalParameter::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link LocalParameter}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link LocalParameter} in the list
   * of parameters within which this {@link LocalParameter} is embedded (i.e., either
   * the list of parameters in the parent {@link Model} or the list of parameters
   * in the enclosing {@link KineticLaw}).
   */ public
";


%javamethodmodifiers LocalParameter::clone() const "
/**
   * Creates and returns a deep copy of this {@link LocalParameter} object.
   <p>
   * @return the (deep) copy of this {@link LocalParameter} object.
   */ public
";


%javamethodmodifiers LocalParameter::getDerivedUnitDefinition "
/**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link LocalParameter}\'s value.
   <p>
   * <p>
 * LocalParameters in SBML have an attribute (\'units\') for declaring the
 * units of measurement intended for the parameter\'s value.  <b>No
 * defaults are defined</b> by SBML in the absence of a definition for
 * \'units\'.  This method returns a {@link UnitDefinition} object based on the
 * units declared for this {@link LocalParameter} using its \'units\' attribute, or
 * it returns <code>null</code> if no units have been declared.
 <p>
 * Note that unit declarations for {@link LocalParameter} objects are specified
 * in terms of the <em>identifier</em> of a unit (e.g., using setUnits()), but
 * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
 * identifier.  It does this by constructing an appropriate
 * {@link UnitDefinition}.  For SBML Level&nbsp;2 models, it will do this even
 * when the value of the \'units\' attribute is one of the predefined SBML
 * units <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or 
 * <code>\'time\'.</code>  Callers may find this useful in conjunction with the helper
 * methods provided by the {@link UnitDefinition} class for comparing different
 * {@link UnitDefinition} objects.
   <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link LocalParameter}, or <code>null</code> if one cannot be constructed.
   <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link LocalParameter} object has not yet been
   * added to a model, or the model itself is incomplete, unit analysis is
   * not possible, and consequently this method will return <code>null.</code>
   <p>
   * @see #isSetUnits()
   */ public
";


%javamethodmodifiers LocalParameter::getDerivedUnitDefinition() const "
/**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link LocalParameter}\'s value.
   <p>
   * <p>
 * LocalParameters in SBML have an attribute (\'units\') for declaring the
 * units of measurement intended for the parameter\'s value.  <b>No
 * defaults are defined</b> by SBML in the absence of a definition for
 * \'units\'.  This method returns a {@link UnitDefinition} object based on the
 * units declared for this {@link LocalParameter} using its \'units\' attribute, or
 * it returns <code>null</code> if no units have been declared.
 <p>
 * Note that unit declarations for {@link LocalParameter} objects are specified
 * in terms of the <em>identifier</em> of a unit (e.g., using setUnits()), but
 * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
 * identifier.  It does this by constructing an appropriate
 * {@link UnitDefinition}.  For SBML Level&nbsp;2 models, it will do this even
 * when the value of the \'units\' attribute is one of the predefined SBML
 * units <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or 
 * <code>\'time\'.</code>  Callers may find this useful in conjunction with the helper
 * methods provided by the {@link UnitDefinition} class for comparing different
 * {@link UnitDefinition} objects.
   <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link LocalParameter}, or <code>null</code> if one cannot be constructed.
   <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link LocalParameter} object has not yet been
   * added to a model, or the model itself is incomplete, unit analysis is
   * not possible, and consequently this method will return <code>null.</code>
   <p>
   * @see #isSetUnits()
   */ public
";


%javamethodmodifiers LocalParameter::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_LOCAL_PARAMETER SBML_LOCAL_PARAMETER} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers LocalParameter::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link LocalParameter},
   * is always <code>\'localParameter\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'localParameter\'.</code>
   */ public
";


%javamethodmodifiers LocalParameter::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link LocalParameter} object have been set.
   <p>
   * The required attributes for a {@link LocalParameter} object are:
   * <ul>
   * <li> \'id\'
   * <li> \'value\'
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers LocalParameter::getConstant() const "
/** * @internal */ public
";


%javamethodmodifiers LocalParameter::isSetConstant() const "
/** * @internal */ public
";


%javamethodmodifiers LocalParameter::setConstant(bool flag) "
/** * @internal */ public
";


%javamethodmodifiers LocalParameter::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers LocalParameter::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers LocalParameter::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers LocalParameter::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOfLocalParameters::ListOfLocalParameters(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfLocalParameters} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfLocalParameters::ListOfLocalParameters(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfLocalParameters} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfLocalParameters} object to be created.
   */ public
";


%javamethodmodifiers ListOfLocalParameters::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfLocalParameters} object.
   <p>
   * @return the (deep) copy of this {@link ListOfLocalParameters} object.
   */ public
";


%javamethodmodifiers ListOfLocalParameters::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link LocalParameter} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for the objects contained in this ListOf:
   * {@link libsbmlConstants#SBML_LOCAL_PARAMETER SBML_LOCAL_PARAMETER} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfLocalParameters::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfLocalParameters}, the XML element name is <code>\'listOfLocalParameters\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfLocalParameters\'.</code>
   */ public
";


%javamethodmodifiers ListOfLocalParameters::get(unsigned int n) "
/**
   * Returns the {@link LocalParameter} object located at position <code>n</code> within this
   * {@link ListOfLocalParameters} instance.
   <p>
   * @param n the index number of the {@link LocalParameter} to get.
   <p>
   * @return the nth {@link LocalParameter} in this {@link ListOfLocalParameters}.  If the
   * index <code>n</code> is out of bounds for the length of the list, then <code>null</code>
   * is returned.
   <p>
   * @see #size()
   * @see #get(String sid)
   */ public
";


%javamethodmodifiers ListOfLocalParameters::get "
/**
   * Returns the {@link LocalParameter} object located at position <code>n</code> within this
   * {@link ListOfLocalParameters} instance.
   <p>
   * @param n the index number of the {@link LocalParameter} to get.
   <p>
   * @return the item at position <code>n</code>.  The caller owns the returned
   * object and is responsible for deleting it.  If the index number <code>n</code>
   * is out of bounds for the length of the list, then <code>null</code> is returned.
   <p>
   * @see #size()
   * @see #get(String sid)
   */ public
";


%javamethodmodifiers ListOfLocalParameters::get(const std::string& sid) "
/**
   * Returns the first {@link LocalParameter} object matching the given identifier.
   <p>
   * @param sid a string, the identifier of the {@link LocalParameter} to get.
   <p>
   * @return the {@link LocalParameter} object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching <code>sid</code>, then <code>null</code> is returned.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfLocalParameters::get(const std::string& sid) const "
/**
   * Returns the first {@link LocalParameter} object matching the given identifier.
   <p>
   * @param sid a string representing the identifier of the {@link LocalParameter}
   * to get.
   <p>
   * @return the {@link LocalParameter} object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching <code>sid</code>, then <code>null</code> is returned.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfLocalParameters::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * Note that LocalParameters, while they use the SId namespace, are not in
   * the model-wide SId namespace, so no {@link LocalParameter} object will be
   * returned from this function (and is the reason we override the base
   * ListOf.getElementBySId function here).
   <p>
   * @param id string representing the id of objects to find
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers ListOfLocalParameters::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfLocalParameters}, and returns a
   * pointer to it.
   <p>
   * @param n the index of the item to remove.  
   <p>
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If the index number <code>n</code> is out of
   * bounds for the length of the list, then <code>null</code> is returned.
   <p>
   * @see #size()
   * @see #remove(String sid)
   */ public
";


%javamethodmodifiers ListOfLocalParameters::remove(const std::string& sid) "
/**
   * Removes the first {@link LocalParameter} object in this {@link ListOfLocalParameters}
   * matching the given identifier, and returns a pointer to it.
   <p>
   * @param sid the identifier of the item to remove.
   <p>
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If none of the items have an identifier
   * matching <code>sid</code>, then <code>null</code> is returned.
   */ public
";


%javamethodmodifiers ListOfLocalParameters::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfLocalParameters::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) InitialAssignment "
/** 
 *  An SBML <em>initial assignment</em>, evaluated once only.
 <p>
 * SBML Level 2 Versions 2&ndash;4 and SBML Level&nbsp;3 provide two ways of assigning initial
 * values to entities in a model.  The simplest and most basic is to set
 * the values of the appropriate attributes in the relevant components; for
 * example, the initial value of a model parameter (whether it is a
 * constant or a variable) can be assigned by setting its \'value\' attribute
 * directly in the model definition.  However, this approach is not
 * suitable when the value must be calculated, because the initial value
 * attributes on different components such as species, compartments, and
 * parameters are single values and not mathematical expressions.  In those
 * situations, the {@link InitialAssignment} construct can be used; it permits the
 * calculation of the value of a constant or the initial value of a
 * variable from the values of <em>other</em> quantities in a model.
 <p>
 * As explained below, the provision of {@link InitialAssignment} does not mean
 * that models necessarily must use this construct when defining initial
 * values of quantities in a model.  If a value can be set directly using
 * the relevant attribute of a component in a model, then that
 * approach may be more efficient and more portable to other software
 * tools.  {@link InitialAssignment} should be used when the other mechanism is
 * insufficient for the needs of a particular model.
 <p>
 * The {@link InitialAssignment} construct has some similarities to {@link AssignmentRule}.
 * The main differences are: (a) an {@link InitialAssignment} can set the value of
 * a constant whereas an {@link AssignmentRule} cannot, and (b) unlike
 * {@link AssignmentRule}, an {@link InitialAssignment} definition only applies up to and
 * including the beginning of simulation time, i.e., <em>t &#8804; 0</em>,
 * while an {@link AssignmentRule} applies at all times.
 <p>
 * {@link InitialAssignment} has a required attribute, \'symbol\', whose value must
 * follow the guidelines for identifiers described in the SBML
 * specification (e.g., Section 3.3 in the Level 2 Version 4
 * specification).  The value of this attribute in an {@link InitialAssignment}
 * object can be the identifier of a {@link Compartment}, {@link Species} or global
 * {@link Parameter} elsewhere in the model.  The {@link InitialAssignment} defines the
 * initial value of the constant or variable referred to by the \'symbol\'
 * attribute.  (The attribute\'s name is \'symbol\' rather than \'variable\'
 * because it may assign values to constants as well as variables in a
 * model.)  Note that an initial assignment cannot be made to reaction
 * identifiers, that is, the \'symbol\' attribute value of an
 * {@link InitialAssignment} cannot be an identifier that is the \'id\' attribute
 * value of a {@link Reaction} object in the model.  This is identical to a
 * restriction placed on rules.
 <p>
 * {@link InitialAssignment} also has a required \'math\' subelement that contains a
 * MathML expression used to calculate the value of the constant or the
 * initial value of the variable.  The units of the value computed by the
 * formula in the \'math\' subelement should (in SBML Level&nbsp;2
 * Version&nbsp;4 and in SBML Level&nbsp;3) or must (in previous Versions) be identical to be the
 * units associated with the identifier given in the \'symbol\' attribute.
 * (That is, the units are the units of the species, compartment, or
 * parameter, as appropriate for the kind of object identified by the value
 * of \'symbol\'.)
 <p>
 * {@link InitialAssignment} was introduced in SBML Level 2 Version 2.  It is not
 * available in SBML Level&nbsp;2 Version&nbsp;1 nor in any version of Level 1.
 <p>
 * <h2>Semantics of Initial Assignments</h2>
 <p>
 * The value calculated by an {@link InitialAssignment} object overrides the value
 * assigned to the given symbol by the object defining that symbol.  For
 * example, if a compartment\'s \'size\' attribute is set in its definition,
 * and the model also contains an {@link InitialAssignment} having that
 * compartment\'s identifier as its \'symbol\' attribute value, then the
 * interpretation is that the \'size\' assigned in the {@link Compartment} object
 * should be ignored and the value assigned based on the computation
 * defined in the {@link InitialAssignment}.  Initial assignments can take place
 * for {@link Compartment}, {@link Species} and global {@link Parameter} objects regardless of the
 * value of their \'constant\' attribute.
 <p>
 * The actions of all {@link InitialAssignment} objects are in general terms
 * the same, but differ in the precise details depending on the type
 * of variable being set:
 * <ul>
 * <li> <em>In the case of a species</em>, an {@link InitialAssignment} sets the
 * referenced species\' initial quantity (concentration or amount of
 * substance) to the value determined by the formula in the \'math\'
 * subelement.    The overall units of the formula should (in SBML
 * Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or must (in previous Versions) be the same
 * as the units specified for the species.
 <p>
 * <li> <em>In the case of a compartment</em>, an {@link InitialAssignment} sets
 * the referenced compartment\'s initial size to the size determined by the
 * formula in \'math\'.  The overall units of the formula should (in SBML
 * Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or must (in previous Versions) be the same
 * as the units specified for the size of the compartment.
 <p>
 * <li> <em>In the case of a parameter</em>, an {@link InitialAssignment} sets the
 * referenced parameter\'s initial value to that determined by the formula
 * in \'math\'.  The overall units of the formula should (in SBML
 * Level&nbsp;2 Version&nbsp;4 and SBML Level&nbsp;3) or must (in previous Versions) be the same
 * as the units defined for the parameter.  </ul>
 <p>
 * In the context of a simulation, initial assignments establish values
 * that are in effect prior to and including the start of simulation time,
 * i.e., <em>t &#8804; 0</em>.  Section 3.4.8 in the SBML Level 2
 * Version 4  and SBML Level&nbsp;3 Version&nbsp;1 Core specifications provides information about the interpretation of
 * assignments, rules, and entity values for simulation time up to and
 * including the start time <em>t = 0</em>; this is important for
 * establishing the initial conditions of a simulation if the model
 * involves expressions containing the <em>delay</em> \'csymbol\'.
 <p>
 * There cannot be two initial assignments for the same symbol in a model;
 * that is, a model must not contain two or more {@link InitialAssignment} objects
 * that both have the same identifier as their \'symbol\' attribute value.  A
 * model must also not define initial assignments <em>and</em> assignment
 * rules for the same entity.  That is, there cannot be <em>both</em> an
 * {@link InitialAssignment} and an {@link AssignmentRule} for the same symbol in a model,
 * because both kinds of constructs apply prior to and at the start of
 * simulated time&mdash;allowing both to exist for a given symbol would
 * result in indeterminism).
 <p>
 * The ordering of {@link InitialAssignment} objects is not significant.  The
 * combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects form a set of assignment statements that must be considered as a
 * whole.  The combined set of assignment statements should not contain
 * algebraic loops: a chain of dependency between these statements should
 * terminate.  (More formally, consider the directed graph of assignment
 * statements where nodes are a model\'s assignment statements and directed
 * arcs exist for each occurrence of a symbol in an assignment statement
 * \'math\' attribute.  The directed arcs in this graph start from the
 * statement assigning the symbol and end at the statement that contains
 * the symbol in their math elements.  Such a graph must be acyclic.)
 <p>
 * Finally, it is worth being explicit about the expected behavior in the
 * following situation.  Suppose (1) a given symbol has a value <em>x</em>
 * assigned to it in its definition, and (2) there is an initial assignment
 * having the identifier as its \'symbol\' value and reassigning the value to
 * <em>y</em>, <em>and</em> (3) the identifier is also used in the
 * mathematical formula of a second initial assignment.  What value should
 * the second initial assignment use?  It is <em>y</em>, the value assigned
 * to the symbol by the first initial assignment, not whatever value was
 * given in the symbol\'s definition.  This follows directly from the
 * behavior described above: if an {@link InitialAssignment} object exists for a
 * given symbol, then the symbol\'s value is overridden by that initial
 * assignment.
 */
"


%typemap(javaimports) ListOfInitialAssignments "
/** 
 *  A list of {@link InitialAssignment} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers InitialAssignment::InitialAssignment(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link InitialAssignment} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link InitialAssignment}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link InitialAssignment}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers InitialAssignment::InitialAssignment(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link InitialAssignment} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute. 
   */ public
";


%javamethodmodifiers InitialAssignment::InitialAssignment(const InitialAssignment& orig) "
/**
   * Copy constructor; creates a copy of this {@link InitialAssignment}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers InitialAssignment::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link InitialAssignment}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link InitialAssignment} in
   * the list of compartment types.
   */ public
";


%javamethodmodifiers InitialAssignment::clone() const "
/**
   * Creates and returns a deep copy of this {@link InitialAssignment} object.
   <p>
   * @return the (deep) copy of this {@link InitialAssignment} object.
   */ public
";


%javamethodmodifiers InitialAssignment::getSymbol() const "
/**
   * Get the value of the \'symbol\' attribute of this {@link InitialAssignment}.
   <p>
   * @return the identifier string stored as the \'symbol\' attribute value
   * in this {@link InitialAssignment}.
   */ public
";


%javamethodmodifiers InitialAssignment::getMath() const "
/**
   * Get the mathematical formula of this {@link InitialAssignment}.
   <p>
   * @return an {@link ASTNode}, the value of the \'math\' subelement of this
   * {@link InitialAssignment}
   */ public
";


%javamethodmodifiers InitialAssignment::isSetSymbol() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link InitialAssignment}\'s \'symbol\' attribute is set.
   <p>
   * @return <code>true</code> if the \'symbol\' attribute of this {@link InitialAssignment}
   * is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers InitialAssignment::isSetMath() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link InitialAssignment}\'s \'math\' subelement contains a value.
   <p>
   * @return <code>true</code> if the \'math\' for this {@link InitialAssignment} is set,
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers InitialAssignment::setSymbol(const std::string& sid) "
/**
   * Sets the \'symbol\' attribute value of this {@link InitialAssignment}.
   <p>
   * @param sid the identifier of a {@link Species}, {@link Compartment} or {@link Parameter}
   * object defined elsewhere in this {@link Model}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers InitialAssignment::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' subelement of this {@link InitialAssignment}.
   <p>
   * The AST passed in <code>math</code> is copied.
   <p>
   * @param math an AST containing the mathematical expression to
   * be used as the formula for this {@link InitialAssignment}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers InitialAssignment::getDerivedUnitDefinition "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * {@link InitialAssignment}.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link InitialAssignment} and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * {@link InitialAssignment#getDerivedUnitDefinition()} returns the calculated
 * units, to the extent that libSBML can compute them.
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link InitialAssignment} contains literal numbers or parameters
 * with undeclared units.  In those cases, it is not possible to calculate
 * the units of the overall expression without making assumptions.  LibSBML
 * does not make assumptions about the units, and
 * {@link InitialAssignment#getDerivedUnitDefinition()} only returns the units as
 * far as it is able to determine them.  For example, in an expression <em>X
 * + Y</em>, if <em>X</em> has unambiguously-defined units and <em>Y</em>
 * does not, it will return the units of <em>X</em>.  When using this method,
 * <strong>it is critical that callers also invoke the method</strong>
 * {@link InitialAssignment#containsUndeclaredUnits()} <strong>to determine whether
 * this situation holds</strong>.  Callers should take suitable action in
 * those situations.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link InitialAssignment}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers InitialAssignment::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * {@link InitialAssignment}.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link InitialAssignment} and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * {@link InitialAssignment#getDerivedUnitDefinition()} returns the calculated
 * units, to the extent that libSBML can compute them.
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link InitialAssignment} contains literal numbers or parameters
 * with undeclared units.  In those cases, it is not possible to calculate
 * the units of the overall expression without making assumptions.  LibSBML
 * does not make assumptions about the units, and
 * {@link InitialAssignment#getDerivedUnitDefinition()} only returns the units as
 * far as it is able to determine them.  For example, in an expression <em>X
 * + Y</em>, if <em>X</em> has unambiguously-defined units and <em>Y</em>
 * does not, it will return the units of <em>X</em>.  When using this method,
 * <strong>it is critical that callers also invoke the method</strong>
 * {@link InitialAssignment#containsUndeclaredUnits()} <strong>to determine whether
 * this situation holds</strong>.  Callers should take suitable action in
 * those situations.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link InitialAssignment}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers InitialAssignment::containsUndeclaredUnits "
/**
   * Predicate returning <code>true</code> if the math expression of this
   * {@link InitialAssignment} contains parameters/numbers with undeclared units.
   <p>
   * @return <code>true</code> if the math expression of this {@link InitialAssignment}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by InitialAssignment.getDerivedUnitDefinition may not
   * accurately represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers InitialAssignment::containsUndeclaredUnits() const "
/**
   * Predicate returning <code>true</code> if the math expression of this
   * {@link InitialAssignment} contains parameters/numbers with undeclared units.
   <p>
   * @return <code>true</code> if the math expression of this {@link InitialAssignment}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by InitialAssignment.getDerivedUnitDefinition may not
   * accurately represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers InitialAssignment::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_INITIAL_ASSIGNMENT SBML_INITIAL_ASSIGNMENT} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers InitialAssignment::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * {@link InitialAssignment}, is always <code>\'initialAssignment\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'initialAssignment\'.</code>
   */ public
";


%javamethodmodifiers InitialAssignment::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link InitialAssignment} object have been set.
   <p>
   * The required attributes for an {@link InitialAssignment} object are:
   * <ul>
   * <li> \'symbol\'
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers InitialAssignment::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link InitialAssignment} object have been set.
   <p>
   * @note The required elements for a {@link InitialAssignment} object are:
   * <ul>
   * <li> \'math\'
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers InitialAssignment::getId() const "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers InitialAssignment::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers InitialAssignment::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers InitialAssignment::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOfInitialAssignments::ListOfInitialAssignments(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfInitialAssignments} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::ListOfInitialAssignments(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfInitialAssignments} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfInitialAssignments} object to be created.
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfInitialAssignments} object.
   <p>
   * @return the (deep) copy of this {@link ListOfInitialAssignments} object.
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link InitialAssignment} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for the objects contained in this ListOf:
   * {@link libsbmlConstants#SBML_INITIAL_ASSIGNMENT SBML_INITIAL_ASSIGNMENT} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfInitialAssignments}, the XML element name is 
   * <code>\'listOfInitialAssignments\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfInitialAssignments\'.</code>
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::get(unsigned int n) "
/**
   * Get a {@link InitialAssignment} from the {@link ListOfInitialAssignments}.
   <p>
   * @param n the index number of the {@link InitialAssignment} to get.
   <p>
   * @return the nth {@link InitialAssignment} in this {@link ListOfInitialAssignments}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::get "
/**
   * Get a {@link InitialAssignment} from the {@link ListOfInitialAssignments}.
   <p>
   * @param n the index number of the {@link InitialAssignment} to get.
   <p>
   * @return the nth {@link InitialAssignment} in this {@link ListOfInitialAssignments}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::get(const std::string& sid) "
/**
   * Get a {@link InitialAssignment} from the {@link ListOfInitialAssignments}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link InitialAssignment} to get.
   <p>
   * @return {@link InitialAssignment} in this {@link ListOfInitialAssignments}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link InitialAssignment} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::get(const std::string& sid) const "
/**
   * Get a {@link InitialAssignment} from the {@link ListOfInitialAssignments}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link InitialAssignment} to get.
   <p>
   * @return {@link InitialAssignment} in this {@link ListOfInitialAssignments}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link InitialAssignment} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfInitialAssignments} items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfInitialAssignments} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * Note that InitialAssignments do not actually have IDs, though the
   * libsbml interface pretends that they do: no initial assignment is
   * returned by this function.
   <p>
   * @param id string representing the id of objects to find
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers ListOfInitialAssignments::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfInitialAssignments::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) Rule "
/** 
 *  Parent class for SBML <em>rules</em> in libSBML.
 <p>
 * In SBML, <em>rules</em> provide additional ways to define the values of
 * variables in a model, their relationships, and the dynamical behaviors
 * of those variables.  They enable encoding relationships that cannot be
 * expressed using {@link Reaction} nor {@link InitialAssignment} objects alone.
 <p>
 * The libSBML implementation of rules mirrors the SBML Level&nbsp;3
 * Version&nbsp;1 Core definition (which is in turn is very similar to the
 * Level&nbsp;2 Version&nbsp;4 definition), with {@link Rule} being the parent
 * class of three subclasses as explained below.  The {@link Rule} class itself
 * cannot be instantiated by user programs and has no constructor; only the
 * subclasses {@link AssignmentRule}, {@link AlgebraicRule} and {@link RateRule} can be
 * instantiated directly.
 <p>
 * <p>
 * <h2>General summary of SBML rules</h2>
 <p>
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into three
 * subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible functional
 * forms (where <em>x</em> is a variable, <em>f</em> is some arbitrary
 * function returning a numerical result, <b><em>V</em></b> is a vector of
 * variables that does not include <em>x</em>, and <b><em>W</em></b> is a
 * vector of variables that may include <em>x</em>):
 <p>
 * <table border=\'0\' cellpadding=\'0\' class=\'centered\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 <p>
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 <p>
 * <ul>
 * <li> <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see {@link InitialAssignment}.)
<p>
 * <li> SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.
 <p>
 * <li> Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;
 <p>
 * <li> Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and
 <p>
 * <li> Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 *
 * </ul> <p>
 * The approach taken to covering these cases in SBML is to define an
 * abstract {@link Rule} structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of {@link Rule} that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 <p>
 * Each of the three subclasses of {@link Rule} (AssignmentRule, {@link AlgebraicRule},
 * {@link RateRule}) inherit the the \'math\' subelement and other fields from {@link SBase}.
 * The {@link AssignmentRule} and {@link RateRule} classes add an additional attribute,
 * \'variable\'.  See the definitions of {@link AssignmentRule}, {@link AlgebraicRule} and
 * {@link RateRule} for details about the structure and interpretation of each one.
 <p>
 * <h2>Additional restrictions on SBML rules</h2>
 <p>
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 <p>
 * <h3>A model must not contain algebraic loops</h3>
 <p>
 * The combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A {@link KineticLaw} object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the {@link Reaction} object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 <p>
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 <p>
 * <h3>A model must not be overdetermined</h3>
 <p>
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain {@link AlgebraicRule} structures cannot be overdetermined.
 <p>
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 <p>
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 <p>
 * <h2>Rule types for SBML Level 1</h2>
 <p>
 * SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
 * distinguishing rules; specifically, it uses an attribute whose value is
 * drawn from an enumeration of 3 values.  LibSBML supports this using methods
 * that work with the enumeration values  listed below.
 <p>
 * <ul>
 * <li> {@link libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}: Indicates
 * the rule is a \'rate\' rule.
 * <li> {@link libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}:
 * Indicates the rule is a \'scalar\' rule.
 * <li> {@link libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID}:
 * Indicates the rule type is unknown or not yet set.
 *
 * </ul>
 */
"


%typemap(javaimports) ListOfRules "
/** 
 *  A list of {@link Rule} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers Rule::Rule(const Rule& orig) "
/**
   * Copy constructor; creates a copy of this {@link Rule}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Rule::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Rule}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Rule} object in the
   * list of rules within which <em>the</em> present object is embedded.
   */ public
";


%javamethodmodifiers Rule::clone() const "
/**
   * Creates and returns a deep copy of this {@link Rule} object.
   <p>
   * @return the (deep) copy of this {@link Rule} object.
   */ public
";


%javamethodmodifiers Rule::getFormula() const "
/**
   * Returns the mathematical expression of this {@link Rule} in text-string form.
   <p>
   * The text string is produced by
   * <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToString()</a></code>; please consult
   * the documentation for that function to find out more about the format
   * of the text-string formula.
   <p>
   * @return the formula text string for this {@link Rule}.
   <p>
   * @note The attribute \'formula\' is specific to SBML Level&nbsp;1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * \'math\'.  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   <p>
   * @see #getMath()
   */ public
";


%javamethodmodifiers Rule::getMath() const "
/**
   * Get the mathematical formula of this {@link Rule} as an {@link ASTNode} tree.
   <p>
   * @return an {@link ASTNode}, the value of the \'math\' subelement of this {@link Rule}.
   <p>
   * @note The subelement \'math\' is present in SBML Levels&nbsp;2
   * and&nbsp;3.  In SBML Level&nbsp;1, the equivalent construct is the
   * attribute named \'formula\'.  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   <p>
   * @see #getFormula()
   */ public
";


%javamethodmodifiers Rule::getVariable() const "
/**
   * Get the value of the \'variable\' attribute of this {@link Rule} object.
   <p>
   * <p>
 * In SBML Level&nbsp;1, the different rule types each have a different
 * name for the attribute holding the reference to the object constituting
 * the left-hand side of the rule.  (E.g., for SBML Level&nbsp;1\'s
 * SpeciesConcentrationRule the attribute is \'species\', for
 * CompartmentVolumeRule it is \'compartment\', etc.)  In SBML Levels&nbsp;2
 * and&nbsp;3, the only two types of {@link Rule} objects with a left-hand side
 * object reference are {@link AssignmentRule} and {@link RateRule}, and both of them use the
 * same name for attribute: \'variable\'.  In order to make it easier for
 * application developers to work with all Levels of SBML, libSBML uses a
 * uniform name for all such attributes, and it is \'variable\', regardless of
 * whether Level&nbsp;1 rules or Level&nbsp;2&ndash;3 rules are being used.
   <p>
   * @return the identifier string stored as the \'variable\' attribute value
   * in this {@link Rule}, or <code>null</code> if this object is an {@link AlgebraicRule} object.
   */ public
";


%javamethodmodifiers Rule::getUnits() const "
/**
   * Returns the units for the
   * mathematical formula of this {@link Rule}.
   <p>
   * @return the identifier of the units for the expression of this {@link Rule}.
   <p>
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */ public
";


%javamethodmodifiers Rule::isSetFormula() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule}\'s mathematical expression is
   * set.
   <p>
   * This method is equivalent to isSetMath().  This version is present for
   * easier compatibility with SBML Level&nbsp;1, in which mathematical
   * formulas were written in text-string form.
   <p>
   * @return <code>true</code> if the mathematical formula for this {@link Rule} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The attribute \'formula\' is specific to SBML Level&nbsp;1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * \'math\'.  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   <p>
   * @see #isSetMath()
   */ public
";


%javamethodmodifiers Rule::isSetMath() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule}\'s mathematical expression is
   * set.
   <p>
   * This method is equivalent to isSetFormula().
   <p>
   * @return <code>true</code> if the formula (or equivalently the math) for this
   * {@link Rule} is set, <code>false</code> otherwise.
   <p>
   * @note The subelement \'math\' is present in SBML Levels&nbsp;2
   * and&nbsp;3.  In SBML Level&nbsp;1, the equivalent construct is the
   * attribute named \'formula\'.  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   <p>
   * @see #isSetFormula()
   */ public
";


%javamethodmodifiers Rule::isSetVariable() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule}\'s \'variable\' attribute is set.
   <p>
   * <p>
 * In SBML Level&nbsp;1, the different rule types each have a different
 * name for the attribute holding the reference to the object constituting
 * the left-hand side of the rule.  (E.g., for SBML Level&nbsp;1\'s
 * SpeciesConcentrationRule the attribute is \'species\', for
 * CompartmentVolumeRule it is \'compartment\', etc.)  In SBML Levels&nbsp;2
 * and&nbsp;3, the only two types of {@link Rule} objects with a left-hand side
 * object reference are {@link AssignmentRule} and {@link RateRule}, and both of them use the
 * same name for attribute: \'variable\'.  In order to make it easier for
 * application developers to work with all Levels of SBML, libSBML uses a
 * uniform name for all such attributes, and it is \'variable\', regardless of
 * whether Level&nbsp;1 rules or Level&nbsp;2&ndash;3 rules are being used.
   <p>
   * @return <code>true</code> if the \'variable\' attribute value of this {@link Rule} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Rule::isSetUnits() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule}\'s \'units\' attribute is set.
   <p>
   * @return <code>true</code> if the units for this {@link Rule} is set, <code>false</code>
   * otherwise
   <p>
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */ public
";


%javamethodmodifiers Rule::setFormula(const std::string& formula) "
/**
   * Sets the \'math\' subelement of this {@link Rule} to an expression in text-string
   * form.
   <p>
   * This is equivalent to setMath(ASTNode math).  The provision of
   * using text-string formulas is retained for easier SBML Level&nbsp;1
   * compatibility.  The formula is converted to an {@link ASTNode} internally.
   <p>
   * @param formula a mathematical formula in text-string form.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @note The attribute \'formula\' is specific to SBML Level&nbsp;1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * \'math\'.  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   <p>
   * @see #setMath(ASTNode math)
   */ public
";


%javamethodmodifiers Rule::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' subelement of this {@link Rule} to a copy of the given
   * {@link ASTNode}.
   <p>
   * @param math the AST structure of the mathematical formula.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @note The subelement \'math\' is present in SBML Levels&nbsp;2
   * and&nbsp;3.  In SBML Level&nbsp;1, the equivalent construct is the
   * attribute named \'formula\'.  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   <p>
   * @see #setFormula(String formula)
   */ public
";


%javamethodmodifiers Rule::setVariable(const std::string& sid) "
/**
   * Sets the \'variable\' attribute value of this {@link Rule} object.
   <p>
   * <p>
 * In SBML Level&nbsp;1, the different rule types each have a different
 * name for the attribute holding the reference to the object constituting
 * the left-hand side of the rule.  (E.g., for SBML Level&nbsp;1\'s
 * SpeciesConcentrationRule the attribute is \'species\', for
 * CompartmentVolumeRule it is \'compartment\', etc.)  In SBML Levels&nbsp;2
 * and&nbsp;3, the only two types of {@link Rule} objects with a left-hand side
 * object reference are {@link AssignmentRule} and {@link RateRule}, and both of them use the
 * same name for attribute: \'variable\'.  In order to make it easier for
 * application developers to work with all Levels of SBML, libSBML uses a
 * uniform name for all such attributes, and it is \'variable\', regardless of
 * whether Level&nbsp;1 rules or Level&nbsp;2&ndash;3 rules are being used.
   <p>
   * @param sid the identifier of a {@link Compartment}, {@link Species} or {@link Parameter}
   * elsewhere in the enclosing {@link Model} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * </ul>
   */ public
";


%javamethodmodifiers Rule::setUnits(const std::string& sname) "
/**
   * Sets the units for this {@link Rule}.
   <p>
   * @param sname the identifier of the units
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */ public
";


%javamethodmodifiers Rule::unsetUnits "
/**
   * Unsets the \'units\' for this {@link Rule}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */ public
";


%javamethodmodifiers Rule::getDerivedUnitDefinition "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units of
   * measurement assumed for the \'math\' expression of this {@link Rule}.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link Rule} and the model quantities referenced by <code>&lt;ci&gt;</code>
 * elements used within that expression.  The method
 * {@link Rule#getDerivedUnitDefinition()} returns the calculated units, to the
 * extent that libSBML can compute them. 
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link Rule} contains pure numbers or parameters with undeclared
 * units.  In those cases, it is not possible to calculate the units of the
 * overall expression without making assumptions.  LibSBML does not make
 * assumptions about the units, and {@link Rule#getDerivedUnitDefinition()} only
 * returns the units as far as it is able to determine them.  For example, in
 * an expression <em>X + Y</em>, if <em>X</em> has unambiguously-defined
 * units and <em>Y</em> does not, it will return the units of <em>X</em>.
 * <strong>It is important that callers also invoke the method</strong>
 * {@link Rule#containsUndeclaredUnits()} <strong>to determine whether this
 * situation holds</strong>.  Callers may wish to take suitable actions in
 * those scenarios.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link Rule}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers Rule::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units of
   * measurement assumed for the \'math\' expression of this {@link Rule}.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link Rule} and the model quantities referenced by <code>&lt;ci&gt;</code>
 * elements used within that expression.  The method
 * {@link Rule#getDerivedUnitDefinition()} returns the calculated units, to the
 * extent that libSBML can compute them. 
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link Rule} contains pure numbers or parameters with undeclared
 * units.  In those cases, it is not possible to calculate the units of the
 * overall expression without making assumptions.  LibSBML does not make
 * assumptions about the units, and {@link Rule#getDerivedUnitDefinition()} only
 * returns the units as far as it is able to determine them.  For example, in
 * an expression <em>X + Y</em>, if <em>X</em> has unambiguously-defined
 * units and <em>Y</em> does not, it will return the units of <em>X</em>.
 * <strong>It is important that callers also invoke the method</strong>
 * {@link Rule#containsUndeclaredUnits()} <strong>to determine whether this
 * situation holds</strong>.  Callers may wish to take suitable actions in
 * those scenarios.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link Rule}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers Rule::containsUndeclaredUnits "
/**
   * Predicate returning <code>true</code> if the math expression of this {@link Rule} contains
   * parameters/numbers with undeclared units.
   <p>
   * @return <code>true</code> if the math expression of this {@link Rule} includes
   * parameters/numbers with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by getDerivedUnitDefinition() may not accurately represent
   * the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers Rule::containsUndeclaredUnits() const "
/**
   * Predicate returning <code>true</code> if the math expression of this {@link Rule} contains
   * parameters/numbers with undeclared units.
   <p>
   * @return <code>true</code> if the math expression of this {@link Rule} includes
   * parameters/numbers with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by getDerivedUnitDefinition() may not accurately represent the
   * units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers Rule::getType() const "
/**
   * Returns a code representing the type of rule this is.
   <p>
   * @return the rule type, which will be one of the following three possible
   * values:
   * <ul>
   * <li> {@link libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}
   * <li> {@link libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}
   * <li> {@link libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID}
   *
   * </ul> <p>
   * @note The attribute \'type\' on {@link Rule} objects is present only in SBML
   * Level&nbsp;1.  In SBML Level&nbsp;2 and later, the type has been
   * replaced by subclassing the {@link Rule} object.
   */ public
";


%javamethodmodifiers Rule::isAlgebraic() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule} is an {@link AlgebraicRule}.
   <p>
   * @return <code>true</code> if this {@link Rule} is an {@link AlgebraicRule}, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Rule::isAssignment() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule} is an {@link AssignmentRule}.
   <p>
   * @return <code>true</code> if this {@link Rule} is an {@link AssignmentRule}, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Rule::isCompartmentVolume() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule} is an CompartmentVolumeRule
   * or equivalent.
   <p>
   * This libSBML method works for SBML Level&nbsp;1 models (where there is
   * such a thing as an explicit CompartmentVolumeRule), as well as other Levels of
   * SBML.  For Levels above Level&nbsp;1, this method checks the symbol
   * being affected by the rule, and returns <code>true</code> if the symbol is the
   * identifier of a {@link Compartment} object defined in the model.
   <p>
   * @return <code>true</code> if this {@link Rule} is a CompartmentVolumeRule, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Rule::isParameter() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule} is an ParameterRule or
   * equivalent.
   <p>
   * This libSBML method works for SBML Level&nbsp;1 models (where there is
   * such a thing as an explicit ParameterRule), as well as other Levels of
   * SBML.  For Levels above Level&nbsp;1, this method checks the symbol
   * being affected by the rule, and returns <code>true</code> if the symbol is the
   * identifier of a {@link Parameter} object defined in the model.
   <p>
   * @return <code>true</code> if this {@link Rule} is a ParameterRule, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Rule::isRate() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule} is a {@link RateRule} (SBML
   * Levels&nbsp;2&ndash;3) or has a \'type\' attribute value of <code>\'rate\'</code>
   * (SBML Level&nbsp;1).
   <p>
   * @return <code>true</code> if this {@link Rule} is a {@link RateRule} (Level&nbsp;2) or has
   * type \'rate\' (Level&nbsp;1), <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Rule::isScalar() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule} is an {@link AssignmentRule} (SBML
   * Levels&nbsp;2&ndash;3) or has a \'type\' attribute value of <code>\'scalar\'</code>
   * (SBML Level&nbsp;1).
   <p>
   * @return <code>true</code> if this {@link Rule} is an {@link AssignmentRule} (Level&nbsp;2) or has
   * type \'scalar\' (Level&nbsp;1), <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Rule::isSpeciesConcentration() const "
/**
   * Predicate returning <code>true</code> if this {@link Rule} is a SpeciesConcentrationRule
   * or equivalent.
   <p>
   * This libSBML method works for SBML Level&nbsp;1 models (where there is
   * such a thing as an explicit SpeciesConcentrationRule), as well as
   * other Levels of SBML.  For Levels above Level&nbsp;1, this method
   * checks the symbol being affected by the rule, and returns <code>true</code> if
   * the symbol is the identifier of a {@link Species} object defined in the model.
   <p>
   * @return <code>true</code> if this {@link Rule} is a SpeciesConcentrationRule, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Rule::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object, either
   * {@link libsbmlConstants#SBML_ASSIGNMENT_RULE SBML_ASSIGNMENT_RULE},
   * {@link libsbmlConstants#SBML_RATE_RULE SBML_RATE_RULE}, or
   * {@link libsbmlConstants#SBML_ALGEBRAIC_RULE SBML_ALGEBRAIC_RULE} 
   * for SBML Core.
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Rule::getL1TypeCode() const "
/**
   * Returns the SBML Level&nbsp;1 type code for this {@link Rule} object.
   <p>
   * This method only applies to SBML Level&nbsp;1 model objects.  If this is
   * not an SBML Level&nbsp;1 rule object, this method will return
   * {@link libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN}.
   <p>
   * @return the SBML Level&nbsp;1 type code for this {@link Rule} (namely,
   * {@link libsbmlConstants#SBML_COMPARTMENT_VOLUME_RULE SBML_COMPARTMENT_VOLUME_RULE},
   * {@link libsbmlConstants#SBML_PARAMETER_RULE SBML_PARAMETER_RULE},
   * {@link libsbmlConstants#SBML_SPECIES_CONCENTRATION_RULE SBML_SPECIES_CONCENTRATION_RULE}, or
   * {@link libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN}).
   */ public
";


%javamethodmodifiers Rule::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * The returned value can be any of a number of different strings,
   * depending on the SBML Level in use and the kind of {@link Rule} object this
   * is.  The rules as of libSBML version 5.11.0
   * are the following:
   * <ul>
   * <li> (Level&nbsp;2 and&nbsp;3) RateRule: returns <code>\'rateRule\'</code>
   * <li> (Level&nbsp;2 and&nbsp;3) AssignmentRule: returns <code>\'assignmentRule\'</code> 
   * <li> (Level&nbsp;2 and&nbsp;3) AlgebraicRule: returns <code>\'algebraicRule\'</code>
   * <li> (Level&nbsp;1 Version&nbsp;1) SpecieConcentrationRule: returns <code>\'specieConcentrationRule\'</code>
   * <li> (Level&nbsp;1 Version&nbsp;2) SpeciesConcentrationRule: returns <code>\'speciesConcentrationRule\'</code>
   * <li> (Level&nbsp;1) CompartmentVolumeRule: returns <code>\'compartmentVolumeRule\'</code>
   * <li> (Level&nbsp;1) ParameterRule: returns <code>\'parameterRule\'</code>
   * <li> Unknown rule type: returns <code>\'unknownRule\'</code>
   * </ul>
   <p>
   * Beware that the last (<code>\'unknownRule\'</code>) is not a valid SBML element
   * name.
   <p>
   * @return the name of this element
   */ public
";


%javamethodmodifiers Rule::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Rule::setL1TypeCode(int type) "
/**
   * Sets the SBML Level&nbsp;1 type code for this {@link Rule}.
   <p>
   * @param type the SBML Level&nbsp;1 type code for this {@link Rule}. The allowable
   * values are {@link libsbmlConstants#SBML_COMPARTMENT_VOLUME_RULE SBML_COMPARTMENT_VOLUME_RULE},
   * {@link libsbmlConstants#SBML_PARAMETER_RULE SBML_PARAMETER_RULE}, and
   * {@link libsbmlConstants#SBML_SPECIES_CONCENTRATION_RULE SBML_SPECIES_CONCENTRATION_RULE}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * if given <code>type</code> value is not one of the above.
   * </ul>
   */ public
";


%javamethodmodifiers Rule::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if all the required elements for this {@link Rule}
   * object have been set.
   <p>
   * The only required element for a {@link Rule} object is the \'math\' subelement.
   <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers Rule::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this {@link Rule}
   * object have been set.
   <p>
   * The required attributes for a {@link Rule} object depend on the type of {@link Rule}
   * it is.  For {@link AssignmentRule} and {@link RateRule} objects (and SBML
   * Level&nbsp1\'s SpeciesConcentrationRule, CompartmentVolumeRule, and
   * ParameterRule objects), the required attribute is \'variable\'; for
   * {@link AlgebraicRule} objects, there is no required attribute.
   <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Rule::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Rule::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Rule::getInternalId() const "
/** * @internal */ public
";


%javamethodmodifiers Rule::setInternalId(std::string id) "
/** * @internal */ public
";


%javamethodmodifiers Rule::getId() const "
/** * @internal */ public
";


%javamethodmodifiers Rule::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers Rule::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers Rule::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers Rule::Rule(  int      type , unsigned int        level , unsigned int        version ) "
/** * @internal */ public
";


%javamethodmodifiers Rule::Rule(  int      type , SBMLNamespaces *    sbmlns ) "
/** * @internal */ public
";


%javamethodmodifiers Rule::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers Rule::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Rule::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Rule::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Rule::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Rule::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Rule::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOfRules::ListOfRules(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfRules} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfRules::ListOfRules(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfRules} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfRules} object to be created.
   */ public
";


%javamethodmodifiers ListOfRules::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfRules} object.
   <p>
   * @return the (deep) copy of this {@link ListOfRules} object.
   */ public
";


%javamethodmodifiers ListOfRules::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Rule} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for objects contained in this list:
   * {@link libsbmlConstants#SBML_RULE SBML_RULE} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfRules::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfRules}, the XML element name is <code>\'listOfRules\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfRules\'.</code>
   */ public
";


%javamethodmodifiers ListOfRules::get(unsigned int n) "
/**
   * Get a {@link Rule} from the {@link ListOfRules}.
   <p>
   * @param n the index number of the {@link Rule} to get.
   <p>
   * @return the nth {@link Rule} in this {@link ListOfRules}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfRules::get "
/**
   * Get a {@link Rule} from the {@link ListOfRules}.
   <p>
   * @param n the index number of the {@link Rule} to get.
   <p>
   * @return the nth {@link Rule} in this {@link ListOfRules}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfRules::get(const std::string& sid) "
/**
   * Get a {@link Rule} from the {@link ListOfRules} based on its identifier.
   <p>
   * @param sid a string representing the identifier of the {@link Rule} to get.
   <p>
   * @return {@link Rule} in this {@link ListOfRules} with the given <code>id</code> or <code>null</code> if no
   * such {@link Rule} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfRules::get(const std::string& sid) const "
/**
   * Get a {@link Rule} from the {@link ListOfRules} based on its identifier.
   <p>
   * @param sid a string representing the identifier of the {@link Rule} to get.
   <p>
   * @return {@link Rule} in this {@link ListOfRules} with the given <code>sid</code> or <code>null</code> if no
   * such {@link Rule} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfRules::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfRules} items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfRules::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * Note that AssignmentRules and RateRules do not actually have IDs, but
   * the libsbml interface pretends that they do: no assignment rule or rate
   * rule is returned by this function.
   <p>
   * @param id string representing the id of objects to find
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers ListOfRules::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfRules} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfRules::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfRules::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers ListOfRules::isValidTypeForList(SBase * item) "
/** * @internal */ public
";


%typemap(javaimports) AlgebraicRule "
/** 
 *  An SBML <em>algebraic rule</em> representing <em>0 = f(<b>W</b>)</em>.
 <p>
 * The rule type {@link AlgebraicRule} is derived from the parent class {@link Rule}.  It
 * is used to express equations that are neither assignments of model
 * variables nor rates of change.  {@link AlgebraicRule} does not add any
 * attributes to the basic {@link Rule}; its role is simply to distinguish this
 * case from the other cases.
 <p>
 * In the context of a simulation, algebraic rules are in effect at all
 * times, <em>t</em> &#8805; <em>0</em>.  For purposes of evaluating
 * expressions that involve the delay \'csymbol\' (see the SBML
 * specification), algebraic rules are considered to apply also at
 * <em>t</em> &#8804; <em>0</em>.  Please consult the relevant SBML
 * specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time <em>t</em>
 * &#8804; <em>0</em>.
 <p>
 * An SBML model must not be overdetermined.  The ability to define
 * arbitrary algebraic expressions in an SBML model introduces the
 * possibility that a model is mathematically overdetermined by the overall
 * system of equations constructed from its rules, reactions and events.
 * Therefore, if an algebraic rule is introduced in a model, for at least
 * one of the entities referenced in the rule\'s \'math\' element the value of
 * that entity must not be completely determined by other constructs in the
 * model.  This means that at least this entity must not have the attribute
 * \'constant\'=<code>true</code> and there must also not be a rate rule or assignment
 * rule for it.  Furthermore, if the entity is a {@link Species} object, its value
 * must not be determined by reactions, which means that it must either
 * have the attribute \'boundaryCondition\'=<code>true</code> or else not be involved
 * in any reaction at all.  These restrictions are explained in more detail
 * in the SBML specification documents.
 <p>
 * In SBML Levels 2 and&nbsp;3, {@link Reaction} object identifiers can be
 * referenced in the \'math\' expression of an algebraic rule, but reaction
 * rates can never be <em>determined</em> by algebraic rules.  This is true
 * even when a reaction does not contain a {@link KineticLaw}
 * object.  (In such cases of missing
 * kinetic law definitions, the model is valid but incomplete; the rates of
 * reactions lacking kinetic laws are simply undefined, and not determined by
 * the algebraic rule.)
 <p>
 * <p>
 * <h2>General summary of SBML rules</h2>
 <p>
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into three
 * subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible functional
 * forms (where <em>x</em> is a variable, <em>f</em> is some arbitrary
 * function returning a numerical result, <b><em>V</em></b> is a vector of
 * variables that does not include <em>x</em>, and <b><em>W</em></b> is a
 * vector of variables that may include <em>x</em>):
 <p>
 * <table border=\'0\' cellpadding=\'0\' class=\'centered\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 <p>
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 <p>
 * <ul>
 * <li> <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see {@link InitialAssignment}.)
<p>
 * <li> SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.
 <p>
 * <li> Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;
 <p>
 * <li> Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and
 <p>
 * <li> Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 *
 * </ul> <p>
 * The approach taken to covering these cases in SBML is to define an
 * abstract {@link Rule} structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of {@link Rule} that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 <p>
 * Each of the three subclasses of {@link Rule} (AssignmentRule, {@link AlgebraicRule},
 * {@link RateRule}) inherit the the \'math\' subelement and other fields from {@link SBase}.
 * The {@link AssignmentRule} and {@link RateRule} classes add an additional attribute,
 * \'variable\'.  See the definitions of {@link AssignmentRule}, {@link AlgebraicRule} and
 * {@link RateRule} for details about the structure and interpretation of each one.
 <p>
 * <h2>Additional restrictions on SBML rules</h2>
 <p>
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 <p>
 * <h3>A model must not contain algebraic loops</h3>
 <p>
 * The combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A {@link KineticLaw} object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the {@link Reaction} object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 <p>
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 <p>
 * <h3>A model must not be overdetermined</h3>
 <p>
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain {@link AlgebraicRule} structures cannot be overdetermined.
 <p>
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 <p>
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 <p>
 * <h2>Rule types for SBML Level 1</h2>
 <p>
 * SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
 * distinguishing rules; specifically, it uses an attribute whose value is
 * drawn from an enumeration of 3 values.  LibSBML supports this using methods
 * that work with the enumeration values  listed below.
 <p>
 * <ul>
 * <li> {@link libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}: Indicates
 * the rule is a \'rate\' rule.
 * <li> {@link libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}:
 * Indicates the rule is a \'scalar\' rule.
 * <li> {@link libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID}:
 * Indicates the rule type is unknown or not yet set.
 *
 * </ul>
 */
"


%javamethodmodifiers AlgebraicRule::AlgebraicRule(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link AlgebraicRule} object using the given SBML <code>level</code> and 
   * <code>version</code> values.
   <p>
   * @param level the SBML Level to assign to this {@link AlgebraicRule} object.
   <p>
   * @param version the SBML Version to assign to this {@link AlgebraicRule} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers AlgebraicRule::AlgebraicRule(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link AlgebraicRule} object using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind of
   * SBML object, are either invalid or mismatched with respect to the parent
   * {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers AlgebraicRule::clone() const "
/**
   * Creates and returns a deep copy of this {@link AlgebraicRule} object.
   <p>
   * @return the (deep) copy of this {@link Rule} object.
   */ public
";


%javamethodmodifiers AlgebraicRule::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link AlgebraicRule}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link AlgebraicRule} object
   * in the list of rules within which <em>the</em> present object is embedded.
   */ public
";


%javamethodmodifiers AlgebraicRule::setInternalIdOnly "
/** * @internal */ public
";


%javamethodmodifiers AlgebraicRule::getInternalIdOnly() const "
/** * @internal */ public
";


%javamethodmodifiers AlgebraicRule::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link AlgebraicRule} object have been set.
   <p>
   * In SBML Levels&nbsp;2&ndash;3, there is no required attribute
   * for an {@link AlgebraicRule} object.  For Level&nbsp;1, the only required
   * attribute is \'formula\'.
   <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%typemap(javaimports) AssignmentRule "
/** 
 *  An SBML <em>assignment rule</em> representing <em>x = f(<b>Y</b>)</em>.
 <p>
 * The rule type {@link AssignmentRule} is derived from the parent class {@link Rule}.  It
 * is used to express equations that set the values of variables.  The
 * left-hand side (the attribute named \'variable\') of an assignment rule
 * can refer to the identifier of a {@link Species}, {@link SpeciesReference} (in SBML
 * Level&nbsp;3), {@link Compartment}, or {@link Parameter}
 * object in the model (but not a
 * {@link Reaction}).  The entity identified must have its \'constant\' attribute set
 * to <code>false.</code>  The effects of an assignment rule construct are in general
 * terms the same, but differ in the precise details depending on the type of
 * SBML component being set:
 * <ul>
 <p>
 * <li> <em>In the case of a species</em>, an SBML assignment rule sets the
 * referenced species\' quantity (whether a \'concentration\' or \'amount\') to
 * the value determined by the formula in the MathML subelement \'math\'.
 * The unit associated with the value produced by the \'math\' formula 
 * <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or <em>must</em> (in
 * SBML releases prior to Level&nbsp;2 version&nbsp;4) be equal to the unit
 * associated with the species\' quantity.  <em>Restrictions</em>: There
 * must not be both an {@link AssignmentRule} \'variable\' attribute and a
 * {@link SpeciesReference} \'species\' attribute having the same value in a model,
 * unless the referenced {@link Species} object has
 * its \'boundaryCondition\' attribute set to <code>true.</code>  In other words, an
 * assignment rule cannot be defined for a species that is created or
 * destroyed in a reaction unless that species is defined as a boundary
 * condition in the model.
 <p>
 * <li> (For SBML Level&nbsp;3 only) <em>In the case of a species
 * reference</em>, an assignment rule sets the stoichiometry of the
 * referenced reactant or product to the value determined by the formula in
 * \'math\'.  The unit associated with the value produced by the \'math\'
 * formula should be consistent with the unit \'dimensionless\', because
 * reactant and product stoichiometries in reactions are dimensionless
 * quantities.
  <p>
 * <li> <em>In the case of a compartment</em>, an SBML assignment rule sets
 * the referenced compartment\'s size to the value determined by the formula
 * in the \'math\' subelement of the {@link AssignmentRule}
 * object.  The overall units of the
 * formula in \'math\' <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4 and in
 * SBML Level&nbsp;3) or <em>must</em> (in SBML releases prior to Level&nbsp;2
 * version&nbsp;4) be the same as the units of the size of the compartment.
 <p>
 * <li> <em>In the case of a parameter</em>, an assignment rule sets the
 * referenced parameter\'s value to that determined by the formula in the
 * \'math\' subelement of the {@link AssignmentRule}
 * object.  The overall units of the
 * formula in the \'math\' subelement <em>should</em> (in SBML Level&nbsp;2
 * Version&nbsp;4 and in SBML Level&nbsp;3) or <em>must</em> (in SBML releases
 * prior to Level&nbsp;2 version&nbsp;4) be the same as the units defined for
 * the parameter.  </ul>
 <p>
 * In the context of a simulation, assignment rules are in effect at all
 * times, <em>t</em> &#8805; <em>0</em>.  For purposes of evaluating
 * expressions that involve the <em>delay</em> \'csymbol\' (see the SBML
 * Level&nbsp;2 specification), assignment rules are considered to apply
 * also at <em>t</em> &#8804; <em>0</em>.  Please consult the relevant
 * SBML specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time <em>t</em>
 * &#8804; <em>0</em>.
 <p>
 * A model must not contain more than one {@link AssignmentRule} or {@link RateRule}
 * object having the same value of
 * \'variable\'; in other words, in the set of all assignment rules and rate
 * rules in an SBML model, each variable appearing in the left-hand sides can
 * only appear once.  This simply follows from the fact that an indeterminate
 * system would result if a model contained more than one assignment rule for
 * the same variable or both an assignment rule and a rate rule for the same
 * variable.
 <p>
 * Similarly, a model must also not contain <em>both</em> an {@link AssignmentRule}
 * and an {@link InitialAssignment} definition for the same variable, because both
 * kinds of constructs apply prior to and at the start of simulation time,
 * i.e., <em>t</em> &#8804; <em>0</em>.  If a model contained both an
 * initial assignment and an assignment rule for the same variable, an
 * indeterminate system would result.
 <p>
 * The value calculated by an {@link AssignmentRule}
 * object overrides the value assigned to
 * the given symbol by the model component defining that symbol.  For
 * example, if a {@link Compartment} object\'s
 * \'size\' attribute value is set in its definition, and the model also
 * contains an {@link AssignmentRule} object 
 * having that compartment\'s \'id\' as its \'variable\' value, then the \'size\'
 * assigned in the {@link Compartment} object
 * definition is ignored and the value assigned based on the computation
 * defined in the {@link AssignmentRule}.  This does <em>not</em> mean that a
 * definition for a given symbol can be omitted if there is an {@link AssignmentRule}
 * object involving it.  For example, 
 * there must be a {@link Parameter} object
 * definition for a given parameter if there is an {@link AssignmentRule} definition
 * for that parameter.  It is only a question of which value definition takes
 * precedence.
 <p>
 * <p>
 * <h2>General summary of SBML rules</h2>
 <p>
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into three
 * subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible functional
 * forms (where <em>x</em> is a variable, <em>f</em> is some arbitrary
 * function returning a numerical result, <b><em>V</em></b> is a vector of
 * variables that does not include <em>x</em>, and <b><em>W</em></b> is a
 * vector of variables that may include <em>x</em>):
 <p>
 * <table border=\'0\' cellpadding=\'0\' class=\'centered\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 <p>
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 <p>
 * <ul>
 * <li> <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see {@link InitialAssignment}.)
<p>
 * <li> SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.
 <p>
 * <li> Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;
 <p>
 * <li> Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and
 <p>
 * <li> Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 *
 * </ul> <p>
 * The approach taken to covering these cases in SBML is to define an
 * abstract {@link Rule} structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of {@link Rule} that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 <p>
 * Each of the three subclasses of {@link Rule} (AssignmentRule, {@link AlgebraicRule},
 * {@link RateRule}) inherit the the \'math\' subelement and other fields from {@link SBase}.
 * The {@link AssignmentRule} and {@link RateRule} classes add an additional attribute,
 * \'variable\'.  See the definitions of {@link AssignmentRule}, {@link AlgebraicRule} and
 * {@link RateRule} for details about the structure and interpretation of each one.
 <p>
 * <h2>Additional restrictions on SBML rules</h2>
 <p>
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 <p>
 * <h3>A model must not contain algebraic loops</h3>
 <p>
 * The combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A {@link KineticLaw} object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the {@link Reaction} object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 <p>
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 <p>
 * <h3>A model must not be overdetermined</h3>
 <p>
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain {@link AlgebraicRule} structures cannot be overdetermined.
 <p>
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 <p>
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 <p>
 * <h2>Rule types for SBML Level 1</h2>
 <p>
 * SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
 * distinguishing rules; specifically, it uses an attribute whose value is
 * drawn from an enumeration of 3 values.  LibSBML supports this using methods
 * that work with the enumeration values  listed below.
 <p>
 * <ul>
 * <li> {@link libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}: Indicates
 * the rule is a \'rate\' rule.
 * <li> {@link libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}:
 * Indicates the rule is a \'scalar\' rule.
 * <li> {@link libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID}:
 * Indicates the rule type is unknown or not yet set.
 *
 * </ul>
 */
"


%javamethodmodifiers AssignmentRule::AssignmentRule(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link AssignmentRule} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link AssignmentRule}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link AssignmentRule}.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers AssignmentRule::AssignmentRule(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link AssignmentRule} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers AssignmentRule::clone() const "
/**
   * Creates and returns a deep copy of this {@link AssignmentRule} object.
   <p>
   * @return the (deep) copy of this {@link Rule} object.
   */ public
";


%javamethodmodifiers AssignmentRule::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link AssignmentRule}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link AssignmentRule} object
   * in the list of rules within which <em>the</em> present object is embedded.
   */ public
";


%javamethodmodifiers AssignmentRule::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link AssignmentRule} object have been set.
   <p>
   * In SBML Levels&nbsp;2&ndash;3, the only required attribute for
   * an {@link AssignmentRule} object is \'variable\'.  For Level&nbsp;1, where the
   * equivalent attribute is known by different names (\'compartment\',
   * \'species\', or \'name\', depending on the type of object), there is an
   * additional required attribute called \'formula\'.
   <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers AssignmentRule::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%typemap(javaimports) RateRule "
/** 
 *  An SBML <em>rate rule</em> representing <em>dx/dt = f(<b>Y</b>)</em>.
 <p>
 * The rule type {@link RateRule} is derived from the parent class {@link Rule}.  It is
 * used to express equations that determine the rates of change of
 * variables.  The left-hand side (the \'variable\' attribute) can refer to
 * the identifier of a species, compartment, or parameter (but not a
 * reaction).  The entity identified must have its \'constant\' attribute set
 * to <code>false.</code>  The effects of a {@link RateRule} are in general terms the same,
 * but differ in the precise details depending on which variable is being
 * set:
 <p>
 * <ul> <li> <em>In the case of a species</em>, a {@link RateRule} sets the rate of
 * change of the species\' quantity (<em>concentration</em> or <em>amount of
 * substance</em>) to the value determined by the formula in the \'math\'
 * subelement of the {@link RateRule} object.  The overall units of the formula in
 * \'math\' <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or 
 * <em>must</em> (in SBML releases prior to Level&nbsp;2 version&nbsp;4) be equal to
 * the unit of <em>species quantity</em> divided by the model-wide unit of
 * <em>time</em>.  <em>Restrictions</em>: There must not be both a {@link RateRule}
 * \'variable\' attribute and a {@link SpeciesReference} \'species\' attribute having
 * the same value, unless that species has its \'boundaryCondition\'
 * attribute is set to <code>true.</code>  This means a rate rule cannot be defined
 * for a species that is created or destroyed in a reaction, unless that
 * species is defined as a boundary condition in the model.
 <p>
 * <li> (For SBML Level&nbsp;3 only) <em>In the case of a species
 * reference</em>, a {@link RateRule} sets the rate of change of the stoichiometry
 * of the referenced reactant or product to the value determined by the
 * formula in \'math\'.  The unit associated with the value produced by the
 * \'math\' formula should be consistent with the unit \'dimensionless\'
 * divided by the model-wide unit of <em>time</em>.
 <p>
 * <li> <em>In the case of a compartment</em>, a {@link RateRule} sets the rate of
 * change of the compartment\'s size to the value determined by the formula
 * in the \'math\' subelement of the {@link RateRule} object.  The overall units of
 * the formula <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML
 * Level&nbsp;3) or <em>must</em> (in SBML releases prior to Level&nbsp;2
 * version&nbsp;4) be the units of the compartment\'s <em>size</em> divided
 * by the model-wide unit of <em>time</em>.
 <p>
 * <li> <em>In the case of a parameter</em>, a {@link RateRule} sets the rate of
 * change of the parameter\'s value to that determined by the formula in the
 * \'math\' subelement of the {@link RateRule} object.  The overall units of the
 * formula <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML
 * Level&nbsp;3) or <em>must</em> (in SBML releases prior to Level&nbsp;2
 * version&nbsp;4) be the {@link Parameter} object\'s \'unit\' attribute value divided
 * by the model-wide unit of <em>time</em>.  </ul>
 <p>
 * In the context of a simulation, rate rules are in effect for simulation
 * time <em>t</em> &lt; <em>0</em>.  Please consult the relevant SBML
 * specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time <em>t</em>
 * &#8804; <em>0</em>.
 <p>
 * As mentioned in the description of {@link AssignmentRule}, a model must not
 * contain more than one {@link RateRule} or {@link AssignmentRule} object having the same
 * value of \'variable\'; in other words, in the set of all assignment rules
 * and rate rules in an SBML model, each variable appearing in the
 * left-hand sides can only appear once.  This simply follows from the fact
 * that an indeterminate system would result if a model contained more than
 * one assignment rule for the same variable or both an assignment rule and
 * a rate rule for the same variable.
 <p>
 * <p>
 * <h2>General summary of SBML rules</h2>
 <p>
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into three
 * subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible functional
 * forms (where <em>x</em> is a variable, <em>f</em> is some arbitrary
 * function returning a numerical result, <b><em>V</em></b> is a vector of
 * variables that does not include <em>x</em>, and <b><em>W</em></b> is a
 * vector of variables that may include <em>x</em>):
 <p>
 * <table border=\'0\' cellpadding=\'0\' class=\'centered\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 <p>
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 <p>
 * <ul>
 * <li> <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see {@link InitialAssignment}.)
<p>
 * <li> SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.
 <p>
 * <li> Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;
 <p>
 * <li> Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and
 <p>
 * <li> Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 *
 * </ul> <p>
 * The approach taken to covering these cases in SBML is to define an
 * abstract {@link Rule} structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of {@link Rule} that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 <p>
 * Each of the three subclasses of {@link Rule} (AssignmentRule, {@link AlgebraicRule},
 * {@link RateRule}) inherit the the \'math\' subelement and other fields from {@link SBase}.
 * The {@link AssignmentRule} and {@link RateRule} classes add an additional attribute,
 * \'variable\'.  See the definitions of {@link AssignmentRule}, {@link AlgebraicRule} and
 * {@link RateRule} for details about the structure and interpretation of each one.
 <p>
 * <h2>Additional restrictions on SBML rules</h2>
 <p>
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 <p>
 * <h3>A model must not contain algebraic loops</h3>
 <p>
 * The combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A {@link KineticLaw} object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the {@link Reaction} object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 <p>
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 <p>
 * <h3>A model must not be overdetermined</h3>
 <p>
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain {@link AlgebraicRule} structures cannot be overdetermined.
 <p>
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 <p>
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 <p>
 * <h2>Rule types for SBML Level 1</h2>
 <p>
 * SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
 * distinguishing rules; specifically, it uses an attribute whose value is
 * drawn from an enumeration of 3 values.  LibSBML supports this using methods
 * that work with the enumeration values  listed below.
 <p>
 * <ul>
 * <li> {@link libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}: Indicates
 * the rule is a \'rate\' rule.
 * <li> {@link libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}:
 * Indicates the rule is a \'scalar\' rule.
 * <li> {@link libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID}:
 * Indicates the rule type is unknown or not yet set.
 *
 * </ul>
 */
"


%javamethodmodifiers RateRule::RateRule(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link RateRule} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link RateRule}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RateRule}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers RateRule::RateRule(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link RateRule} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers RateRule::clone() const "
/**
   * Creates and returns a deep copy of this {@link RateRule} object.
   <p>
   * @return the (deep) copy of this {@link RateRule} object.
   */ public
";


%javamethodmodifiers RateRule::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link RateRule} object
   * in the list of rules within which <em>the</em> present object is embedded.
   */ public
";


%javamethodmodifiers RateRule::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link RateRule} object
   * have been set.
   <p>
   * In SBML Levels&nbsp;2&ndash;3, the only required attribute for a
   * {@link RateRule} object is \'variable\'.  For Level&nbsp;1, where the equivalent
   * attribute is known by different names (\'compartment\', \'species\', or
   * \'name\', depending on the type of object), there is an additional
   * required attribute called \'formula\'.
   <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers RateRule::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%typemap(javaimports) Constraint "
/** 
 *  An SBML <em>constraint</em>, for stating validity assumptions.
 <p>
 * The {@link Constraint} object class was introduced in SBML Level&nbsp;2
 * Version&nbsp;2 as a mechanism for stating the assumptions under which a
 * model is designed to operate.  The <em>constraints</em> are statements
 * about permissible values of different quantities in a model.
 * Constraints are not used to compute dynamical values for simulation or
 * analysis, but rather, they serve an advisory role for
 * simulation/analysis tools.
 <p>
 * SBML\'s {@link Constraint} object class has one required attribute, \'id\', to
 * give the parameter a unique identifier by which other parts of an SBML
 * model definition can refer to it.  A {@link Constraint} object can also have an
 * optional \'name\' attribute of type <code>string.</code>  Identifiers and names must
 * be used according to the guidelines described in the SBML specification
 * (e.g., Section 3.3 in the Level&nbsp;2 Version 4 specification).  
 <p>
 * {@link Constraint} has one required subelement, \'math\', containing a MathML
 * formula defining the condition of the constraint.  This formula must
 * return a boolean value of <code>true</code> when the model is a <em>valid</em>
 * state.  The formula can be an arbitrary expression referencing the
 * variables and other entities in an SBML model.  The evaluation of \'math\'
 * and behavior of constraints are described in more detail below.
 <p>
 * A {@link Constraint} structure also has an optional subelement called \'message\'.
 * This can contain a message in XHTML format that may be displayed to the
 * user when the condition of the formula in the \'math\' subelement
 * evaluates to a value of <code>false.</code>  Software tools are not required to
 * display the message, but it is recommended that they do so as a matter
 * of best practice.  The XHTML content within a \'message\' subelement must
 * follow the same restrictions as for the \'notes\' element on {@link SBase}
 * described in in the SBML Level&nbsp;2 specification; please consult the
 * <a target=\'_blank\' href=\'http://sbml.org/Documents/Specifications\'>SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for \'notes\'
 * content.
 <p>
 * {@link Constraint} was introduced in SBML Level&nbsp;2 Version&nbsp;2.  It is
 * not available in earlier versions of Level&nbsp;2 nor in any version of
 * Level&nbsp;1.
 <p>
 * <h2>Semantics of Constraints</h2>
 <p>
 * In the context of a simulation, a {@link Constraint} has effect at all times
 * <em>t &#8805; 0</em>.  Each {@link Constraint}\'s \'math\' subelement is first
 * evaluated after any {@link InitialAssignment} definitions in a model at <em>t =
 * 0</em> and can conceivably trigger at that point.  (In other words, a
 * simulation could fail a constraint immediately.)
 <p>
 * {@link Constraint} structures <em>cannot and should not</em> be used to compute
 * the dynamical behavior of a model as part of, for example, simulation.
 * Constraints may be used as input to non-dynamical analysis, for instance
 * by expressing flux constraints for flux balance analysis.
 <p>
 * The results of a simulation of a model containing a constraint are
 * invalid from any simulation time at and after a point when the function
 * given by the \'math\' subelement returns a value of <code>false.</code>  Invalid
 * simulation results do not make a prediction of the behavior of the
 * biochemical reaction network represented by the model.  The precise
 * behavior of simulation tools is left undefined with respect to
 * constraints.  If invalid results are detected with respect to a given
 * constraint, the \'message\' subelement may optionally be displayed to the
 * user.  The simulation tool may also halt the simulation or clearly
 * delimit in output data the simulation time point at which the simulation
 * results become invalid.
 <p>
 * SBML does not impose restrictions on duplicate {@link Constraint} definitions or
 * the order of evaluation of {@link Constraint} objects in a model.  It is
 * possible for a model to define multiple constraints all with the same
 * mathematical expression.  Since the failure of any constraint indicates
 * that the model simulation has entered an invalid state, a system is not
 * required to attempt to detect whether other constraints in the model
 * have failed once any one constraint has failed.
 */
"


%typemap(javaimports) ListOfConstraints "
/** 
 *  A list of {@link Constraint} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers Constraint::Constraint(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Constraint} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Constraint}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Constraint}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Constraint::Constraint(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Constraint} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Constraint::Constraint(const Constraint& orig) "
/**
   * Copy constructor; creates a copy of this {@link Constraint}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Constraint::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Constraint}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Constraint} in the
   * list of constraints within which this {@link Constraint} is embedded (i.e., in
   * the {@link ListOfConstraints} located in the enclosing {@link Model} instance).
   */ public
";


%javamethodmodifiers Constraint::clone() const "
/**
   * Creates and returns a deep copy of this {@link Constraint} object.
   <p>
   * @return the (deep) copy of this {@link Constraint} object.
   */ public
";


%javamethodmodifiers Constraint::getMessage() const "
/**
   * Get the message, if any, associated with this {@link Constraint}
   <p>
   * @return the message for this {@link Constraint}, as an {@link XMLNode}.
   */ public
";


%javamethodmodifiers Constraint::getMessageString() const "
/**
   * Get the message string, if any, associated with this {@link Constraint}
   <p>
   * @return the message for this {@link Constraint}, as a string.
   */ public
";


%javamethodmodifiers Constraint::getMath() const "
/**
   * Get the mathematical expression of this {@link Constraint}
   <p>
   * @return the math for this {@link Constraint}, as an {@link ASTNode}.
   */ public
";


%javamethodmodifiers Constraint::isSetMessage() const "
/**
   * Predicate returning <code>true</code> if a
   * message is defined for this {@link Constraint}.
   <p>
   * @return <code>true</code> if the message of this {@link Constraint} is set,
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Constraint::isSetMath() const "
/**
   * Predicate returning <code>true</code> if a
   * mathematical formula is defined for this {@link Constraint}.
   <p>
   * @return <code>true</code> if the \'math\' subelement for this {@link Constraint} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Constraint::setMessage(const XMLNode* xhtml) "
/**
   * Sets the message of this {@link Constraint}.
   <p>
   * The {@link XMLNode} tree passed in <code>xhtml</code> is copied.
   <p>
   * @param xhtml an XML tree containing XHTML content.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers Constraint::setMath(const ASTNode* math) "
/**
   * Sets the mathematical expression of this {@link Constraint} to a copy of the
   * AST given as <code>math</code>.
   <p>
   * @param math an {@link ASTNode} expression to be assigned as the \'math\'
   * subelement of this {@link Constraint}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers Constraint::unsetMessage "
/**
   * Unsets the \'message\' subelement of this {@link Constraint}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Constraint::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Constraint::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Constraint::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers Constraint::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_CONSTRAINT SBML_CONSTRAINT} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Constraint::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Constraint}, is
   * always <code>\'constraint\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'constraint\'.</code>
   */ public
";


%javamethodmodifiers Constraint::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Constraint::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Constraint} object
   * have been set.
   <p>
   * @note The required elements for a {@link Constraint} object are:
   * <ul>
   * <li> \'math\'
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers Constraint::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers Constraint::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Constraint::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Constraint::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Constraint::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Constraint::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOfConstraints::ListOfConstraints(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfConstraints} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfConstraints::ListOfConstraints(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfConstraints} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfConstraints} object to be created.
   */ public
";


%javamethodmodifiers ListOfConstraints::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfConstraints} object.
   <p>
   * @return the (deep) copy of this {@link ListOfConstraints} object.
   */ public
";


%javamethodmodifiers ListOfConstraints::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Constraint} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance: {@link libsbmlConstants#SBML_CONSTRAINT SBML_CONSTRAINT} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfConstraints::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfConstraints}, the XML element name is <code>\'listOfConstraints\'.</code>
   <p>
   * @return the name of this element.
   */ public
";


%javamethodmodifiers ListOfConstraints::get(unsigned int n) "
/**
   * Get a {@link Constraint} from the {@link ListOfConstraints}.
   <p>
   * @param n the index number of the {@link Constraint} to get.
   <p>
   * @return the nth {@link Constraint} in this {@link ListOfConstraints}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfConstraints::get "
/**
   * Get a {@link Constraint} from the {@link ListOfConstraints}.
   <p>
   * @param n the index number of the {@link Constraint} to get.
   <p>
   * @return the nth {@link Constraint} in this {@link ListOfConstraints}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfConstraints::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfConstraints} items and returns a
   * pointer to it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfConstraints::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfConstraints::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) Reaction "
/** 
 *  An SBML reaction between species in an SBML model.
 <p>
 * A <em>reaction</em> represents any transformation, transport or binding
 * process, typically a chemical reaction, that can change the quantity of
 * one or more species.  In SBML, a reaction is defined primarily in terms
 * of the participating reactants and products (and their corresponding
 * stoichiometries), along with optional modifier species, an optional rate
 * at which the reaction takes place, and optional parameters.
 <p>
 * As with other major objects in SBML, {@link Reaction} has a mandatory attribute,
 * \'id\', used to give the compartment type an identifier.  The identifier
 * must be a text string conforming to the identifer syntax permitted in
 * SBML.  In SBML Level&nbsp;2 and Level&nbsp;3, the reaction \'id\'
 * identifier can be used in mathematical formulas elsewhere in an SBML
 * model to represent the rate of that reaction; this usage is explained
 * below.  {@link Reaction} also has an optional \'name\' attribute, of type 
 * <code>string.</code>  The \'id\' and \'name\' must be used according to the guidelines
 * described in the SBML specification.
 <p>
 * The species participating as reactants, products, and/or modifiers in a
 * reaction are declared using lists of {@link SpeciesReference} and/or
 * {@link ModifierSpeciesReference} instances stored in subelements
 * \'listOfReactants\', \'listOfProducts\' and \'listOfModifiers\'.  Certain
 * restrictions are placed on the appearance of species in reaction
 * definitions:
 * <ul>
 * <li> The ability of a species to appear as a reactant or product of any
 * reaction in a model is governed by certain flags in that species\'
 * definition; see the definition of {@link Species} for more information.
 <p>
 * <li> Any species appearing in the mathematical formula of the subelement
 * \'kineticLaw\' (described below) of a {@link Reaction} must be declared in at
 * least one of that {@link Reaction}\'s lists of reactants, products, and/or
 * modifiers.  Put another way, it is an error for a reaction\'s kinetic law
 * formula to refer to species that have not been declared for that
 * reaction.
 <p>
 * <li> A reaction definition can contain an empty list of reactants
 * <em>or</em> an empty list of products, but it must have at least one
 * reactant or product; in other words, a reaction without any reactant or
 * product species is not permitted.  (This restriction does not apply to
 * modifier species, which remain optional in all cases.)
 * </ul>
 <p>
 * A reaction can contain up to one {@link KineticLaw} object in a subelement named
 * \'kineticLaw\'.  It defines the speed at which the process defined by the
 * reaction takes place.  The description of {@link KineticLaw} provides more
 * details about its use.  Note that although the inclusion of a {@link KineticLaw}
 * object in an instance of a {@link Reaction} component is optional, there is no
 * useful default that can be substituted in place of a missing rate
 * expression in a reaction.  Moreover, a reaction\'s rate cannot be defined
 * in any other way in SBML&mdash;{@link InitialAssignment}, {@link AssignmentRule},
 * {@link RateRule}, {@link AlgebraicRule}, {@link Event}, and other constructs in SBML cannot be
 * used to set the reaction rate separately.  Nevertheless, for some
 * modeling applications, reactions without any defined rate can be
 * perfectly acceptable.
 <p>
 * {@link Reaction} also has a boolean attribute named \'reversible\' for indicating
 * whether the reaction is reversible.  This attribute is optional in SBML
 * Level&nbsp;2, with a default of <code>true</code>; it is mandatory in SBML
 * Level&nbsp;3 (with no default value).  To say that a reaction is 
 * <em>reversible</em> is to say it can proceed in either the forward or the reverse
 * direction.  Although the reversibility of a reaction can sometimes be
 * deduced by inspecting its rate expression, this is not always the case,
 * especially for complicated expressions.  Moreover, the need in SBML to
 * allow rate expressions (i.e., {@link KineticLaw}) to be optional leads to the
 * need for a separate flag indicating reversibility.  Note that labeling a
 * reaction as irreversible is an assertion that the reaction always
 * proceeds in the given forward direction.  (Why else would it be flagged
 * as irreversible?)  This implies the rate expression in the {@link KineticLaw}
 * always has a non-negative value during simulations.  Software tools
 * could provide a means of optionally testing that this condition holds.
 * The presence of reversibility information in two places (i.e., the rate
 * expression and the \'reversible\' attribute on {@link Reaction}) leaves open the
 * possibility that a model could contain contradictory information, but
 * the creation of such a model would be an error on the part of the
 * software generating it.
 <p>
 * The {@link Reaction} object class has another boolean attribute called \'fast\'.
 * This attribute is optional in SBML Level&nbsp;2, with a default of 
 * <code>false</code>; it is mandatory in SBML Level&nbsp;3 (with no default value).  It
 * is used to indicate that a reaction occurs on a vastly faster time scale
 * than others in a system.  Readers are directed to the SBML Level&nbsp;2
 * Version&nbsp;4 specification, which provides more detail about the
 * conditions under which a reaction can be considered to be fast in this
 * sense.  The attribute\'s default value is <code>false.</code>  SBML Level&nbsp;1
 * and Level&nbsp;2 Version&nbsp;1 incorrectly claimed that software tools
 * could ignore this attribute if they did not implement support for the
 * corresponding concept; however, further research in SBML has revealed
 * that this is not true, and \'fast\' <em>cannot be ignored</em> if it is
 * set to <code>true.</code>  SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 therefore
 * stipulate that if a model has any reactions with \'fast\' set to <code>true</code>,
 * a software tool must be able to respect the attribute or else indicate
 * to the user that it does not have the capacity to do so.  Analysis
 * software cannot ignore the value of the \'fast\' attribute because doing
 * so may lead to different results as compared to a software system that
 * <em>does</em> make use of \'fast\'.
 <p>
 * In SBML Level&nbsp;3 Version&nbsp;1, the {@link Reaction} object has an
 * additional optional attribute named \'compartment\', whose value must be
 * the identifier of a compartment defined in the enclosing {@link Model} object.
 * The \'compartment\' attribute can be used to indicate the compartment in
 * which the reaction is assumed to take place.  If the attribute is
 * present, its value must be the identifier of a {@link Compartment} object
 * defined in the enclosing {@link Model} object.  Similar to the \'reversible\'
 * attribute, the value of the \'compartment\' attribute has no direct impact
 * on the construction of mathematical equations for the SBML model.  When
 * a kinetic law is given for a reaction, the compartment location may
 * already be implicit in the kinetic law (although this cannot always be
 * guaranteed).  Nevertheless, software tools may find the \'compartment\'
 * attribute value useful for such purposes as analyzing the structure of
 * the model, guiding the modeler in constructing correct rate formulas,
 * and visualization purposes.
 <p>
 * Readers are urged to read the SBML specification for more details about
 * the proper use of {@link Reaction}.
 */
"


%typemap(javaimports) ListOfReactions "
/** 
 *  A list of {@link Reaction} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers Reaction::Reaction(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Reaction} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Reaction}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Reaction}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Reaction::Reaction(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Reaction} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Reaction::Reaction(const Reaction& orig) "
/**
   * Copy constructor; creates a copy of this {@link Reaction}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Reaction::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Reaction}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers Reaction::clone() const "
/**
   * Creates and returns a deep copy of this {@link Reaction} object.
   <p>
   * @return the (deep) copy of this {@link Reaction} object.
   */ public
";


%javamethodmodifiers Reaction::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id string representing the id of objects to find.
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers Reaction::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given <code>metaid</code>, or
   * <code>null</code> if no such object is found.
   <p>
   * @param metaid string representing the metaid of objects to find
   <p>
   * @return pointer to the first element found with the given <code>metaid</code>.
   */ public
";


%javamethodmodifiers Reaction::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child {@link SBase} objects, including those nested to an
   * arbitrary depth
   <p>
   * @return a List of pointers to all children objects.
   */ public
";


%javamethodmodifiers Reaction::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Reaction::initDefaults "
/**
   * Initializes the fields of this {@link Reaction} object to \'typical\' default
   * values.
   <p>
   * The SBML {@link Reaction} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   <p>
   * <ul>
   * <li> Sets the \'reversible\' attribute to <code>true</code>
   * <li> Sets the \'fast\' attribute to <code>false</code>
   * <li> Marks the \'fast\' attribute as <em>not</em> having been set
   *
   * </ul> <p>
   * <p>
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to <code>true.</code>
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * <code>true</code>, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
   */ public
";


%javamethodmodifiers Reaction::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link Reaction}.
   <p>
   * @return the id of this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link Reaction}.
   <p>
   * @return the name of this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getKineticLaw() const "
/**
   * Returns the {@link KineticLaw} object contained in this {@link Reaction}.
   <p>
   * @return the {@link KineticLaw} instance.
   */ public
";


%javamethodmodifiers Reaction::getKineticLaw "
/**
   * Returns the {@link KineticLaw} object contained in this {@link Reaction}.
   <p>
   * @return the {@link KineticLaw} instance.
   */ public
";


%javamethodmodifiers Reaction::getReversible() const "
/**
   * Returns the value of the \'reversible\' attribute on the {@link Reaction} as a
   * boolean value.
   <p>
   * @return the reversibility status of this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getFast() const "
/**
   * Returns the value of the \'fast\' attribute of this {@link Reaction}.
   <p>
   * @return the \'fast\' status of this {@link Reaction}.
   <p>
   * <p>
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to <code>true.</code>
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * <code>true</code>, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
   */ public
";


%javamethodmodifiers Reaction::getCompartment() const "
/**
   * (SBML Level&nbsp;3 only) Returns the value of the \'compartment\'
   * attribute on the {@link Reaction}.
   <p>
   * @return the compartment of this {@link Reaction}.
   <p>
   * @note The \'compartment\' attribute is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present on {@link Reaction} in lower Levels of
   * SBML.
   */ public
";


%javamethodmodifiers Reaction::isSetId() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Reaction}\'s \'id\' attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Reaction} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Reaction::isSetName() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Reaction}\'s \'name\' attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Reaction} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Reaction::isSetKineticLaw() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Reaction} contains a kinetic law object.
   <p>
   * @return <code>true</code> if a {@link KineticLaw} is present in this {@link Reaction},, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Reaction::isSetFast() const "
/**
   * Predicate returning <code>true</code> if the value of
   * the \'fast\' attribute on this {@link Reaction}.
   <p>
   * @return <code>true</code> if the \'fast\' attribute is true, <code>false</code> otherwise.
   <p>
   * <p>
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to <code>true.</code>
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * <code>true</code>, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
   */ public
";


%javamethodmodifiers Reaction::isSetCompartment() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Reaction}\'s \'compartment\' attribute is set.
   <p>
   * @return <code>true</code> if the \'compartment\' attribute of this {@link Reaction} is
   * set, <code>false</code> otherwise.
   <p>
   * @note The \'compartment\' attribute is available in SBML
   * Level&nbsp;3 Version&nbsp;1 Core, but is not present on {@link Reaction} in
   * lower Levels of SBML.
   */ public
";


%javamethodmodifiers Reaction::isSetReversible() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Reaction}\'s \'reversible\' attribute is set.
   <p>
   * @return <code>true</code> if the \'reversible\' attribute of this {@link Reaction} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Reaction::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link Reaction}.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link Reaction}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Reaction::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link Reaction}.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link Reaction}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Reaction::setKineticLaw(const KineticLaw* kl) "
/**
   * Sets the \'kineticLaw\' subelement of this {@link Reaction} to a copy of the
   * given {@link KineticLaw} object.
   <p>
   * @param kl the {@link KineticLaw} object to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * </ul>
  */ public
";


%javamethodmodifiers Reaction::setReversible(bool value) "
/**
   * Sets the value of the \'reversible\' attribute of this {@link Reaction}.
   <p>
   * @param value the value of the \'reversible\' attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers Reaction::setFast(bool value) "
/**
   * Sets the value of the \'fast\' attribute of this {@link Reaction}.
   <p>
   * @param value the value of the \'fast\' attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * <p>
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to <code>true.</code>
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * <code>true</code>, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
   */ public
";


%javamethodmodifiers Reaction::setCompartment(const std::string& sid) "
/**
   * Sets the value of the \'compartment\' attribute of this {@link Reaction}.
   <p>
   * The string <code>sid</code> is copied.  
   <p>
   * @param sid the string to use as the compartment of this {@link Reaction}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The \'compartment\' attribute is available in SBML
   * Level&nbsp;3 Version&nbsp;1 Core, but is not present on {@link Reaction} in
   * lower Levels of SBML.
   */ public
";


%javamethodmodifiers Reaction::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link Reaction}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Reaction::unsetKineticLaw "
/**
   * Unsets the \'kineticLaw\' subelement of this {@link Reaction}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Reaction::unsetFast "
/**
   * Unsets the value of the \'fast\' attribute of this {@link Reaction}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to <code>true.</code>
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * <code>true</code>, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
   */ public
";


%javamethodmodifiers Reaction::unsetCompartment "
/**
   * Unsets the value of the \'compartment\' attribute of this {@link Reaction}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The \'compartment\' attribute is available in SBML
   * Level&nbsp;3 Version&nbsp;1 Core, but is not present on {@link Reaction} in
   * lower Levels of SBML.
   */ public
";


%javamethodmodifiers Reaction::addReactant(const SpeciesReference* sr) "
/**
   * Adds a given {@link SpeciesReference} object as a reactant in this {@link Reaction}.
   <p>
   * The {@link SpeciesReference} instance in <code>sr</code> is copied.
   <p>
   * @param sr a {@link SpeciesReference} object referring to a {@link Species} in the
   * enclosing {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createReactant()
   */ public
";


%javamethodmodifiers Reaction::addProduct(const SpeciesReference* sr) "
/**
   * Adds a given {@link SpeciesReference} object as a product in this {@link Reaction}.
   <p>
   * The {@link SpeciesReference} instance in <code>sr</code> is copied.
   <p>
   * @param sr a {@link SpeciesReference} object referring to a {@link Species} in the
   * enclosing {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createProduct()
   */ public
";


%javamethodmodifiers Reaction::addModifier(const ModifierSpeciesReference* msr) "
/**
   * Adds a given {@link ModifierSpeciesReference} object as a product in this
   * {@link Reaction}.
   <p>
   * The {@link ModifierSpeciesReference} instance in <code>msr</code> is copied.
   <p>
   * @param msr a {@link ModifierSpeciesReference} object referring to a {@link Species} in
   * the enclosing {@link Model}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createModifier()
   */ public
";


%javamethodmodifiers Reaction::createReactant "
/**
   * Creates a new {@link SpeciesReference}, adds it to this {@link Reaction}\'s list of
   * reactants, and returns it.
   <p>
   * @return a new {@link SpeciesReference} object.
   */ public
";


%javamethodmodifiers Reaction::createProduct "
/**
   * Creates a new {@link SpeciesReference}, adds it to this {@link Reaction}\'s list of
   * products, and returns it.
   <p>
   * @return a new {@link SpeciesReference} object.
   */ public
";


%javamethodmodifiers Reaction::createModifier "
/**
   * Creates a new {@link ModifierSpeciesReference}, adds it to this {@link Reaction}\'s
   * list of modifiers and returns it.
   <p>
   * @return a new {@link ModifierSpeciesReference} object.
   */ public
";


%javamethodmodifiers Reaction::createKineticLaw "
/**
   * Creates a new {@link KineticLaw} object, installs it as this {@link Reaction}\'s
   * \'kineticLaw\' subelement, and returns it.
   <p>
   * If this {@link Reaction} had a previous {@link KineticLaw}, it will be destroyed.
   <p>
   * @return the new {@link KineticLaw} object
   */ public
";


%javamethodmodifiers Reaction::getListOfReactants() const "
/**
   * Returns the list of reactants in this {@link Reaction} object.
   <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as reactants in this reaction
   */ public
";


%javamethodmodifiers Reaction::getListOfReactants "
/**
   * Returns the list of reactants in this {@link Reaction} object.
   <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as reactants in this reaction
   */ public
";


%javamethodmodifiers Reaction::getListOfProducts() const "
/**
   * Returns the list of products in this {@link Reaction} object.
   <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as products in this reaction
   */ public
";


%javamethodmodifiers Reaction::getListOfProducts "
/**
   * Returns the list of products in this {@link Reaction} object.
   <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as products in this reaction
   */ public
";


%javamethodmodifiers Reaction::getListOfModifiers() const "
/**
   * Returns the list of modifiers in this {@link Reaction} object.
   <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as modifiers in this reaction
   */ public
";


%javamethodmodifiers Reaction::getListOfModifiers "
/**
   * Returns the list of modifiers in this {@link Reaction} object.
   <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as modifiers in this reaction
   */ public
";


%javamethodmodifiers Reaction::getReactant "
/**
   * Returns the nth reactant species (as a {@link SpeciesReference} object) in 
   * the list of reactants in this {@link Reaction}.
   <p>
   * Callers should first call getNumReactants() to find out how many
   * reactants there are, to avoid using an invalid index number.
   <p>
   * @param n the index of the reactant sought.
   <p>
   * @return the nth reactant (as a {@link SpeciesReference} object) of this
   * {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getReactant(unsigned int n) "
/**
   * Returns the nth reactant species (as a {@link SpeciesReference} object) 
   * in the list of reactants in this {@link Reaction}.
   <p>
   * Callers should first call getNumReactants() to find out how many
   * reactants there are, to avoid using an invalid index number.
   <p>
   * @param n the index of the reactant sought.
   <p>
   * @return the nth reactant (as a {@link SpeciesReference} object) of this
   * {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getReactant(const std::string& species) const "
/**
   * Returns the reactant species (as a {@link SpeciesReference} object) having 
   * a specific identifier in this {@link Reaction}.
   <p>
   * @param species the identifier of the reactant {@link Species} (\'species\' 
   * attribute of the reactant {@link SpeciesReference} object)
   <p>
   * @return a {@link SpeciesReference} object, or <code>null</code> if no species with the
   * given identifier <code>species</code> appears as a reactant in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getReactant(const std::string& species) "
/**
   * Returns the reactant species (as a {@link SpeciesReference} object) having 
   * a specific identifier in this {@link Reaction}.
   <p>
   * @param species the identifier of the reactant {@link Species} (\'species\' 
   * attribute of the reactant {@link SpeciesReference} object)
   <p>
   * @return a {@link SpeciesReference} object, or <code>null</code> if no species with the
   * given identifier <code>species</code> appears as a reactant in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getProduct "
/**
   * Returns the nth product species (as a {@link SpeciesReference} object) in 
   * the list of products in this {@link Reaction}.
   <p>
   * Callers should first call getNumProducts() to find out how many
   * products there are, to avoid using an invalid index number.
   <p>
   * @param n the index of the product sought.
   <p>
   * @return the nth product (as a {@link SpeciesReference} object) of this
   * {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getProduct(unsigned int n) "
/**
   * Returns the nth product species (as a {@link SpeciesReference} object) 
   * in the list of products in this {@link Reaction}.
   <p>
   * Callers should first call getNumProducts() to find out how many
   * products there are, to avoid using an invalid index number.
   <p>
   * @param n the index of the product sought.
   <p>
   * @return the nth product (as a {@link SpeciesReference} object) of this
   * {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getProduct(const std::string& species) const "
/**
   * Returns the product species (as a {@link SpeciesReference} object) having 
   * a specific identifier in this {@link Reaction}.
   <p>
   * @param species the identifier of the product {@link Species} (\'species\'
   * attribute of the product {@link SpeciesReference} object)
   <p>
   * @return a {@link SpeciesReference} object, or <code>null</code> if no species with the
   * given identifier <code>species</code> appears as a product in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getProduct(const std::string& species) "
/**
   * Returns the product species (as a {@link SpeciesReference} object) having 
   * a specific identifier in this {@link Reaction}.
   <p>
   * @param species the identifier of the product {@link Species} (\'species\'
   * attribute of the product {@link SpeciesReference} object)
   <p>
   * @return a {@link SpeciesReference} object, or <code>null</code> if no species with the
   * given identifier <code>species</code> appears as a product in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getModifier "
/**
   * Returns the nth modifier species (as a {@link ModifierSpeciesReference} object) 
   * in the list of modifiers of this {@link Reaction}.
   <p>
   * Callers should first call getNumModifiers() to find out how many
   * modifiers there are, to avoid using an invalid index number.
   <p>
   * @param n the index of the modifier species sought
   <p>
   * @return the nth modifier (as a {@link ModifierSpeciesReference} object) of
   * this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getModifier(unsigned int n) "
/**
   * Returns the nth modifier species (as a {@link ModifierSpeciesReference} object) 
   * in the list of modifiers of this {@link Reaction}.
   <p>
   * Callers should first call getNumModifiers() to find out how many
   * modifiers there are, to avoid using an invalid index number.
   <p>
   * @param n the index of the modifier species sought
   <p>
   * @return the nth modifier (as a {@link ModifierSpeciesReference} object) of
   * this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getModifier(const std::string& species) const "
/**
   * Returns the modifier species (as a {@link ModifierSpeciesReference} object) 
   * having a specific identifier in this {@link Reaction}.
   <p>
   * @param species the identifier of the modifier {@link Species} (\'species\' 
   * attribute of the {@link ModifierSpeciesReference} object)
   <p>
   * @return a {@link ModifierSpeciesReference} object, or <code>null</code> if no species with
   * the given identifier <code>species</code> appears as a modifier in this
   * {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getModifier(const std::string& species) "
/**
   * Returns the modifier species (as a {@link ModifierSpeciesReference} object) 
   * having a specific identifier in this {@link Reaction}.
   <p>
   * @param species the identifier of the modifier {@link Species} (\'species\' 
   * attribute of the {@link ModifierSpeciesReference} object)
   <p>
   * @return a {@link ModifierSpeciesReference} object, or <code>null</code> if no species with
   * the given identifier <code>species</code> appears as a modifier in this
   * {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getNumReactants() const "
/**
   * Returns the number of reactant species in this {@link Reaction}.
   <p>
   * @return the number of reactants in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getNumProducts() const "
/**
   * Returns the number of product species in this {@link Reaction}.
   <p>
   * @return the number of products in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::getNumModifiers() const "
/**
   * Returns the number of modifier species in this {@link Reaction}.
   <p>
   * @return the number of modifiers in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::removeReactant(unsigned int n) "
/**
   * Removes the nth reactant species (SpeciesReference object) in the list of 
   * reactants in this {@link Reaction} and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   * The caller should first call getNumReactants() to find out how many
   * reactants there are, to avoid using an invalid index number.
   <p>
   * @param n the index of the reactant {@link SpeciesReference} object to remove
   <p>
   * @return the removed reactant {@link SpeciesReference} object, or <code>null</code> if the 
   * given index is out of range.
   */ public
";


%javamethodmodifiers Reaction::removeReactant(const std::string& species) "
/**
   * Removes the reactant species (SpeciesReference object) having the given  
   * \'species\' attribute in this {@link Reaction} and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param species the \'species\' attribute of the reactant {@link SpeciesReference} 
   * object
   <p>
   * @return the removed reactant {@link SpeciesReference} object, or <code>null</code> if no 
   * reactant {@link SpeciesReference} object with the given \'species\' attribute 
   * <code>species</code> exists in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::removeProduct(unsigned int n) "
/**
   * Removes the nth product species (SpeciesReference object) in the list of 
   * products in this {@link Reaction} and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   * The caller should first call getNumProducts() to find out how many
   * products there are, to avoid using an invalid index number.
   <p>
   * @param n the index of the product {@link SpeciesReference} object to remove
   <p>
   * @return the removed product {@link SpeciesReference} object, or <code>null</code> if the 
   * given index is out of range.
   */ public
";


%javamethodmodifiers Reaction::removeProduct(const std::string& species) "
/**
   * Removes the product species (SpeciesReference object) having the given  
   * \'species\' attribute in this {@link Reaction} and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param species the \'species\' attribute of the product {@link SpeciesReference} 
   * object
   <p>
   * @return the removed product {@link SpeciesReference} object, or <code>null</code> if no 
   * product {@link SpeciesReference} object with the given \'species\' attribute 
   * <code>species</code> exists in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::removeModifier(unsigned int n) "
/**
   * Removes the nth modifier species (ModifierSpeciesReference object) in 
   * the list of  modifiers in this {@link Reaction} and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   * The caller should first call getNumModifiers() to find out how many
   * modifiers there are, to avoid using an invalid index number.
   <p>
   * @param n the index of the {@link ModifierSpeciesReference} object to remove
   <p>
   * @return the removed {@link ModifierSpeciesReference} object, or <code>null</code> if the 
   * given index is out of range.
   */ public
";


%javamethodmodifiers Reaction::removeModifier(const std::string& species) "
/**
   * Removes the modifier species (ModifierSpeciesReference object) having 
   * the given \'species\' attribute in this {@link Reaction} and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param species the \'species\' attribute of the {@link ModifierSpeciesReference} 
   * object
   <p>
   * @return the removed {@link ModifierSpeciesReference} object, or <code>null</code> if no 
   * {@link ModifierSpeciesReference} object with the given \'species\' attribute @p 
   * species exists in this {@link Reaction}.
   */ public
";


%javamethodmodifiers Reaction::setSBMLDocument(SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers Reaction::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers Reaction::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_REACTION SBML_REACTION} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Reaction::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Reaction}, is
   * always <code>\'reaction\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'reaction\'.</code>
   */ public
";


%javamethodmodifiers Reaction::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Reaction::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link Reaction} object have been set.
   <p>
   * The required attributes for a {@link Reaction} object are:
   * <ul>
   * <li> \'id\' (or \'name\' in SBML Level&nbsp;1)
   * <li> \'fast\' (in Level&nbsp;3 only, where it is defined as a required attribute)
   * <li> \'reversible\' (in Level&nbsp;3 only, where it is defined as a required attribute)
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Reaction::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers Reaction::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Reaction::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Reaction::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Reaction::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Reaction::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Reaction::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Reaction::isExplicitlySetReversible() const "
/** * @internal */ public
";


%javamethodmodifiers Reaction::isExplicitlySetFast() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfReactions::ListOfReactions(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfReactions} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfReactions::ListOfReactions(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfReactions} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfReactions} object to be created.
   */ public
";


%javamethodmodifiers ListOfReactions::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfReactions} object.
   <p>
   * @return the (deep) copy of this {@link ListOfReactions} object.
   */ public
";


%javamethodmodifiers ListOfReactions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Reaction} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for objects contained in this list:
   * {@link libsbmlConstants#SBML_REACTION SBML_REACTION} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfReactions::getElementName() const "
/**
   * Returns the XML element name of this object
   <p>
   * For {@link ListOfReactions}, the XML element name is <code>\'listOfReactions\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfReactions\'.</code>
   */ public
";


%javamethodmodifiers ListOfReactions::get(unsigned int n) "
/**
   * Get a {@link Reaction} from the {@link ListOfReactions}.
   <p>
   * @param n the index number of the {@link Reaction} to get.
   <p>
   * @return the nth {@link Reaction} in this {@link ListOfReactions}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfReactions::get "
/**
   * Get a {@link Reaction} from the {@link ListOfReactions}.
   <p>
   * @param n the index number of the {@link Reaction} to get.
   <p>
   * @return the nth {@link Reaction} in this {@link ListOfReactions}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfReactions::get(const std::string& sid) "
/**
   * Get a {@link Reaction} from the {@link ListOfReactions} based on its identifier.
   <p>
   * @param sid a string representing the identifier of the {@link Reaction} to get.
   <p>
   * @return {@link Reaction} in this {@link ListOfReactions} with the given <code>sid</code> or 
   * <code>null</code> if no such {@link Reaction} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfReactions::get(const std::string& sid) const "
/**
   * Get a {@link Reaction} from the {@link ListOfReactions} based on its identifier.
   <p>
   * @param sid a string representing the identifier of the {@link Reaction} to get.
   <p>
   * @return {@link Reaction} in this {@link ListOfReactions} with the given <code>sid</code> or 
   * <code>null</code> if no such {@link Reaction} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfReactions::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfReactions} items and returns a
   * pointer to it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfReactions::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfReactions} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then
   * null is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfReactions::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfReactions::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) KineticLaw "
/** 
 *  The rate expression for an SBML reaction.
 <p>
 * An object of class {@link KineticLaw} is used to describe the rate at which the
 * process defined by a given {@link Reaction} takes place.  {@link KineticLaw} has
 * subelements called \'math\' (for MathML content) and \'listOfParameters\'
 * (of class {@link ListOfParameters}), in addition to the attributes and
 * subelements it inherits from {@link SBase}.
 <p>
 * {@link KineticLaw}\'s \'math\' subelement for holding a MathML formula defines the
 * rate of the reaction.  The formula may refer to other entities in a
 * model as well as local parameter definitions within the scope of the
 * {@link Reaction} (see below).  It is important to keep in mind, however, that
 * the only {@link Species} identifiers that can be used in this formula are those
 * declared in the lists of reactants, products and modifiers in the
 * {@link Reaction} structure.  (In other words, before a species can be referenced
 * in the {@link KineticLaw}, it must be declared in one of those lists.)
 <p>
 * {@link KineticLaw} provides a way to define <em>local</em> parameters whose
 * identifiers can be used in the \'math\' formula of that {@link KineticLaw}
 * instance.  Prior to SBML Level&nbsp;3, these parameter definitions are
 * stored inside a \'listOfParameters\' subelement containing {@link Parameter}
 * objects; in SBML Level&nbsp;3, this is achieved using a specialized
 * object class called {@link LocalParameter} and the containing subelement is
 * called \'listOfLocalParameters\'.  In both cases, the parameters so
 * defined are only visible within the {@link KineticLaw}; they cannot be accessed
 * outside.  A local parameter within one reaction is not visible from
 * within another reaction, nor is it visible to any other construct
 * outside of the {@link KineticLaw} in which it is defined.  In addition, another
 * important feature is that if such a {@link Parameter} (or in Level&nbsp;3,
 * {@link LocalParameter}) object has the same identifier as another object in the
 * scope of the enclosing {@link Model}, the definition inside the {@link KineticLaw} takes
 * precedence.  In other words, within the {@link KineticLaw}\'s \'math\' formula,
 * references to local parameter identifiers <strong>shadow any identical
 * global identifiers</strong>.
 <p>
 * The values of local parameters defined within {@link KineticLaw} objects cannot
 * change.  In SBML Level&nbsp;3, this quality is built into the
 * {@link LocalParameter} construct.  In Level&nbsp;2, where the same kind of
 * {@link Parameter} object class is used as for global parameters, the {@link Parameter}
 * objects\' \'constant\' attribute must always have a value of <code>true</code>
 * (either explicitly or left to its default value).
 <p>
 * <h2>A warning about identifier shadowing</h2>
 <p>
 * A common misconception is that different classes of objects (e.g.,
 * species, compartments, parameters) in SBML have different identifier
 * scopes.  They do not.  The implication is that if a {@link KineticLaw}\'s local
 * parameter definition uses an identifier identical to <em>any</em> other
 * identifier defined in the model outside the {@link KineticLaw}, even if the
 * other identifier does <em>not</em> belong to a parameter type of object, the
 * local parameter\'s identifier takes precedence within that {@link KineticLaw}\'s
 * \'math\' formula.  It is not an error in SBML for identifiers to shadow
 * each other this way, but can lead to confusing and subtle errors.
 <p>
 * <h2>SBML Level/Version differences</h2>
 <p>
 * In SBML Level&nbsp;2 Version&nbsp;1, the SBML specification
 * included two additional attributes on {@link KineticLaw} called \'substanceUnits\'
 * and \'timeUnits\'.  They were removed beginning with SBML Level&nbsp;2
 * Version&nbsp;2 because further research determined they introduced many
 * problems.  The most significant problem was that their use could easily
 * lead to the creation of valid models whose reactions nevertheless could
 * not be integrated into a system of equations without outside knowledge
 * for converting the quantities used.  Examination of real-life models
 * revealed that a common reason for using \'substanceUnits\' on {@link KineticLaw}
 * was to set the units of all reactions to the same set of substance
 * units, something that is better achieved by using {@link UnitDefinition} to
 * redefine <code>\'substance\'</code> for the whole {@link Model}.
 <p>
 * As mentioned above, in SBML Level&nbsp;2 Versions 2&ndash;4, local
 * parameters are of class {@link Parameter}.  In SBML Level&nbsp;3, the class of
 * object is {@link LocalParameter}.
 */
"


%javamethodmodifiers KineticLaw::KineticLaw(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link KineticLaw} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link KineticLaw}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link KineticLaw}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers KineticLaw::KineticLaw(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link KineticLaw} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers KineticLaw::KineticLaw(const KineticLaw& orig) "
/**
   * Copy constructor; creates a copy of this {@link KineticLaw}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers KineticLaw::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link KineticLaw}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers KineticLaw::clone() const "
/**
   * Creates and returns a deep copy of this {@link KineticLaw} object.
   <p>
   * @return the (deep) copy of this {@link KineticLaw} object.
   */ public
";


%javamethodmodifiers KineticLaw::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id string representing the id of objects to find.
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers KineticLaw::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given <code>metaid</code>, or
   * <code>null</code> if no such object is found.
   <p>
   * @param metaid string representing the metaid of objects to find
   <p>
   * @return pointer to the first element found with the given <code>metaid</code>.
   */ public
";


%javamethodmodifiers KineticLaw::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child {@link SBase} objects, including those nested to an
   * arbitrary depth
   <p>
   * @return a List of pointers to all children objects.
   */ public
";


%javamethodmodifiers KineticLaw::getFormula() const "
/**
   * Returns the mathematical formula for this {@link KineticLaw} object and return
   * it as as a text string.
   <p>
   * This is fundamentally equivalent to
   * {@link KineticLaw#getMath()}.
   * This variant is provided principally for compatibility compatibility
   * with SBML Level&nbsp;1.
   <p>
   * @return a string representing the formula of this {@link KineticLaw}.
   <p>
   * @note SBML Level&nbsp;1 uses a text-string format for mathematical formulas.
SBML Level&nbsp;2 uses MathML, an XML format for representing mathematical
expressions.  LibSBML provides an Abstract Syntax Tree API for working with
mathematical expressions; this API is more powerful than working with
formulas directly in text form, and ASTs can be translated into either
MathML or the text-string syntax.  The libSBML methods that accept
text-string formulas directly (such as this constructor) are provided for
SBML Level&nbsp;1 compatibility, but developers are encouraged to use the
AST mechanisms.

   <p>
   * @see #getMath()
   */ public
";


%javamethodmodifiers KineticLaw::getMath() const "
/**
   * Returns the mathematical formula for this {@link KineticLaw} object and return
   * it as as an AST.
   <p>
   * This is fundamentally equivalent to
   * {@link KineticLaw#getFormula()}.
   * The latter is provided principally for compatibility compatibility
   * with SBML Level&nbsp;1, which represented mathematical formulas in
   * text-string form.
   <p>
   * @return the {@link ASTNode} representation of the mathematical formula.
   <p>
   * @see #getFormula()
   */ public
";


%javamethodmodifiers KineticLaw::getTimeUnits() const "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Returns the value of the
   * \'timeUnits\' attribute of this {@link KineticLaw} object.
   <p>
   * @return the \'timeUnits\' attribute value.
   <p>
   * <p>
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes. 
   */ public
";


%javamethodmodifiers KineticLaw::getSubstanceUnits() const "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Returns the value of the
   * \'substanceUnits\' attribute of this {@link KineticLaw} object.
   <p>
   * @return the \'substanceUnits\' attribute value.
   <p>
   * <p>
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes. 
   */ public
";


%javamethodmodifiers KineticLaw::isSetFormula() const "
/**
   * Predicate returning <code>true</code> if this {@link KineticLaw}\'s \'formula\' attribute is
   * set.
   <p>
   * This is functionally identical to the method
   * {@link KineticLaw#isSetMath()}.  It is
   * provided in order to mirror the parallel between
   * {@link KineticLaw#getFormula()} and
   * {@link KineticLaw#getMath()}.
   <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this {@link KineticLaw} is set, <code>false</code> otherwise.
   <p>
   * @note SBML Level&nbsp;1 uses a text-string format for mathematical formulas.
SBML Level&nbsp;2 uses MathML, an XML format for representing mathematical
expressions.  LibSBML provides an Abstract Syntax Tree API for working with
mathematical expressions; this API is more powerful than working with
formulas directly in text form, and ASTs can be translated into either
MathML or the text-string syntax.  The libSBML methods that accept
text-string formulas directly (such as this constructor) are provided for
SBML Level&nbsp;1 compatibility, but developers are encouraged to use the
AST mechanisms.

   <p>
   * @see #isSetMath()
   */ public
";


%javamethodmodifiers KineticLaw::isSetMath() const "
/**
   * Predicate returning <code>true</code> if this Kinetic\'s \'math\' subelement is set.
   <p>
   * This is identical to the method
   * {@link KineticLaw#isSetFormula()}.
   * It is provided in order to mirror the parallel between
   * {@link KineticLaw#getFormula()} and
   * {@link KineticLaw#getMath()}.
   <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this {@link KineticLaw} is set, <code>false</code> otherwise.
   <p>
   * @see #isSetFormula()
   */ public
";


%javamethodmodifiers KineticLaw::isSetTimeUnits() const "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Predicate returning <code>true</code> if
   * this {@link SpeciesReference}\'s \'timeUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'timeUnits\' attribute of this {@link KineticLaw} object
   * is set, <code>false</code> otherwise.
   <p>
   * <p>
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes. 
   */ public
";


%javamethodmodifiers KineticLaw::isSetSubstanceUnits() const "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Predicate returning <code>true</code> if
   * this {@link SpeciesReference}\'s \'substanceUnits\' attribute is set.
   <p>
   * @return <code>true</code> if the \'substanceUnits\' attribute of this {@link KineticLaw}
   * object is set, <code>false</code> otherwise.
   <p>
   * <p>
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes. 
   */ public
";


%javamethodmodifiers KineticLaw::setFormula(const std::string& formula) "
/**
   * Sets the mathematical expression of this {@link KineticLaw} instance to the
   * given <code>formula</code>.
   <p>
   * The given <code>formula</code> string is copied.  Internally, libSBML stores the
   * mathematical expression as an {@link ASTNode}.
   <p>
   * @param formula the mathematical expression to use, represented in
   * text-string form.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @note SBML Level&nbsp;1 uses a text-string format for mathematical formulas.
SBML Level&nbsp;2 uses MathML, an XML format for representing mathematical
expressions.  LibSBML provides an Abstract Syntax Tree API for working with
mathematical expressions; this API is more powerful than working with
formulas directly in text form, and ASTs can be translated into either
MathML or the text-string syntax.  The libSBML methods that accept
text-string formulas directly (such as this constructor) are provided for
SBML Level&nbsp;1 compatibility, but developers are encouraged to use the
AST mechanisms.

   <p>
   * @see #setMath(ASTNode math)
   */ public
";


%javamethodmodifiers KineticLaw::setMath(const ASTNode* math) "
/**
   * Sets the mathematical expression of this {@link KineticLaw} instance to a copy
   * of the given {@link ASTNode}.
   <p>
   * This is fundamentally identical to
   * {@link KineticLaw#setFormula(String formula)}.
   * The latter is provided principally for compatibility compatibility with
   * SBML Level&nbsp;1, which represented mathematical formulas in text-string
   * form.
   <p>
   * @param math an {@link ASTNode} representing a formula tree.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #setFormula(String formula)
   */ public
";


%javamethodmodifiers KineticLaw::setTimeUnits(const std::string& sid) "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Sets the \'timeUnits\' attribute
   * of this {@link KineticLaw} object to a copy of the identifier in <code>sid</code>.
   <p>
   * @param sid the identifier of the units to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * <p>
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes. 
   */ public
";


%javamethodmodifiers KineticLaw::setSubstanceUnits(const std::string& sid) "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Sets the \'substanceUnits\'
   * attribute of this {@link KineticLaw} object to a copy of the identifier given
   * in <code>sid</code>.
   <p>
   * @param sid the identifier of the units to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * <p>
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes. 
   */ public
";


%javamethodmodifiers KineticLaw::unsetTimeUnits "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Unsets the \'timeUnits\'
   * attribugte of this {@link KineticLaw} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * <p>
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes. 
   */ public
";


%javamethodmodifiers KineticLaw::unsetSubstanceUnits "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Unsets the \'substanceUnits\'
   * attribute of this {@link KineticLaw} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * <p>
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes. 
   */ public
";


%javamethodmodifiers KineticLaw::addParameter(const Parameter* p) "
/**
   * Adds a copy of the given {@link Parameter} object to the list of local
   * parameters in this {@link KineticLaw}.
   <p>
   * @param p the {@link Parameter} to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createParameter()
   */ public
";


%javamethodmodifiers KineticLaw::addLocalParameter(const LocalParameter* p) "
/**
   * Adds a copy of the given {@link LocalParameter} object to the list of local
   * parameters in this {@link KineticLaw}.
   <p>
   * @param p the {@link LocalParameter} to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createLocalParameter()
   */ public
";


%javamethodmodifiers KineticLaw::createParameter "
/**
   * Creates a new {@link Parameter} object, adds it to this {@link KineticLaw}\'s list of
   * local parameters, and returns the {@link Parameter} object created.
   <p>
   * @return a new {@link Parameter} object instance
   <p>
   * @see #addParameter(Parameter p)
   */ public
";


%javamethodmodifiers KineticLaw::createLocalParameter "
/**
   * Creates a new {@link LocalParameter} object, adds it to this {@link KineticLaw}\'s list
   * of local parameters, and returns the {@link LocalParameter} object created.
   <p>
   * @return a new {@link LocalParameter} object instance
   <p>
   * @see #addLocalParameter(LocalParameter p)
   */ public
";


%javamethodmodifiers KineticLaw::getListOfParameters() const "
/**
   * Returns the list of local parameters in this {@link KineticLaw} object.
   <p>
   * @return the list of Parameters for this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getListOfParameters "
/**
   * Returns the list of local parameters in this {@link KineticLaw} object.
   <p>
   * @return the list of Parameters for this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getListOfLocalParameters() const "
/**
   * Returns the list of local parameters in this {@link KineticLaw} object.
   <p>
   * @return the list of LocalParameters for this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getListOfLocalParameters "
/**
   * Returns the list of local parameters in this {@link KineticLaw} object.
   <p>
   * @return the list of LocalParameters for this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getParameter "
/**
   * Returns the nth {@link Parameter} object in the list of local parameters in
   * this {@link KineticLaw} instance.
   <p>
   * @param n the index of the {@link Parameter} object sought
   <p>
   * @return the nth {@link Parameter} of this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getParameter(unsigned int n) "
/**
   * Returns the nth {@link Parameter} object in the list of local parameters in
   * this {@link KineticLaw} instance.
   <p>
   * @param n the index of the {@link Parameter} object sought
   <p>
   * @return the nth {@link Parameter} of this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getLocalParameter "
/**
   * Returns the nth {@link LocalParameter} object in the list of local parameters in
   * this {@link KineticLaw} instance.
   <p>
   * @param n the index of the {@link LocalParameter} object sought
   <p>
   * @return the nth {@link LocalParameter} of this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getLocalParameter(unsigned int n) "
/**
   * Returns the nth {@link LocalParameter} object in the list of local parameters in
   * this {@link KineticLaw} instance.
   <p>
   * @param n the index of the {@link LocalParameter} object sought
   <p>
   * @return the nth {@link LocalParameter} of this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getParameter(const std::string& sid) const "
/**
   * Returns a local parameter based on its identifier.
   <p>
   * @param sid the identifier of the {@link Parameter} being sought.
   <p>
   * @return the {@link Parameter} object in this {@link KineticLaw} instace having the
   * given \'id\', or <code>null</code> if no such {@link Parameter} exists.
   */ public
";


%javamethodmodifiers KineticLaw::getParameter(const std::string& sid) "
/**
   * Returns a local parameter based on its identifier.
   <p>
   * @param sid the identifier of the {@link Parameter} being sought.
   <p>
   * @return the {@link Parameter} object in this {@link KineticLaw} instace having the
   * given \'id\', or <code>null</code> if no such {@link Parameter} exists.
   */ public
";


%javamethodmodifiers KineticLaw::getLocalParameter(const std::string& sid) const "
/**
   * Returns a local parameter based on its identifier.
   <p>
   * @param sid the identifier of the {@link LocalParameter} being sought.
   <p>
   * @return the {@link LocalParameter} object in this {@link KineticLaw} instace having the
   * given \'id\', or <code>null</code> if no such {@link LocalParameter} exists.
   */ public
";


%javamethodmodifiers KineticLaw::getLocalParameter(const std::string& sid) "
/**
   * Returns a local parameter based on its identifier.
   <p>
   * @param sid the identifier of the {@link LocalParameter} being sought.
   <p>
   * @return the {@link LocalParameter} object in this {@link KineticLaw} instace having the
   * given \'id\', or <code>null</code> if no such {@link LocalParameter} exists.
   */ public
";


%javamethodmodifiers KineticLaw::getNumParameters() const "
/**
   * Returns the number of local parameters in this {@link KineticLaw} instance.
   <p>
   * @return the number of Parameters in this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getNumLocalParameters() const "
/**
   * Returns the number of local parameters in this {@link KineticLaw} instance.
   <p>
   * @return the number of LocalParameters in this {@link KineticLaw}.
   */ public
";


%javamethodmodifiers KineticLaw::getDerivedUnitDefinition "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units of
   * measurement assumed for the \'math\' expression of this {@link KineticLaw}.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link KineticLaw} and the model quantities referenced by <code>&lt;ci&gt;</code>
 * elements used within that expression.  The
 * {@link KineticLaw#getDerivedUnitDefinition()}
 * method returns the calculated units. 
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link KineticLaw} contains pure numbers or parameters with
 * undeclared units.  In those cases, it is not possible to calculate the
 * units of the overall expression without making assumptions.  LibSBML does
 * not make assumptions about the units, and
 * {@link KineticLaw#getDerivedUnitDefinition()} returns the units as far as it is
 * able to determine them.  For example, in an expression <em>X + Y</em>, if
 * <em>X</em> has unambiguously-defined units and <em>Y</em> does not, it
 * will return the units of <em>X</em>.  <strong>It is important that callers
 * also invoke the method</strong>
 * {@link KineticLaw#containsUndeclaredUnits()}<strong>to determine whether this
 * situation holds</strong>.  Callers may wish to take suitable actions in
 * those scenarios.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link KineticLaw}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers KineticLaw::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units of
   * measurement assumed for the \'math\' expression of this {@link KineticLaw}.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link KineticLaw} and the model quantities referenced by <code>&lt;ci&gt;</code>
 * elements used within that expression.  The
 * {@link KineticLaw#getDerivedUnitDefinition()}
 * method returns the calculated units. 
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link KineticLaw} contains pure numbers or parameters with
 * undeclared units.  In those cases, it is not possible to calculate the
 * units of the overall expression without making assumptions.  LibSBML does
 * not make assumptions about the units, and
 * {@link KineticLaw#getDerivedUnitDefinition()} returns the units as far as it is
 * able to determine them.  For example, in an expression <em>X + Y</em>, if
 * <em>X</em> has unambiguously-defined units and <em>Y</em> does not, it
 * will return the units of <em>X</em>.  <strong>It is important that callers
 * also invoke the method</strong>
 * {@link KineticLaw#containsUndeclaredUnits()}<strong>to determine whether this
 * situation holds</strong>.  Callers may wish to take suitable actions in
 * those scenarios.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link KineticLaw}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers KineticLaw::containsUndeclaredUnits "
/**
   * Predicate returning <code>true</code> if the math expression of this {@link KineticLaw}
   * contains parameters/numbers with undeclared units.
   <p>
   * @return <code>true</code> if the math expression of this {@link KineticLaw}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by
   * {@link KineticLaw#getDerivedUnitDefinition()}
   * may not accurately represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers KineticLaw::containsUndeclaredUnits() const "
/**
   * Predicate returning <code>true</code> if the math expression of this {@link KineticLaw}
   * contains parameters/numbers with undeclared units.
   <p>
   * @return <code>true</code> if the math expression of this {@link KineticLaw}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by
   * {@link KineticLaw#getDerivedUnitDefinition()}
   * may not accurately represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers KineticLaw::removeParameter(unsigned int n) "
/**
   * Removes the nth {@link Parameter} object in the list of local parameters 
   * in this {@link KineticLaw} instance and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link Parameter} object to remove
   <p>
   * @return the {@link Parameter} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   */ public
";


%javamethodmodifiers KineticLaw::removeLocalParameter(unsigned int n) "
/**
   * Removes the nth {@link LocalParameter} object in the list of local parameters 
   * in this {@link KineticLaw} instance and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link LocalParameter} object to remove
   <p>
   * @return the {@link LocalParameter} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   */ public
";


%javamethodmodifiers KineticLaw::removeParameter(const std::string& sid) "
/**
   * Removes a {@link Parameter} object with the given identifier in the list of
   * local parameters in this {@link KineticLaw} instance and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link Parameter} to remove
   <p>
   * @return the {@link Parameter} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link Parameter}
   * object with the identifier exists in this {@link KineticLaw} instance.
   */ public
";


%javamethodmodifiers KineticLaw::removeLocalParameter(const std::string& sid) "
/**
   * Removes a {@link LocalParameter} object with the given identifier in the list of
   * local parameters in this {@link KineticLaw} instance and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param sid the identifier of the {@link LocalParameter} to remove
   <p>
   * @return the {@link LocalParameter} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link LocalParameter}
   * object with the identifier exists in this {@link KineticLaw} instance.
   */ public
";


%javamethodmodifiers KineticLaw::setSBMLDocument(SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_KINETIC_LAW SBML_KINETIC_LAW} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers KineticLaw::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Species}, is
   * always <code>\'kineticLaw\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'kineticLaw\'.</code>
   */ public
";


%javamethodmodifiers KineticLaw::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link KineticLaw} object have been set.
   <p>
   * The required attributes for a {@link KineticLaw} object are:
   * <ul>
   * <li> \'formula\' (SBML Level&nbsp;1 only)
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers KineticLaw::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link KineticLaw} object have been set.
   <p>
   * @note The required elements for a {@link KineticLaw} object are:
   * <ul>
   * <li> \'math\'
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers KineticLaw::removeFromParentAndDelete "
/**
   * Finds this {@link KineticLaw}\'s {@link Reaction} parent and calls unsetKineticLaw() on
   * it, indirectly deleting itself.
   <p>
   * Overridden from the {@link SBase} function since the parent is not a {@link ListOf}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers KineticLaw::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers KineticLaw::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers KineticLaw::getInternalId() const "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::setInternalId(std::string id) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers KineticLaw::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%typemap(javaimports) SimpleSpeciesReference "
/** 
 *  Abstract class for references to species in reactions.
 <p>
 * As mentioned in the description of {@link Reaction}, every species that enters
 * into a given reaction must appear in that reaction\'s lists of reactants,
 * products and/or modifiers.  In an SBML model, all species that may
 * participate in any reaction are listed in the \'listOfSpecies\' element of
 * the top-level {@link Model} object.  Lists of products, reactants and modifiers
 * in {@link Reaction} objects do not introduce new species, but rather, they refer
 * back to those listed in the model\'s top-level \'listOfSpecies\'.  For
 * reactants and products, the connection is made using {@link SpeciesReference}
 * objects; for modifiers, it is made using {@link ModifierSpeciesReference}
 * objects.  {@link SimpleSpeciesReference} is an abstract type that serves as the
 * parent class of both {@link SpeciesReference} and {@link ModifierSpeciesReference}.  It
 * is used simply to hold the attributes and elements that are common to
 * the latter two structures.
 <p>
 * The {@link SimpleSpeciesReference} structure has a mandatory attribute,
 * \'species\', which must be a text string conforming to the identifer
 * syntax permitted in SBML.  This attribute is inherited by the
 * {@link SpeciesReference} and {@link ModifierSpeciesReference} subclasses derived from
 * {@link SimpleSpeciesReference}.  The value of the \'species\' attribute must be
 * the identifier of a species defined in the enclosing {@link Model}.  The species
 * is thereby declared as participating in the reaction being defined.  The
 * precise role of that species as a reactant, product, or modifier in the
 * reaction is determined by the subclass of {@link SimpleSpeciesReference} (i.e.,
 * either {@link SpeciesReference} or {@link ModifierSpeciesReference}) in which the
 * identifier appears.
 <p>
 * {@link SimpleSpeciesReference} also contains an optional attribute, \'id\',
 * allowing instances to be referenced from other structures.  No SBML
 * structures currently do this; however, such structures are anticipated
 * in future SBML Levels.
 */
"


%javamethodmodifiers SimpleSpeciesReference::SimpleSpeciesReference(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link SimpleSpeciesReference} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link SimpleSpeciesReference}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link SimpleSpeciesReference}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::SimpleSpeciesReference(const SimpleSpeciesReference& orig) "
/**
   * Copy constructor; creates a copy of this {@link SimpleSpeciesReference}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link SimpleSpeciesReference}.
   <p>
   * @return the id of this {@link SimpleSpeciesReference}.
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link SimpleSpeciesReference}.
   <p>
   * @return the name of this {@link SimpleSpeciesReference}.
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::getSpecies() const "
/**
   * Get the value of the \'species\' attribute.
   <p>
   * @return the value of the attribute \'species\' for this
   * {@link SimpleSpeciesReference}.
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::isSetId() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link SimpleSpeciesReference}\'s \'id\' attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link SimpleSpeciesReference} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::isSetName() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link SimpleSpeciesReference}\'s \'name\' attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link SimpleSpeciesReference} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::isSetSpecies() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link SimpleSpeciesReference}\'s \'species\' attribute is set.
   <p>
   * @return <code>true</code> if the \'species\' attribute of this
   * {@link SimpleSpeciesReference} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::setSpecies(const std::string& sid) "
/**
   * Sets the \'species\' attribute of this {@link SimpleSpeciesReference}.
   <p>
   * The identifier string passed in <code>sid</code> is copied.
   <p>
   * @param sid the identifier of a species defined in the enclosing
   * {@link Model}\'s {@link ListOfSpecies}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link SimpleSpeciesReference}.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link SimpleSpeciesReference}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * </ul>
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link SimpleSpeciesReference}.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link SimpleSpeciesReference}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * </ul>
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this {@link SimpleSpeciesReference}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link SimpleSpeciesReference}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::isModifier() const "
/**
   * Predicate returning <code>true</code> if this
   * is a {@link ModifierSpeciesReference}.
   <p>
   * @return <code>true</code> if this {@link SimpleSpeciesReference}\'s subclass is
   * ModiferSpeciesReference, <code>false</code> if it is a plain {@link SpeciesReference}.
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers SimpleSpeciesReference::hasRequiredAttributes() const "
/** * @internal */ public
";


%javamethodmodifiers SimpleSpeciesReference::SimpleSpeciesReference(SBMLNamespaces* sbmlns) "
/** * @internal */ public
";


%javamethodmodifiers SimpleSpeciesReference::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SimpleSpeciesReference::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers SimpleSpeciesReference::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SimpleSpeciesReference::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SimpleSpeciesReference::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SimpleSpeciesReference::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%typemap(javaimports) SpeciesReference "
/** 
 *  A reference to an SBML species in a reaction.
 <p>
 * The {@link Reaction} structure provides a way to express which species act as
 * reactants and which species act as products in a reaction.  In a given
 * reaction, references to those species acting as reactants and/or
 * products are made using instances of {@link SpeciesReference} structures in a
 * {@link Reaction} object\'s lists of reactants and products.
 <p>
 * A species can occur more than once in the lists of reactants and
 * products of a given {@link Reaction} instance.  The effective stoichiometry for
 * a species in a reaction is the sum of the stoichiometry values given on
 * the {@link SpeciesReference} object in the list of products minus the sum of
 * stoichiometry values given on the {@link SpeciesReference} objects in the list
 * of reactants.  A positive value indicates the species is effectively a
 * product and a negative value indicates the species is effectively a
 * reactant.  SBML places no restrictions on the effective stoichiometry of
 * a species in a reaction; for example, it can be zero.  In the following
 * SBML fragment, the two reactions have the same effective stoichiometry
 * for all their species:
 * <pre class=\'fragment\'>
 &lt;reaction id=\'x\'&gt;
     &lt;listOfReactants&gt;
         &lt;speciesReference species=\'a\'/&gt;
         &lt;speciesReference species=\'a\'/&gt;
         &lt;speciesReference species=\'b\'/&gt;
     &lt;/listOfReactants&gt;
     &lt;listOfProducts&gt;
         &lt;speciesReference species=\'c\'/&gt;
         &lt;speciesReference species=\'b\'/&gt;
     &lt;/listProducts&gt;
 &lt;/reaction&gt;
 &lt;reaction id=\'y\'&gt;
     &lt;listOfReactants&gt;
         &lt;speciesReference species=\'a\' stoichiometry=\'2\'/&gt;
     &lt;/listOfReactants&gt;
     &lt;listOfProducts&gt;
         &lt;speciesReference species=\'c\'/&gt;
     &lt;/listProducts&gt;
 &lt;/reaction&gt;
 </pre>
 <p>
 * The precise structure of {@link SpeciesReference} differs between SBML
 * Level&nbsp;2 and Level&nbsp;3.  We discuss the two variants in separate
 * sections below.
 <p>
 * <h2>SpeciesReference in SBML Level 2</h2>
 <p>
 * The mandatory \'species\' attribute of {@link SpeciesReference} must have as its
 * value the identifier of an existing species defined in the enclosing
 * {@link Model}.  The species is thereby designated as a reactant or product in
 * the reaction.  Which one it is (i.e., reactant or product) is indicated
 * by whether the {@link SpeciesReference} appears in the {@link Reaction}\'s \'reactant\' or
 * \'product\' lists.
 <p>
 * Product and reactant stoichiometries can be specified using
 * <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
 * {@link SpeciesReference} object.  The \'stoichiometry\' attribute is of type
 * double and should contain values greater than zero (0).  The
 * \'stoichiometryMath\' element is implemented as an element containing a
 * MathML expression.  These two are mutually exclusive; only one of
 * \'stoichiometry\' or \'stoichiometryMath\' should be defined in a given
 * {@link SpeciesReference} instance.  When neither the attribute nor the element
 * is present, the value of \'stoichiometry\' in the {@link SpeciesReference}
 * instance defaults to <code>1.</code>
 <p>
 * For maximum interoperability, the \'stoichiometry\' attribute should be
 * used in preference to \'stoichiometryMath\' when a species\' stoichiometry
 * is a simple scalar number (integer or decimal).  When the stoichiometry
 * is a rational number, or when it is a more complicated formula,
 * \'stoichiometryMath\' must be used.  The MathML expression in
 * \'stoichiometryMath\' may also refer to identifiers of entities in a model
 * (except reaction identifiers).  However, the only species identifiers
 * that can be used in \'stoichiometryMath\' are those referenced in the
 * {@link Reaction} list of reactants, products and modifiers.
 <p>
 * The following is a simple example of a species reference for species 
 * <code>X0</code>, with stoichiometry <code>2</code>, in a list of reactants within a reaction
 * having the identifier <code>J1:</code>
 * <pre class=\'fragment\'>
 &lt;model&gt;
     ...
     &lt;listOfReactions&gt;
         &lt;reaction id=\'J1\'&gt;
             &lt;listOfReactants&gt;
                 &lt;speciesReference species=\'X0\' stoichiometry=\'2\'&gt;
             &lt;/listOfReactants&gt;
             ...
         &lt;/reaction&gt;
         ...
     &lt;/listOfReactions&gt;
     ...
 &lt;/model&gt;
 </pre>
 <p>
 * The following is a more complex example of a species reference for
 * species X0, with a stoichiometry formula consisting of the parameter
 * <code>x:</code>
 * <pre class=\'fragment\'>
 &lt;model&gt;
     ...
     &lt;listOfReactions&gt;
         &lt;reaction id=\'J1\'&gt;
             &lt;listOfReactants&gt;
                 &lt;speciesReference species=\'X0\'&gt;
                     &lt;stoichiometryMath&gt;
                         &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt;
                             &lt;ci&gt;x&lt;/ci&gt;
                         &lt;/math&gt;
                     &lt;/stoichiometryMath&gt;
                 &lt;/speciesReference&gt;
             &lt;/listOfReactants&gt;
             ...
         &lt;/reaction&gt;
         ...
     &lt;/listOfReactions&gt;
     ...
 &lt;/model&gt;
 </pre>
 <p>
 * <h2>SpeciesReference in SBML Level 3</h2>
 <p>
 * In Level 2\'s definition of a reaction, the stoichiometry attribute of a
 * {@link SpeciesReference} is actually a combination of two factors, the standard
 * biochemical stoichiometry and a conversion factor that may be needed to
 * translate the units of the species quantity to the units of the reaction
 * rate. Unfortunately, Level&nbsp;2 offers no direct way of decoupling
 * these two factors, or for explicitly indicating the units. The only way
 * to do it in Level&nbsp;2 is to use the {@link StoichiometryMath} object
 * associated with SpeciesReferences, and to reference SBML {@link Parameter}
 * objects from within the {@link StoichiometryMath} formula. This works because
 * {@link Parameter} offers a way to attach units to a numerical value, but the
 * solution is indirect and awkward for something that should be a simple
 * matter.  Moreover, the question of how to properly encode
 * stoichiometries in SBML reactions has caused much confusion among
 * implementors of SBML software.
 <p>
 * SBML Level&nbsp;3 approaches this problem differently.  It (1) extends
 * the the use of the {@link SpeciesReference} identifier to represent the value of
 * the \'stoichiometry\' attribute, (2) makes the \'stoichiometry\' attribute
 * optional, (3) removes {@link StoichiometryMath}, and (4) adds a new \'constant\'
 * boolean attribute on {@link SpeciesReference}.
 <p>
 * As in Level&nbsp;2, the \'stoichiometry\' attribute is of type
 * <code>double</code> and should contain values greater than zero (<code>0</code>).  A
 * missing \'stoichiometry\' implies that the stoichiometry is either
 * unknown, or to be obtained from an external source, or determined by an
 * {@link InitialAssignment} object or other SBML construct elsewhere in the model.
 <p>
 * A species reference\'s stoichiometry is set by its \'stoichiometry\'
 * attribute exactly once.  If the {@link SpeciesReference} object\'s \'constant\'
 * attribute has the value <code>true</code>, then the stoichiometry is fixed and
 * cannot be changed except by an {@link InitialAssignment} object.  These two
 * methods of setting the stoichiometry (i.e., using \'stoichiometry\'
 * directly, or using {@link InitialAssignment}) differ in that the \'stoichiometry\'
 * attribute can only be set to a literal floating-point number, whereas
 * {@link InitialAssignment} allows the value to be set using an arbitrary
 * mathematical expression.  (As an example, the approach could be used to
 * set the stoichiometry to a rational number of the form <em>p</em>/<em>q</em>,
 * where <em>p</em> and <em>q</em> are integers, something that is occasionally
 * useful in the context of biochemical reaction networks.)  If the species
 * reference\'s \'constant\' attribute has the value <code>false</code>, the species
 * reference\'s value may be overridden by an {@link InitialAssignment} or changed
 * by {@link AssignmentRule} or {@link AlgebraicRule}, and in addition, for simulation time
 * <em>t &gt; 0</em>, it may also be changed by a {@link RateRule} or {@link Event}
 * objects.  (However, some of these constructs are mutually exclusive; see
 * the SBML Level&nbsp;3 Version&nbsp;1 Core specifiation for more
 * details.)  It is not an error to define \'stoichiometry\' on a species
 * reference and also redefine the stoichiometry using an
 * {@link InitialAssignment}, but the \'stoichiometry\' attribute in that case is
 * ignored.
 <p>
 * The value of the \'id\' attribute of a {@link SpeciesReference} can be used as the
 * content of a <code>&lt;ci&gt;</code> element in MathML formulas
 * elsewhere in the model.  When the identifier appears in a MathML
 * <code>&lt;ci&gt;</code> element, it represents the stoichiometry of the
 * corresponding species in the reaction where the {@link SpeciesReference} object
 * instance appears.  More specifically, it represents the value of the
 * \'stoichiometry\' attribute on the {@link SpeciesReference} object.
 <p>
 * In SBML Level 3, the unit of measurement associated with the value of a
 * species\' stoichiometry is always considered to be <code>dimensionless.</code>
 * This has the following implications:
 * <ul>
 <p>
 * <li> When a species reference\'s identifier appears in mathematical
 * formulas elsewhere in the model, the unit associated with that value is
 * <code>dimensionless.</code>
 <p>
 * <li> The units of the \'math\' elements of {@link AssignmentRule},
 * {@link InitialAssignment} and {@link EventAssignment} objects setting the stoichiometry
 * of the species reference should be <code>dimensionless.</code>
 <p>
 * <li> If a species reference\'s identifier is the subject of a {@link RateRule},
 * the unit associated with the {@link RateRule} object\'s value should be
 * <code>dimensionless</code>/<em>time</em>, where <em>time</em> is the
 * model-wide unit of time set on the {@link Model} object.
 <p>
 * </ul>
 */
"


%typemap(javaimports) ListOfSpeciesReferences "
/** 
 *  A list of {@link SpeciesReference} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents 
 */
"


%javamethodmodifiers SpeciesReference::SpeciesReference(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link SpeciesReference} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link SpeciesReference}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link SpeciesReference}
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers SpeciesReference::SpeciesReference(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link SpeciesReference} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers SpeciesReference::SpeciesReference(const SpeciesReference& orig) "
/**
   * Copy constructor; creates a copy of this {@link SpeciesReference}.
   <p>
   * @param orig the {@link SpeciesReference} instance to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers SpeciesReference::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers SpeciesReference::clone() const "
/**
   * Creates and returns a deep copy of this {@link SpeciesReference} object.
   <p>
   * @return the (deep) copy of this {@link SpeciesReference} object.
   */ public
";


%javamethodmodifiers SpeciesReference::initDefaults "
/**
   * Initializes the fields of this {@link SpeciesReference} object to \'typical\'
   * default values.
   <p>
   * The SBML {@link SpeciesReference} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets attribute \'stoichiometry\' to <code>1.0</code>
   * <li> (Applies to Level&nbsp;1 models only) Sets attribute \'denominator\' to <code>1</code>
   * </ul>
   <p>
   * @see #getDenominator()
   * @see #setDenominator(int value)
   * @see #getStoichiometry()
   * @see #setStoichiometry(double value)
   * @see #getStoichiometryMath()
   * @see #setStoichiometryMath(StoichiometryMath math)
   */ public
";


%javamethodmodifiers SpeciesReference::getStoichiometry() const "
/**
   * Get the value of the \'stoichiometry\' attribute.
   <p>
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   <p>
   * In SBML Level 3, there is no {@link StoichiometryMath}, and {@link SpeciesReference}
   * objects have only the \'stoichiometry\' attribute.
   <p>
   * @return the value of the (scalar) \'stoichiometry\' attribute of this
   * {@link SpeciesReference}.
   <p>
   * @see #getStoichiometryMath()
   */ public
";


%javamethodmodifiers SpeciesReference::getStoichiometryMath() const "
/**
   * Get the content of the \'stoichiometryMath\' subelement as an {@link ASTNode}
   * tree.
   <p>
   * The \'stoichiometryMath\' element exists only in SBML Level 2.  There,
   * product and reactant stoichiometries can be specified using
   * <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or decimal).
   <p>
   * @return the content of the \'stoichiometryMath\' subelement of this
   * {@link SpeciesReference}.
   */ public
";


%javamethodmodifiers SpeciesReference::getStoichiometryMath "
/**
   * Get the content of the \'stoichiometryMath\' subelement as an {@link ASTNode}
   * tree.
   <p>
   * The \'stoichiometryMath\' element exists only in SBML Level 2.  There,
   * product and reactant stoichiometries can be specified using
   * <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or decimal).
   <p>
   * @return the content of the \'stoichiometryMath\' subelement of this
   * {@link SpeciesReference}.
   <p>
   * @see #getStoichiometry()
   */ public
";


%javamethodmodifiers SpeciesReference::getDenominator() const "
/**
   * Get the value of the \'denominator\' attribute, for the case of a
   * rational-numbered stoichiometry or a model in SBML Level&nbsp;1.
   <p>
   * The \'denominator\' attribute is only actually written out in the case
   * of an SBML Level&nbsp;1 model.  In SBML Level&nbsp;2, rational-number
   * stoichiometries are written as MathML elements in the
   * \'stoichiometryMath\' subelement.  However, as a convenience to users,
   * libSBML allows the creation and manipulation of rational-number
   * stoichiometries by supplying the numerator and denominator directly
   * rather than having to manually create an {@link ASTNode} object.  LibSBML
   * will write out the appropriate constructs (either a combination of
   * \'stoichiometry\' and \'denominator\' in the case of SBML Level&nbsp;1, or a
   * \'stoichiometryMath\' subelement in the case of SBML Level&nbsp;2).
   <p>
   * @return the value of the \'denominator\' attribute of this
   * {@link SpeciesReference}.
   */ public
";


%javamethodmodifiers SpeciesReference::getConstant() const "
/**
   * Get the value of the \'constant\' attribute.
   <p>
   * @return the value of the \'constant\' attribute of this
   * {@link SpeciesReference}.
   */ public
";


%javamethodmodifiers SpeciesReference::isSetStoichiometryMath() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesReference}\'s \'stoichiometryMath\' subelement is set
   <p>
   * @return <code>true</code> if the \'stoichiometryMath\' subelement of this
   * {@link SpeciesReference} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SpeciesReference::isSetConstant() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesReference}\'s \'constant\' attribute is set
   <p>
   * @return <code>true</code> if the \'constant\' attribute of this
   * {@link SpeciesReference} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SpeciesReference::isSetStoichiometry() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesReference}\'s \'stoichiometry\' attribute is set.
   <p>
   * @return <code>true</code> if the \'stoichiometry\' attribute of this
   * {@link SpeciesReference} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SpeciesReference::setStoichiometry(double value) "
/**
   * Sets the value of the \'stoichiometry\' attribute of this
   * {@link SpeciesReference}.
   <p>
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   <p>
   * In SBML Level 3, there is no {@link StoichiometryMath}, and {@link SpeciesReference}
   * objects have only the \'stoichiometry\' attribute.
   <p>
   * @param value the new value of the \'stoichiometry\' attribute
   <p>
   * @note In SBML Level&nbsp;2, the \'stoichiometryMath\' subelement of this
   * {@link SpeciesReference} object will be unset because the \'stoichiometry\'
   * attribute and the stoichiometryMath\' subelement are mutually
   * exclusive.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers SpeciesReference::setStoichiometryMath(const StoichiometryMath* math) "
/**
   * Sets the \'stoichiometryMath\' subelement of this {@link SpeciesReference}.
   <p>
   * The Abstract Syntax Tree in <code>math</code> is copied.
   <p>
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   <p>
   * In SBML Level 3, there is no {@link StoichiometryMath}, and {@link SpeciesReference}
   * objects have only the \'stoichiometry\' attribute.
   <p>
   * @param math the {@link StoichiometryMath} expression that is to be copied as the
   * content of the \'stoichiometryMath\' subelement.
   <p>
   * @note In SBML Level&nbsp;2, the \'stoichiometry\' attribute of this
   * {@link SpeciesReference} object will be unset (isSetStoichiometry() will
   * return <code>false</code> although getStoichiometry() will return <code>1.0</code>) if the
   * given math is not null because the \'stoichiometry\' attribute and the
   * stoichiometryMath\' subelement are mutually exclusive.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * </ul>
   */ public
";


%javamethodmodifiers SpeciesReference::setDenominator(int value) "
/**
   * Set the value of the \'denominator\' attribute, for the case of a
   * rational-numbered stoichiometry or a model in SBML Level&nbsp;1.
   <p>
   * The \'denominator\' attribute is only actually written out in the case
   * of an SBML Level&nbsp;1 model.  In SBML Level&nbsp;2, rational-number
   * stoichiometries are written as MathML elements in the
   * \'stoichiometryMath\' subelement.  However, as a convenience to users,
   * libSBML allows the creation and manipulation of rational-number
   * stoichiometries by supplying the numerator and denominator directly
   * rather than having to manually create an {@link ASTNode} object.  LibSBML
   * will write out the appropriate constructs (either a combination of
   * \'stoichiometry\' and \'denominator\' in the case of SBML Level&nbsp;1, or
   * a \'stoichiometryMath\' subelement in the case of SBML Level&nbsp;2).
   <p>
   * @param value the scalar value 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers SpeciesReference::setConstant(bool flag) "
/**
   * Sets the \'constant\' attribute of this {@link SpeciesReference} to the given boolean
   * <code>flag</code>.
   <p>
   * @param flag a boolean, the value for the \'constant\' attribute of this
   * {@link SpeciesReference} instance
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * </ul>
   */ public
";


%javamethodmodifiers SpeciesReference::unsetStoichiometryMath "
/**
   * Unsets the \'stoichiometryMath\' subelement of this {@link SpeciesReference}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   <p>
   * In SBML Level 3, there is no {@link StoichiometryMath}, and {@link SpeciesReference}
   * objects have only the \'stoichiometry\' attribute.
   <p>
   * @note In SBML Level&nbsp;2, the \'stoichiometry\' attribute of this
   * {@link SpeciesReference} object will be reset to a default value (<code>1.0</code>) if
   * the \'stoichiometry\' attribute has not been set.
   */ public
";


%javamethodmodifiers SpeciesReference::unsetStoichiometry "
/**
   * Unsets the \'stoichiometry\' attribute of this {@link SpeciesReference}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note In SBML Level&nbsp;1, the \'stoichiometry\' attribute of this
   * {@link SpeciesReference} object will be just reset to a default value (<code>1.0</code>)
   * and isSetStoichiometry() will still return <code>true.</code>  In SBML
   * Level&nbsp;2, the \'stoichiometry\' attribute of this object will be
   * unset (which will result in isSetStoichiometry() returning <code>false</code>,
   * although getStoichiometry() will return <code>1.0</code>) if the
   * \'stoichiometryMath\' subelement is set, otherwise the attribute
   * will be just reset to the default value (<code>1.0</code>) (and
   * isSetStoichiometry() will still return <code>true</code>).  In SBML
   * Level&nbsp;3, the \'stoichiometry\' attribute of this object will be set
   * to <code>NaN</code> and isSetStoichiometry() will return <code>false.</code>
   */ public
";


%javamethodmodifiers SpeciesReference::createStoichiometryMath "
/**
   * Creates a new, empty {@link StoichiometryMath} object, adds it to this
   * {@link SpeciesReference}, and returns it.
   <p>
   * @return the newly created {@link StoichiometryMath} object instance
   <p>
   * @see Reaction#addReactant(SpeciesReference sr)
   * @see Reaction#addProduct(SpeciesReference sr)
   */ public
";


%javamethodmodifiers SpeciesReference::setAnnotation(const XMLNode* annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of <code>annotation</code>.
   <p>
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the <code>annotation</code> that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   <p>
   * @param annotation an XML structure that is to be used as the content
   * of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   */ public
";


%javamethodmodifiers SpeciesReference::setAnnotation(const std::string& annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of <code>annotation</code>.
   <p>
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the <code>annotation</code> that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   <p>
   * @param annotation an XML string that is to be used as the content
   * of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   */ public
";


%javamethodmodifiers SpeciesReference::appendAnnotation(const XMLNode* annotation) "
/**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   <p>
   * The content in <code>annotation</code> is copied.  Unlike
   * {@link SpeciesReference#setAnnotation(String)},
   * this method allows other annotations to be preserved when an application
   * adds its own data.
   <p>
   * @param annotation an XML structure that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #setAnnotation(String annotation)
   * @see #setAnnotation(XMLNode annotation)
   */ public
";


%javamethodmodifiers SpeciesReference::appendAnnotation(const std::string& annotation) "
/**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   <p>
   * The content in <code>annotation</code> is copied.  Unlike
   * {@link SpeciesReference#setAnnotation(String)}, this
   * method allows other annotations to be preserved when an application
   * adds its own data.
   <p>
   * @param annotation an XML string that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #setAnnotation(String annotation)
   * @see #setAnnotation(XMLNode annotation)
   */ public
";


%javamethodmodifiers SpeciesReference::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_SPECIES_REFERENCE SBML_SPECIES_REFERENCE} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers SpeciesReference::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * {@link SpeciesReference}, is always <code>\'speciesReference\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'speciesReference\'.</code>
   */ public
";


%javamethodmodifiers SpeciesReference::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::sortMath "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link SpeciesReference} object
   * have been set.
   <p>
   * The required attributes for a {@link SpeciesReference} object are:
   * <ul>
   * <li> \'species\'
   * <li> \'constant\' (only available SBML Level&nbsp;3)
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SpeciesReference::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::readL1Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::syncAnnotation "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::isExplicitlySetStoichiometry() const "
/** * @internal */ public
";


%javamethodmodifiers SpeciesReference::isExplicitlySetDenominator() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfSpeciesReferences::ListOfSpeciesReferences(unsigned int level, unsigned int version) "
/**
   * Creates a new, empty {@link ListOfSpeciesReferences} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::ListOfSpeciesReferences(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfSpeciesReferences} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfSpeciesReferences} object to be created.
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfSpeciesReferences} object.
   <p>
   * @return the (deep) copy of this {@link ListOfSpeciesReferences} object.
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link SpeciesReference} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for objects contained in this list:
   * {@link libsbmlConstants#SBML_SPECIES_REFERENCE SBML_SPECIES_REFERENCE} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfSpeciesReferences}, the XML element name is 
   * <code>\'listOfSpeciesReferences\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfSpeciesReferences\'.</code>
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::get(unsigned int n) "
/**
   * Get a {@link SpeciesReference} from the {@link ListOfSpeciesReferences}.
   <p>
   * @param n the index number of the {@link SpeciesReference} to get.
   <p>
   * @return the nth {@link SpeciesReference} in this {@link ListOfSpeciesReferences}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::get "
/**
   * Get a {@link SpeciesReference} from the {@link ListOfSpeciesReferences}.
   <p>
   * @param n the index number of the {@link SpeciesReference} to get.
   <p>
   * @return the nth {@link SpeciesReference} in this {@link ListOfSpeciesReferences}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::get(const std::string& sid) "
/**
   * Get a {@link SpeciesReference} from the {@link ListOfSpeciesReferences}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link SpeciesReference} to get.
   <p>
   * @return {@link SpeciesReference} in this {@link ListOfSpeciesReferences}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link SpeciesReference} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::get(const std::string& sid) const "
/**
   * Get a {@link SpeciesReference} from the {@link ListOfSpeciesReferences}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link SpeciesReference} to get.
   <p>
   * @return {@link SpeciesReference} in this {@link ListOfSpeciesReferences}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link SpeciesReference} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfSpeciesReferences} items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfSpeciesReferences} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfSpeciesReferences::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfSpeciesReferences::setType(SpeciesType type) "
/** * @internal */ public
";


%javamethodmodifiers ListOfSpeciesReferences::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) ModifierSpeciesReference "
/** 
 *  A reference to an SBML <em>modifier species</em>.
 <p>
 * Sometimes a species appears in the kinetic rate formula of a reaction
 * but is itself neither created nor destroyed in that reaction (for
 * example, because it acts as a catalyst or inhibitor).  In SBML, all such
 * species are simply called <em>modifiers</em> without regard to the detailed
 * role of those species in the model.  The {@link Reaction} structure provides a
 * way to express which species act as modifiers in a given reaction.  This
 * is the purpose of the list of modifiers available in {@link Reaction}.  The list
 * contains instances of {@link ModifierSpeciesReference} structures.
 <p>
 * The {@link ModifierSpeciesReference} structure inherits the mandatory attribute
 * \'species\' and optional attributes \'id\' and \'name\' from the parent class
 * {@link SimpleSpeciesReference}.  See the description of {@link SimpleSpeciesReference}
 * for more information about these.
 <p>
 * The value of the \'species\' attribute must be the identifier of a species
 * defined in the enclosing {@link Model}; this species is designated as a modifier
 * for the current reaction.  A reaction may have any number of modifiers.
 * It is permissible for a modifier species to appear simultaneously in the
 * list of reactants and products of the same reaction where it is
 * designated as a modifier, as well as to appear in the list of reactants,
 * products and modifiers of other reactions in the model.
 */
"


%javamethodmodifiers ModifierSpeciesReference::ModifierSpeciesReference(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ModifierSpeciesReference} using the given SBML <code>level</code> and
   * <code>version</code> values.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link ModifierSpeciesReference}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link ModifierSpeciesReference}
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers ModifierSpeciesReference::ModifierSpeciesReference(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ModifierSpeciesReference} using the given {@link SBMLNamespaces}
   * object <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers ModifierSpeciesReference::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers ModifierSpeciesReference::clone() const "
/**
   * Creates and returns a deep copy of this {@link ModifierSpeciesReference} object.
   <p>
   * @return the (deep) copy of this {@link ModifierSpeciesReference} object.
   */ public
";


%javamethodmodifiers ModifierSpeciesReference::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_MODIFIER_SPECIES_REFERENCE SBML_MODIFIER_SPECIES_REFERENCE} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ModifierSpeciesReference::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Species}, is
   * always <code>\'modifierSpeciesReference\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'modifierSpeciesReference\'.</code>
   */ public
";


%javamethodmodifiers ModifierSpeciesReference::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link ModifierSpeciesReference} object
   * have been set.
   <p>
   * The required attributes for a {@link ModifierSpeciesReference} object are:
   * species
   <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%typemap(javaimports) Event "
/** 
 *  A discontinuous SBML <em>event</em>.
 <p>
 * An SBML {@link Event} object defines when the event can occur, the variables
 * that are affected by it, how the variables are affected, and the event\'s
 * relationship to other events.  The effect of the event can optionally be
 * delayed after the occurrence of the condition which invokes it.
 <p>
 * The operation of {@link Event} is divided into two phases (even when the event
 * is not delayed): one when the event is <em>triggered</em>, and the other when
 * the event is <em>executed</em>.  {@link Trigger} objects define the conditions for
 * triggering an event, {@link Delay} objects define when the event is actually
 * executed, {@link EventAssignment} objects define the effects of executing the
 * event, and (in SBML Level&nbsp;3) {@link Priority} objects influence the order
 * of {@link EventAssignment} performance in cases of simultaneous events.  Please
 * consult the descriptions of {@link Trigger}, {@link Delay}, {@link EventAssignment} and {@link Priority}
 * for more information.
 <p>
 * <h2>SBML Level/Version differences</h2>
 <p>
 * <h3>SBML Level 3</h3>
 <p>
 * SBML Level 3 introduces several changes to the structure and components
 * of Events compared to SBML Level&nbsp;2.  These changes fall into two
 * main categories: changes to what is optional or required, and additions
 * of new attributes and elements.
 * <ul>
 * <li> The attribute \'useValuesFromTriggerTime\' on {@link Event} is mandatory (it
 * was optional in Level&nbsp;2);
 * <li> {@link Event}\'s \'listOfEventAssignments\' element (of class
 * {@link ListOfEventAssignments}) is optional (it was mandatory in Level&nbsp;2);
 * <li> {@link Event}\'s \'priority\' element (of class {@link Priority}) is new in
 * Level&nbsp;3; and
 * <li> The {@link Trigger} object gains new mandatory attributes (described as part
 * of the definition of {@link Trigger}).
 * </ul>
 <p>
 * The changes to the attributes of {@link Event} are described below; the changes
 * to {@link Trigger} and {@link Priority} are described in their respective sections.
 <p>
 * <h3>SBML Level 2</h3>
 <p>
 * In SBML Level&nbsp;2 versions before Version&nbsp;4, the semantics of
 * {@link Event} time delays were defined such that the expressions in the event\'s
 * assignments were always evaluated at the time the event was
 * <em>triggered</em>.  This definition made it difficult to define an event
 * whose assignment formulas were meant to be evaluated at the time the
 * event was <em>executed</em> (i.e., after the time period defined by the
 * value of the {@link Delay} element).  In SBML Level&nbsp;2 Version&nbsp;4 and in
 * Level&nbsp;3, the attribute \'useValuesFromTriggerTime\' on {@link Event} allows a
 * model to indicate the time at which the event\'s assignments are intended
 * the values of the assignment formulas are computed at the moment the
 * event is triggered, not after the delay.  If \'useValuesFromTriggerTime\'=
 * <code>false</code>, it means that the formulas in the event\'s assignments are to be
 * computed <em>after</em> the delay, at the time the event is executed.
 <p>
 * The definition of {@link Event} in SBML Level&nbsp;2 Versions 1 and 2 includes
 * an additional attribute called \'timeUnits\', which allowed the time units
 * of the {@link Delay} to be set explicitly.  Later Versions of SBML Level&nbsp;2
 * as well as SBML Level&nbsp;3 do not define this attribute.  LibSBML
 * supports this attribute for compatibility with previous versions of SBML
 * Level&nbsp;2; however, if a model in SBML Level&nbsp;3 or Level&nbsp;2
 * Versions&nbsp;3&ndash;4 format sets the attribute, the
 * consistency-checking method {@link SBMLDocument#checkConsistency()} will report
 * an error.
 <p>
 * The attribute \'useValuesFromTriggerTime\' was introduced in SBML
 * Level&nbsp;2 Version&nbsp;4.  Models defined in prior Versions of SBML
 * Level&nbsp;2 cannot use this attribute, and
 * {@link SBMLDocument#checkConsistency()} will report an error if they do.
 <p>
 * <h2>Semantics of events in SBML Level 3 Version&nbsp;1</h2>
 <p>
 * The detailed semantics of events are described in the specification
 * documents for each SBML Level/Version.  Here we include the description
 * from the SBML Level&nbsp;1 Version&nbsp;1.
 * Any transition of a {@link Trigger} object\'s \'math\' formula from the value 
 * <code>false</code> to <code>true</code> will cause the enclosing {@link Event} object to
 * <em>trigger</em>.  Such a transition is not possible at the very start
 * of a simulation (i.e., at time <em>t = 0</em>) unless the {@link Trigger}
 * object\'s \'initialValue\' attribute has a value of <code>false</code>; this defines
 * the value of the trigger formula to be <code>false</code> immediately prior to the
 * start of simulation, thereby giving it the potential to change in value
 * from <code>false</code> to <code>true</code> when the formula is evaluated at <em>t =
 * 0</em>.  If \'initialValue\'=<code>true</code>, then the trigger expression cannot
 * transition from <code>false</code> to <code>true</code> at <em>t = 0</em> but may do so at
 * some time <em>t > 0</em>.
 <p>
 * Consider an {@link Event} object definition <EM>E</EM> with delay <em>d</em> in
 * which the {@link Trigger} object\'s \'math\' formula makes a transition in value
 * from <code>false</code> to <code>true</code> at times <em>t<sub>1</sub></em> and
 * <em>t<sub>2</sub></em>.  The {@link EventAssignment} within the {@link Event} object
 * will have effect at <em>t<sub>1</sub> + d</em> and
 * <em>t<sub>2</sub> + d</em> irrespective of the relative times of
 * <em>t<sub>1</sub></em> and <em>t<sub>2</sub></em>.  For example, events
 * can \'overlap\' so that <em>t<sub>1</sub> < t<sub>2</sub> <
 * t<sub>1</sub> + d</em> still causes an event assignments to occur at
 * <em>t<sub>1</sub> + d</em> and <em>t<sub>2</sub> + d</em>.
 <p>
 * It is entirely possible for two events to be executed simultaneously,
 * and it is possible for events to trigger other events (i.e., an event
 * assignment can cause an event to trigger).  This leads to several
 * points:
 * <ul>
 <p>
 * <li> A software package should retest all event triggers after executing
 * an event assignment in order to account for the possibility that the
 * assignment causes another event trigger to transition from <code>false</code> to
 * <code>true.</code>  This check should be made after each individual {@link Event} object\'s
 * execution, even when several events are to be executed simultaneously.
 <p>
 * <li> Any {@link Event} object whose {@link Trigger} \'persistent\' attribute has the value
 * <code>false</code> must have its trigger expression reevaluated continuously
 * between when the event is triggered and when it is executed.  If
 * its trigger expression ever evaluates to <code>false</code>, it must be removed
 * from the queue of events pending execution and treated as any other
 * event whose trigger expression evaluates to <code>false.</code>
 <p>
 * <li> Although the precise time at which events are executed is not
 * resolved beyond the given execution point in simulated time, it is
 * assumed that the order in which the events occur <em>is</em> resolved.
 * This order can be significant in determining the overall outcome of a
 * given simulation.  When an event <EM>X</EM> <em>triggers</em> another
 * event <EM>Y</EM> and event <EM>Y</EM> has zero delay, then event
 * <EM>Y</EM> is added to the existing set of simultaneous events that are
 * pending <em>execution</em>.  Events <EM>X</EM> and <EM>Y</EM> form a
 * cascade of events at the same point in simulation time.  An event such
 * as <EM>Y</EM> may have a special priority if it contains a {@link Priority}
 * subobject.
 <p>
 * <li> All events in a model are open to being in a cascade.  The position
 * of an event in the event queue does not affect whether it can be in the
 * cascade: event <EM>Y</EM> can be triggered whether it is before or after
 * <EM>X</EM> in the queue of events pending execution.  A cascade of
 * events can be potentially infinite (never terminate); when this occurs a
 * simulator should indicate this has occurred&mdash;it is incorrect for a
 * simulator to break a cascade arbitrarily and continue the simulation
 * without at least indicating that the infinite cascade occurred.
 <p>
 * <li> Simultaneous events having no defined priorities are executed in an
 * undefined order.  This does not mean that the behavior of the simulation
 * is completely undefined; merely that the <em>order</em> of execution of
 * these particular events is undefined.  A given simulator may use any
 * algorithm to choose an order as long as every event is executed exactly
 * once.
 <p>
 * <li> Events with defined priorities are executed in the order implied by
 * their {@link Priority} \'math\' formula values, with events having higher
 * priorities being executed ahead of events with lower priorities, and
 * events with identical priorities being executed in a random order with
 * respect to one another (as determined at run-time by some random
 * algorithm equivalent to coin-flipping).  Newly-triggered events that are
 * to be executed immediately (i.e., if they define no delays) should be
 * inserted into the queue of events pending execution according to their
 * priorities: events with higher priority values value must be inserted
 * ahead of events with lower priority values and after any pending events
 * with even higher priorities, and inserted randomly among pending events
 * with the same priority values.  Events without {@link Priority} objects must be
 * inserted into the queue in some fashion, but the algorithm used to place
 * it in the queue is undefined.  Similarly, there is no restriction on the
 * order of a newly-inserted event with a defined {@link Priority} with respect to
 * any other pending {@link Event} without a defined {@link Priority}.
 <p>
 * <li> A model variable that is the target of one or more event
 * assignments can change more than once when simultaneous events are
 * processed at some time point <em>t</em>.  The model\'s behavior (output)
 * for such a variable is the value of the variable at the end of
 * processing all the simultaneous events at time <em>t</em>.
 <p>
 * </ul>
 <p>
 * @see Trigger
 * @see Priority
 * @see Delay
 * @see EventAssignment
 */
"


%typemap(javaimports) ListOfEvents "
/** 
 *  A list of {@link Event} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers Event::Event(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Event} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Event}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Event}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Event::Event(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Event} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Event::Event(const Event& orig) "
/**
   * Copy constructor; creates a copy of this {@link Event}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Event::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Event}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Event} in the list
   * of events within which this {@link Event} is embedded.
   */ public
";


%javamethodmodifiers Event::clone() const "
/**
   * Creates and returns a deep copy of this {@link Event} object.
   <p>
   * @return the (deep) copy of this {@link Event} object.
   */ public
";


%javamethodmodifiers Event::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id string representing the id of objects to find
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers Event::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given <code>metaid</code>, or
   * <code>null</code> if no such object is found.
   <p>
   * @param metaid string representing the metaid of objects to find
   <p>
   * @return pointer to the first element found with the given <code>metaid</code>.
   */ public
";


%javamethodmodifiers Event::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child {@link SBase} objects, including those nested to an
   * arbitrary depth.
   <p>
   * @return a List of pointers to all children objects.
   */ public
";


%javamethodmodifiers Event::getId() const "
/**
   * Returns the value of the \'id\' attribute of this {@link Event}.
   <p>
   * @return the id of this {@link Event}.
   */ public
";


%javamethodmodifiers Event::getName() const "
/**
   * Returns the value of the \'name\' attribute of this {@link Event}.
   <p>
   * @return the name of this {@link Event}.
   */ public
";


%javamethodmodifiers Event::getTrigger() const "
/**
   * Get the event trigger portion of this {@link Event}.
   <p>
   * @return the {@link Trigger} object of this {@link Event}.
   */ public
";


%javamethodmodifiers Event::getTrigger "
/**
   * Get the event trigger portion of this {@link Event}.
   <p>
   * @return the {@link Trigger} object of this {@link Event}.
   */ public
";


%javamethodmodifiers Event::getDelay() const "
/**
   * Get the assignment delay portion of this {@link Event}, if there is one.
   <p>
   * @return the delay of this {@link Event} if one is defined, or <code>null</code> if none
   * is defined.
   */ public
";


%javamethodmodifiers Event::getDelay "
/**
   * Get the assignment delay portion of this {@link Event}, if there is one.
   <p>
   * @return the delay of this {@link Event} if one is defined, or <code>null</code> if none
   * is defined.
   */ public
";


%javamethodmodifiers Event::getPriority() const "
/**
   * (SBML Level&nbsp;3 only) Get the event priority portion of this
   * {@link Event}.
   <p>
   * @return the {@link Priority} object of this {@link Event}.
   <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Event::getPriority "
/**
   * (SBML Level&nbsp;3 only) Get the event priority portion of this
   * {@link Event}.
   <p>
   * @return the {@link Priority} object of this {@link Event}.
   <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Event::getTimeUnits() const "
/**
   * Get the value of the \'timeUnits\' attribute of this {@link Event}, if it has one.
   <p>
   * @return the value of the attribute \'timeUnits\' as a string.
   <p>
   * <p>
 * @warning <span class=\'warning\'>Definitions of {@link Event} in SBML Level 2
 * Versions&nbsp;1 and&nbsp;2 included the additional attribute called
 * \'timeUnits\', but it was removed in SBML Level&nbsp;2 Version&nbsp;3.
 * LibSBML supports this attribute for compatibility with previous versions
 * of SBML Level&nbsp;2, but its use is discouraged since models in
 * Level&nbsp;2 Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a
 * Version&nbsp;3 or&nbsp;4 model sets the attribute, the
 * consistency-checking method {@link SBMLDocument#checkConsistency()} will report
 * an error.</span>
   */ public
";


%javamethodmodifiers Event::getUseValuesFromTriggerTime() const "
/**
   * Get the value of the \'useValuesFromTriggerTime\' attribute of this {@link Event}.
   <p>
   * <p>
 * The optional {@link Delay} on {@link Event} means there are two times to consider when
 * computing the results of an event: the time at which the event is
 * <em>triggered</em>, and the time at which assignments are
 * <em>executed</em>.  It is also possible to distinguish between the
 * time at which the {@link EventAssignment}\'s expression is calculated, and the
 * time at which the assignment is made: the expression could be
 * evaluated at the same time the assignments are performed, i.e., when
 * the event is <em>executed</em>, but it could also be defined to be
 * evaluated at the time the event is <em>triggered</em>.
 <p>
 * In SBML Level&nbsp;2 versions prior to Version&nbsp;4, the semantics
 * of {@link Event} time delays were defined such that the expressions in the
 * event\'s assignments were always evaluated at the time the event was
 * <em>triggered</em>.  This definition made it difficult to define an
 * event whose assignment formulas were meant to be evaluated at the time
 * the event was <em>executed</em> (i.e., after the time period defined
 * by the value of the {@link Delay} element).  In SBML Level&nbsp;2
 * Version&nbsp;4, the attribute \'useValuesFromTriggerTime\' on {@link Event}
 * allows a model to indicate the time at which the event\'s assignments
 * are intended to be evaluated.  In SBML Level&nbsp;2, the attribute has
 * a default value of <code>true</code>, which corresponds to the interpretation of
 * event assignments prior to Version&nbsp;4: the values of the
 * assignment formulas are computed at the moment the event is triggered,
 * not after the delay.  If \'useValuesFromTriggerTime\'=<code>false</code>, it means
 * that the formulas in the event\'s assignments are to be computed after
 * the delay, at the time the event is executed.  In SBML Level&nbsp;3,
 * the attribute is mandatory, not optional, and all events must specify
 * a value for it.
   <p>
   * @return the value of the attribute \'useValuesFromTriggerTime\' as a boolean.
   <p>
   * <p>
 * @warning <span class=\'warning\'>The attribute \'useValuesFromTriggerTime\'
 * was introduced in SBML Level&nbsp;2 Version&nbsp;4.  It is not valid in
 * models defined using SBML Level&nbsp;2 versions prior to Version&nbsp;4.
 * If a Level&nbsp;2 Version&nbsp;1&ndash;3 model sets the attribute, the
 * consistency-checking method {@link SBMLDocument#checkConsistency()} will report
 * an error.</span> 
   */ public
";


%javamethodmodifiers Event::isSetId() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Event}\'s \'id\' attribute is set.
   <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Event} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Event::isSetName() const "
/**
   * Predicate returning <code>true</code> if this
   * {@link Event}\'s \'name\' attribute is set.
   <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Event} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Event::isSetTrigger() const "
/**
   * Predicate for testing whether the trigger for this {@link Event} is set.
   <p>
   * @return <code>true</code> if the trigger of this {@link Event} is set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Event::isSetDelay() const "
/**
   * Predicate for testing whether the delay for this {@link Event} is set.
   <p>
   * @return <code>true</code> if the delay of this {@link Event} is set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Event::isSetPriority() const "
/**
   * (SBML Level&nbsp;3 only) Predicate for testing whether the priority
   * for this {@link Event} is set.
   <p>
   * @return <code>true</code> if the priority of this {@link Event} is set, <code>false</code>
   * otherwise.
   <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Event::isSetTimeUnits() const "
/**
   * Predicate for testing whether the \'timeUnits\' attribute of this {@link Event}
   * is set.
   <p>
   * @return <code>true</code> if the \'timeUnits\' attribute of this {@link Event} is
   * set, <code>false</code> otherwise.
   <p>
   * <p>
 * @warning <span class=\'warning\'>Definitions of {@link Event} in SBML Level 2
 * Versions&nbsp;1 and&nbsp;2 included the additional attribute called
 * \'timeUnits\', but it was removed in SBML Level&nbsp;2 Version&nbsp;3.
 * LibSBML supports this attribute for compatibility with previous versions
 * of SBML Level&nbsp;2, but its use is discouraged since models in
 * Level&nbsp;2 Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a
 * Version&nbsp;3 or&nbsp;4 model sets the attribute, the
 * consistency-checking method {@link SBMLDocument#checkConsistency()} will report
 * an error.</span>
   */ public
";


%javamethodmodifiers Event::isSetUseValuesFromTriggerTime() const "
/**
   * Predicate for testing whether the \'useValuesFromTriggerTime\' attribute of this {@link Event}
   * is set.
   <p>
   * @return <code>true</code> if the \'useValuesFromTriggerTime\' attribute of this {@link Event} is
   * set, <code>false</code> otherwise.
   <p>
   * @note In SBML Level&nbsp;2, this attribute is optional and has a default value of
   * <code>true</code>, whereas in Level&nbsp;3 Version&nbsp;1, this optional is mandatory and
   * has no default value.
   */ public
";


%javamethodmodifiers Event::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this {@link Event}.
   <p>
   * The string <code>sid</code> is copied.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * @param sid the string to use as the identifier of this {@link Event}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Event::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this {@link Event}.
   <p>
   * The string in <code>name</code> is copied.
   <p>
   * @param name the new name for the {@link Event}
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Event::setTrigger(const Trigger* trigger) "
/**
   * Sets the trigger definition of this {@link Event} to a copy of the given
   * {@link Trigger} object instance.
   <p>
   * @param trigger the {@link Trigger} object instance to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * </ul>
   */ public
";


%javamethodmodifiers Event::setDelay(const Delay* delay) "
/**
   * Sets the delay definition of this {@link Event} to a copy of the given {@link Delay}
   * object instance.
   <p>
   * @param delay the {@link Delay} object instance to use
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * </ul>
   */ public
";


%javamethodmodifiers Event::setPriority(const Priority* priority) "
/**
   * (SBML Level&nbsp;3 only) Sets the priority definition of this {@link Event}
   * to a copy of the given {@link Priority} object instance.
   <p>
   * @param priority the {@link Priority} object instance to use
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Event::setTimeUnits(const std::string& sid) "
/**
   * Sets the \'timeUnits\' attribute of this {@link Event} to a copy of <code>sid</code>.
   <p>
   * @param sid the identifier of the time units to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * <p>
 * @warning <span class=\'warning\'>Definitions of {@link Event} in SBML Level 2
 * Versions&nbsp;1 and&nbsp;2 included the additional attribute called
 * \'timeUnits\', but it was removed in SBML Level&nbsp;2 Version&nbsp;3.
 * LibSBML supports this attribute for compatibility with previous versions
 * of SBML Level&nbsp;2, but its use is discouraged since models in
 * Level&nbsp;2 Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a
 * Version&nbsp;3 or&nbsp;4 model sets the attribute, the
 * consistency-checking method {@link SBMLDocument#checkConsistency()} will report
 * an error.</span>
   */ public
";


%javamethodmodifiers Event::setUseValuesFromTriggerTime(bool value) "
/**
   * Sets the \'useValuesFromTriggerTime\' attribute of this {@link Event} to a <code>value</code>.
   <p>
   * <p>
 * The optional {@link Delay} on {@link Event} means there are two times to consider when
 * computing the results of an event: the time at which the event is
 * <em>triggered</em>, and the time at which assignments are
 * <em>executed</em>.  It is also possible to distinguish between the
 * time at which the {@link EventAssignment}\'s expression is calculated, and the
 * time at which the assignment is made: the expression could be
 * evaluated at the same time the assignments are performed, i.e., when
 * the event is <em>executed</em>, but it could also be defined to be
 * evaluated at the time the event is <em>triggered</em>.
 <p>
 * In SBML Level&nbsp;2 versions prior to Version&nbsp;4, the semantics
 * of {@link Event} time delays were defined such that the expressions in the
 * event\'s assignments were always evaluated at the time the event was
 * <em>triggered</em>.  This definition made it difficult to define an
 * event whose assignment formulas were meant to be evaluated at the time
 * the event was <em>executed</em> (i.e., after the time period defined
 * by the value of the {@link Delay} element).  In SBML Level&nbsp;2
 * Version&nbsp;4, the attribute \'useValuesFromTriggerTime\' on {@link Event}
 * allows a model to indicate the time at which the event\'s assignments
 * are intended to be evaluated.  In SBML Level&nbsp;2, the attribute has
 * a default value of <code>true</code>, which corresponds to the interpretation of
 * event assignments prior to Version&nbsp;4: the values of the
 * assignment formulas are computed at the moment the event is triggered,
 * not after the delay.  If \'useValuesFromTriggerTime\'=<code>false</code>, it means
 * that the formulas in the event\'s assignments are to be computed after
 * the delay, at the time the event is executed.  In SBML Level&nbsp;3,
 * the attribute is mandatory, not optional, and all events must specify
 * a value for it.
   <p>
   * @param value the value of useValuesFromTriggerTime to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * <p>
 * @warning <span class=\'warning\'>The attribute \'useValuesFromTriggerTime\'
 * was introduced in SBML Level&nbsp;2 Version&nbsp;4.  It is not valid in
 * models defined using SBML Level&nbsp;2 versions prior to Version&nbsp;4.
 * If a Level&nbsp;2 Version&nbsp;1&ndash;3 model sets the attribute, the
 * consistency-checking method {@link SBMLDocument#checkConsistency()} will report
 * an error.</span>
   */ public
";


%javamethodmodifiers Event::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this {@link Event}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Event::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this {@link Event}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Event::unsetDelay "
/**
   * Unsets the {@link Delay} of this {@link Event}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Event::unsetPriority "
/**
   * (SBML Level&nbsp;3 only) Unsets the {@link Priority} of this {@link Event}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Event::unsetTrigger "
/**
   * Unsets the {@link Trigger} of this {@link Event}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Event::unsetTimeUnits "
/**
   * Unsets the \'timeUnits\' attribute of this {@link Event}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @warning <span class=\'warning\'>Definitions of {@link Event} in SBML Level 2
 * Versions&nbsp;1 and&nbsp;2 included the additional attribute called
 * \'timeUnits\', but it was removed in SBML Level&nbsp;2 Version&nbsp;3.
 * LibSBML supports this attribute for compatibility with previous versions
 * of SBML Level&nbsp;2, but its use is discouraged since models in
 * Level&nbsp;2 Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a
 * Version&nbsp;3 or&nbsp;4 model sets the attribute, the
 * consistency-checking method {@link SBMLDocument#checkConsistency()} will report
 * an error.</span>
   */ public
";


%javamethodmodifiers Event::addEventAssignment(const EventAssignment* ea) "
/**
   * Appends a copy of the given {@link EventAssignment} to this {@link Event}.
   <p>
   * @param ea the {@link EventAssignment} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues. 
   <p>
   * @see #createEventAssignment()
   */ public
";


%javamethodmodifiers Event::createEventAssignment "
/**
   * Creates a new, empty {@link EventAssignment}, adds it to this {@link Event}\'s list of
   * event assignments and returns the {@link EventAssignment}.
   <p>
   * @return the newly created {@link EventAssignment} object instance
   <p>
   * @see #addEventAssignment(EventAssignment ea)
   */ public
";


%javamethodmodifiers Event::createTrigger "
/**
   * Creates a new, empty {@link Trigger}, adds it to this {@link Event} and 
   * returns the {@link Trigger}.
   <p>
   * @return the newly created {@link Trigger} object instance
   */ public
";


%javamethodmodifiers Event::createDelay "
/**
   * Creates a new, empty {@link Delay}, adds it to this {@link Event} and 
   * returns the {@link Delay}.
   <p>
   * @return the newly created {@link Delay} object instance
   */ public
";


%javamethodmodifiers Event::createPriority "
/**
   * (SBML Level&nbsp;3 only) Creates a new, empty {@link Priority}, adds it to this
   * {@link Event} and returns the {@link Priority}.
   <p>
   * @return the newly created {@link Priority} object instance
   <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Event::getListOfEventAssignments() const "
/**
   * Returns the list of event assignments for this {@link Event}.
   <p>
   * @return the list of EventAssignments for this {@link Event}.
   */ public
";


%javamethodmodifiers Event::getListOfEventAssignments "
/**
   * Returns the list of event assignments for this {@link Event}.
   <p>
   * @return the list of EventAssignments for this {@link Event}.
   */ public
";


%javamethodmodifiers Event::getEventAssignment "
/**
   * Return a specific {@link EventAssignment} object of this {@link Event}.
   <p>
   * @param n an integer, the index of the {@link EventAssignment} object to return
   <p>
   * @return the <code>n</code>th {@link EventAssignment} of this {@link Event}.
   */ public
";


%javamethodmodifiers Event::getEventAssignment(unsigned int n) "
/**
   * Return a specific {@link EventAssignment} object of this {@link Event}.
   <p>
   * @param n an integer, the index of the {@link EventAssignment} object to return
   <p>
   * @return the <code>n</code>th {@link EventAssignment} of this {@link Event}.
   */ public
";


%javamethodmodifiers Event::getEventAssignment(const std::string& variable) const "
/**
   * Return the event assignment indicated by the given <code>variable</code>.
   <p>
   * @param variable a string, the identifier of the variable whose
   * {@link EventAssignment} is being sought.
   <p>
   * @return the {@link EventAssignment} for the given <code>variable</code>, or <code>null</code> if
   * no such {@link EventAssignment} exits.
   */ public
";


%javamethodmodifiers Event::getEventAssignment(const std::string& variable) "
/**
   * Return the event assignment indicated by the given <code>variable</code>.
   <p>
   * @param variable a string, the identifier of the variable whose
   * {@link EventAssignment} is being sought.
   <p>
   * @return the {@link EventAssignment} for the given <code>variable</code>, or <code>null</code> if
   * no such {@link EventAssignment} exits.
   */ public
";


%javamethodmodifiers Event::getNumEventAssignments() const "
/**
   * Returns the number of {@link EventAssignment} objects attached to this
   * {@link Event}.
   <p>
   * @return the number of EventAssignments in this {@link Event}.
   */ public
";


%javamethodmodifiers Event::removeEventAssignment(unsigned int n) "
/**
   * Removes the nth {@link EventAssignment} object from this {@link Event} object and
   * returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   <p>
   * @param n the index of the {@link EventAssignment} object to remove
   <p>
   * @return the {@link EventAssignment} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   */ public
";


%javamethodmodifiers Event::removeEventAssignment(const std::string& variable) "
/**
   * Removes the {@link EventAssignment} object with the given \'variable\' attribute 
   * from this {@link Event} object and returns a pointer to it.
   <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link EventAssignment} objects in this {@link Event} object have the 
   * \'variable\' attribute <code>variable</code>, then <code>null</code> is returned.
   <p>
   * @param variable the \'variable\' attribute of the {@link EventAssignment} object 
   * to remove
   <p>
   * @return the {@link EventAssignment} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link EventAssignment}
   * object with the \'variable\' attribute exists in this {@link Event} object.
   */ public
";


%javamethodmodifiers Event::setSBMLDocument(SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers Event::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers Event::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_EVENT SBML_EVENT} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Event::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Event}, is
   * always <code>\'event\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'event\'.</code> 
   */ public
";


%javamethodmodifiers Event::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Event::setInternalIdOnly "
/** * @internal */ public
";


%javamethodmodifiers Event::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link Event} object have been set.
   <p>
   * The required attributes for an {@link Event} object are:
   * <ul>
   * <li> \'useValuesfromTriggerTime\' (required in SBML Level&nbsp;3)
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers Event::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if all the required elements for this {@link Event}
   * object have been set.
   <p>
   * @note The required elements for an {@link Event} object are:
   * <ul>
   * <li> \'trigger\'
   * <li> \'listOfEventAssignments\' (required in SBML Level&nbsp;2, optional in Level&nbsp;3)
   * </ul>
   */ public
";


%javamethodmodifiers Event::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers Event::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Event::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Event::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Event::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Event::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Event::isExplicitlySetUVFTT() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfEvents::ListOfEvents(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfEvents} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfEvents::ListOfEvents(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfEvents} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfEvents} object to be created.
   */ public
";


%javamethodmodifiers ListOfEvents::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfEvents} object.
   <p>
   * @return the (deep) copy of this {@link ListOfEvents} object.
   */ public
";


%javamethodmodifiers ListOfEvents::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Event} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for the objects contained in this ListOf:
   * {@link libsbmlConstants#SBML_EVENT SBML_EVENT} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfEvents::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfEvents}, the XML element name is <code>\'listOfEvents\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfEvents\'.</code>
   */ public
";


%javamethodmodifiers ListOfEvents::get(unsigned int n) "
/**
   * Get an {@link Event} from the {@link ListOfEvents}.
   <p>
   * @param n the index number of the {@link Event} to get.
   <p>
   * @return the <code>n</code>th {@link Event} in this {@link ListOfEvents}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEvents::get "
/**
   * Get an {@link Event} from the {@link ListOfEvents}.
   <p>
   * @param n the index number of the {@link Event} to get.
   <p>
   * @return the <code>n</code>th {@link Event} in this {@link ListOfEvents}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEvents::get(const std::string& sid) "
/**
   * Get an {@link Event} from the {@link ListOfEvents}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link Event} to get.
   <p>
   * @return {@link Event} in this {@link ListOfEvents}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link Event} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEvents::get(const std::string& sid) const "
/**
   * Get an {@link Event} from the {@link ListOfEvents}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link Event} to get.
   <p>
   * @return {@link Event} in this {@link ListOfEvents}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link Event} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEvents::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfEvents} items and returns a pointer to
   * it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEvents::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfEvents} items with the given identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfEvents::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfEvents::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) EventAssignment "
/** 
 *  An assignment to a variable by an SBML <em>event</em>.
 <p>
 * {@link Event} contains an optional element called \'listOfEventAssignments\', of
 * class {@link ListOfEventAssignments}.  In every instance of an event definition
 * in a model, the object\'s \'listOfEventAssignments\' element must have a
 * non-empty list of one or more \'eventAssignment\' elements of class
 * {@link EventAssignment}.  The object class {@link EventAssignment} has one required
 * attribute, \'variable\', and a required element, \'math\'.  Being derived
 * from {@link SBase}, it also has all the usual attributes and elements of its
 * parent class.
 <p>
 * An {@link Event} object defines when the event can occur, the variables that are
 * affected by the event, and how the variables are affected.  The purpose
 * of the {@link EventAssignment} object class is to define how variables are
 * affected by an {@link Event}.  In SBML Level&nbsp;2, every {@link Event} object instance
 * must have a nonempty list of event assignments; in SBML Level&nbsp;3,
 * the list of assignments is optional.
 <p>
 * The operation of an {@link Event} is divided into two phases (regardless of
 * whether a delay is involved): one phase when the event is <em>triggered</em>,
 * and the other when the event is <em>executed</em>.   {@link EventAssignment} objects
 * are interpreted when an event is executed.  The effects are described
 * below.
 <p>
 * <h2>The attribute \'variable\'</h2>
 <p>
 * The {@link EventAssignment} attribute \'variable\' must be the identifier of an
 * existing {@link Compartment}, {@link Species}, {@link SpeciesReference}, or {@link Parameter}
 * instance defined in the model.  When the event is executed, the value of
 * the model component identified by \'variable\' is changed by the
 * {@link EventAssignment} to the value computed by the \'math\' element; that is, a
 * species\' quantity, species reference\'s stoichiometry, compartment\'s size
 * or parameter\'s value are reset to the value computed by \'math\'.
 <p>
 * Certain restrictions are placed on what can appear in \'variable\':
 * <ul>
 * <li> The object identified by the value of the {@link EventAssignment} attribute
 * \'variable\' must not have its \'constant\' attribute set to or default to
 * <code>true.</code>  (Constants cannot be affected by events.)
 <p>
 * <li> The \'variable\' attribute must not contain the identifier of a
 * reaction; only species, species references, compartment and parameter
 * values may be set by an {@link Event}.
 <p>
 * <li> The value of every \'variable\' attribute must be unique among the set
 * of {@link EventAssignment} structures within a given {@link Event} structure.  In other
 * words, a single event cannot have multiple {@link EventAssignment} objects
 * assigning the same variable.  (All of them would be performed at the
 * same time when that particular {@link Event} triggers, resulting in
 * indeterminacy.)  However, <em>separate</em> {@link Event} instances can refer to the
 * same variable.
 <p>
 * <li> A variable cannot be assigned a value in an {@link EventAssignment} object
 * instance and also be assigned a value by an {@link AssignmentRule}; i.e., the
 * value of an {@link EventAssignment}\'s \'variable\' attribute cannot be the same as
 * the value of a {@link AssignmentRule}\' \'variable\' attribute.  (Assignment rules
 * hold at all times, therefore it would be inconsistent to also define an
 * event that reassigns the value of the same variable.)
 * </ul>
 <p>
 * Note that the time of assignment of the object identified by the
 * value of the \'variable\' attribute is always the time at which the {@link Event}
 * is <em>executed</em>, not when it is <em>triggered</em>.  The timing is
 * controlled by the optional {@link Delay} in an {@link Event}.  The time of
 * assignment is not affected by the \'useValuesFromTriggerTime\'
 * attribute on {@link Event}&mdash;that attribute affects the time at which the
 * {@link EventAssignment}\'s \'math\' expression is <em>evaluated</em>.  In other
 * words, SBML allows decoupling the time at which the
 * \'variable\' is assigned from the time at which its value
 * expression is calculated.
 <p>
 * <h2>The \'math\' subelement in an {@link EventAssignment}</h2>
 <p>
 * The MathML expression contained in an {@link EventAssignment} defines the new
 * value of the variable being assigned by the {@link Event}.
 <p>
 * As mentioned above, the time at which the expression in \'math\' is
 * evaluated is determined by the attribute \'useValuesFromTriggerTime\' on
 * {@link Event}.  If the attribute value is <code>true</code>, the expression must be
 * evaluated when the event is <em>triggered</em>; more precisely, the values of
 * identifiers occurring in MathML <code>&lt;ci&gt;</code> elements in the
 * {@link EventAssignment}\'s \'math\' expression are the values they have at the
 * point when the event <em>triggered</em>.  If, instead,
 * \'useValuesFromTriggerTime\'\'s value is <code>false</code>, it means the values at
 * <em>execution</em> time should be used; that is, the values of identifiers
 * occurring in MathML <code>&lt;ci&gt;</code> elements in the
 * {@link EventAssignment}\'s \'math\' expression are the values they have at the
 * point when the event <em>executed</em>.
 <p>
 * <h2>SBML Level/Version differences</h2>
 <p>
 * Between Version&nbsp;4 and previous versions of SBML Level&nbsp;2, the
 * requirements regarding the matching of units between an
 * EvengAssignment\'s formula and the units of the object identified by the
 * \'variable\' attribute changed.  Previous versions required consistency,
 * but in SBML Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3, unit
 * consistency is only <em>recommended</em>.  More precisely:
 * <ul>
 <p>
 * <li> In the case of a species, an {@link EventAssignment} sets the referenced
 * species\' quantity (concentration or amount of substance) to the value
 * determined by the formula in the {@link EventAssignment}\'s \'math\' subelement.
 * The units of the \'math\' formula should (in SBML Level&nbsp;2
 * Version&nbsp;4 and in Level&nbsp;3) or must (in previous Versions of
 * Level&nbsp;2) be identical to the units of the species.
 <p>
 * <li> (SBML Level&nbsp;3 only.) In the case of a species reference, an
 * {@link EventAssignment} sets the stoichiometry of the reactant or product
 * referenced by the {@link SpeciesReference} object to the value determined by the
 * formula in the \'math\' element.  The unit associated with the value
 * produced by the \'math\' formula should be <code>dimensionless</code>, because
 * reactant and product stoichiometries in reactions are dimensionless
 * quantities.
 <p>
 * <li> In the case of a compartment, an {@link EventAssignment} sets the
 * referenced compartment\'s size to the size determined by the formula in
 * the \'math\' subelement of the {@link EventAssignment}.  The overall units of the
 * formula should (in SBML Level&nbsp;2 Version&nbsp;4 and in Level&nbsp;3)
 * or must (in previous Versions of Level&nbsp;2) be identical to the units
 * specified for the size of the compartment identified by the
 * {@link EventAssignment}\'s \'variable\' attribute.
 <p>
 * <li> In the case of a parameter, an {@link EventAssignment} sets the referenced
 * parameter\'s value to that determined by the formula in \'math\'.  The
 * overall units of the formula should (in SBML Level&nbsp;2 Version&nbsp;4
 * and Level&nbsp;3) or must (in previous Versions of Level&nbsp;2) be
 * identical to the units defined for the parameter.
 * </ul>
 <p>
 * Note that the formula placed in the \'math\' element <em>has no assumed
 * units</em>.  The consistency of the units of the formula, and the units
 * of the entity which the assignment affects, must be explicitly
 * established just as in the case of the value of the {@link Delay} subelement.
 * An approach similar to the one discussed in the context of {@link Delay} may be
 * used for the formula of an {@link EventAssignment}.
 <p>
 * @see Event
 */
"


%typemap(javaimports) ListOfEventAssignments "
/** 
 *  A list of {@link EventAssignment} objects.
 <p>
 * <p>
 * The various ListOf___ classes in SBML
 * are merely containers used for organizing the main components of an SBML
 * model.  In libSBML\'s implementation, ListOf___
 * classes are derived from the
 * intermediate utility class {@link ListOf}, which
 * is not defined by the SBML specifications but serves as a useful
 * programmatic construct.  {@link ListOf} is itself is in turn derived from {@link SBase},
 * which provides all of the various ListOf___
 * classes with common features
 * defined by the SBML specification, such as \'metaid\' attributes and
 * annotations.
 <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 <p>
 * <figure>
  <object type=\"image/svg+xml\" data=\"listof-illustration.svg\" class=\"centered\"></object>
</figure>

 <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers in SBML.  A simpler approach in XML might be to place the
 * components all directly at the top level of the model definition.  The
 * choice made in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"


%javamethodmodifiers EventAssignment::EventAssignment(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link EventAssignment} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link EventAssignment}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link EventAssignment}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers EventAssignment::EventAssignment(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link EventAssignment} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers EventAssignment::EventAssignment(const EventAssignment& orig) "
/**
   * Copy constructor; creates a copy of this {@link EventAssignment}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers EventAssignment::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link EventAssignment}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link EventAssignment} in
   * the list within which this {@link EventAssignment} is embedded (i.e., in the
   * {@link ListOfEventAssignments} located in the enclosing {@link Event} instance).
   */ public
";


%javamethodmodifiers EventAssignment::clone() const "
/**
   * Creates and returns a deep copy of this {@link EventAssignment} object.
   <p>
   * @return the (deep) copy of this {@link EventAssignment} object.
   */ public
";


%javamethodmodifiers EventAssignment::getVariable() const "
/**
   * Get the value of this {@link EventAssignment}\'s \'variable\' attribute.
   <p>
   * @return the identifier stored in the \'variable\' attribute of this
   * {@link EventAssignment}.
   */ public
";


%javamethodmodifiers EventAssignment::getMath() const "
/**
   * Get the mathematical expression in this {@link EventAssignment}\'s \'math\'
   * subelement.
   <p>
   * @return the top {@link ASTNode} of an abstract syntax tree representing the
   * mathematical formula in this {@link EventAssignment}.
   */ public
";


%javamethodmodifiers EventAssignment::isSetVariable() const "
/**
   * Predicate for testing whether the attribute \'variable\' of this
   * {@link EventAssignment} is set.
   <p>
   * @return <code>true</code> if the \'variable\' attribute of this {@link EventAssignment}
   * is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers EventAssignment::isSetMath() const "
/**
   * Predicate for testing whether the \'math\' subelement of this
   * {@link EventAssignment} is set.
   <p>
   * @return <code>true</code> if this {@link EventAssignment} has a \'math\' subelement,
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers EventAssignment::setVariable(const std::string& sid) "
/**
   * Sets the attribute \'variable\' of this {@link EventAssignment} to a copy of
   * the given identifier string.
   <p>
   * @param sid the identifier of a {@link Compartment}, {@link Species} or (global)
   * {@link Parameter} defined in this model.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers EventAssignment::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' subelement of this {@link EventAssignment} to a copy of the
   * given {@link ASTNode}.
   <p>
   * @param math an {@link ASTNode} that will be copied and stored as the
   * mathematical formula for this {@link EventAssignment}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers EventAssignment::getDerivedUnitDefinition "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units of
   * measurement assumed for the \'math\' expression of this {@link EventAssignment}.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link EventAssignment} and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * {@link EventAssignment#getDerivedUnitDefinition()} returns the calculated units,
 * to the extent that libSBML can compute them. 
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link EventAssignment} contains literal numbers or parameters
 * with undeclared units.  In those cases, it is not possible to calculate
 * the units of the overall expression without making assumptions.  LibSBML
 * does not make assumptions about the units, and
 * {@link EventAssignment#getDerivedUnitDefinition()} only returns the units as far
 * as it is able to determine them.  For example, in an expression <em>X +
 * Y</em>, if <em>X</em> has unambiguously-defined units and <em>Y</em> does
 * not, it will return the units of <em>X</em>.  When using this method,
 * <strong>it is critical that callers also invoke the method</strong>
 * {@link EventAssignment#containsUndeclaredUnits()} <strong>to determine whether
 * this situation holds</strong>.  Callers should take suitable action in
 * those situations.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link EventAssignment}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers EventAssignment::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units of
   * measurement assumed for the \'math\' expression of this {@link EventAssignment}.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link EventAssignment} and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * {@link EventAssignment#getDerivedUnitDefinition()} returns the calculated units,
 * to the extent that libSBML can compute them. 
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link EventAssignment} contains literal numbers or parameters
 * with undeclared units.  In those cases, it is not possible to calculate
 * the units of the overall expression without making assumptions.  LibSBML
 * does not make assumptions about the units, and
 * {@link EventAssignment#getDerivedUnitDefinition()} only returns the units as far
 * as it is able to determine them.  For example, in an expression <em>X +
 * Y</em>, if <em>X</em> has unambiguously-defined units and <em>Y</em> does
 * not, it will return the units of <em>X</em>.  When using this method,
 * <strong>it is critical that callers also invoke the method</strong>
 * {@link EventAssignment#containsUndeclaredUnits()} <strong>to determine whether
 * this situation holds</strong>.  Callers should take suitable action in
 * those situations.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link EventAssignment}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers EventAssignment::containsUndeclaredUnits "
/**
   * Predicate returning <code>true</code> if the math expression of this
   * {@link EventAssignment} contains literal numbers or parameters with undeclared
   * units.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link EventAssignment} and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * {@link EventAssignment#getDerivedUnitDefinition()} returns the calculated units,
 * to the extent that libSBML can compute them.
   <p>
   * If the expression contains literal numbers or parameters with undeclared
   * units, libSBML may not be able to compute the full units of the
   * expression and will only return what it can compute.  Callers should
   * always use {@link EventAssignment#containsUndeclaredUnits()} when using
   * {@link EventAssignment#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   <p>
   * @return <code>true</code> if the math expression of this {@link EventAssignment}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link EventAssignment#getDerivedUnitDefinition()} may not
   * accurately represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers EventAssignment::containsUndeclaredUnits() const "
/**
   * Predicate returning <code>true</code> if the math expression of this
   * {@link EventAssignment} contains literal numbers or parameters with undeclared
   * units.
   <p>
   * <p>
 * The units are calculated based on the mathematical expression in the
 * {@link EventAssignment} and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * {@link EventAssignment#getDerivedUnitDefinition()} returns the calculated units,
 * to the extent that libSBML can compute them.
   <p>
   * If the expression contains literal numbers or parameters with undeclared
   * units, libSBML may not be able to compute the full units of the
   * expression and will only return what it can compute.  Callers should
   * always use {@link EventAssignment#containsUndeclaredUnits()} when using
   * {@link EventAssignment#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   <p>
   * @return <code>true</code> if the math expression of this {@link EventAssignment}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link EventAssignment#getDerivedUnitDefinition()} may not
   * accurately represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers EventAssignment::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_EVENT_ASSIGNMENT SBML_EVENT_ASSIGNMENT} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers EventAssignment::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * {@link EventAssignment}, is always <code>\'eventAssignment\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'eventAssignment\'.</code> 
   */ public
";


%javamethodmodifiers EventAssignment::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link EventAssignment} object have been set.
   <p>
   * The required attributes for a {@link EventAssignment} object are:
   * <ul>
   * <li> \'variable\'
   *
   * </ul> <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers EventAssignment::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link EventAssignment} object have been set.
   <p>
   * @note The required elements for a {@link EventAssignment} object are:
   * <ul>
   * <li> \'math\'
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers EventAssignment::getId() const "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers EventAssignment::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers EventAssignment::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers EventAssignment::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ListOfEventAssignments::ListOfEventAssignments(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link ListOfEventAssignments} object.
   <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   <p>
   * @param level the SBML Level
   <p>
   * @param version the Version within the SBML Level
   */ public
";


%javamethodmodifiers ListOfEventAssignments::ListOfEventAssignments(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link ListOfEventAssignments} object.
   <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfEventAssignments} object to be created.
   */ public
";


%javamethodmodifiers ListOfEventAssignments::clone() const "
/**
   * Creates and returns a deep copy of this {@link ListOfEventAssignments} object.
   <p>
   * @return the (deep) copy of this {@link ListOfEventAssignments} object.
   */ public
";


%javamethodmodifiers ListOfEventAssignments::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link EventAssignment} objects, if the list is non-empty).
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for the objects contained in this ListOf:
   * {@link libsbmlConstants#SBML_EVENT_ASSIGNMENT SBML_EVENT_ASSIGNMENT} (default).
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers ListOfEventAssignments::getElementName() const "
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link ListOfEventAssignments}, the XML element name is 
   * <code>\'listOfEventAssignments\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'listOfEventAssignments\'.</code>
   */ public
";


%javamethodmodifiers ListOfEventAssignments::get(unsigned int n) "
/**
   * Get a {@link EventAssignment} from the {@link ListOfEventAssignments}.
   <p>
   * @param n the index number of the {@link EventAssignment} to get.
   <p>
   * @return the nth {@link EventAssignment} in this {@link ListOfEventAssignments}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEventAssignments::get "
/**
   * Get a {@link EventAssignment} from the {@link ListOfEventAssignments}.
   <p>
   * @param n the index number of the {@link EventAssignment} to get.
   <p>
   * @return the nth {@link EventAssignment} in this {@link ListOfEventAssignments}.
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEventAssignments::get(const std::string& sid) "
/**
   * Get a {@link EventAssignment} from the {@link ListOfEventAssignments}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link EventAssignment} to get.
   <p>
   * @return {@link EventAssignment} in this {@link ListOfEventAssignments}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link EventAssignment} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEventAssignments::get(const std::string& sid) const "
/**
   * Get a {@link EventAssignment} from the {@link ListOfEventAssignments}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the {@link EventAssignment} to get.
   <p>
   * @return {@link EventAssignment} in this {@link ListOfEventAssignments}
   * with the given <code>sid</code> or <code>null</code> if no such
   * {@link EventAssignment} exists.
   <p>
   * @see #get(long n)
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEventAssignments::remove(unsigned int n) "
/**
   * Removes the nth item from this {@link ListOfEventAssignments} items and returns
   * a pointer to it.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   <p>
   * @param n the index of the item to remove
   <p>
   * @see #size()
   */ public
";


%javamethodmodifiers ListOfEventAssignments::remove(const std::string& sid) "
/**
   * Removes item in this {@link ListOfEventAssignments} items with the given
   * identifier.
   <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   <p>
   * @param sid the identifier of the item to remove
   <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%javamethodmodifiers ListOfEventAssignments::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * Note that EventAssignments do not actually have IDs, but the libsbml
   * interface pretends that they do: no event assignment is returned by this
   * function.
   <p>
   * @param id string representing the id of objects to find
   <p>
   * @return pointer to the first element found with the given <code>id</code>.
   */ public
";


%javamethodmodifiers ListOfEventAssignments::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers ListOfEventAssignments::createObject(XMLInputStream& stream) "
/** * @internal */ public
";


%typemap(javaimports) Trigger "
/** 
 *  The trigger expression for an SBML <em>event</em>.
 <p>
 * An {@link Event} object defines when the event can occur, the variables that are
 * affected by the event, and how the variables are affected.  The {@link Trigger}
 * construct in SBML is used to define a mathematical expression that
 * determines when an {@link Event} is <em>triggered</em>.
 <p>
 * A {@link Trigger} object in SBML Level&nbsp;2 and Level&nbsp;3 contains one
 * subelement named \'math\' containing a MathML expression.  The expression
 * must evaluate to a value of type <code>boolean.</code>  The exact moment at which
 * the expression evaluates to <code>true</code> is the time point when the {@link Event} is
 * <em>triggered</em>.  In SBML Level&nbsp;3, {@link Trigger} has additional attributes
 * that must be assigned values; they are discussed in a separate section
 * below.
 <p>
 * An event only <em>triggers</em> when its {@link Trigger} expression makes the
 * transition in value from <code>false</code> to <code>true.</code>  The event will also
 * trigger at any subsequent time points when the trigger makes this
 * transition; in other words, an event can be triggered multiple times
 * during a simulation if its trigger condition makes the transition from
 * <code>false</code> to <code>true</code> more than once.  In SBML Level&nbsp;3, the behavior
 * at the very start of simulation (i.e., at <em>t = 0</em>, where
 * <em>t</em> stands for time) is determined in part by the boolean flag
 * \'initialValue\'.  This and other additional features introduced in SBML
 * Level&nbsp;3 are discussed further below.
 <p>
 * <h2>Version differences</h2>
 <p>
 * SBML Level&nbsp;3 Version&nbsp;1 introduces two required attributes
 * on the {@link Trigger} object: \'persistent\' and \'initialValue\'.  The rest of
 * this introduction describes these two attributes.
 <p>
 * <h3>The \'persistent\' attribute on {@link Trigger}</h3>
 <p>
 * In the interval between when an {@link Event} object <em>triggers</em> (i.e.,
 * its {@link Trigger} object expression transitions in value from <code>false</code> to
 * <code>true</code>) and when its assignments are to be <em>executed</em>, conditions
 * in the model may change such that the trigger expression transitions
 * back from <code>true</code> to <code>false.</code>  Should the event\'s assignments still be
 * made if this happens?  Answering this question is the purpose of the
 * \'persistent\' attribute on {@link Trigger}.
 <p>
 * If the boolean attribute \'persistent\' has a value of <code>true</code>, then once
 * the event is triggered, all of its assignments are always performed when
 * the time of execution is reached.  The name <em>persistent</em> is meant to
 * evoke the idea that the trigger expression does not have to be
 * re-checked after it triggers if \'persistent\'=<code>true.</code>  Conversely, if
 * the attribute value is <code>false</code>, then the trigger expression is not
 * assumed to persist: if the expression transitions in value back to 
 * <code>false</code> at any time between when the event triggered and when it is to be
 * executed, the event is no longer considered to have triggered and its
 * assignments are not executed.  (If the trigger expression transitions
 * once more to <code>true</code> after that point, then the event is triggered, but
 * this then constitutes a whole new event trigger-and-execute sequence.)
 <p>
 * The \'persistent\' attribute can be especially useful when {@link Event} objects
 * contain {@link Delay} objects, but it is relevant even in a model without delays
 * if the model contains two or more events.  As explained in the
 * introduction to this section, the operation of all events in SBML
 * (delayed or not) is conceptually divided into two phases,
 * <em>triggering</em> and <em>execution</em>; however, unless events have
 * priorities associated with them, SBML does not mandate a particular
 * ordering of event execution in the case of simultaneous events.  Models
 * with multiple events can lead to situations where the execution of one
 * event affects another event\'s trigger expression value.  If that other
 * event has \'persistent\'=<code>false</code>, and its trigger expression evaluates to
 * <code>false</code> before it is to be executed, the event must not be executed
 * after all.
 <p>
 * <h3>The \'initialValue\' attribute on {@link Trigger}</h3>
 <p>
 * As mentioned above, an event <em>triggers</em> when the mathematical
 * expression in its {@link Trigger} object transitions in value from <code>false</code> to
 * <code>true.</code>  An unanswered question concerns what happens at the start of a
 * simulation: can event triggers make this transition at <em>t = 0</em>,
 * where <em>t</em> stands for time?
 <p>
 * In order to determine whether an event may trigger at <em>t = 0</em>, it
 * is necessary to know what value the {@link Trigger} object\'s \'math\' expression
 * had immediately prior to <em>t = 0</em>.  This starting value of the
 * trigger expression is determined by the value of the boolean attribute
 * \'initialValue\'.  A value of <code>true</code> means the trigger expression is
 * taken to have the value <code>true</code> immediately prior to <em>t = 0</em>.  In
 * that case, the trigger cannot transition in value from <code>false</code> to 
 * <code>true</code> at the moment simulation begins (because it has the value <code>true</code>
 * both before and after <em>t = 0</em>), and can only make the transition
 * from <code>false</code> to <code>true</code> sometime <em>after</em> <em>t = 0</em>.  (To do
 * that, it would also first have to transition to <code>false</code> before it could
 * make the transition from <code>false</code> back to <code>true.</code>)  Conversely, if
 * \'initialValue\'=<code>false</code>, then the trigger expression is assumed to start
 * with the value <code>false</code>, and therefore may trigger at <em>t = 0</em> if
 * the expression evaluates to <code>true</code> at that moment.
 <p>
 * @see Event
 * @see Delay
 * @see EventAssignment
 */
"


%javamethodmodifiers Trigger::Trigger(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Trigger} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Trigger}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Trigger}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   */ public
";


%javamethodmodifiers Trigger::Trigger(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Trigger} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   */ public
";


%javamethodmodifiers Trigger::Trigger(const Trigger& orig) "
/**
   * Copy constructor; creates a copy of this {@link Trigger}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Trigger::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Trigger}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers Trigger::clone() const "
/**
   * Creates and returns a deep copy of this {@link Trigger} object.
   <p>
   * @return the (deep) copy of this {@link Trigger} object.
   */ public
";


%javamethodmodifiers Trigger::getMath() const "
/**
   * Get the mathematical formula for the trigger and return it
   * as an AST.
   <p>
   * @return the math of this {@link Trigger}.
   */ public
";


%javamethodmodifiers Trigger::getInitialValue() const "
/**
   * (SBML Level&nbsp;3 only) Get the value of the \'initialValue\' attribute
   * of this {@link Trigger}.
   <p>
   * @return the boolean value stored as the \'initialValue\' attribute value
   * in this {@link Trigger}.
   <p>
   * @note The attribute \'initialValue\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Trigger::getPersistent() const "
/**
   * (SBML Level&nbsp;3 only) Get the value of the \'persistent\' attribute
   * of this {@link Trigger}.
   <p>
   * @return the boolean value stored as the \'persistent\' attribute value
   * in this {@link Trigger}.
   <p>
   * @note The attribute \'persistent\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Trigger::isSetMath() const "
/**
   * Predicate to test whether the math for this trigger is set.
   <p>
   * @return <code>true</code> if the formula (meaning the \'math\' subelement) of
   * this {@link Trigger} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Trigger::isSetInitialValue() const "
/**
   * (SBML Level&nbsp;3 only) Predicate to test whether the \'initialValue\'
   * attribute for this trigger is set.
   <p>
   * @return <code>true</code> if the initialValue attribute of
   * this {@link Trigger} is set, <code>false</code> otherwise.
   <p>
   * @note The attribute \'initialValue\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Trigger::isSetPersistent() const "
/**
   * (SBML Level&nbsp;3 only) Predicate to test whether the \'persistent\'
   * attribute for this trigger is set.
   <p>
   * @return <code>true</code> if the persistent attribute of
   * this {@link Trigger} is set, <code>false</code> otherwise.
   <p>
   * @note The attribute \'persistent\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Trigger::setMath(const ASTNode* math) "
/**
   * Sets the trigger expression of this {@link Trigger} instance to a copy of the given
   * {@link ASTNode}.
   <p>
   * @param math an {@link ASTNode} representing a formula tree.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers Trigger::setInitialValue(bool initialValue) "
/**
   * (SBML Level&nbsp;3 only) Sets the \'initialValue\' attribute of this {@link Trigger} instance.
   <p>
   * @param initialValue a boolean representing the initialValue to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The attribute \'initialValue\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Trigger::setPersistent(bool persistent) "
/**
   * (SBML Level&nbsp;3 only) Sets the \'persistent\' attribute of this {@link Trigger} instance.
   <p>
   * @param persistent a boolean representing the persistent value to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @note The attribute \'persistent\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%javamethodmodifiers Trigger::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_TRIGGER SBML_TRIGGER} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Trigger::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Trigger}, is
   * always <code>\'trigger\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'trigger\'.</code> 
   */ public
";


%javamethodmodifiers Trigger::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Trigger::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Trigger::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers Trigger::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers Trigger::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Trigger::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Trigger} object
   * have been set.
   <p>
   * @note The required elements for a {@link Trigger} object are:
   * <ul>
   * <li> \'math\'
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers Trigger::hasRequiredAttributes() const "
/**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Trigger} object
   * have been set.
   <p>
   * The required attributes for a {@link Trigger} object are:
   * <ul>
   * <li> \'persistent\' (required in SBML Level&nbsp;3)
   * <li> \'initialValue\' (required in SBML Level&nbsp;3)
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */ public
";


%javamethodmodifiers Trigger::removeFromParentAndDelete "
/**
   * Finds this {@link Trigger}\'s {@link Event} parent and calls unsetTrigger() on it, indirectly deleting itself.  Overridden from the {@link SBase} function since the parent is not a {@link ListOf}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Trigger::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers Trigger::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Trigger::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Trigger::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Trigger::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Trigger::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%typemap(javaimports) Delay "
/** 
 *  A delay on the time of execution of an SBML <em>event</em>.
 <p>
 * An {@link Event} object defines when the event can occur, the variables that
 * are affected by the event, and how the variables are affected.  The
 * effect of the event can optionally be delayed after the occurrence of
 * the condition which invokes it.  An event delay is defined using an
 * object of class {@link Delay}.
 <p>
 * The object class {@link Delay} is derived from {@link SBase} and adds a single
 * subelement called \'math\'.  This subelement is used to hold MathML
 * content.  The mathematical formula represented by \'math\' must evaluate
 * to a numerical value.  It is used as the length of time between when the
 * event is <em>triggered</em> and when the event\'s assignments are
 * actually <em>executed</em>.  If no delay is present on a given {@link Event}, a time
 * delay of zero is assumed.
 <p>
 * The expression in \'math\' must be evaluated at the time the event is 
 * <em>triggered</em>.  The expression must always evaluate to a nonnegative number
 * (otherwise, a nonsensical situation could arise where an event is
 * defined to execute before it is triggered!).
 <p>
 * <h2>The units of the mathematical expression in a {@link Delay}</h2>
 <p>
 * In SBML Level&nbsp;2 versions before Version&nbsp;4, the units of the
 * numerical value computed by the {@link Delay}\'s \'math\' expression are 
 * <em>required</em> to be in units of time, or the model is considered to have a
 * unit consistency error.  In Level&nbsp;2 Version&nbsp;4 as well as SBML
 * Level&nbsp;3 Version&nbsp;1 Core, this requirement is relaxed; these
 * specifications only stipulate that the units of the numerical value
 * computed by a {@link Delay} instance\'s \'math\' expression <em>should</em> match the
 * model\'s units of time (meaning the definition of the <code>time</code> units in
 * the model).  LibSBML respects these requirements, and depending on
 * whether an earlier Version of SBML Level&nbsp;2 is in use, libSBML may
 * or may not flag unit inconsistencies as errors or merely warnings.
 <p>
 * Note that <em>units are not predefined or assumed</em> for the contents
 * of \'math\' in a {@link Delay} object; rather, they must be defined explicitly for
 * each instance of a {@link Delay} object in a model.  This is an important point
 * to bear in mind when literal numbers are used in delay expressions.  For
 * example, the following {@link Event} instance would result in a warning logged
 * by {@link SBMLDocument#checkConsistency()} about the fact that libSBML cannot
 * verify the consistency of the units of the expression.  The reason is
 * that the formula inside the \'math\' element does not have any declared
 * units, whereas what is expected in this context is units of time:
 * <pre class=\'fragment\'>
&lt;model&gt;
    ...
    &lt;listOfEvents&gt;
        &lt;event useValuesFromTriggerTime=\'true\'&gt;
            ...
            &lt;delay&gt;
                &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt;
                    &lt;cn&gt; 1 &lt;/cn&gt;
                &lt;/math&gt;
            &lt;/delay&gt;
            ...
        &lt;/event&gt;
    &lt;/listOfEvents&gt;
    ...
&lt;/model&gt;
</pre>
 <p>
 * The <code>&lt;cn&gt; 1 &lt;/cn&gt;</code> within the mathematical formula
 * of the <code>delay</code> above has <em>no units declared</em>.  To make the
 * expression have the needed units of time, literal numbers should be
 * avoided in favor of defining {@link Parameter} objects for each quantity, and
 * declaring units for the {@link Parameter} values.  The following fragment of
 * SBML illustrates this approach:
 * <pre class=\'fragment\'>
&lt;model&gt;
    ...
    &lt;listOfParameters&gt;
        &lt;parameter id=\'transcriptionDelay\' value=\'10\' units=\'second\'/&gt;
    &lt;/listOfParameters&gt;
    ...
    &lt;listOfEvents&gt;
        &lt;event useValuesFromTriggerTime=\'true\'&gt;
            ...
            &lt;delay&gt;
                &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt;
                    &lt;ci&gt; transcriptionDelay &lt;/ci&gt;
                &lt;/math&gt;
            &lt;/delay&gt;
            ...
        &lt;/event&gt;
    &lt;/listOfEvents&gt;
    ...
&lt;/model&gt;
</pre>
 <p>
 * In SBML Level&nbsp;3, an alternative approach is available in the form
 * of the <code>units</code> attribute, which SBML Level&nbsp;3 allows to appear on
 * MathML <code>cn</code> elements.  The value of this attribute can be used to
 * indicate the unit of measurement to be associated with the number in the
 * content of a <code>cn</code> element.  The attribute is named <code>units</code> but,
 * because it appears inside MathML element (which is in the XML namespace
 * for MathML and not the namespace for SBML), it must always be prefixed
 * with an XML namespace prefix for the SBML Level&nbsp;3 Version&nbsp;1
 * namespace.  The following is an example of this approach:
 * <pre class=\'fragment\'>
&lt;model timeUnits=\'second\' ...&gt;
    ...
    &lt;listOfEvents&gt;
        &lt;event useValuesFromTriggerTime=\'true\'&gt;
            ...
            &lt;delay&gt;
                &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'
                      xmlns:sbml=\'http://www.sbml.org/sbml/level3/version1/core\'&gt;
                    &lt;cn sbml:units=\'second\'&gt; 10 &lt;/cn&gt;
                &lt;/math&gt;
            &lt;/delay&gt;
            ...
        &lt;/event&gt;
    &lt;/listOfEvents&gt;
    ...
&lt;/model&gt;
</pre>
 */
"


%javamethodmodifiers Delay::Delay(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Delay} using the given SBML <code>level</code> and <code>version</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Delay}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Delay}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Delay::Delay(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Delay} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers Delay::Delay(const Delay& orig) "
/**
   * Copy constructor; creates a copy of this {@link Delay}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Delay::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Delay}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers Delay::clone() const "
/**
   * Creates and returns a deep copy of this {@link Delay} object.
   <p>
   * @return the (deep) copy of this {@link Delay} object.
   */ public
";


%javamethodmodifiers Delay::getMath() const "
/**
   * Get the mathematical formula for the delay and return it
   * as an AST.
   <p>
   * @return the math of this {@link Delay}.
   */ public
";


%javamethodmodifiers Delay::isSetMath() const "
/**
   * Predicate to test whether the formula for this delay is set.
   <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this {@link Delay} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Delay::setMath(const ASTNode* math) "
/**
   * Sets the delay expression of this {@link Delay} instance to a copy of the given
   * {@link ASTNode}.
   <p>
   * @param math an {@link ASTNode} representing a formula tree.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers Delay::getDerivedUnitDefinition "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this {@link Delay}.
   <p>
   * <p>
 * {@link Delay} elements in SBML express a time delay for an {@link Event}.  Beginning
 * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
 * calculated based on the mathematical expression and the model quantities
 * referenced by <code>&lt;ci&gt;</code> elements used within that
 * expression.  (In SBML Level &nbsp;2 Version&nbsp;1, there exists an
 * attribute on {@link Event} called \'timeUnits\'.  This attribute can be used to set
 * the units of the {@link Delay} expression explicitly.)  The method
 * {@link Delay#getDerivedUnitDefinition()} returns what libSBML computes the units
 * to be, to the extent that libSBML can compute them.
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link Delay} contains literal numbers or parameters with
 * undeclared units.  In those cases, it is not possible to calculate the
 * units of the overall expression without making assumptions.  LibSBML does
 * not make assumptions about the units, and
 * {@link Delay#getDerivedUnitDefinition()} only returns the units as far as it is
 * able to determine them.  For example, in an expression <em>X + Y</em>, if
 * <em>X</em> has unambiguously-defined units and <em>Y</em> does not, it
 * will return the units of <em>X</em>.  When using this method, <strong>it
 * is critical that callers also invoke the method</strong>
 * {@link Delay#containsUndeclaredUnits()} <strong>to determine whether this
 * situation holds</strong>.  Callers should take suitable action in those
 * situations.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link Delay}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers Delay::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this {@link Delay}.
   <p>
   * <p>
 * {@link Delay} elements in SBML express a time delay for an {@link Event}.  Beginning
 * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
 * calculated based on the mathematical expression and the model quantities
 * referenced by <code>&lt;ci&gt;</code> elements used within that
 * expression.  (In SBML Level &nbsp;2 Version&nbsp;1, there exists an
 * attribute on {@link Event} called \'timeUnits\'.  This attribute can be used to set
 * the units of the {@link Delay} expression explicitly.)  The method
 * {@link Delay#getDerivedUnitDefinition()} returns what libSBML computes the units
 * to be, to the extent that libSBML can compute them.
   <p>
   * <p>
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return <code>null.</code> 
   <p>
   * <p>
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the {@link Delay} contains literal numbers or parameters with
 * undeclared units.  In those cases, it is not possible to calculate the
 * units of the overall expression without making assumptions.  LibSBML does
 * not make assumptions about the units, and
 * {@link Delay#getDerivedUnitDefinition()} only returns the units as far as it is
 * able to determine them.  For example, in an expression <em>X + Y</em>, if
 * <em>X</em> has unambiguously-defined units and <em>Y</em> does not, it
 * will return the units of <em>X</em>.  When using this method, <strong>it
 * is critical that callers also invoke the method</strong>
 * {@link Delay#containsUndeclaredUnits()} <strong>to determine whether this
 * situation holds</strong>.  Callers should take suitable action in those
 * situations.</span>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link Delay}, or <code>null</code> if one cannot be constructed.
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers Delay::containsUndeclaredUnits "
/**
   * Predicate returning <code>true</code> if the \'math\' expression in this {@link Delay}
   * instance contains parameters with undeclared units or literal numbers.
   <p>
   * <p>
 * {@link Delay} elements in SBML express a time delay for an {@link Event}.  Beginning
 * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
 * calculated based on the mathematical expression and the model quantities
 * referenced by <code>&lt;ci&gt;</code> elements used within that
 * expression.  (In SBML Level &nbsp;2 Version&nbsp;1, there exists an
 * attribute on {@link Event} called \'timeUnits\'.  This attribute can be used to set
 * the units of the {@link Delay} expression explicitly.)  The method
 * {@link Delay#getDerivedUnitDefinition()} returns what libSBML computes the units
 * to be, to the extent that libSBML can compute them.
   <p>
   * If the expression contains literal numbers or parameters with undeclared
   * units, <strong>libSBML may not be able to compute the full units of the
   * expression</strong> and will only return what it can compute.  Callers
   * should always use {@link Delay#containsUndeclaredUnits()} when using
   * {@link Delay#getDerivedUnitDefinition()} to decide whether the returned units
   * may be incomplete.
   <p>
   * @return <code>true</code> if the math expression of this {@link Delay} includes
   * numbers/parameters with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link Delay#getDerivedUnitDefinition()} may not accurately
   * represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers Delay::containsUndeclaredUnits() const "
/**
   * Predicate returning <code>true</code> if the \'math\' expression in this {@link Delay}
   * instance contains parameters with undeclared units or literal numbers.
   <p>
   * <p>
 * {@link Delay} elements in SBML express a time delay for an {@link Event}.  Beginning
 * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
 * calculated based on the mathematical expression and the model quantities
 * referenced by <code>&lt;ci&gt;</code> elements used within that
 * expression.  (In SBML Level &nbsp;2 Version&nbsp;1, there exists an
 * attribute on {@link Event} called \'timeUnits\'.  This attribute can be used to set
 * the units of the {@link Delay} expression explicitly.)  The method
 * {@link Delay#getDerivedUnitDefinition()} returns what libSBML computes the units
 * to be, to the extent that libSBML can compute them.
   <p>
   * If the expression contains literal numbers or parameters with undeclared
   * units, <strong>libSBML may not be able to compute the full units of the
   * expression</strong> and will only return what it can compute.  Callers
   * should always use {@link Delay#containsUndeclaredUnits()} when using
   * {@link Delay#getDerivedUnitDefinition()} to decide whether the returned units
   * may be incomplete.
   <p>
   * @return <code>true</code> if the math expression of this {@link Delay} includes
   * numbers/parameters with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link Delay#getDerivedUnitDefinition()} may not accurately
   * represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers Delay::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_DELAY SBML_DELAY} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Delay::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Delay}, is
   * always <code>\'delay\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'delay\'.</code>
   <p>
   * @see #getTypeCode()
   */ public
";


%javamethodmodifiers Delay::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers Delay::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Delay::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Delay} object
   * have been set.
   <p>
   * @note The required elements for a {@link Delay} object are:
   * <ul>
   * <li> \'math\'
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers Delay::removeFromParentAndDelete "
/**
   * Finds this {@link Delay}\'s {@link Event} parent and calls unsetDelay() on it, indirectly
   * deleting itself.
   <p>
   * Overridden from the {@link SBase} function since the parent is not a {@link ListOf}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Delay::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Delay::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Delay::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers Delay::getInternalId() const "
/** * @internal */ public
";


%javamethodmodifiers Delay::setInternalId(std::string id) "
/** * @internal */ public
";


%javamethodmodifiers Delay::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers Delay::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Delay::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Delay::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Delay::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Delay::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%typemap(javaimports) Priority "
/** 
 *  The priority of execution of an SBML <em>event</em>.
 <p>
 * The {@link Priority} object class (which was introduced in SBML Level&nbsp;3
 * Version&nbsp;1), like {@link Delay}, is derived from {@link SBase} and contains a MathML
 * formula stored in the element \'math\'.  This formula is used to compute a
 * dimensionless numerical value that influences the order in which a
 * simulator is to perform the assignments of two or more events that
 * happen to be executed simultaneously.  The formula may evaluate to any
 * <code>double</code> value (and thus may be a positive or negative number, or
 * zero), with positive numbers taken to signifying a higher priority than
 * zero or negative numbers.  If no {@link Priority} object is present on a given
 * {@link Event} object, no priority is defined for that event.
 <p>
 * <h2>The interpretation of priorities on events in a model</h2>
 <p>
 * For the purposes of SBML, <em>simultaneous event execution</em> is
 * defined as the situation in which multiple events have identical
 * times of execution.  The time of execution is calculated as the
 * sum of the time at which a given event\'s {@link Trigger} is <em>triggered</em>
 * plus its {@link Delay} duration, if any.  Here, <em>identical times</em> means
 * <em>mathematically equal</em> instants in time.  (In practice,
 * simulation software adhering to this specification may have to
 * rely on numerical equality instead of strict mathematical
 * equality; robust models will ensure that this difference will not
 * cause significant discrepancies from expected behavior.)
 <p>
 * If no {@link Priority} subobjects are defined for two or more {@link Event} objects,
 * then those events are still executed simultaneously but their order of
 * execution is <em>undefined by the SBML Level&nbsp;3 Version&nbsp;1
 * specification</em>.  A software implementation may choose to execute
 * such simultaneous events in any order, as long as each event is executed
 * only once and the requirements of checking the \'persistent\' attribute
 * (and acting accordingly) are satisfied.
 <p>
 * If {@link Priority} subobjects are defined for two or more
 * simultaneously-triggered events, the order in which those particular
 * events must be executed is dictated by their {@link Priority} objects,
 * as follows.  If the values calculated using the two {@link Priority}
 * objects\' \'math\' expressions differ, then the event having
 * the higher priority value must be executed before the event with
 * the lower value.  If, instead, the two priority values are
 * mathematically equal, then the two events must be triggered in a
 * <em>random</em> order.  It is important to note that a <em>random
 *   order is not the same as an undefined order</em>: given multiple
 * runs of the same model with identical conditions, an undefined
 * ordering would permit a system to execute the events in (for
 * example) the same order every time (according to whatever scheme
 * may have been implemented by the system), whereas the explicit
 * requirement for random ordering means that the order of execution
 * in different simulation runs depends on random chance.  In other
 * words, given two events <em>A</em> and <em>B</em>, a randomly-determined
 * order must lead to an equal chance of executing <em>A</em> first or
 * <em>B</em> first, every time those two events are executed
 * simultaneously.
 <p>
 * A model may contain a mixture of events, some of which have
 * {@link Priority} subobjects and some do not.  Should a combination of
 * simultaneous events arise in which some events have priorities
 * defined and others do not, the set of events with defined
 * priorities must trigger in the order determined by their {@link Priority}
 * objects, and the set of events without {@link Priority} objects must be
 * executed in an <em>undefined</em> order with respect to each other
 * and with respect to the events with {@link Priority} subobjects.  (Note
 * that <em>undefined order</em> does not necessarily mean random
 * order, although a random ordering would be a valid implementation
 * of this requirement.)
 <p>
 * The following example may help further clarify these points.
 * Suppose a model contains four events that should be executed
 * simultaneously, with two of the events having {@link Priority} objects
 * with the same value and the other two events having {@link Priority}
 * objects with the same, but different, value.  The two events with
 * the higher priorities must be executed first, in a random order
 * with respect to each other, and the remaining two events must be
 * executed after them, again in a random order, for a total of four
 * possible and equally-likely event executions: A-B-C-D, A-B-D-C,
 * B-A-C-D, and B-A-D-C.  If, instead, the model contains four events
 * all having the same {@link Priority} values, there are 4! or 24
 * possible orderings, each of which must be equally likely to be
 * chosen.  Finally, if none of the four events has a {@link Priority}
 * subobject defined, or even if exactly one of the four events has a
 * defined {@link Priority}, there are again 24 possible orderings, but the
 * likelihood of choosing any particular ordering is undefined; the
 * simulator can choose between events as it wishes.  (The SBML
 * specification only defines the effects of priorities on {@link Event}
 * objects with respect to <em>other</em> {@link Event} objects with
 * priorities.  Putting a priority on a <em>single</em> {@link Event} object
 * in a model does not cause it to fall within that scope.)
 <p>
 * <h2>Evaluation of {@link Priority} expressions</h2>
 <p>
 * An event\'s {@link Priority} object \'math\' expression must be
 * evaluated at the time the {@link Event} is to be <em>executed</em>.  During
 * a simulation, all simultaneous events have their {@link Priority} values
 * calculated, and the event with the highest priority is selected for
 * next execution.  Note that it is possible for the execution of one
 * {@link Event} object to cause the {@link Priority} value of another
 * simultaneously-executing {@link Event} object to change (as well as to
 * trigger other events, as already noted).  Thus, after executing
 * one event, and checking whether any other events in the model have
 * been triggered, all remaining simultaneous events that
 * <em>either</em> (i) have {@link Trigger} objects with attributes
 * \'persistent\'=<code>false</code> <em>or</em> (ii) have {@link Trigger}
 * expressions that did not transition from <code>true</code> to
 * <code>false</code>, must have their {@link Priority} expression reevaluated.
 * The highest-priority remaining event must then be selected for 
 * execution next.
 <p>
 * <h2>Units of {@link Priority} object\'s mathematical expressions</h2>
 <p>
 * The unit associated with the value of a {@link Priority} object\'s
 * \'math\' expression should be <code>dimensionless.</code>  This is
 * because the priority expression only serves to provide a relative
 * ordering between different events, and only has meaning with
 * respect to other {@link Priority} object expressions.  The value of
 * {@link Priority} objects is not comparable to any other kind of object in
 * an SBML model.
 <p>
 * @note The {@link Priority} construct exists only in SBML Level&nbsp;3; it cannot
 * be used in SBML Level&nbsp;2 or Level&nbsp;1 models.
 <p>
 * @see Event
 * @see Delay
 * @see EventAssignment
 */
"


%javamethodmodifiers Priority::Priority(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link Priority} object using the given SBML <code>level</code> and 
   * <code>version</code> values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Priority}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Priority}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   <p>
   * <p>
 * @note The {@link Priority} construct exists only in SBML Level&nbsp;3; it
 * cannot be used in SBML Level&nbsp;2 or Level&nbsp;1 models.
   */ public
";


%javamethodmodifiers Priority::Priority(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link Priority} object using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   <p>
   * <p>
 * @note The {@link Priority} construct exists only in SBML Level&nbsp;3; it
 * cannot be used in SBML Level&nbsp;2 or Level&nbsp;1 models.
   */ public
";


%javamethodmodifiers Priority::Priority(const Priority& orig) "
/**
   * Copy constructor; creates a copy of this {@link Priority}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Priority::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link Priority}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers Priority::clone() const "
/**
   * Creates and returns a deep copy of this {@link Priority} object.
   <p>
   * @return the (deep) copy of this {@link Priority} object.
   */ public
";


%javamethodmodifiers Priority::getMath() const "
/**
   * Get the mathematical formula for the priority and return it
   * as an AST.
   <p>
   * @return the math of this {@link Priority}.
   */ public
";


%javamethodmodifiers Priority::isSetMath() const "
/**
   * Predicate to test whether the formula for this delay is set.
   <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this {@link Priority} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Priority::setMath(const ASTNode* math) "
/**
   * Sets the math expression of this {@link Priority} instance to a copy of the given
   * {@link ASTNode}.
   <p>
   * @param math an {@link ASTNode} representing a formula tree.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers Priority::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_PRIORITY SBML_PRIORITY} (default).\
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers Priority::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link Priority}, is
   * always <code>\'priority\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'priority\'.</code>
   <p>
   * @see #getTypeCode()
   */ public
";


%javamethodmodifiers Priority::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers Priority::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers Priority::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link Priority} object have been set.
   <p>
   * @note The required elements for a {@link Priority} object are:
   * <ul>
   * <li> \'math\'
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers Priority::removeFromParentAndDelete "
/**
   * Finds this {@link Priority}\'s {@link Event} parent and calls unsetPriority() on it,
   * indirectly deleting itself.
   <p>
   * Overridden from the {@link SBase} function since the parent is not a {@link ListOf}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers Priority::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Priority::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers Priority::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers Priority::getInternalId() const "
/** * @internal */ public
";


%javamethodmodifiers Priority::setInternalId(std::string id) "
/** * @internal */ public
";


%javamethodmodifiers Priority::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers Priority::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Priority::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers Priority::readL3Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers Priority::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%typemap(javaimports) SBO "
/** 
 *  Facilities for using the Systems Biology Ontology.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The values of \'id\' attributes on SBML components allow the components to
 * be cross-referenced within a model. The values of \'name\' attributes on
 * SBML components provide the opportunity to assign them meaningful labels
 * suitable for display to humans.  The specific identifiers and labels
 * used in a model necessarily must be unrestricted by SBML, so that
 * software and users are free to pick whatever they need.  However, this
 * freedom makes it more difficult for software tools to determine, without
 * additional human intervention, the semantics of models more precisely
 * than the semantics provided by the SBML object classes defined in other
 * sections of this document.  For example, there is nothing inherent in a
 * parameter with identifier <code>k</code> that would indicate to a
 * software tool it is a first-order rate constant (if that\'s what
 * <code>k</code> happened to be in some given model).  However, one may
 * need to convert a model between different representations (e.g.,
 * Henri-Michaelis-Menten versus elementary steps), or to use it with
 * different modeling approaches (discrete or continuous).  One may also
 * need to relate the model components with other description formats such
 * as SBGN (<a target=\'_blank\'
 * href=\'http://www.sbgn.org/\'>http://www.sbgn.org/</a>) using deeper
 * semantics.  Although an advanced software tool <em>might</em> be able to
 * deduce the semantics of some model components through detailed analysis
 * of the kinetic rate expressions and other parts of the model, this
 * quickly becomes infeasible for any but the simplest of models.
 <p>
 * An approach to solving this problem is to associate model components
 * with terms from carefully curated controlled vocabularies (CVs).  This
 * is the purpose of the optional \'sboTerm\' attribute provided on the SBML
 * class {@link SBase}.  The \'sboTerm\' attribute always refers to terms belonging
 * to the Systems Biology Ontology (SBO).
 <p>
 * <h2>Use of {@link SBO}</h2>
 <p>
 * Labeling model components with terms from shared controlled vocabularies
 * allows a software tool to identify each component using identifiers that
 * are not tool-specific.  An example of where this is useful is the desire
 * by many software developers to provide users with meaningful names for
 * reaction rate equations.  Software tools with editing interfaces
 * frequently provide these names in menus or lists of choices for users.
 * However, without a standardized set of names or identifiers shared
 * between developers, a given software package cannot reliably interpret
 * the names or identifiers of reactions used in models written by other
 * tools.
 <p>
 * The first solution that might come to mind is to stipulate that certain
 * common reactions always have the same name (e.g., \'Michaelis-Menten\'), but
 * this is simply impossible to do: not only do humans often disagree on
 * the names themselves, but it would not allow for correction of errors or
 * updates to the list of predefined names except by issuing new releases
 * of the SBML specification&mdash;to say nothing of many other limitations
 * with this approach.  Moreover, the parameters and variables that appear
 * in rate expressions also need to be identified in a way that software
 * tools can interpret mechanically, implying that the names of these
 * entities would also need to be regulated.
 <p>
 * The Systems Biology Ontology (SBO) provides terms for identifying most
 * elements of SBML. The relationship implied by an \'sboTerm\' on an SBML
 * model component is <em>is-a</em> between the characteristic of the
 * component meant to be described by SBO on this element and the SBO
 * term identified by the value of the \'sboTerm\'. By adding SBO term
 * references on the components of a model, a software tool can provide
 * additional details using independent, shared vocabularies that can
 * enable <em>other</em> software tools to recognize precisely what the
 * component is meant to be.  Those tools can then act on that information.
 * For example, if the SBO identifier <code>\'SBO:0000049\'</code> is assigned
 * to the concept of \'first-order irreversible mass-action kinetics,
 * continuous framework\', and a given {@link KineticLaw} object in a model has an
 * \'sboTerm\' attribute with this value, then regardless of the identifier
 * and name given to the reaction itself, a software tool could use this to
 * inform users that the reaction is a first-order irreversible mass-action
 * reaction.  This kind of reverse engineering of the meaning of reactions
 * in a model would be difficult to do otherwise, especially for more
 * complex reaction types.
 <p>
 * The presence of SBO labels on {@link Compartment}, {@link Species}, and {@link Reaction}
 * objects in SBML can help map those entities to equivalent concepts in
 * other standards, such as (but not limited to) BioPAX (<a target=\'_blank\'
 * href=\'http://www.biopax.org/\'>http://www.biopax.org/</a>), PSI-MI (<a
 * target=\'_blank\'
 * href=\'http://www.psidev.info/index.php?q=node/60\'>http://www.psidev.info</a>),
 * or the Systems Biology Graphical Notation (SBGN, <a target=\'_blank\'
 * href=\'http://www.sbgn.org/\'>http://www.sbgn.org/</a>).  Such mappings
 * can be used in conversion procedures, or to build interfaces, with SBO
 * becoming a kind of \'glue\' between standards of representation.
 <p>
 * The presence of the label on a kinetic expression can also allow
 * software tools to make more intelligent decisions about reaction rate
 * expressions.  For example, an application could recognize certain types
 * of reaction formulas as being ones it knows how to solve with optimized
 * procedures.  The application could then use internal, optimized code
 * implementing the rate formula indexed by identifiers such as
 * <code>\'SBO:0000049\'</code> appearing in SBML models.
 <p>
 * Finally, SBO labels may be very valuable when it comes to model
 * integration, by helping identify interfaces, convert mathematical
 * expressions and parameters etc.
 <p>
 * Although the use of SBO can be beneficial, it is critical to keep in
 * mind that the presence of an \'sboTerm\' value on an object <em>must not
 * change the fundamental mathematical meaning</em> of the model.  An SBML
 * model must be defined such that it stands on its own and does not depend
 * on additional information added by SBO terms for a correct mathematical
 * interpretation.  SBO term definitions will not imply any alternative
 * mathematical semantics for any SBML object labeled with that term.  Two
 * important reasons motivate this principle.  First, it would be too
 * limiting to require all software tools to be able to understand the SBO
 * vocabularies in addition to understanding SBML.  Supporting SBO is not
 * only additional work for the software developer; for some kinds of
 * applications, it may not make sense.  If SBO terms on a model are
 * optional, it follows that the SBML model <em>must</em> remain
 * unambiguous and fully interpretable without them, because an application
 * reading the model may ignore the terms.  Second, we believe allowing the
 * use of \'sboTerm\' to alter the mathematical meaning of a model would
 * allow too much leeway to shoehorn inconsistent concepts into SBML
 * objects, ultimately reducing the interoperability of the models.
 <p>
 * <h2>Relationships between {@link SBO} and SBML</h2>
 <p>
 * The goal of SBO labeling for SBML is to clarify to the fullest extent
 * possible the nature of each element in a model.  The approach taken in
 * SBO begins with a hierarchically-structured set of controlled
 * vocabularies with six main divisions: (1) entity, (2) participant role,
 * (3) quantitative parameter, (4) modeling framework, (5) mathematical
 * expression, and (6) interaction.  The web site for SBO (<a
 * target=\'_blank\'
 * href=\'http://biomodels.net/sbo\'>http://biomodels.net</a>) should be
 * consulted for the current version of the ontology.
 <p>
 * The Systems Biology Ontology (SBO) is not part of SBML; it is being
 * developed separately, to allow the modeling community to evolve the
 * ontology independently of SBML.  However, the terms in the ontology are
 * being designed keeping SBML components in mind, and are classified into
 * subsets that can be directly related with SBML components such as
 * reaction rate expressions, parameters, and others.  The use of \'sboTerm\'
 * attributes is optional, and the presence of \'sboTerm\' on an element does
 * not change the way the model is <em>interpreted</em>.  Annotating SBML
 * elements with SBO terms adds additional semantic information that may
 * be used to <em>convert</em> the model into another model, or another
 * format.  Although SBO support provides an important source of
 * information to understand the meaning of a model, software does not need
 * to support \'sboTerm\' to be considered SBML-compliant.
 */
"


%javamethodmodifiers SBO::readTerm(const XMLAttributes& attributes, SBMLErrorLog* log, unsigned int level = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION, unsigned int line = 0, unsigned int column = 0) "
/** * @internal */ public
";


%javamethodmodifiers SBO::writeTerm(XMLOutputStream& stream, int sboTerm, const std::string& prefix = "") "
/** * @internal */ public
";


%javamethodmodifiers SBO::isQuantitativeParameter(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'quantiative parameter\'</em>, <code>false</code>
   * otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isParticipantRole(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'participant role\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isModellingFramework(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'modeling framework\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isMathematicalExpression(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'mathematical expression\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isKineticConstant(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'kinetic constant\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isReactant(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'reactant\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isProduct(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'product\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isModifier(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'modifier\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isRateLaw(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'rate law\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isEvent(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'event\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isPhysicalParticipant(unsigned int term) "
/**
    * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
    <p>
    * @return <code>true</code> if <code>term</code> is-a SBO <em>\'physical participant</em>, <code>false</code> otherwise.
   <p>
   * 
    */ public
";


%javamethodmodifiers SBO::isParticipant(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'participant\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isInteraction(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'interaction\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isEntity(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'entity\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isFunctionalEntity(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'functional entity\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isMaterialEntity(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'material entity\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isConservationLaw(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'conservation law\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isSteadyStateExpression(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'steady state expression\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isFunctionalCompartment(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'functional compartment\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isContinuousFramework(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'continuous framework\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isDiscreteFramework(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'discrete framework\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isLogicalFramework(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'logical framework\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isMetadataRepresentation(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'metadata representation\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isOccurringEntityRepresentation(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'occurring entity representation\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isPhysicalEntityRepresentation(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'physical entity representation\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isSystemsDescriptionParameter(unsigned int term) "
/**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'systems description parameter\'</em>, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isObselete(unsigned int term) "
/**
   * Predicate for checking whether the given term is obsolete.
   <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'obsolete\'</em> term, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::intToString(int sboTerm) "
/**
   * Returns the integer as a correctly formatted SBO identifier string.
   <p>
   * @return the given integer sboTerm as a zero-padded seven digit string.
   <p>
   * @note If the sboTerm is not in the correct range
   * (0000000&ndash;9999999), an empty string is returned.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::stringToInt(const std::string& sboTerm) "
/**
   * Returns the string as a correctly formatted SBO integer portion.
   <p>
   * @return the given string sboTerm as an integer.  If the sboTerm is not
   * in the correct format (a zero-padded, seven digit string), <code>-1</code> is
   * returned.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::checkTerm(const std::string& sboTerm) "
/**
   * Checks the format of the given SBO identifier string.
   <p>
   * @return <code>true</code> if sboTerm is in the correct format (a zero-padded, seven
   * digit string), <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::checkTerm(int sboTerm) "
/**
   * Checks the format of the given SBO identifier, given in the form of
   * the integer portion alone.
   <p>
   * @return <code>true</code> if sboTerm is in the range (0000000&ndash;9999999), <code>false</code>
   * otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBO::isChildOf(unsigned int term, unsigned int parent) "
/** * @internal */ public
";


%javamethodmodifiers SBO::populateSBOTree "
/** * @internal */ public
";


%typemap(javaimports) SyntaxChecker "
/** 
 *  Methods for checking the validity of SBML identifiers.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * This utility class provides static methods for checking the syntax of
 * identifiers and other text used in an SBML model.  The methods allow
 * callers to verify that strings such as SBML identifiers and XHTML notes
 * text conform to the SBML specifications.
 */
"


%javamethodmodifiers SyntaxChecker::isValidSBMLSId(std::string sid) "
/**
   * Returns true <code>true</code> or <code>false</code> depending on whether the argument
   * string conforms to the syntax of SBML identifiers.
   <p>
   * <p>
 * In SBML, identifiers that are the values of \'id\' attributes on objects
 * must conform to a data type called <code>SId</code> in the SBML
 * specifications.  LibSBML does not provide an explicit <code>SId</code>
 * data type; it uses ordinary character strings, which is easier for
 * applications to support.  (LibSBML does, however, test for identifier
 * validity at various times, such as when reading in models from files
 * and data streams.) 
   <p>
   * This method provides programs with the ability to test explicitly that
   * the identifier strings they create conform to the SBML identifier
   * syntax.
   <p>
   * @param sid string to be checked for conformance to SBML identifier
   * syntax.
   <p>
   * @return <code>true</code> if the string conforms to type SBML data type
   * <code>SId</code>, <code>false</code> otherwise.
   <p>
   * <p>
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation:
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter .= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  .= \'0\'..\'9\'
 * idChar .= letter | digit | \'_\'
 * SId    .= ( letter | \'_\' ) idChar*</pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
   <p>
   * 
   <p>
   * @see SyntaxChecker#isValidUnitSId(String sid) 
   * @see SyntaxChecker#isValidXMLID(String sid) 
   */ public
";


%javamethodmodifiers SyntaxChecker::isValidXMLID(std::string id) "
/**
   * Returns <code>true</code> or <code>false</code> depending on whether the argument string
   * conforms to the XML data type <code>ID</code>.
   <p>
   * <p>
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support. 
   <p>
   * This method provides programs with the ability to test explicitly that
   * the identifier strings they create conform to the SBML identifier
   * syntax.
   <p>
   * @param id string to be checked for conformance to the syntax of
   * <a target=\'_blank\' href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.
   <p>
   * @return <code>true</code> if the string is a syntactically-valid value for the
   * XML type <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>ID</a>, <code>false</code> otherwise.
   <p>
   * @note The following is a summary of the definition of the XML&nbsp;1.0 data type
<a target=\"_blank\" href=\"http://www.w3.org/TR/REC-xml/#id\">ID</a>.  We
express the syntax using an extended form of BNF notation:
<p>
<nobr><code style=\"margin-left: 2em; letter-spacing: -1px\">NCNameChar ::= letter | digit | '.' | '-' | '_' | ':' | CombiningChar | Extender</code><br></nobr>
<code style=\"margin-left: 2em; letter-spacing: -1px\">ID ::= ( letter | '_' | ':' ) NCNameChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> means \"zero or more times\", and the character
<code>|</code> indicates logical \"or\". The production <code>letter</code>
consists of the basic upper and lower case alphabetic characters of the
Latin alphabet along with a large number of related characters defined by
Unicode&nbsp;2.0; similarly, the production <code>digit</code> consists of
the numerals <code>0..9</code> along with related Unicode&nbsp;2.0
characters.  The <code>CombiningChar</code> production is a list of
characters that add such things as accents to the preceding character. (For
example, the Unicode character <code>\#x030A</code> when combined with
<code>a</code> produces <code>\aa</code>.)  The <code>Extender</code>
production is a list of characters that extend the shape of the preceding
character.  Please consult the <a target=\"_blank\"
href=\"http://www.w3.org/TR/2004/REC-xml-20040204/\">XML&nbsp;1.0
specification</a> for the complete definitions of <code>letter</code>,
<code>digit</code>, <code>CombiningChar</code>, and <code>Extender</code>.
<p>

   <p>
   * 
   <p>
   * @see SyntaxChecker#isValidSBMLSId(String sid) 
   * @see SyntaxChecker#isValidUnitSId(String sid) 
   */ public
";


%javamethodmodifiers SyntaxChecker::isValidXMLanyURI(std::string uri) "
/**
   * Returns <code>true</code> or <code>false</code> depending on whether the <code>uri</code> argument string
   * conforms to the XML data type <code>anyURI</code>.
   <p>
   * Type anyURI is defined by XML Schema 1.0. It is a character string 
   * data type whose values are interpretable as URIs (Universal Resource 
   * Identifiers) as described by the W3C document RFC 3986.  LibSBML
   * does not provide an explicit XML <code>anyURI</code> data type; it uses
   * ordinary character strings, which is easier for applications to
   * support.  LibSBML does, however, test for anyURI validity at
   * various times, such as when reading in models from files and data
   * streams.
   <p>
   * This method provides programs with the ability to test explicitly that
   * the strings they create conform to the XML anyURI syntax.
   <p>
   * @param uri string to be checked for conformance to the syntax of
   * <a target=\'_blank\' 
   * href=\'http://www.w3.org/TR/xmlschema-2/#anyURI\'>anyURI</a>.
   <p>
   * @return <code>true</code> if the string is a syntactically-valid value for the
   * XML type <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#anyURI\'>anyURI</a>, 
   * <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SyntaxChecker::isValidUnitSId(std::string units) "
/**
   * Returns <code>true</code> or <code>false</code> depending on whether the argument string
   * conforms to the syntax of SBML unit identifiers.
   <p>
   * In SBML, the identifiers of units (of both the predefined units and
   * user-defined units) must conform to a data type called
   * <code>UnitSId</code> in the SBML specifications.  LibSBML does not
   * provide an explicit <code>UnitSId</code> data type; it uses ordinary
   * character strings, which is easier for applications to support.
   * LibSBML does, however, test for identifier validity at various times,
   * such as when reading in models from files and data streams.
   <p>
   * This method provides programs with the ability to test explicitly that
   * the identifier strings they create conform to the SBML identifier
   * syntax.
   <p>
   * @param units string to be checked for conformance to SBML unit
   * identifier syntax.
   <p>
   * @return <code>true</code> if the string conforms to type SBML data type
   * <code>UnitSId</code>, <code>false</code> otherwise.
   <p>
   * @note The following is a summary of the definition of the SBML identifier type
<code>UnitSId</code>, which defines the permitted syntax of identifiers.
We express the syntax using an extended form of BNF notation:
<p>
<code style=\"margin-left: 2em\">letter ::= 'a'..'z','A'..'Z'</code><br>
<code style=\"margin-left: 2em\">digit  ::= '0'..'9'</code><br>
<code style=\"margin-left: 2em\">idChar ::= letter | digit | '_'</code><br>
<code style=\"margin-left: 2em\">SId    ::= ( letter | '_' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \"zero or more times\", and the character
<code>|</code> indicates logical \"or\".  The equality of SBML unit
identifiers is determined by an exact character sequence match; i.e.,
comparisons must be performed in a case-sensitive manner.  In addition,
there are a few conditions for the uniqueness of unit identifiers in an
SBML model.  Please consult the SBML specifications for the exact
formulations.
<p>

   <p>
   * 
   <p>
   * @see SyntaxChecker#isValidSBMLSId(String sid) 
   * @see SyntaxChecker#isValidXMLID(String sid) 
   */ public
";


%javamethodmodifiers SyntaxChecker::hasExpectedXHTMLSyntax(const XMLNode * xhtml, SBMLNamespaces * sbmlns = NULL) "
/**
   * Returns <code>true</code> or <code>false</code> depending on whether the given {@link XMLNode}
   * object contains valid XHTML content.
   <p>
   * <p>
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * {@link Constraint}), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type {@link SBase} can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 <p>
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be <em>entirely</em> free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode)}; this
 * method implements a verification process that lets callers check whether
 * the content of a given {@link XMLNode} object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured.
   <p>
   * An aspect of XHTML validity is that the content is declared to be in
   * the XML namespace for XHTML&nbsp;1.0.  There is more than one way in
   * which this can be done in XML.  In particular, a model might not
   * contain the declaration within the \'notes\' or \'message\' subelement
   * itself, but might instead place the declaration on an enclosing
   * element and use an XML namespace prefix within the \'notes\' element to
   * refer to it.  In other words, the following is valid:
   * <pre class=\'fragment\'>
&lt;sbml xmlns=\'http://www.sbml.org/sbml/level2/version3\' level=\'2\' version=\'3\'
      xmlns:xhtml=\'http://www.w3.org/1999/xhtml\'&gt;
  &lt;model&gt;
    &lt;notes&gt;
      &lt;xhtml:body&gt;
        &lt;xhtml:center&gt;&lt;xhtml:h2&gt;A Simple Mitotic Oscillator&lt;/xhtml:h2&gt;&lt;/xhtml:center&gt;
        &lt;xhtml:p&gt;A minimal cascade model for the mitotic oscillator.&lt;/xhtml:p&gt;
      &lt;/xhtml:body&gt;
    &lt;/notes&gt;
  ... rest of model ...
&lt;/sbml&gt;
</pre>
   * Contrast the above with the following, self-contained version, which
   * places the XML namespace declaration within the <code>&lt;notes&gt;</code>
   * element itself:
   * <pre class=\'fragment\'>
&lt;sbml xmlns=\'http://www.sbml.org/sbml/level2/version3\' level=\'2\' version=\'3\'&gt;
  &lt;model&gt;
    &lt;notes&gt;
      &lt;html xmlns=\'http://www.w3.org/1999/xhtml\'&gt;
        &lt;head&gt;
          &lt;title/&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;center&gt;&lt;h2&gt;A Simple Mitotic Oscillator&lt;/h2&gt;&lt;/center&gt;
          A minimal cascade model for the mitotic oscillator.&lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    &lt;/notes&gt;
  ... rest of model ...
&lt;/sbml&gt;
</pre>
   <p>
   * Both of the above are valid XML.  The purpose of the <code>sbmlns</code>
   * argument to this method is to allow callers to check the validity of
   * \'notes\' and \'message\' subelements whose XML namespace declarations
   * have been put elsewhere in the manner illustrated above.  Callers can
   * can pass in the {@link SBMLNamespaces} object of a higher-level model
   * component if the {@link XMLNode} object does not itself have the XML namespace
   * declaration for XHTML&nbsp;1.0.
   <p>
   * @param xhtml the {@link XMLNode} to be checked for conformance.
   * @param sbmlns the {@link SBMLNamespaces} associated with the object.
   <p>
   * @return <code>true</code> if the {@link XMLNode} content conforms, <code>false</code> otherwise.
   <p>
   * 
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers SyntaxChecker::isValidInternalSId(std::string sid) "
/** * @internal */ public
";


%javamethodmodifiers SyntaxChecker::isValidInternalUnitSId(std::string sid) "
/** * @internal */ public
";


%javamethodmodifiers SyntaxChecker::isAllowedElement(const XMLNode &node) "
/** * @internal */ public
";


%javamethodmodifiers SyntaxChecker::hasDeclaredNS(const XMLNode &node, const XMLNamespaces* toplevelNS) "
/** * @internal */ public
";


%javamethodmodifiers SyntaxChecker::isCorrectHTMLNode(const XMLNode &node) "
/** * @internal */ public
";


%javamethodmodifiers SyntaxChecker::isUnicodeLetter(std::string::iterator, unsigned int) "
/** * @internal */ public
";


%javamethodmodifiers SyntaxChecker::isUnicodeDigit(std::string::iterator, unsigned int) "
/** * @internal */ public
";


%javamethodmodifiers SyntaxChecker::isCombiningChar(std::string::iterator, unsigned int) "
/** * @internal */ public
";


%javamethodmodifiers SyntaxChecker::isExtender(std::string::iterator, unsigned int) "
/** * @internal */ public
";


%typemap(javaimports) StoichiometryMath "
/** 
 *  Stochiometry expressions in SBML Level 2 reactions.
 <p>
 * <h2>Stoichiometries in SBML Level 2</h2>
 <p>
 * In SBML Level 2, product and reactant stoichiometries can be specified
 * using <em>either</em> the \'stoichiometry\' attribute or a \'stoichiometryMath\'
 * element in a {@link SpeciesReference} object.  The \'stoichiometry\' attribute is
 * of type <code>double</code> and should contain values greater than zero (0).  The
 * \'stoichiometryMath\' element is implemented as an element containing a
 * MathML expression.  These two are mutually exclusive; only one of
 * \'stoichiometry\' or \'stoichiometryMath\' should be defined in a given
 * {@link SpeciesReference} instance.  When neither the attribute nor the element
 * is present, the value of \'stoichiometry\' in the enclosing
 * {@link SpeciesReference} instance defaults to <code>1.</code>
 <p>
 * For maximum interoperability, {@link SpeciesReference}\'s \'stoichiometry\'
 * attribute should be used in preference to \'stoichiometryMath\' when a
 * species\' stoichiometry is a simple scalar number (integer or decimal).
 * When the stoichiometry is a rational number, or when it is a more
 * complicated formula, \'stoichiometryMath\' must be used.  The MathML
 * expression in \'stoichiometryMath\' may also refer to identifiers of
 * entities in a model (except reaction identifiers).  However, the only
 * species identifiers that can be used in \'stoichiometryMath\' are those
 * referenced in the enclosing {@link Reaction}\'s list of reactants, products and
 * modifiers.
 <p>
 * The \'stoichiometry\' attribute and the \'stoichiometryMath\' element, when
 * either is used, is each interpreted as a factor applied to the reaction
 * rate to produce the rate of change of the species identified by the
 * \'species\' attribute in the enclosing {@link SpeciesReference}.  This is the
 * normal interpretation of a stoichiometry, but in SBML, one additional
 * consideration has to be taken into account.  The reaction rate, which is
 * the result of the {@link KineticLaw}\'s \'math\' element, is always in the model\'s
 * <em>substance</em> per <em>time</em> units.  However, the rate of change of the
 * species will involve the species\' <em>substance</em> units (i.e., the units
 * identified by the {@link Species} object\'s \'substanceUnits\' attribute), and
 * these units may be different from the model\'s default <em>substance</em>
 * units.  If the units <em>are</em> different, the stoichiometry must
 * incorporate a conversion factor for converting the model\'s <em>substance</em>
 * units to the species\' <em>substance</em> units.  The conversion factor is
 * assumed to be included in the scalar value of the \'stoichiometry\'
 * attribute if \'stoichiometry\' is used.  If instead \'stoichiometryMath\' is
 * used, then the product of the model\'s \'substance\' units times the
 * \'stoichiometryMath\' units must match the <em>substance</em> units of the
 * species.  Note that in either case, if the species\' units and the
 * model\'s default <em>substance</em> units are the same, the stoichiometry ends
 * up being a dimensionless number and equivalent to the standard chemical
 * stoichiometry found in textbooks.  Examples and more explanations of
 * this are given in the SBML specification.
 <p>
 * The following is a simple example of a species reference for species 
 * <code>\'X0\'</code>, with stoichiometry <code>2</code>, in a list of reactants within a reaction
 * having the identifier <code>\'J1\':</code>
 * <pre class=\'fragment\'>
 &lt;model&gt;
     ...
     &lt;listOfReactions&gt;
         &lt;reaction id=\'J1\'&gt;
             &lt;listOfReactants&gt;
                 &lt;speciesReference species=\'X0\' stoichiometry=\'2\'&gt;
             &lt;/listOfReactants&gt;
             ...
         &lt;/reaction&gt;
         ...
     &lt;/listOfReactions&gt;
     ...
 &lt;/model&gt;
 </pre>
 <p>
 * The following is a more complex example of a species reference for
 * species <code>\'X0\'</code>, with a stoichiometry formula consisting of
 * a rational number:
 * <pre class=\'fragment\'>
 &lt;model&gt;
     ...
     &lt;listOfReactions&gt;
         &lt;reaction id=\'J1\'&gt;
             &lt;listOfReactants&gt;
                 &lt;speciesReference species=\'X0\'&gt;
                     &lt;stoichiometryMath&gt;
                         &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt; 
                             &lt;cn type=\'rational\'&gt; 3 &lt;sep/&gt; 2 &lt;/cn&gt;
                         &lt;/math&gt;
                     &lt;/stoichiometryMath&gt;
                 &lt;/speciesReference&gt;
             &lt;/listOfReactants&gt;
             ...
         &lt;/reaction&gt;
         ...
     &lt;/listOfReactions&gt;
     ...
 &lt;/model&gt;
 </pre>
 <p>
 * Additional discussions of stoichiometries and implications for species
 * and reactions are included in the documentation of {@link SpeciesReference}
 * class.
 <p>
 * <h2>Stoichiometries in SBML Level 3</h2>
 <p>
 * The {@link StoichiometryMath} construct is not defined in SBML Level&nbsp;3
 * Version&nbsp;1 Core.  Instead, Level&nbsp;3 defines the identifier of
 * {@link SpeciesReference} objects as a stand-in for the stoichiometry of the
 * reactant or product being referenced, and allows that identifier to be
 * used elsewhere in SBML models, including (for example) {@link InitialAssignment}
 * objects.  This makes it possible to achieve the same effect as
 * {@link StoichiometryMath}, but with other SBML objects.  For instance, to
 * produce a stoichiometry value that is a rational number, a model can use
 * {@link InitialAssignment} to assign the identifier of a {@link SpeciesReference} object
 * to a MathML expression evaluating to a rational number.  This is
 * analogous to the same way that, in Level&nbsp;2, the model would use
 * {@link StoichiometryMath} with a MathML expression evaluating to a rational
 * number.
 <p>
 * In SBML Level 2, the stoichiometry of a reactant or product is a
 * combination of both a <em>biochemical stoichiometry</em> (meaning, the
 * standard stoichiometry of a species in a reaction) and any necessary
 * unit conversion factors. The introduction of an explicit attribute on
 * the {@link Species} object for a conversion factor allows Level&nbsp;3 to avoid
 * having to overload the meaning of stoichiometry.  In Level&nbsp;3, the
 * stoichiometry given by a {@link SpeciesReference} object in a reaction is a
 * \'proper\' biochemical stoichiometry, meaning a dimensionless number free
 * of unit conversions.
 <p>
 * @see SpeciesReference
 * @see Reaction
 */
"


%javamethodmodifiers StoichiometryMath::StoichiometryMath(unsigned int level, unsigned int version) "
/**
   * Creates a new {@link StoichiometryMath} object using the given SBML <code>level</code>
   * values.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link StoichiometryMath}
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link StoichiometryMath}
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in {@link Reaction} objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
 * available.  Please consult the top of this libSBML {@link StoichiometryMath}
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers StoichiometryMath::StoichiometryMath(SBMLNamespaces* sbmlns) "
/**
   * Creates a new {@link StoichiometryMath} object using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments. 
   <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the given <code>level</code> and <code>version</code> combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent {@link SBMLDocument} object.
   <p>
   * <p>
 * @note The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in {@link Reaction} objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
 * available.  Please consult the top of this libSBML {@link StoichiometryMath}
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.
   */ public
";


%javamethodmodifiers StoichiometryMath::StoichiometryMath(const StoichiometryMath& orig) "
/**
   * Copy constructor; creates a copy of this {@link StoichiometryMath}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers StoichiometryMath::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of {@link StoichiometryMath}.
   <p>
   * @param v the SBMLVisitor instance to be used.
   <p>
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%javamethodmodifiers StoichiometryMath::clone() const "
/**
   * Creates and returns a deep copy of this {@link StoichiometryMath} object.
   <p>
   * @return the (deep) copy of this {@link StoichiometryMath} object.
   */ public
";


%javamethodmodifiers StoichiometryMath::getMath() const "
/**
   * Retrieves the mathematical formula within this {@link StoichiometryMath} and
   * return it as an AST.
   <p>
   * @return the math of this {@link StoichiometryMath}.
   <p>
   * <p>
 * @note The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in {@link Reaction} objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
 * available.  Please consult the top of this libSBML {@link StoichiometryMath}
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   */ public
";


%javamethodmodifiers StoichiometryMath::isSetMath() const "
/**
   * Predicate to test whether the math for this {@link StoichiometryMath} object
   * is set.
   <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this {@link StoichiometryMath} is set, <code>false</code> otherwise.
   <p>
   * <p>
 * @note The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in {@link Reaction} objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
 * available.  Please consult the top of this libSBML {@link StoichiometryMath}
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   */ public
";


%javamethodmodifiers StoichiometryMath::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' expression of this {@link StoichiometryMath} instance to a
   * copy of the given {@link ASTNode}.
   <p>
   * @param math an {@link ASTNode} representing a formula tree.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * <p>
 * @note The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in {@link Reaction} objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
 * available.  Please consult the top of this libSBML {@link StoichiometryMath}
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   */ public
";


%javamethodmodifiers StoichiometryMath::getDerivedUnitDefinition "
/**
   * Calculates and returns a {@link UnitDefinition} object that expresses the
   * units returned by the math expression in this {@link StoichiometryMath}
   * object.
   <p>
   * The units are calculated based on the mathematical expression in the
   * {@link StoichiometryMath} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link StoichiometryMath#getDerivedUnitDefinition()} method returns the
   * calculated units.
   <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math, 
   * or <code>null</code> if one cannot be constructed.
   <p>
   * @warning <span class=\'warning\'>Note that it is possible the \'math\'
   * expression in the {@link StoichiometryMath} instance contains literal numbers or
   * parameters with undeclared units.  In those cases, it is not possible to
   * calculate the units of the overall expression without making
   * assumptions.  LibSBML does not make assumptions about the units, and
   * {@link StoichiometryMath#getDerivedUnitDefinition()} only returns the units as
   * far as it is able to determine them.  For example, in an expression
   * <em>X + Y</em>, if <em>X</em> has unambiguously-defined units and
   * <em>Y</em> does not, it will return the units of <em>X</em>.  When using
   * this method, <strong>it is critical that callers also invoke the
   * method</strong> {@link StoichiometryMath#containsUndeclaredUnits()} <strong>to
   * determine whether this situation holds</strong>.  Callers should take
   * suitable action in those situations.</span>
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers StoichiometryMath::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a {@link UnitDefinition} object that expresses the
   * units returned by the math expression in this {@link StoichiometryMath}
   * object.
   <p>
   * The units are calculated based on the mathematical expression in the
   * {@link StoichiometryMath} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link StoichiometryMath#getDerivedUnitDefinition()} method returns the
   * calculated units.
   <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   <p>
   * @return a {@link UnitDefinition} that expresses the units of the math,
   * or <code>null</code> if one cannot be constructed.
   <p>
   * @warning <span class=\'warning\'>Note that it is possible the \'math\'
   * expression in the {@link StoichiometryMath} instance contains literal numbers or
   * parameters with undeclared units.  In those cases, it is not possible to
   * calculate the units of the overall expression without making
   * assumptions.  LibSBML does not make assumptions about the units, and
   * {@link StoichiometryMath#getDerivedUnitDefinition()} only returns the units as
   * far as it is able to determine them.  For example, in an expression
   * <em>X + Y</em>, if <em>X</em> has unambiguously-defined units and
   * <em>Y</em> does not, it will return the units of <em>X</em>.  When using
   * this method, <strong>it is critical that callers also invoke the
   * method</strong> {@link StoichiometryMath#containsUndeclaredUnits()} <strong>to
   * determine whether this situation holds</strong>.  Callers should take
   * suitable action in those situations.</span>
   <p>
   * @see #containsUndeclaredUnits()
   */ public
";


%javamethodmodifiers StoichiometryMath::containsUndeclaredUnits "
/**
   * Predicate returning <code>true</code> if the math
   * expression of this {@link StoichiometryMath} object contains literal numbers
   * or parameters with undeclared units.
   <p>
   * The {@link StoichiometryMath#getDerivedUnitDefinition()} method returns what
   * libSBML computes the units of the Stoichiometry to be, to the extent
   * that libSBML can compute them.  However, if the expression contains
   * literal numbers or parameters with undeclared units, libSBML may not
   * be able to compute the full units of the expression and will only
   * return what it can compute.  Callers should always use
   * {@link StoichiometryMath#containsUndeclaredUnits()} when using
   * {@link StoichiometryMath#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   <p>
   * @return <code>true</code> if the math expression of this {@link StoichiometryMath}
   * includes numbers/parameters with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link StoichiometryMath#getDerivedUnitDefinition()} may not
   * accurately represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers StoichiometryMath::containsUndeclaredUnits() const "
/**
   * Predicate returning <code>true</code> if the math
   * expression of this {@link StoichiometryMath} object contains literal numbers
   * or parameters with undeclared units.
   <p>
   * The {@link StoichiometryMath#getDerivedUnitDefinition()} method returns what
   * libSBML computes the units of the Stoichiometry to be, to the extent
   * that libSBML can compute them.  However, if the expression contains
   * literal numbers or parameters with undeclared units, libSBML may not
   * be able to compute the full units of the expression and will only
   * return what it can compute.  Callers should always use
   * {@link StoichiometryMath#containsUndeclaredUnits()} when using
   * {@link StoichiometryMath#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   <p>
   * @return <code>true</code> if the math expression of this {@link StoichiometryMath}
   * includes numbers/parameters with undeclared units, <code>false</code> otherwise.
   <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link StoichiometryMath#getDerivedUnitDefinition()} may not
   * accurately represent the units of the expression.
   <p>
   * @see #getDerivedUnitDefinition()
   */ public
";


%javamethodmodifiers StoichiometryMath::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_STOICHIOMETRY_MATH SBML_STOICHIOMETRY_MATH} (default).
   <p>
   * <p>
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
";


%javamethodmodifiers StoichiometryMath::getElementName() const "
/**
   * Returns the XML element name of this object, which for {@link StoichiometryMath}, is
   * always <code>\'stoichiometryMath\'.</code>
   <p>
   * @return the name of this element, i.e., <code>\'stoichiometryMath\'.</code> 
   */ public
";


%javamethodmodifiers StoichiometryMath::getElementPosition() const "
/** * @internal */ public
";


%javamethodmodifiers StoichiometryMath::writeElements(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers StoichiometryMath::hasRequiredElements() const "
/**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link StoichiometryMath} object
   * have been set.
   <p>
   * @note The required elements for a {@link StoichiometryMath} object are:
   * <ul>
   * <li> \'math\'
   *
   * </ul> <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers StoichiometryMath::removeFromParentAndDelete "
/**
   * Finds this {@link StoichiometryMath}\'s {@link SpeciesReference} parent and calls
   * unsetStoichiometryMath() on it, indirectly deleting itself.
   <p>
   * Overridden from the {@link SBase} function since the parent is not a {@link ListOf}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers StoichiometryMath::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers StoichiometryMath::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * <p>
 * Replaces all uses of a given <code>UnitSIdRef</code> type attribute value with
 * another value.
 <p>
 * <p>
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all unit identifier attribute values
 * (including, if appropriate, inside mathematical formulas), comparing the
 * referenced unit identifiers to the value of <code>oldid</code>.  If any matches
 * are found, the matching values are replaced with <code>newid</code>.  The method
 * does <em>not</em> descend into child elements.
 <p>
 * @param oldid the old identifier
 * @param newid the new identifier
   */ public
";


%javamethodmodifiers StoichiometryMath::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers StoichiometryMath::getInternalId() const "
/** * @internal */ public
";


%javamethodmodifiers StoichiometryMath::setInternalId(std::string id) "
/** * @internal */ public
";


%javamethodmodifiers StoichiometryMath::readOtherXML(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers StoichiometryMath::addExpectedAttributes(ExpectedAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers StoichiometryMath::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/** * @internal */ public
";


%javamethodmodifiers StoichiometryMath::readL2Attributes(const XMLAttributes& attributes) "
/** * @internal */ public
";


%javamethodmodifiers StoichiometryMath::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%typemap(javaimports) SBMLNamespaces "
/** 
 *  Set of SBML Level + Version + namespace triples.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * There are differences in the definitions of components between different
 * SBML Levels, as well as Versions within Levels.  For example, the
 * \'sboTerm\' attribute was not introduced until Level&nbsp;2
 * Version&nbsp;2, and then only on certain component classes; the SBML
 * Level&nbsp;2 Version&nbsp;3 specification moved the \'sboTerm\' attribute
 * to the {@link SBase} class, thereby allowing nearly all components to have {@link SBO}
 * annotations.  As a result of differences such as those, libSBML needs to
 * track the SBML Level and Version of every object created.
 <p>
 * The purpose of the {@link SBMLNamespaces} object class is to make it easier to
 * communicate SBML Level and Version data between libSBML constructors and
 * other methods.  The {@link SBMLNamespaces} object class tracks 3-tuples
 * (triples) consisting of SBML Level, Version, and the corresponding SBML
 * XML namespace.
 <p>
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them; however, until the introduction of SBML
 * Level&nbsp;3, the {@link SBMLNamespaces} object only records one SBML
 * Level/Version/namespace combination at a time.  Most constructors for
 * SBML objects in libSBML take a {@link SBMLNamespaces} object as an argument,
 * thereby allowing the constructor to produce the proper combination of
 * attributes and other internal data structures for the given SBML Level
 * and Version.
 */
"


%javamethodmodifiers SBMLNamespaces::SBMLNamespaces(unsigned int level = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION) "
/**
   * Creates a new {@link SBMLNamespaces} object corresponding to the given SBML
   * <code>level</code> and <code>version</code>.
   <p>
   * <p>
 * {@link SBMLNamespaces} objects are used in libSBML to communicate SBML Level and
 * Version data between constructors and other methods.  The {@link SBMLNamespaces}
 * object class holds triples consisting of SBML Level, Version, and the
 * corresponding SBML XML namespace.  Most constructors for SBML objects in
 * libSBML take a {@link SBMLNamespaces} object as an argument, thereby allowing
 * the constructor to produce the proper combination of attributes and
 * other internal data structures for the given SBML Level and Version.
 <p>
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them.  In SBML Levels below Level&nbsp;3, the
 * {@link SBMLNamespaces} object only records one SBML Level/Version/namespace
 * combination at a time.  Most constructors for SBML objects in libSBML
 * take a {@link SBMLNamespaces} object as an argument, thereby allowing the
 * constructor to produce the proper combination of attributes and other
 * internal data structures for the given SBML Level and Version. 
   <p>
   * @param level the SBML level
   * @param version the SBML version
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers SBMLNamespaces::SBMLNamespaces(unsigned int level, unsigned int version, const std::string &pkgName, unsigned int pkgVersion, const std::string& pkgPrefix = "") "
/**
   * (For extensions) Creates a new {@link SBMLNamespaces} object corresponding to
   * the combination of (1) the given SBML <code>level</code> and <code>version</code>, and (2)
   * the given <code>package</code> with the <code>package</code> <code>version</code>.
   <p>
   * <p>
 * {@link SBMLNamespaces} objects are used in libSBML to communicate SBML Level and
 * Version data between constructors and other methods.  The {@link SBMLNamespaces}
 * object class holds triples consisting of SBML Level, Version, and the
 * corresponding SBML XML namespace.  Most constructors for SBML objects in
 * libSBML take a {@link SBMLNamespaces} object as an argument, thereby allowing
 * the constructor to produce the proper combination of attributes and
 * other internal data structures for the given SBML Level and Version.
 <p>
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them.  In SBML Levels below Level&nbsp;3, the
 * {@link SBMLNamespaces} object only records one SBML Level/Version/namespace
 * combination at a time.  Most constructors for SBML objects in libSBML
 * take a {@link SBMLNamespaces} object as an argument, thereby allowing the
 * constructor to produce the proper combination of attributes and other
 * internal data structures for the given SBML Level and Version. 
   <p>
   * @param level   the SBML Level
   * @param version the SBML Version
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   * @param pkgPrefix the prefix of the package namespace (e.g. \'layout\', \'multi\') to be added.
   *        The package\'s name will be used if the given string is empty (default).
   <p>
   * @throws SBMLExtensionException if the extension module that supports the
   * combination of the given SBML Level, SBML Version, package name, and
   * package version has not been registered with libSBML.
   */ public
";


%javamethodmodifiers SBMLNamespaces::SBMLNamespaces(const SBMLNamespaces& orig) "
/**
   * Copy constructor; creates a copy of a {@link SBMLNamespaces}.
   <p>
   * @param orig the {@link SBMLNamespaces} instance to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers SBMLNamespaces::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLNamespaces} object.
   <p>
   * @return the (deep) copy of this {@link SBMLNamespaces} object.
   */ public
";


%javamethodmodifiers SBMLNamespaces::getSBMLNamespaceURI(unsigned int level, unsigned int version) "
/**
   * Returns a string representing the SBML XML namespace for the 
   * given <code>level</code> and <code>version</code> of SBML.
   <p>
   * @param level the SBML level
   * @param version the SBML version
   <p>
   * @return a string representing the SBML namespace that reflects the
   * SBML Level and Version specified.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBMLNamespaces::getSupportedNamespaces "
/**
   * Returns a list of all supported {@link SBMLNamespaces} in this version of 
   * libsbml. 
   <p>
   * @return a list with supported SBML namespaces. 
   <p>
   * 
   */ public
";


%javamethodmodifiers SBMLNamespaces::freeSBMLNamespaces(List * supportedNS) "
/**
   * Frees the list of supported namespaces as generated by
   * getSupportedNamespaces().
   <p>
   * @param supportedNS the list to be freed.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBMLNamespaces::getURI() const "
/**
   * Returns a string representing the SBML XML namespace of this
   * object.
   <p>
   * @return a string representing the SBML namespace that reflects the
   * SBML Level and Version of this object.
   */ public
";


%javamethodmodifiers SBMLNamespaces::getLevel "
/**
   * Get the SBML Level of this {@link SBMLNamespaces} object.
   <p>
   * @return the SBML Level of this {@link SBMLNamespaces} object.
   */ public
";


%javamethodmodifiers SBMLNamespaces::getLevel() const "
/**
   * Get the SBML Level of this {@link SBMLNamespaces} object.
   <p>
   * @return the SBML Level of this {@link SBMLNamespaces} object.
   */ public
";


%javamethodmodifiers SBMLNamespaces::getVersion "
/**
   * Get the SBML Version of this {@link SBMLNamespaces} object.
   <p>
   * @return the SBML Version of this {@link SBMLNamespaces} object.
   */ public
";


%javamethodmodifiers SBMLNamespaces::getVersion() const "
/**
   * Get the SBML Version of this {@link SBMLNamespaces} object.
   <p>
   * @return the SBML Version of this {@link SBMLNamespaces} object.
   */ public
";


%javamethodmodifiers SBMLNamespaces::getNamespaces "
/**
   * Get the XML namespaces list for this {@link SBMLNamespaces} object.
   <p>
   * <p>
 * {@link SBMLNamespaces} objects are used in libSBML to communicate SBML Level and
 * Version data between constructors and other methods.  The {@link SBMLNamespaces}
 * object class holds triples consisting of SBML Level, Version, and the
 * corresponding SBML XML namespace.  Most constructors for SBML objects in
 * libSBML take a {@link SBMLNamespaces} object as an argument, thereby allowing
 * the constructor to produce the proper combination of attributes and
 * other internal data structures for the given SBML Level and Version.
 <p>
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them.  In SBML Levels below Level&nbsp;3, the
 * {@link SBMLNamespaces} object only records one SBML Level/Version/namespace
 * combination at a time.  Most constructors for SBML objects in libSBML
 * take a {@link SBMLNamespaces} object as an argument, thereby allowing the
 * constructor to produce the proper combination of attributes and other
 * internal data structures for the given SBML Level and Version.
   <p>
   * @return the XML namespaces of this {@link SBMLNamespaces} object.
   */ public
";


%javamethodmodifiers SBMLNamespaces::getNamespaces() const "
/**
   * Get the XML namespaces list for this {@link SBMLNamespaces} object.
   <p>
   * <p>
 * {@link SBMLNamespaces} objects are used in libSBML to communicate SBML Level and
 * Version data between constructors and other methods.  The {@link SBMLNamespaces}
 * object class holds triples consisting of SBML Level, Version, and the
 * corresponding SBML XML namespace.  Most constructors for SBML objects in
 * libSBML take a {@link SBMLNamespaces} object as an argument, thereby allowing
 * the constructor to produce the proper combination of attributes and
 * other internal data structures for the given SBML Level and Version.
 <p>
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them.  In SBML Levels below Level&nbsp;3, the
 * {@link SBMLNamespaces} object only records one SBML Level/Version/namespace
 * combination at a time.  Most constructors for SBML objects in libSBML
 * take a {@link SBMLNamespaces} object as an argument, thereby allowing the
 * constructor to produce the proper combination of attributes and other
 * internal data structures for the given SBML Level and Version.
   <p>
   * @return the XML namespaces of this {@link SBMLNamespaces} object.
   */ public
";


%javamethodmodifiers SBMLNamespaces::addNamespaces(const XMLNamespaces * xmlns) "
/**
   * Add the given XML namespaces list to the set of namespaces within this
   * {@link SBMLNamespaces} object.
   <p>
   * The following code gives an example of how one could add the XHTML
   * namespace to the list of namespaces recorded by the top-level
   * <code>&lt;sbml&gt;</code> element of a model.  It gives the new
   * namespace a prefix of <code>html</code>.
   <p>
<pre class=\'fragment\'>
{@link SBMLDocument} sd;
try
{
    sd = new {@link SBMLDocument}(3, 1);
}
catch (SBMLConstructorException e)
{
    // Here, have code to handle a truly exceptional situation. Candidate
    // causes include invalid combinations of SBML Level and Version
    // (impossible if hardwired as given here), running out of memory, and
    // unknown system exceptions.
}

{@link SBMLNamespaces} sn = sd.getNamespaces();
if (sn != null)
{
    sn.add(\'http://www.w3.org/1999/xhtml\', \'html\');
}
else
{
    // Handle another truly exceptional situation.
 }
</pre>
<p>
   * @param xmlns the XML namespaces to be added.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLNamespaces::addNamespace(const std::string& uri, const std::string &prefix) "
/**
   * Add an XML namespace (a pair of URI and prefix) to the set of namespaces
   * within this {@link SBMLNamespaces} object.
   <p>
   * @param uri    the XML namespace to be added.
   * @param prefix the prefix of the namespace to be added.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLNamespaces::removeNamespace(const std::string& uri) "
/**
   * Removes an XML namespace from the set of namespaces within this 
   * {@link SBMLNamespaces} object.
   <p>
   * @param uri    the XML namespace to be added.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLNamespaces::addPackageNamespace(const std::string &pkgName, unsigned int pkgVersion, const std::string &prefix = "") "
/**
   * Add an XML namespace (a pair of URI and prefix) of a package extension
   * to the set of namespaces within this {@link SBMLNamespaces} object.
   <p>
   * The SBML Level and SBML Version of this object is used.
   <p>
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   * @param prefix the prefix of the package namespace to be added.
   *        The package\'s name will be used if the given string is empty (default).
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note An XML namespace of a non-registered package extension can\'t be
   * added by this function ({@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE} 
   * will be returned).
   <p>
   * @see #addNamespace(String, String)
   */ public
";


%javamethodmodifiers SBMLNamespaces::addPackageNamespaces(const XMLNamespaces* xmlns) "
/**
   * Add the XML namespaces of package extensions in the given XMLNamespace
   * object to the set of namespaces within this {@link SBMLNamespaces} object
   * (Non-package XML namespaces are not added by this function).
   <p>
   * @param xmlns the XML namespaces to be added.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note XML namespaces of a non-registered package extensions are not
   * added (just ignored) by this function. {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE} will be returned if the given
   * xmlns is null.
   */ public
";


%javamethodmodifiers SBMLNamespaces::removePackageNamespace(unsigned int level, unsigned version, const std::string &pkgName, unsigned int pkgVersion) "
/**
   * Removes an XML namespace of a package extension from the set of namespaces 
   * within this {@link SBMLNamespaces} object.
   <p>
   * @param level   the SBML level
   * @param version the SBML version
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLNamespaces::addPkgNamespace(const std::string &pkgName, unsigned int pkgVersion, const std::string &prefix = "") "
/** * @internal */ public
";


%javamethodmodifiers SBMLNamespaces::addPkgNamespaces(const XMLNamespaces* xmlns) "
/** * @internal */ public
";


%javamethodmodifiers SBMLNamespaces::removePkgNamespace(unsigned int level, unsigned version, const std::string &pkgName, unsigned int pkgVersion) "
/** * @internal */ public
";


%javamethodmodifiers SBMLNamespaces::isSBMLNamespace(const std::string& uri) "
/**
   * Predicate returning <code>true</code> if the given URL is one of SBML XML
   * namespaces.
   <p>
   * @param uri the URI of namespace
   <p>
   * @return <code>true</code> if the \'uri\' is one of SBML namespaces, <code>false</code> otherwise.
   <p>
   * 
   */ public
";


%javamethodmodifiers SBMLNamespaces::isValidCombination "
/**
   * Predicate returning <code>true</code> if the given set of namespaces represent a
   * valid set
   <p>
   * @return <code>true</code> if the set of namespaces is valid, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLNamespaces::setLevel(unsigned int level) "
/** * @internal */ public
";


%javamethodmodifiers SBMLNamespaces::setVersion(unsigned int version) "
/** * @internal */ public
";


%javamethodmodifiers SBMLNamespaces::setNamespaces(XMLNamespaces * xmlns) "
/** * @internal */ public
";


%javamethodmodifiers SBMLNamespaces::getPackageName() const "
/**
   * Returns the name of the main package for this namespace.
   <p>
   * @return the name of the main package for this namespace.
   * \'core\' will be returned if this namespace is defined in the SBML 
   * core. 
   */ public
";


%javamethodmodifiers SBMLNamespaces::initSBMLNamespace "
/** * @internal */ public
";


%typemap(javaimports) SBMLTransforms "
/** 
 *  Methods for transform elements of SBML
 <p>
 * @internal
 */
"


%javamethodmodifiers SBMLTransforms::replaceFD(ASTNode * math, const FunctionDefinition * fd, const IdList* idsToExclude = NULL) "
/** * @internal */ public
";


%javamethodmodifiers SBMLTransforms::replaceFD(ASTNode * math, const ListOfFunctionDefinitions * lofd, const IdList* idsToExclude = NULL) "
/** * @internal */ public
";


%javamethodmodifiers SBMLTransforms::expandInitialAssignments(Model * m) "
/** * @internal */ public
";


%javamethodmodifiers SBMLTransforms::evaluateASTNode(const ASTNode * node, const Model * m = NULL) "
/** * @internal */ public
";


%typemap(javaimports) SBMLConstructorException "
/** 
 *  Exceptions thrown by some libSBML constructors.
 <p>
 * In some situations, constructors for SBML objects may need to indicate to
 * callers that the creation of the object failed.  The failure may be for
 * different reasons, such as an attempt to use invalid parameters or a
 * system condition such as a memory error.  To communicate this to callers,
 * those classes will throw an {@link SBMLConstructorException}.
 <p>
 * In languages that don\'t have an exception mechanism (e.g., C), the
 * constructors generally try to return an error code instead of throwing
 * an exception.
 */
"


%javamethodmodifiers SBMLConstructorException::SBMLConstructorException(std::string errmsg = "") "
/** * @internal */ public
";


%javamethodmodifiers SBMLConstructorException::SBMLConstructorException(std::string errmsg, std::string sbmlErrMsg) "
/** * @internal */ public
";


%javamethodmodifiers SBMLConstructorException::SBMLConstructorException(std::string elementName, SBMLNamespaces* xmlns) "
/** * @internal */ public
";


%javamethodmodifiers SBMLConstructorException::getSBMLErrMsg() const "
/**
   * Returns the message associated with this SBML exception.
   <p>
   * @return the message string.
   */ public
";


%typemap(javaimports) ConversionOption "
/** 
 *  A single configuration setting for an SBML converter.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * LibSBML provides a number of converters that can perform transformations
 * on SBML documents.  These converters allow their behaviors to be
 * controlled by setting property values.  Converter properties are
 * communicated using objects of class {@link ConversionProperties}, and within
 * such objects, individual options are encapsulated using {@link ConversionOption}
 * objects.
 <p>
 * A {@link ConversionOption} object consists of
 * four parts:
 * <ul>
 * <li> A <em>key</em>, acting as the name of the option.
 * <li> A <em>value</em> of this option.
 * <li> A <em>type</em> for the value; the type code is chosen from a set of integer constants whose names all
 * begin with the prefix <code>CNV_TYPE_</code>.  (See the separate <a
 * class=\'el\' href=\'#ConversionOptionType_t\'>subsection</a> below for more
 * information.)
 * <li> A <em>description</em> consisting of a text string that describes the
 * option in some way.
 *
 * </ul> <p>
 * There are no constraints on the values of keys or descriptions;
 * authors of SBML converters are free to choose them as they see fit.
 <p>
 * <h2>Conversion option data types</h2>
 <p>
 * An option in {@link ConversionOption} must have a data type declared, to
 * indicate whether it is a string value, an integer, and so forth.  The
 * possible types of values are taken from
 * a set of
 * constants whose symbol names begin with the prefix
 * <code>CNV_TYPE_</code>. The following are the possible values:
 <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'normal-font\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <td><strong>Enumerator</strong></td>
 *      <td><strong>Meaning</strong></td>
 *  </tr>
 * <tr>
 * <td><code>{@link libsbmlConstants#CNV_TYPE_BOOL CNV_TYPE_BOOL}</code></td>
 * <td>Indicates the value type is a Boolean.</td>
 * </tr>
 * <tr>
 * <td><code>{@link libsbmlConstants#CNV_TYPE_DOUBLE CNV_TYPE_DOUBLE}</code></td>
 * <td>Indicates the value type is a double-sized float.</td>
 * </tr>
 * <tr>
 * <td><code>{@link libsbmlConstants#CNV_TYPE_INT CNV_TYPE_INT}</code></td>
 * <td>Indicates the value type is an integer.</td>
 * </tr>
 * <tr>
 * <td><code>{@link libsbmlConstants#CNV_TYPE_SINGLE CNV_TYPE_SINGLE}</code></td>
 * <td>Indicates the value type is a float.</td>
 * </tr>
 * <tr>
  * <td><code>{@link libsbmlConstants#CNV_TYPE_STRING CNV_TYPE_STRING}</code></td>
 * <td>Indicates the value type is a string.</td>
 * </tr>
 * </table>
 * </center>
 <p>
 * @see ConversionProperties
 */
"


%javamethodmodifiers ConversionOption::ConversionOption(const std::string& key, const std::string& value="", ConversionOptionType_t type=CNV_TYPE_STRING, const std::string& description="") "
/**
   * Creates a new {@link ConversionOption}.
   <p>
   * This is the general constructor, taking arguments for all aspects of
   * an option.  Other constructors exist with different arguments.
   <p>
   * <p>
 * The conversion <code>type</code> argument value must be one of
 * the constants whose names begin
 * with the characters <code>CNV_TYPE_</code> in the interface class
 * {@link libsbmlConstants}.
   <p>
   * @param key the key for this option
   * @param value an optional value for this option
   * @param type the type of this option
   * @param description the description for this option
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionOption::ConversionOption(const std::string& key, const char* value, const std::string& description="") "
/**
   * Creates a new {@link ConversionOption} specialized for string-type options.
   <p>
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionOption::ConversionOption(const std::string& key, bool value, const std::string& description="") "
/**
   * Creates a new {@link ConversionOption} specialized for Boolean-type options.
   <p>
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionOption::ConversionOption(const std::string& key, double value, const std::string& description="") "
/**
   * Creates a new {@link ConversionOption} specialized for double-type options.
   <p>
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionOption::ConversionOption(const std::string& key, float value, const std::string& description="") "
/**
   * Creates a new {@link ConversionOption} specialized for float-type options.
   <p>
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionOption::ConversionOption(const std::string& key, int value, const std::string& description="") "
/**
   * Creates a new {@link ConversionOption} specialized for integer-type options.
   <p>
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionOption::ConversionOption(const ConversionOption& orig) "
/**
   * Copy constructor; creates a copy of an {@link ConversionOption} object.
   <p>
   * @param orig the {@link ConversionOption} object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers ConversionOption::clone() const "
/**
   * Creates and returns a deep copy of this {@link ConversionOption} object.
   <p>
   * @return the (deep) copy of this {@link ConversionOption} object.
   */ public
";


%javamethodmodifiers ConversionOption::getKey() const "
/**
   * Returns the key for this option.
   <p>
   * @return the key, as a string.
   */ public
";


%javamethodmodifiers ConversionOption::setKey(const std::string& key) "
/**
   * Sets the key for this option.
   <p>
   * @param key a string representing the key to set.
   */ public
";


%javamethodmodifiers ConversionOption::getValue() const "
/**
   * Returns the value of this option.
   <p>
   * @return the value of this option, as a string.
   */ public
";


%javamethodmodifiers ConversionOption::setValue(const std::string& value) "
/**
   * Sets the value for this option.
   <p>
   * @param value the value to set, as a string.
   */ public
";


%javamethodmodifiers ConversionOption::getDescription() const "
/**
   * Returns the description string for this option.
   <p>
   * @return the description of this option.
   */ public
";


%javamethodmodifiers ConversionOption::setDescription(const std::string& description) "
/**
   * Sets the description text for this option.
   <p>
   * @param description the description to set for this option.
   */ public
";


%javamethodmodifiers ConversionOption::getType() const "
/**
   * Returns the type of this option
   <p>
   * @return the type of this option.
   */ public
";


%javamethodmodifiers ConversionOption::setType(ConversionOptionType_t type) "
/**
   * Sets the type of this option.
   <p>
   * <p>
 * The conversion <code>type</code> argument value must be one of
 * the constants whose names begin
 * with the characters <code>CNV_TYPE_</code> in the interface class
 * {@link libsbmlConstants}.
   <p>
   * @param type the type value to use.
   */ public
";


%javamethodmodifiers ConversionOption::getBoolValue() const "
/**
   * Returns the value of this option as a Boolean.
   <p>
   * @return the value of this option.
   */ public
";


%javamethodmodifiers ConversionOption::setBoolValue(bool value) "
/**
   * Set the value of this option to a given Boolean value.
   <p>
   * Invoking this method will also set the type of the option to
   * {@link libsbmlConstants#CNV_TYPE_BOOL CNV_TYPE_BOOL}.
   <p>
   * @param value the Boolean value to set
   */ public
";


%javamethodmodifiers ConversionOption::getDoubleValue() const "
/**
   * Returns the value of this option as a <code>double.</code>
   <p>
   * @return the value of this option.
   */ public
";


%javamethodmodifiers ConversionOption::setDoubleValue(double value) "
/**
   * Set the value of this option to a given <code>double</code> value.
   <p>
   * Invoking this method will also set the type of the option to
   * {@link libsbmlConstants#CNV_TYPE_DOUBLE CNV_TYPE_DOUBLE}.
   <p>
   * @param value the value to set
   */ public
";


%javamethodmodifiers ConversionOption::getFloatValue() const "
/**
   * Returns the value of this option as a <code>float.</code>
   <p>
   * @return the value of this option as a float
   */ public
";


%javamethodmodifiers ConversionOption::setFloatValue(float value) "
/**
   * Set the value of this option to a given <code>float</code> value.
   <p>
   * Invoking this method will also set the type of the option to
   * {@link libsbmlConstants#CNV_TYPE_SINGLE CNV_TYPE_SINGLE}.
   <p>
   * @param value the value to set
   */ public
";


%javamethodmodifiers ConversionOption::getIntValue() const "
/**
   * Returns the value of this option as an <code>integer.</code>
   <p>
   * @return the value of this option, as an int
   */ public
";


%javamethodmodifiers ConversionOption::setIntValue(int value) "
/**
   * Set the value of this option to a given <code>int</code> value.
   <p>
   * Invoking this method will also set the type of the option to
   * {@link libsbmlConstants#CNV_TYPE_INT CNV_TYPE_INT}.
   <p>
   * @param value the value to set
   */ public
";


%typemap(javaimports) ConversionProperties "
/** 
 *  Set of configuration option values for a converter.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * LibSBML provides a number of converters that can perform transformations
 * on SBML documents. The properties of SBML converters are communicated
 * using objects of class {@link ConversionProperties}, and within such objects,
 * individual options are encapsulated using {@link ConversionOption} objects.  The
 * {@link ConversionProperties} class provides numerous methods for setting and
 * getting options.
 <p>
 * {@link ConversionProperties} objects are also used to determine the target SBML
 * namespace when an SBML converter\'s behavior depends on the intended
 * Level+Version combination of SBML.  In addition, it is conceivable that
 * conversions may be affected by SBML Level&nbsp;3 packages being used by an
 * SBML document; consequently, the packages in use are also communicated by
 * the values of the SBML namespaces set on a {@link ConversionProperties} object.
 <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 <p>
 * @see ConversionOption
 * @see SBMLNamespaces
 */
"


%javamethodmodifiers ConversionProperties::ConversionProperties(SBMLNamespaces* targetNS=NULL) "
/**
   * Constructor that initializes the conversion properties
   * with a specific SBML target namespace.
   <p>
   * @param targetNS the target namespace to convert to
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionProperties::ConversionProperties(const ConversionProperties& orig) "
/**
   * Copy constructor.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers ConversionProperties::clone() const "
/**
   * Creates and returns a deep copy of this {@link ConversionProperties} object.
   <p>
   * @return the (deep) copy of this {@link ConversionProperties} object.
   */ public
";


%javamethodmodifiers ConversionProperties::getTargetNamespaces() const "
/**
   * Returns the current target SBML namespace.
   <p>
   * @return the SBMLNamepaces object expressing the target namespace.
   */ public
";


%javamethodmodifiers ConversionProperties::hasTargetNamespaces() const "
/**
   * Returns <code>true</code> if the target SBML namespace has been set.
   <p>
   * @return <code>true</code> if the target namespace has been set, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers ConversionProperties::setTargetNamespaces(SBMLNamespaces *targetNS) "
/**
   * Sets the target namespace.
   <p>
   * @param targetNS the target namespace to use.
   */ public
";


%javamethodmodifiers ConversionProperties::getDescription(const std::string& key) const "
/**
   * Returns the description string for a given option in this properties
   * object.
   <p>
   * @param key the key for the option.
   <p>
   * @return the description text of the option with the given key.
   */ public
";


%javamethodmodifiers ConversionProperties::getType(const std::string& key) const "
/**
   * Returns the type of a given option in this properties object.
   <p>
   * @param key the key for the option.
   <p>
   * @return the type of the option with the given key.
   */ public
";


%javamethodmodifiers ConversionProperties::getOption(const std::string& key) const "
/**
   * Returns the {@link ConversionOption} object for a given key.
   <p>
   * @param key the key for the option.
   <p>
   * @return the option with the given key.
   */ public
";


%javamethodmodifiers ConversionProperties::getOption(int index) const "
/**
   * Returns the {@link ConversionOption} object for the given index.
   <p>
   * @param index the index for the option.
   <p>
   * @return the option with the given index.
   */ public
";


%javamethodmodifiers ConversionProperties::addOption(const ConversionOption& option) "
/**
   * Adds a copy of the given option to this properties object.
   <p>
   * @param option the option to add
   */ public
";


%javamethodmodifiers ConversionProperties::addOption(const std::string& key, const std::string& value="", ConversionOptionType_t type=CNV_TYPE_STRING, const std::string& description="") "
/**
   * Adds a new {@link ConversionOption} object with the given parameters.
   <p>
   * @param key the key for the new option
   * @param value (optional) the value of that option
   * @param type (optional) the type of the option (see the documentation
   * for {@link ConversionOption} for more information about the types)
   * @param description (optional) the description for the option
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionProperties::addOption(const std::string& key, const char* value, const std::string& description="") "
/**
   * Adds a new {@link ConversionOption} object with the given parameters.
   <p>
   * @param key the key for the new option
   * @param value the string value of that option
   * @param description (optional) the description for the option
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionProperties::addOption(const std::string& key, bool value, const std::string& description="") "
/**
   * Adds a new {@link ConversionOption} object with the given parameters.
   <p>
   * @param key the key for the new option
   * @param value the boolean value of that option
   * @param description (optional) the description for the option
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionProperties::addOption(const std::string& key, double value, const std::string& description="") "
/**
   * Adds a new {@link ConversionOption} object with the given parameters.
   <p>
   * @param key the key for the new option
   * @param value the double value of that option
   * @param description (optional) the description for the option
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionProperties::addOption(const std::string& key, float value, const std::string& description="") "
/**
   * Adds a new {@link ConversionOption} object with the given parameters.
   <p>
   * @param key the key for the new option
   * @param value the float value of that option
   * @param description (optional) the description for the option
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionProperties::addOption(const std::string& key, int value, const std::string& description="") "
/**
   * Adds a new {@link ConversionOption} object with the given parameters.
   <p>
   * @param key the key for the new option
   * @param value the integer value of that option
   * @param description (optional) the description for the option
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ConversionProperties::removeOption(const std::string& key) "
/**
   * Removes the option with the given key from this properties object.
   <p>
   * @param key the key for the new option to remove
   * @return the removed option
   */ public
";


%javamethodmodifiers ConversionProperties::hasOption(const std::string& key) const "
/**
   * Returns <code>true</code> if this properties object contains an option with
   * the given key.
   <p>
   * @param key the key of the option to find.
   <p>
   * @return <code>true</code> if an option with the given <code>key</code> exists in
   * this properties object, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ConversionProperties::getValue(const std::string& key) const "
/**
   * Returns the value of the given option as a string.
   <p>
   * @param key the key for the option.
   <p>
   * @return the string value of the option with the given key.
   */ public
";


%javamethodmodifiers ConversionProperties::setValue(const std::string& key, const std::string& value) "
/**
   * Sets the value of the given option to a string.
   <p>
   * @param key the key for the option
   * @param value the new value
   */ public
";


%javamethodmodifiers ConversionProperties::getBoolValue(const std::string& key) const "
/**
   * Returns the value of the given option as a Boolean.
   <p>
   * @param key the key for the option.
   <p>
   * @return the boolean value of the option with the given key.
   */ public
";


%javamethodmodifiers ConversionProperties::setBoolValue(const std::string& key, bool value) "
/**
   * Sets the value of the given option to a Boolean.
   <p>
   * @param key the key for the option.
   <p>
   * @param value the new Boolean value.
   */ public
";


%javamethodmodifiers ConversionProperties::getDoubleValue(const std::string& key) const "
/**
   * Returns the value of the given option as a <code>double.</code>
   <p>
   * @param key the key for the option.
   <p>
   * @return the double value of the option with the given key.
   */ public
";


%javamethodmodifiers ConversionProperties::setDoubleValue(const std::string& key, double value) "
/**
   * Sets the value of the given option to a <code>double.</code>
   <p>
   * @param key the key for the option.
   <p>
   * @param value the new double value.
   */ public
";


%javamethodmodifiers ConversionProperties::getFloatValue(const std::string& key) const "
/**
   * Returns the value of the given option as a <code>float.</code>
   <p>
   * @param key the key for the option.
   <p>
   * @return the float value of the option with the given key.
   */ public
";


%javamethodmodifiers ConversionProperties::setFloatValue(const std::string& key, float value) "
/**
   * Sets the value of the given option to a <code>float.</code>
   <p>
   * @param key the key for the option.
   <p>
   * @param value the new float value.
   */ public
";


%javamethodmodifiers ConversionProperties::getIntValue(const std::string& key) const "
/**
   * Returns the value of the given option as an integer.
   <p>
   * @param key the key for the option.
   <p>
   * @return the int value of the option with the given key.
   */ public
";


%javamethodmodifiers ConversionProperties::setIntValue(const std::string& key, int value) "
/**
   * Sets the value of the given option to an integer.
   <p>
   * @param key the key for the option.
   <p>
   * @param value the new integer value.
   */ public
";


%javamethodmodifiers ConversionProperties::getNumOptions() const "
/** 
   * Returns the number of options in this Conversion Properties object
   <p>
   * @return the number of options in this properties object
   */ public
";


%typemap(javaimports) SBMLConverter "
/** 
 *  Base class for SBML converters.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * The {@link SBMLConverter} class is the base class for the various SBML 
 * <em>converters</em>: classes of objects that transform or convert SBML documents.
 * These transformations can involve essentially anything that can be written
 * algorithmically; examples include converting the units of measurement in a
 * model, or converting from one Level+Version combination of SBML to
 * another.  Applications can also create their own converters by subclassing
 * {@link SBMLConverter} and following the examples of the existing converters.
 <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLConverter::SBMLConverter "
/**
   * Creates a new {@link SBMLConverter} object.
   */ public
";


%javamethodmodifiers SBMLConverter::SBMLConverter(const std::string& name) "
/**
   * Creates a new {@link SBMLConverter} object with a given name.
   <p>
   * @param name the name for the converter to create
   */ public
";


%javamethodmodifiers SBMLConverter::SBMLConverter(const SBMLConverter& orig) "
/**
   * Copy constructor.
   <p>
   * This creates a copy of an {@link SBMLConverter} object.
   <p>
   * @param orig the {@link SBMLConverter} object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers SBMLConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLConverter} object.
   <p>
   * @return the (deep) copy of this {@link SBMLConverter} object.
   */ public
";


%javamethodmodifiers SBMLConverter::getDocument "
/**
   * Returns the SBML document that is the subject of the conversions.
   <p>
   * @return the current {@link SBMLDocument} object.
   */ public
";


%javamethodmodifiers SBMLConverter::getDocument() const "
/**
   * Returns the SBML document that is the subject of the conversions.
   <p>
   * @return the current {@link SBMLDocument} object.
   */ public
";


%javamethodmodifiers SBMLConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.  The run-time properties of the converter object can
   * be adjusted by using the method
   * {@link SBMLConverter#setProperties(ConversionProperties props)}.
   <p>
   * @return the default properties for the converter.
   <p>
   * @see #setProperties(ConversionProperties)
   * @see #matchesProperties(ConversionProperties)
   */ public
";


%javamethodmodifiers SBMLConverter::getTargetNamespaces "
/**
   * Returns the target SBML namespaces of the currently set properties.
   <p>
   * SBML namespaces are used by libSBML to express the Level+Version of the
   * SBML document (and, possibly, any SBML Level&nbsp;3 packages in
   * use). Some converters\' behavior is affected by the SBML namespace
   * configured in the converter.  For example, in {@link SBMLLevelVersionConverter}
   * (the converter for converting SBML documents from one Level+Version
   * combination to another), the actions are fundamentally dependent on the
   * SBML namespaces targeted.
   <p>
   * @return the {@link SBMLNamespaces} object that describes the SBML namespaces
   * in effect, or <code>null</code> if none are set.
   */ public
";


%javamethodmodifiers SBMLConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter matches the given properties.
   <p>
   * Given a {@link ConversionProperties} object <code>props</code>, this method checks that 
   * <code>props</code> possesses an option value to enable this converter.  If it does,
   * this method returns <code>true.</code>
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if the properties <code>props</code> would match the necessary
   * properties for this type of converter, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLConverter::setDocument(const SBMLDocument* doc) "
/**
   * Sets the SBML document to be converted.
   <p>
   * @param doc the document to use for this conversion.
   <p>
   * @return integer value indicating the success/failure of the operation.
   *  The set of possible values that may
   * be returned ultimately depends on the specific subclass of
   * {@link SBMLConverter} being used, but the default method can return the
   * following:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> */ public
";


%javamethodmodifiers SBMLConverter::setDocument(SBMLDocument* doc) "
/**
   * Sets the SBML document to be converted.
   <p>
   * @param doc the document to use for this conversion.
   <p>
   * @return integer value indicating the success/failure of the operation.
   *  The set of possible values that may
   * be returned ultimately depends on the specific subclass of
   * {@link SBMLConverter} being used, but the default method can return the
   * following:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLConverter::setProperties(const ConversionProperties *props) "
/**
   * Sets the configuration properties to be used by this converter.
   <p>
   * @param props the {@link ConversionProperties} object defining the properties
   * to set.
   <p>
   * @return integer value indicating the success/failure of the operation.
   *  The set of possible values that may
   * be returned ultimately depends on the specific subclass of
   * {@link SBMLConverter} being used, but the default method can return the
   * following values:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #getProperties()
   * @see #matchesProperties(ConversionProperties)
   */ public
";


%javamethodmodifiers SBMLConverter::getProperties() const "
/**
   * Returns the current properties in effect for this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the current properties for this converter; in other words, the
   * settings in effect at this moment.  To change the property values, you
   * can use {@link SBMLConverter#setProperties(ConversionProperties props)}.
   <p>
   * @return the currently set configuration properties.
   <p>
   * @see #setProperties(ConversionProperties)
   * @see #matchesProperties(ConversionProperties)
   */ public
";


%javamethodmodifiers SBMLConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * @return  integer value indicating the success/failure of the operation.
   *  The set of possible values that may
   * be returned depends on the converter subclass; please consult
   * the documentation for the relevant class to find out what the
   * possibilities are.
   */ public
";


%javamethodmodifiers SBMLConverter::getName() const "
/**
   * Returns the name of this converter.
   <p>
   * @return a string, the name of this converter.
   */ public
";


%typemap(javaimports) SBMLConverterRegistry "
/** 
 *  Registry of all libSBML SBML converters.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * LibSBML provides facilities for transforming and converting SBML
 * documents in various ways.  These transformations can involve
 * essentially anything that can be written algorithmically; examples
 * include converting the units of measurement in a model, or converting
 * from one Level+Version combination of SBML to another.  Converters are
 * implemented as objects derived from the class {@link SBMLConverter}.
 <p>
 * The converter registry, implemented as a singleton object of class
 * {@link SBMLConverterRegistry}, maintains a list of known converters and provides
 * methods for discovering them.  Callers can use the method
 * {@link SBMLConverterRegistry#getNumConverters()} to find out how many
 * converters are registered, then use
 * {@link SBMLConverterRegistry#getConverterByIndex(int)} to
 * iterate over each one; alternatively, callers can use
 * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
 * to search for a converter having specific properties.
 */
"


%javamethodmodifiers SBMLConverterRegistry::getInstance "
/**
   * Returns the singleton instance for the converter registry.
   <p>
   * Prior to using the registry, callers have to obtain a copy of the
   * registry.  This static method provides the means for doing that.
   <p>
   * @return the singleton for the converter registry.
   */ public
";


%javamethodmodifiers SBMLConverterRegistry::addConverter(const SBMLConverter* converter) "
/**
   * Adds the given converter to the registry of SBML converters.
   <p>
   * @param converter the converter to add to the registry.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLConverterRegistry::getConverterByIndex(int index) const "
/**
   * Returns the converter with the given index number.
   <p>
   * Converters are given arbitrary index numbers by the registry.  Callers
   * can use the method {@link SBMLConverterRegistry#getNumConverters()} to find
   * out how many converters are registered, then use this method to
   * iterate over the list and obtain each one in turn.
   <p>
   * @param index the zero-based index of the converter to fetch.
   <p>
   * @return the converter with the given index number, or <code>null</code> if the
   * number is less than <code>0</code> or there is no converter at the given index
   * position.
   */ public
";


%javamethodmodifiers SBMLConverterRegistry::getConverterFor(const ConversionProperties& props) const "
/**
   * Returns the converter that best matches the given configuration
   * properties.
   <p>
   * Many converters provide the ability to configure their behavior.  This
   * is realized through the use of <em>properties</em> that offer different 
   * <em>options</em>.  The present method allows callers to search for converters
   * that have specific property values.  Callers can do this by creating a
   * {@link ConversionProperties} object, adding the desired option(s) to the
   * object, then passing the object to this method.
   <p>
   * @param props a {@link ConversionProperties} object defining the properties
   * to match against.
   <p>
   * @return the converter matching the properties, or <code>null</code> if no
   * suitable converter is found.
   <p>
   * @see #getConverterByIndex(int)
   */ public
";


%javamethodmodifiers SBMLConverterRegistry::getNumConverters() const "
/**
   * Returns the number of converters known by the registry.
   <p>
   * @return the number of registered converters.
   <p>
   * @see #getConverterByIndex(int)
   */ public
";


%javamethodmodifiers SBMLConverterRegistry::SBMLConverterRegistry "
/** * @internal */ public
";


%typemap(javaimports) SBMLFunctionDefinitionConverter "
/** 
 *  Converter to expand user-defined functions in-line.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This converter manipulates user-defined functions in an SBML file.  When
 * invoked on a model, it performs the following operations:
 <p>
 * <ul>
 * <li> Reads the list of user-defined functions in the model (i.e., the list
 * of {@link FunctionDefinition} objects);
 * <li> Looks for invocations of the function in mathematical expressions
 * throughout the model; and
 * <li> For each invocation found, replaces the invocation with a in-line copy
 * of the function\'s body, similar to how macro expansions might be performed
 * in scripting and programming languages.
 *
 * </ul> <p>
 * For example, suppose the model contains a function definition
 * representing the function <code>f(x, y) = x * y</code>.  Further
 * suppose this functions invoked somewhere else in the model, in
 * a mathematical formula, as <code>f(s, p)</code>.  The outcome of running
 * {@link SBMLFunctionDefinitionConverter} on the model will be to replace
 * the call to <code>f</code> with the expression <code>s * p</code>.
 <p>
 * <h2>Configuration and use of {@link SBMLFunctionDefinitionConverter}</h2>
 <p>
 * {@link SBMLFunctionDefinitionConverter} is enabled by creating a
 * {@link ConversionProperties} object with the option 
 * <code>\'expandFunctionDefinitions\'</code>, and passing this properties object to
 * {@link SBMLDocument#convert(ConversionProperties)}.
 * The converter accepts one option:
 <p>
 * <ul>
 * <li> <code>\'skipIds\':</code> if set, it should be a string containing a
 * comma-separated list of identifiers (SBML \'id\' values) that are to be
 * skipped during function conversion.  Functions whose identifiers are
 * found in this list will not be converted.
 *
 * </ul> <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLFunctionDefinitionConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLFunctionDefinitionConverter::SBMLFunctionDefinitionConverter "
/**
   * Creates a new {@link SBMLFunctionDefinitionConverter} object.
   */ public
";


%javamethodmodifiers SBMLFunctionDefinitionConverter::SBMLFunctionDefinitionConverter(const SBMLFunctionDefinitionConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLFunctionDefinitionConverter}
   * object.
   <p>
   * @param obj the {@link SBMLFunctionDefinitionConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLFunctionDefinitionConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLFunctionDefinitionConverter}
   * object.
   <p>
   * @return a (deep) copy of this converter.
   */ public
";


%javamethodmodifiers SBMLFunctionDefinitionConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLFunctionDefinitionConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLFunctionDefinitionConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_INVALID_SRC_DOCUMENT LIBSBML_CONV_INVALID_SRC_DOCUMENT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLFunctionDefinitionConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%javamethodmodifiers SBMLFunctionDefinitionConverter::expandFD_errors(unsigned int errors) "
/** * @internal */ public
";


%typemap(javaimports) SBMLIdConverter "
/** 
 *  Converter for replacing object identifiers.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This converter translates all instances of a given identifier (i.e., SBML object \'id\'
 * attribute value) of type \'SId\' in a {@link Model} to another identifier.  It does this based on a list of source
 * identifiers, translating each one to its corresponding replacement value
 * in a list of replacement identifiers.  It also updates all references to
 * the identifiers so replaced.  (More technically, it replaces all values
 * known as type <code>SIdRef</code> in the SBML Level&nbsp;3 specifications.)
 <p>
 * This converter only searches the global SId namespace for the {@link Model} child of the 
 * {@link SBMLDocument}.  It does not replace any IDs or SIdRefs for LocalParameters, nor
 * does it replace any UnitSIds or UnitSIdRefs.  It likewise does not replace any IDs
 * in a new namespace introduced by a package, such as the PortSId namespace
 * from the Hierarchical Model Composition package, nor any {@link Model} objects that are
 * not the direct child of the {@link SBMLDocument}, such as the ModelDefinitions from 
 * the Hierarchical Model Composition package.
 <p>
 * If, however, a package introduces a new element with an \'id\' attribute
 * of type SId, any attribute of type SIdRef, or child of type SIdRef (such as 
 * a new Math child of a package element), those IDs will be replaced if they
 * match a source identifier.
 <p>
 * <h2>Configuration and use of {@link SBMLIdConverter}</h2>
 <p>
 * {@link SBMLIdConverter} is enabled by creating a {@link ConversionProperties} object with
 * the option <code>\'renameSIds\'</code>, and passing this properties object to
 * {@link SBMLDocument#convert(ConversionProperties)}.
 * The converter accepts two options, and both must
 * be set or else no conversion is performed:
 <p>
 * <ul>
 * <li> <code>\'currentIds\':</code> A comma-separated list of identifiers to replace.
 * <li> <code>\'newIds\':</code> A comma-separated list of identifiers to use as the
 * replacements.  The values should correspond one-to-one with the identifiers
 * in <code>\'currentIds\'</code> that should be replaced.
 *
 * </ul> <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLIdConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLIdConverter::SBMLIdConverter "
/**
   * Creates a new {@link SBMLIdConverter} object.
   */ public
";


%javamethodmodifiers SBMLIdConverter::SBMLIdConverter(const SBMLIdConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLIdConverter}
   * object.
   <p>
   * @param obj the {@link SBMLIdConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLIdConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLIdConverter}
   * object.
   <p>
   * @return a (deep) copy of this converter.
   */ public
";


%javamethodmodifiers SBMLIdConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLIdConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLIdConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLIdConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%typemap(javaimports) SBMLInferUnitsConverter "
/** 
 *  Converter for inferring and setting parameter units.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This SBML converter takes an SBML document and attempts to infer units for
 * any {@link Parameter} objects whose units are undeclared.  It then sets the
 * \'units\' attribute of those parameters to the units inferred (if necessary,
 * creating new {@link UnitDefinition} objects on the model in the process).
 <p>
 * <h2>Configuration and use of {@link SBMLInferUnitsConverter}</h2>
 <p>
 * {@link SBMLInferUnitsConverter} is enabled by creating a {@link ConversionProperties}
 * object with the option <code>\'inferUnits\'</code>, and passing this
 * properties object to {@link SBMLDocument#convert(ConversionProperties)}.
 * The converter offers no other options.
 <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLInferUnitsConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLInferUnitsConverter::SBMLInferUnitsConverter "
/**
   * Creates a new {@link SBMLInferUnitsConverter} object.
   */ public
";


%javamethodmodifiers SBMLInferUnitsConverter::SBMLInferUnitsConverter(const SBMLInferUnitsConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLInferUnitsConverter}
   * object.
   <p>
   * @param obj the {@link SBMLInferUnitsConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLInferUnitsConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLInferUnitsConverter}
   * object.
   <p>
   * @return a (deep) copy of this converter.
   */ public
";


%javamethodmodifiers SBMLInferUnitsConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLInferUnitsConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLInferUnitsConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_INVALID_SRC_DOCUMENT LIBSBML_CONV_INVALID_SRC_DOCUMENT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLInferUnitsConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%javamethodmodifiers SBMLInferUnitsConverter::existsAlready(Model& m, UnitDefinition *newUD) "
/** * @internal */ public
";


%typemap(javaimports) SBMLInitialAssignmentConverter "
/** 
 *  Converter that removes SBML <em>initial assignments</em>.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This is an SBML converter for replacing {@link InitialAssignment} objects, when
 * possible, by setting the initial value attributes on the model objects
 * being assigned.  In other words, for every object that is the target of an
 * initial assignment in the model, the converter evaluates the mathematical
 * expression of the assignment to get a <em>numerical</em> value, and then sets
 * the corresponding attribute of the object to the value.  The effects for
 * different kinds of SBML components are as follows:
 <p>
 * <center>
 * <table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray; font-size: 14px;\'>
 *      <th align=\'left\' width=\'200\'>Component</th>
 *      <th align=\'left\'>Effect</th>
 *  </tr>
 *  <tr>
 *  <td>Compartment</td>
 *  <td>Sets the value of the <code>size</code> attribute.</td>
 *  </tr>
 *  <tr>
 *  <td>Species</td>
 *  <td>Sets the value of either the <code>initialAmount</code>
 *  or the <code>initialConcentration</code> attributes, depending
 *  on the value of the {@link Species} object\'s
 *  <code>hasOnlySubstanceUnits</code> attribute.</td>
 *  </tr>
 *  <tr>
 *  <td>Parameter</td>
 *  <td>Sets the value of the <code>value</code> attribute.</td>
 *  </tr>
 *  <tr>
 *  <td>SpeciesReference</td>
 *  <td>Sets the value of the <code>stoichiometry</code> attribute
 *  in the {@link Reaction} object where the {@link SpeciesReference} object appears.</td>
 *  </tr>
 * </table>
 * </center>
 <p>
 * <h2>Configuration and use of {@link SBMLInitialAssignmentConverter}</h2>
 <p>
 * {@link SBMLInitialAssignmentConverter} is enabled by creating a
 * {@link ConversionProperties} object with the option <code>\'expandInitialAssignments\'</code>,
 * and passing this properties object to {@link SBMLDocument#convert(ConversionProperties)}.  The converter offers no other options.
 <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLInitialAssignmentConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLInitialAssignmentConverter::SBMLInitialAssignmentConverter "
/**
   * Creates a new {@link SBMLInitialAssignmentConverter} object.
   */ public
";


%javamethodmodifiers SBMLInitialAssignmentConverter::SBMLInitialAssignmentConverter(const SBMLInitialAssignmentConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLInitialAssignmentConverter}
   * object.
   <p>
   * @param obj the {@link SBMLInitialAssignmentConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLInitialAssignmentConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLInitialAssignmentConverter}
   * object.
   <p>
   * @return a (deep) copy of this converter.
   */ public
";


%javamethodmodifiers SBMLInitialAssignmentConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLInitialAssignmentConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLInitialAssignmentConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLInitialAssignmentConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%typemap(javaimports) SBMLLevelVersionConverter "
/** 
 *  Whole-document SBML Level/Version converter.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This SBML converter takes an SBML document having one SBML Level+Version
 * combination, and attempts to convert it to an SBML document having a
 * different Level+Version combination.
 <p>
 * This class is also the basis for
 * {@link SBMLDocument#setLevelAndVersion(long, long, boolean)}.
 <p>
 * <h2>Configuration and use of {@link SBMLLevelVersionConverter}</h2>
 <p>
 * {@link SBMLLevelVersionConverter} is enabled by creating a {@link ConversionProperties}
 * object with the option <code>\'setLevelAndVersion\'</code>, and passing this
 * properties object to {@link SBMLDocument#convert(ConversionProperties)}.  The target SBML Level and Version
 * combination are determined by the value of the SBML namespace set on the
 * {@link ConversionProperties} object (using
 * {@link ConversionProperties#setTargetNamespaces(SBMLNamespaces targetNS)}).
 <p>
 * In addition, this converter offers one option:
 <p>
 * <ul>
 * <li> <code>\'strict\':</code> if this option has the value <code>true</code>, then the validity
 * of the SBML document will be strictly preserved.  This means that SBML
 * validation will be performed, and if the original model is not valid or
 * semantics cannot be preserved in the converted model, then conversion will
 * not be performed.  Conversely, if this option is set to <code>false</code>, model
 * conversion will always be performed; if any errors are detected related to
 * altered semantics, the errors will be logged in the usual way (i.e., the
 * error log on the {@link SBMLDocument} object).
 *
 * </ul> <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLLevelVersionConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::SBMLLevelVersionConverter "
/**
   * Creates a new {@link SBMLLevelVersionConverter} object.
   */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::SBMLLevelVersionConverter(const SBMLLevelVersionConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLLevelVersionConverter}
   * object.
   <p>
   * @param obj the {@link SBMLLevelVersionConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLLevelVersionConverter}
   * object.
   <p>
   * @return a (deep) copy of this converter.
   */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLLevelVersionConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_INVALID_TARGET_NAMESPACE LIBSBML_CONV_INVALID_TARGET_NAMESPACE}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_PKG_CONVERSION_NOT_AVAILABLE LIBSBML_CONV_PKG_CONVERSION_NOT_AVAILABLE}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_INVALID_SRC_DOCUMENT LIBSBML_CONV_INVALID_SRC_DOCUMENT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::getTargetLevel "
/**
   * Returns the target SBML Level for the conversion.
   <p>
   * @return an integer indicating the SBML Level.
   */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::getTargetVersion "
/**
   * Returns the target SBML Version for the conversion.
   <p>
   * @return an integer indicating the Version within the SBML Level.
   */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::getValidityFlag "
/**
   * Returns the flag indicating whether the conversion has been set to \'strict\'.
   <p>
   * @return <code>true</code> if strict validity has been requested, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::conversion_errors(unsigned int errors, bool strictUnits = true) "
/** * @internal */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::hasStrictUnits "
/** * @internal */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::hasStrictSBO "
/** * @internal */ public
";


%javamethodmodifiers SBMLLevelVersionConverter::performConversion(bool strict, bool strictUnits, bool duplicateAnn) "
/** * @internal */ public
";


%typemap(javaimports) SBMLLocalParameterConverter "
/** 
 *  Converter to turn local parameters into global ones.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This converter essentially promotes local parameters to global parameters.
 * It works by examining every {@link Reaction} object for {@link LocalParameter} objects,
 * then creating {@link Parameter} objects on the model for each one found, and
 * finally removing the original {@link LocalParameter} objects.  It creates new
 * identifiers for the fresh {@link Parameter} objects by concatenating the
 * identifier of the reaction with the identifier of the original
 * {@link LocalParameter} object.
 <p>
 * This converter can be useful for software applications that do not have
 * the ability to handle local parameters on reactions.  Such applications
 * could check incoming models for local parameters and run those models
 * through this converter before proceeding with other steps.
 <p>
 * <h2>Configuration and use of {@link SBMLLocalParameterConverter}</h2>
 <p>
 * {@link SBMLLocalParameterConverter} is enabled by creating a {@link ConversionProperties}
 * object with the option <code>\'promoteLocalParameters\'</code>, and passing this
 * properties object to {@link SBMLDocument#convert(ConversionProperties)}.  The converter offers no other options.
 <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLLocalParameterConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLLocalParameterConverter::SBMLLocalParameterConverter "
/**
   * Creates a new {@link SBMLLocalParameterConverter} object.
   */ public
";


%javamethodmodifiers SBMLLocalParameterConverter::SBMLLocalParameterConverter(const SBMLLocalParameterConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLLocalParameterConverter}
   * object.
   <p>
   * @param obj the {@link SBMLLocalParameterConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLLocalParameterConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLLocalParameterConverter}
   * object.
   <p>
   * @return a (deep) copy of this converter.
   */ public
";


%javamethodmodifiers SBMLLocalParameterConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLLocalParameterConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLLocalParameterConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLLocalParameterConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%typemap(javaimports) SBMLReactionConverter "
/** 
 *  Converter to replace reactions with SBML <em>rate rules</em>.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This converter will take an SBML model and replace the definitions of
 * reactions in the model with definitions of SBML rate rules.  Equivalent
 * {@link RateRule} objects are only created for species mentioned in reactions that
 * have {@link KineticLaw} subobjects, since those are the only reactions that have
 * an effect on the rates of change of species in the model; however, the
 * converter removes all {@link Reaction} objects in the model after it is done.
 <p>
 * <h2>Configuration and use of {@link SBMLReactionConverter}</h2>
 <p>
 * {@link SBMLReactionConverter} is enabled by creating a {@link ConversionProperties} object
 * with the option <code>\'replaceReactions\'</code>, and passing this properties object
 * to {@link SBMLDocument#convert(ConversionProperties)}.  This
 * converter does not offer any additional configuration options.
 <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLReactionConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLReactionConverter::SBMLReactionConverter "
/**
   * Creates a new {@link SBMLReactionConverter} object.
   */ public
";


%javamethodmodifiers SBMLReactionConverter::SBMLReactionConverter(const SBMLReactionConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLReactionConverter}
   * object.
   <p>
   * @param obj the {@link SBMLReactionConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLReactionConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLReactionConverter}
   * object.
   <p>
   * @return a (deep) copy of this converter.
   */ public
";


%javamethodmodifiers SBMLReactionConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLReactionConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLReactionConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_INVALID_SRC_DOCUMENT LIBSBML_CONV_INVALID_SRC_DOCUMENT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLReactionConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%javamethodmodifiers SBMLReactionConverter::setDocument(const SBMLDocument* doc) "
/**
   * Sets the current SBML document to the given {@link SBMLDocument} object.
   <p>
   * @param doc the document to use for this conversion.
   <p>
   * @warning Even though the <code>doc</code> is \'\', it is immediately cast
   * to a non- version, which is then usually changed by the
   * converter upon a successful conversion.  This function is here
   * solely to preserve backwards compatibility.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLReactionConverter::setDocument(SBMLDocument* doc) "
/**
   * Sets the current SBML document to the given {@link SBMLDocument} object.
   <p>
   * @param doc the document to use for this conversion.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLReactionConverter::createRateRuleMathForSpecies(const std::string& spId, Reaction * rn, bool isReactant) "
/** * @internal */ public
";


%javamethodmodifiers SBMLReactionConverter::determineStoichiometryNode(SpeciesReference * sr, bool isReactant) "
/** * @internal */ public
";


%javamethodmodifiers SBMLReactionConverter::createRateRule(const std::string& spId, ASTNode * math) "
/** * @internal */ public
";


%javamethodmodifiers SBMLReactionConverter::replaceReactions "
/** * @internal */ public
";


%javamethodmodifiers SBMLReactionConverter::isDocumentValid "
/** * @internal */ public
";


%typemap(javaimports) SBMLRuleConverter "
/** 
 *  Converter that sorts SBML rules and assignments.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This converter reorders assignments in a model.  Specifically, it sorts
 * the list of assignment rules (i.e., the {@link AssignmentRule} objects contained
 * in the ListOfAssignmentRules within the {@link Model} object) and the initial
 * assignments (i.e., the {@link InitialAssignment} objects contained in the
 * {@link ListOfInitialAssignments}) such that, within each set, assignments that
 * depend on <em>prior</em> values are placed <em>after</em> the values are set.  For
 * example, if there is an assignment rule stating <i>a = b + 1</i>, and
 * another rule stating <i>b = 3</i>, the list of rules is sorted and the
 * rules are arranged so that the rule for <i>b = 3</i> appears <em>before</em>
 * the rule for <i>a = b + 1</i>.  Similarly, if dependencies of this
 * sort exist in the list of initial assignments in the model, the initial
 * assignments are sorted as well.
 <p>
 * Beginning with SBML Level 2, assignment rules have no ordering
 * required&mdash;the order in which the rules appear in an SBML file has
 * no significance.  Software tools, however, may need to reorder
 * assignments for purposes of evaluating them.  For example, for
 * simulators that use time integration methods, it would be a good idea to
 * reorder assignment rules such as the following,
 <p>
 * <i>b = a + 10 seconds</i><br>
 * <i>a = time</i>
 <p>
 * so that the evaluation of the rules is independent of integrator
 * step sizes. (This is due to the fact that, in this case, the order in
 * which the rules are evaluated changes the result.)  {@link SBMLRuleConverter}
 * can be used to reorder the SBML objects regardless of whether the
 * input file contained them in the desired order.
 <p>
 * Note that the two sets of SBML assignments (list of assignment rules on
 * the one hand, and list of initial assignments on the other hand) are
 * handled <em>independently</em>.  In an SBML model, these entities are treated
 * differently and no amount of sorting can deal with inter-dependencies
 * between assignments of the two kinds.
<p>
 * <h2>Configuration and use of {@link SBMLRuleConverter}</h2>
 <p>
 * {@link SBMLRuleConverter} is enabled by creating a {@link ConversionProperties} object
 * with the option <code>\'sortRules\'</code>, and passing this properties object to
 * {@link SBMLDocument#convert(ConversionProperties)}.  This
 * converter offers no other options.
 <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLRuleConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLRuleConverter::SBMLRuleConverter "
/**
   * Creates a new {@link SBMLLevelVersionConverter} object.
   */ public
";


%javamethodmodifiers SBMLRuleConverter::SBMLRuleConverter(const SBMLRuleConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLLevelVersionConverter}
   * object.
   <p>
   * @param obj the {@link SBMLLevelVersionConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLRuleConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLLevelVersionConverter}
   * object.
   <p>
   * @return a (deep) copy of this converter.
   */ public
";


%javamethodmodifiers SBMLRuleConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLLevelVersionConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLRuleConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_INVALID_SRC_DOCUMENT LIBSBML_CONV_INVALID_SRC_DOCUMENT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLRuleConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%typemap(javaimports) SBMLStripPackageConverter "
/** 
 *  Converter that removes SBML Level 3 packages.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This SBML converter takes an SBML document and removes (strips) an SBML
 * Level&nbsp;3 package from it.  No conversion is performed; the package
 * constructs are simply removed from the SBML document.  The package to be
 * stripped is determined by the value of the option <code>\'package\'</code> on the
 * conversion properties.
 <p>
 * <h2>Configuration and use of {@link SBMLStripPackageConverter}</h2>
 <p>
 * {@link SBMLStripPackageConverter} is enabled by creating a {@link ConversionProperties}
 * object with the option <code>\'stripPackage\'</code>, and passing this properties
 * object to {@link SBMLDocument#convert(ConversionProperties)}.
 * This converter takes one required option:
 <p>
 * <ul>
 * <li> <code>\'package\':</code> the value of this option should be a text string, the
 * nickname of the SBML Level&nbsp;3 package to be stripped from the model.
 *
 * </ul> <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLStripPackageConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLStripPackageConverter::SBMLStripPackageConverter "
/**
   * Creates a new {@link SBMLStripPackageConverter} object.
   */ public
";


%javamethodmodifiers SBMLStripPackageConverter::SBMLStripPackageConverter(const SBMLStripPackageConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLStripPackageConverter}
   * object.
   <p>
   * @param obj the {@link SBMLStripPackageConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLStripPackageConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLStripPackageConverter}
   * object.
   <p>
   * @return the (deep) copy of this converter object.
   */ public
";


%javamethodmodifiers SBMLStripPackageConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLStripPackageConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLStripPackageConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_PKG_CONSIDERED_UNKNOWN LIBSBML_CONV_PKG_CONSIDERED_UNKNOWN}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLStripPackageConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%javamethodmodifiers SBMLStripPackageConverter::getPackageToStrip "
/** * @internal */ public
";


%typemap(javaimports) SBMLUnitsConverter "
/** 
 *  Converts a model\'s existing units to SI units.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This SBML converter converts the units in a model to base SI units, that
 * is, using only the units metre, kilogram, second, ampere, kelvin, mole and
 * candela.
 <p>
 * {@link Unit} conversion will only be performed on models that are fully unit
 * consistent, meaning that all objects have units associated with them and
 * there are no literal numbers with unspecified units.  In the case of an
 * SBML Level&nbsp;3 model involving math expressions, this means that the 
 * <code>timeUnits</code> attribute on the {@link Model} object must be set, and if there are any
 * reactions in the model, the <code>extentUnits</code> attribute on the {@link Model} object
 * must also be set.
 <p>
 * <h2>Configuration and use of {@link SBMLUnitsConverter}</h2>
 <p>
 * {@link SBMLUnitsConverter} is enabled by creating a {@link ConversionProperties} object
 * with the option <code>\'units\'</code>, and passing this properties object to
 * {@link SBMLDocument#convert(ConversionProperties)}.  This
 * converter takes one optional option:
 <p>
 * <ul>
 * <li> <code>\'removeUnusedUnits\':</code> the value of this property should be a
 * Boolean.  If it is <code>true</code>, it tells the unit convert to remove any unused
 * {@link UnitDefinition} objects after conversion is complete.  (\'Unused\' units are
 * units that are not referenced by any object in the model.)  If the value
 * is <code>false</code>, unused {@link UnitDefinition} objects are not removed from the model.
 * The default is <code>true.</code>
 *
 * </ul> <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one arguments: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string 
 * <code>\'replaceReactions\':</code>
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption(\'replaceReactions\');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class=\'fragment\'>
  // Assume that the variable \'document\' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println(\'Error: conversion failed due to the following:\');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>\'package\'</code> defined by that converter:
 <p>
<pre class=\'fragment\'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption(\'stripPackage\');
  config.addOption(\'package\', \'layout\');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println(\'Error: unable to strip the Layout package\');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println(\'Error: unable to create {@link ConversionProperties} object\');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.11.0:
 <p>
 * <p>
 * <ul>
 * <li> CobraToFbcConverter
 * <li> CompFlatteningConverter
 * <li> FbcToCobraConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */
"


%javamethodmodifiers SBMLUnitsConverter::init "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::SBMLUnitsConverter "
/**
   * Creates a new {@link SBMLUnitsConverter} object.
   */ public
";


%javamethodmodifiers SBMLUnitsConverter::SBMLUnitsConverter(const SBMLUnitsConverter& obj) "
/**
   * Copy constructor; creates a copy of an {@link SBMLUnitsConverter}
   * object.
   <p>
   * @param obj the {@link SBMLUnitsConverter} object to copy.
   */ public
";


%javamethodmodifiers SBMLUnitsConverter::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLUnitsConverter}
   * object.
   <p>
   * @return a (deep) copy of this converter.
   */ public
";


%javamethodmodifiers SBMLUnitsConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns <code>true</code> if this converter object\'s properties match the given
   * properties.
   <p>
   * A typical use of this method involves creating a {@link ConversionProperties}
   * object, setting the options desired, and then calling this method on
   * an {@link SBMLUnitsConverter} object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * {@link SBMLConverterRegistry#getConverterFor(ConversionProperties)}
   * to search across all registered converters for one matching particular
   * properties.
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if this converter\'s properties match, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers SBMLUnitsConverter::convert "
/**
   * Perform the conversion.
   <p>
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and
   * with the configuration options set by
   * {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_CONVERSION_NOT_AVAILABLE LIBSBML_CONV_CONVERSION_NOT_AVAILABLE}
   * <li> {@link libsbmlConstants#LIBSBML_CONV_INVALID_SRC_DOCUMENT LIBSBML_CONV_INVALID_SRC_DOCUMENT}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLUnitsConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the <em>default</em> property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   */ public
";


%javamethodmodifiers SBMLUnitsConverter::convertUnits(SBase& sb, Model& m) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::convertUnits(SBase& sb, Model& m, std::string &modelUnitAttribute, ASTNode *ast = 0) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::applyNewUnitDefinition(SBase& sb, Model& m, UnitDefinition *newUD, std::string &modelUnitAttribute, ASTNode * ast) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::existsAlready(Model& m, UnitDefinition *newUD) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::getRemoveUnusedUnitsFlag "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::removeUnusedUnitDefinitions(Model& m) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::convertGlobalUnits(Model& m) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::convertCnUnits(Model& m) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::isUsed(Model& m, std::string unitSId) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::unacceptable_errors(unsigned int errors) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::hasCnUnits(Model& m) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::mathHasCnUnits(const ASTNode *ast) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::matchesCnUnits(Model& m, std::string& units) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::mathMatchesCnUnits(const ASTNode *ast, std::string& units) "
/** * @internal */ public
";


%javamethodmodifiers SBMLUnitsConverter::convertAST(ASTNode *ast, Model &m) "
/** * @internal */ public
";


%typemap(javaimports) SBMLValidator "
/** 
 *  Base class for SBML validators.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * LibSBML implements facilities for verifying that a given SBML document
 * is valid according to the SBML specifications; it also exposes the
 * validation interface so that user programs and SBML Level&nbsp;3 package
 * authors may use the facilities to implement new validators.  There are
 * two main interfaces to libSBML\'s validation facilities, based on the
 * classes Validator and {@link SBMLValidator}.
 <p>
 * The Validator class is the basis of the system for validating an SBML
 * document against the validation rules defined in the SBML
 * specifications.  The scheme used by Validator relies is compact and uses
 * the <em>visitor</em> programming pattern, but it relies on C/C++ features and
 * is not directly accessible from language bindings.  {@link SBMLValidator} offers
 * a framework for straightforward class-based extensibility, so that user
 * code can subclass {@link SBMLValidator} to implement new validation systems,
 * different validators can be introduced or turned off at run-time, and
 * interfaces can be provided in the libSBML language bindings.
 * {@link SBMLValidator} can call Validator functionality internally (as is the
 * case in the current implementation of SBMLInternalValidator) or use
 * entirely different implementation approaches, as necessary.
 <p>
 * Users of libSBML may already be familiar with the facilities encompassed
 * by the validation system, in the form of the consistency-checking methods
 * defined on {@link SBMLDocument}.  The methods {@link SBMLDocument#setConsistencyChecks(int, boolean)},
 * {@link SBMLDocument#checkConsistency()}, {@link SBMLDocument#checkInternalConsistency()}
 * and other method of that sort are in fact implemented via {@link SBMLValidator},
 * specifically as methods on the class SBMLInternalValidator.
 <p>
 * Authors may use {@link SBMLValidator} as the base class for their own validator
 * extensions to libSBML.  The class SBMLInternalValidator may serve as a
 * code example for how to implement such things.
 */
"


%javamethodmodifiers SBMLValidator::SBMLValidator "
/**
   * Creates a new {@link SBMLValidator}.
   */ public
";


%javamethodmodifiers SBMLValidator::SBMLValidator(const SBMLValidator& orig) "
/**
   * Copy constructor; creates a copy of an {@link SBMLValidator} object.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers SBMLValidator::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLValidator} object.
   <p>
   * @return the (deep) copy of this {@link SBMLValidator} object.
   */ public
";


%javamethodmodifiers SBMLValidator::getDocument "
/**
   * Returns the current SBML document in use by this validator.
   <p>
   * @return the current SBML document
   <p>
   * @see #setDocument(SBMLDocument)
   */ public
";


%javamethodmodifiers SBMLValidator::getDocument() const "
/**
   * Returns the current SBML document in use by this validator.
   <p>
   * @return a  reference to the current SBML document
   <p>
   * @see #setDocument(SBMLDocument)
   */ public
";


%javamethodmodifiers SBMLValidator::setDocument(const SBMLDocument* doc) "
/** 
   * Sets the current SBML document to the given {@link SBMLDocument} object.
   <p>
   * @param doc the document to use for this validation
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #getDocument()
   */ public
";


%javamethodmodifiers SBMLValidator::validate "
/** 
   * Runs this validator on the current SBML document.
   <p>
   * @return an integer value indicating the success/failure of the
   * validation.   The possible values returned by this
   * function are determined by the specific subclasses of this class.
   */ public
";


%javamethodmodifiers SBMLValidator::clearFailures "
/**
   * Clears this validator\'s list of failures.
   <p>
   * If you are validating multiple SBML documents with the same validator,
   * call this method after you have processed the list of failures from
   * the last validation run and before validating the next document.
   */ public
";


%javamethodmodifiers SBMLValidator::getFailures() const "
/**
   * Returns a list of {@link SBMLError} objects (if any) that were logged by the
   * last run of this validator.
   <p>
   * @return a list of errors, warnings and other diagnostics logged during
   * validation.
   <p>
   * @see #clearFailures()
   */ public
";


%javamethodmodifiers SBMLValidator::logFailure(const SBMLError& err) "
/**
   * Adds the given failure to this list of Validators failures.
   <p>
   * @param err an {@link SBMLError} object representing an error or warning
   */ public
";


%javamethodmodifiers SBMLValidator::validate(const SBMLDocument& d) "
/**
   * Validates the given {@link SBMLDocument} object.
   <p>
   * This is identical to calling setDocument(SBMLDocument )
   * followed by validate().
   <p>
   * @param d the SBML document to validate
   <p>
   * @return the number of validation failures that occurred.  The objects
   * describing the actual failures can be retrieved using getFailures().
   */ public
";


%javamethodmodifiers SBMLValidator::validate(const std::string& filename) "
/**
   * Validates the SBML document located at the given <code>filename</code>.
   <p>
   * This is a convenience method that saves callers the trouble of
   * using {@link SBMLReader} to read the document first.
   <p>
   * @param filename the path to the file to be read and validated.
   <p>
   * @return the number of validation failures that occurred.  The objects
   * describing the actual failures can be retrieved using getFailures().
   */ public
";


%javamethodmodifiers SBMLValidator::getErrorLog "
/**
   * Returns the list of errors or warnings logged during parsing,
   * consistency checking, or attempted translation of this model.
   <p>
   * Note that this refers to the {@link SBMLDocument} object\'s error log (i.e.,
   * the list returned by {@link SBMLDocument#getErrorLog()}).  <em>That</em> list of
   * errors and warnings is <em>separate</em> from the validation failures
   * tracked by this validator (i.e., the list returned by getFailures()).
   <p>
   * @return the {@link SBMLErrorLog} used for the {@link SBMLDocument}
   */ public
";


%javamethodmodifiers SBMLValidator::getModel() const "
/**
   * Returns the {@link Model} object stored in the {@link SBMLDocument}.
   <p>
   * It is important to note that this method <em>does not create</em> a
   * {@link Model} instance.  The model in the {@link SBMLDocument} must have been created
   * at some prior time, for example using {@link SBMLDocument#createModel()} 
   * or {@link SBMLDocument#setModel(Model)}.
   * This method returns <code>null</code> if a model does not yet exist.
   <p>
   * @return the {@link Model} contained in this validator\'s {@link SBMLDocument} object.
   <p>
   * @see SBMLDocument#setModel(Model)
   * @see SBMLDocument#createModel()
   */ public
";


%javamethodmodifiers SBMLValidator::getModel "
/**
   * Returns the {@link Model} object stored in the {@link SBMLDocument}.
   <p>
   * It is important to note that this method <em>does not create</em> a
   * {@link Model} instance.  The model in the {@link SBMLDocument} must have been created
   * at some prior time, for example using {@link SBMLDocument#createModel()} 
   * or {@link SBMLDocument#setModel(Model)}.
   * This method returns <code>null</code> if a model does not yet exist.
   <p>
   * @return the {@link Model} contained in this validator\'s {@link SBMLDocument} object.
   <p>
   * @see SBMLDocument#setModel(Model)
   * @see SBMLDocument#createModel()
   */ public
";


%javamethodmodifiers SBMLValidator::getNumFailures() const "
/** 
   * Returns the number of failures encountered in the last validation run.
   <p>
   * This method returns the number of failures logged by this validator.
   * This number only reflects <em>this</em> validator\'s actions; the number may
   * not be the same as the number of errors and warnings logged on the
   * {@link SBMLDocument} object\'s error log (i.e., the object returned by
   * {@link SBMLDocument#getErrorLog()}), because other parts of libSBML may log
   * errors and warnings beyond those found by this validator.
   <p>
   * @return the number of errors logged by this validator. 
   */ public
";


%javamethodmodifiers SBMLValidator::getFailure "
/** 
   * Returns the failure object at index n in this validator\'s list of
   * failures logged during the last run.
   <p>
   * Callers should use getNumFailures() first, to find out the number
   * of entries in this validator\'s list of failures.
   <p>
   * @param n an integer indicating the index of the object to return from
   * the failures list; index values start at 0.
   <p>
   * @return the failure at the given index number.
   <p>
   * @see #getNumFailures()
   */ public
";


%typemap(javaimports) SBMLExternalValidator "
/** 
 *  
 * @internal
 */
"


%javamethodmodifiers SBMLExternalValidator::SBMLExternalValidator "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::SBMLExternalValidator(const SBMLExternalValidator&) "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::clone() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::validate "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::getProgram() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::setProgram(std::string program) "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::getOutputFileName() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::setOutputFileName(std::string outputFileName) "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::getSBMLFileName() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::setSBMLFileName(std::string sbmlFileName) "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::clearArguments "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::addArgument(std::string arg) "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::getNumArguments() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::getArgument "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::getArguments() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLExternalValidator::setArguments(std::vector<std::string> args) "
/** * @internal */ public
";


%typemap(javaimports) XMLAttributes "
/** 
 *  A list of attributes on an XML element.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * In libSBML\'s XML interface layer, attributes on an element are stored as a
 * list of values kept in an {@link XMLAttributes} object.  {@link XMLAttributes} has methods
 * for adding and removing individual attributes as well as performing other
 * actions on the list of attributes.  Classes in libSBML that represent nodes
 * in an XML document (i.e., {@link XMLNode} and its parent class, {@link XMLToken}) use
 * {@link XMLAttributes} objects to manage attributes on XML elements.
 <p>
 * Attributes on an XML element can be written in one of two forms:
 * <ul>
 * <li> <code>name=\'value\'</code>
 * <li> <code>prefix:name=\'value\'</code>
 *
 * </ul> <p>
 * An attribute in XML must always have a value, and the value must always be
 * a quoted string; i.e., it is always <code>name=\'value\'</code> and not
 * <code>name=value</code>.  An empty value is represented simply as an
 * empty string; i.e., <code>name=\'\'</code>.
 <p>
 * In cases when a <code>prefix</code> is provided with an attribute name,
 * general XML validity rules require that the prefix is an XML namespace
 * prefix that has been declared somewhere else (possibly as an another
 * attribute on the same element).  However, the {@link XMLAttributes} class does
 * <em>not</em> test for the proper existence or declaration of XML
 * namespaces&mdash;callers must arrange to do this themselves in some other
 * way.  This class only provides facilities for tracking and manipulating
 * attributes and their prefix/URI/name/value components.
 <p>
 * <p>
 * @note Note that although {@link XMLAttributes} provides operations that can
 * manipulate attributes based on a numerical index, XML attributes are in
 * fact unordered when they appear in files and data streams.  The
 * {@link XMLAttributes} class provides some list-like facilities, but it is only for
 * the convenience of callers.  (For example, it permits callers to loop
 * across all attributes more easily.)  Users should keep in mind that the
 * order in which attributes are stored in {@link XMLAttributes} objects has no real
 * impact on the order in which the attributes are read or written from an
 * XML file or data stream.
 <p>
 * @see XMLTriple
 * @see XMLNode
 * @see XMLToken
 */
"


%javamethodmodifiers XMLAttributes::XMLAttributes "
/**
   * Creates a new, empty {@link XMLAttributes} object.
   */ public
";


%javamethodmodifiers XMLAttributes::XMLAttributes(const XMLAttributes& orig) "
/**
   * Copy constructor; creates a copy of this {@link XMLAttributes} object.
   <p>
   * <code>orig</code> the {@link XMLAttributes} object to copy.
   <p>
   * @throws XMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers XMLAttributes::clone() const "
/**
   * Creates and returns a deep copy of this {@link XMLAttributes} object.
   <p>
   * @return the (deep) copy of this {@link XMLAttributes} object.
   */ public
";


%javamethodmodifiers XMLAttributes::add(  const std::string& name , const std::string& value , const std::string& namespaceURI = "" , const std::string& prefix = "") "
/**
   * Adds an attribute to this list of attributes.
   <p>
   * <p>
 * Some explanations are in order about the behavior of {@link XMLAttributes} with
 * respect to namespace prefixes and namespace URIs.  {@link XMLAttributes} does 
 * <em>not</em> verify the consistency of different uses of an XML namespace and the
 * prefix used to refer to it in a given context.  It cannot, because the
 * prefix used for a given XML namespace in an XML document may intentionally
 * be different on different elements in the document.  Consequently, callers
 * need to manage their own prefix-to-namespace mappings, and need to ensure
 * that the desired prefix is used in any given context.
 <p>
 * When called with attribute names, prefixes and namespace URIs,
 * {@link XMLAttributes} pays attention to the namespace URIs and not the prefixes: a
 * match is established by a combination of attribute name and namespace URI,
 * and if on different occasions a different prefix is used for the same
 * name/namespace combination, the prefix associated with the namespace on
 * that attribute is overwritten.
 <p>
 * Some examples will hopefully clarify this.  Here are the results of a
 * sequence of calls to the {@link XMLAttributes} <code>add</code> methods with
 * different argument combinations.  First, we create the object and add
 * one attribute:
 <p>
 * <pre class=\'fragment\'>{.cpp}
{@link XMLAttributes}  att = new {@link XMLAttributes}();
att-&gt;add(\'myattribute\', \'1\', \'myuri\');
</pre>
 * The above adds an attribute named <code>myattribute</code> in the namespace
 * <code>myuri</code>, and with the attribute value <code>1</code>.  No
 * namespace prefix is associated with the attribute (but the attribute is
 * recorded to exist in the namespace <code>myuri</code>).  If
 * this attribute object were written out in XML, it would look like the
 * following (and note that, since no namespace prefix was assigned, none
 * is written out):
 * <center><pre>
myattribute=\'1\'
 * </pre></center>
 <p>
 * Continuing with this series of examples, suppose we invoke the
 * <code>add</code> method again as follows:
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'2\');
</pre>
 * The above adds a <em>new</em> attribute <em>also</em> named <code>myattribute</code>,
 * but in a different XML namespace: it is placed in the namespace with no
 * URI, which is to say, the default XML namespace.  Both attributes coexist
 * on this {@link XMLAttributes} object; both can be independently retrieved.
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'3\');
</pre>
 * The code above now replaces the value of the attribute
 * <code>myattribute</code> that resides in the default namespace.  The
 * attribute in the namespace <code>myuri</code> remains untouched.
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'4\', \'myuri\');
</pre>
 * The code above replaces the value of the attribute
 * <code>myattribute</code> that resides in the <code>myuri</code> namespace.
 * The attribute in the default namespace remains untouched.
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'5\', \'myuri\', \'foo\');
</pre>
 * The code above replaces the value of the attribute
 * <code>myattribute</code> that resides in the <code>myuri</code> namespace.
 * It also now assigns a namespace prefix, <code>foo</code>, to the attribute.
 * The attribute <code>myattribute</code> in the default namespace remains
 * untouched. If this {@link XMLAttributes} object were written out in XML, it would
 * look like the following:
 * <center><pre>
myattribute=\'3\'
foo:myattribute=\'5\'
 * </pre></center>
 * Pressing on, now suppose we call the <code>add</code> method as follows:
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'6\', \'myuri\', \'bar\');
</pre>
 * The code above replaces the value of the attribute
 * <code>myattribute</code> that resides in the <code>myuri</code> namespace.
 * It also assigns a different prefix to the attribute.  The namespace of
 * the attribute remains <code>myuri</code>.
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'7\', \'\', \'foo\');
</pre>
<p>
 * The code above replaces the value of the attribute
 * <code>myattribute</code> that resides in the default namespace.  It also
 * now assigns a namespace prefix, <code>foo</code>, to that attribute.  If
 * this {@link XMLAttributes} object were written out in XML, it would look like the
 * following:
 * <center><pre>
bar:myattribute=\'6\'
foo:myattribute=\'7\'
 * </pre></center>
   <p>
   * @param name a string, the unprefixed name of the attribute.
   * @param value a string, the value of the attribute.
   * @param namespaceURI a string, the namespace URI of the attribute.
   * @param prefix a string, a prefix for the XML namespace.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}.
   * This value is returned if any of the arguments are <code>null.</code>  To set an
   * empty <code>prefix</code> and/or <code>name</code> value, use an empty string rather than 
   * <code>null.</code>
   *
   * </ul> <p>
   * <p>
 * @note If an attribute with the same name and XML namespace URI already
 * exists in the list of attributes held by this {@link XMLAttributes} object, then
 * the previous value of that attribute will be replaced with the new value
 * provided to this method.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   <p>
   * @see #add(XMLTriple triple, String value)
   * @see #getIndex(String name, String uri) 
   * @see #getIndex(XMLTriple triple) 
   * @see #hasAttribute(String name, String uri) 
   * @see #hasAttribute(XMLTriple triple) 
   */ public
";


%javamethodmodifiers XMLAttributes::add( const XMLTriple& triple, const std::string& value) "
/**
   * Adds an attribute to this list of attributes.
   <p>
   * <p>
 * Some explanations are in order about the behavior of {@link XMLAttributes} with
 * respect to namespace prefixes and namespace URIs.  {@link XMLAttributes} does 
 * <em>not</em> verify the consistency of different uses of an XML namespace and the
 * prefix used to refer to it in a given context.  It cannot, because the
 * prefix used for a given XML namespace in an XML document may intentionally
 * be different on different elements in the document.  Consequently, callers
 * need to manage their own prefix-to-namespace mappings, and need to ensure
 * that the desired prefix is used in any given context.
 <p>
 * When called with attribute names, prefixes and namespace URIs,
 * {@link XMLAttributes} pays attention to the namespace URIs and not the prefixes: a
 * match is established by a combination of attribute name and namespace URI,
 * and if on different occasions a different prefix is used for the same
 * name/namespace combination, the prefix associated with the namespace on
 * that attribute is overwritten.
 <p>
 * Some examples will hopefully clarify this.  Here are the results of a
 * sequence of calls to the {@link XMLAttributes} <code>add</code> methods with
 * different argument combinations.  First, we create the object and add
 * one attribute:
 <p>
 * <pre class=\'fragment\'>{.cpp}
{@link XMLAttributes}  att = new {@link XMLAttributes}();
att-&gt;add(\'myattribute\', \'1\', \'myuri\');
</pre>
 * The above adds an attribute named <code>myattribute</code> in the namespace
 * <code>myuri</code>, and with the attribute value <code>1</code>.  No
 * namespace prefix is associated with the attribute (but the attribute is
 * recorded to exist in the namespace <code>myuri</code>).  If
 * this attribute object were written out in XML, it would look like the
 * following (and note that, since no namespace prefix was assigned, none
 * is written out):
 * <center><pre>
myattribute=\'1\'
 * </pre></center>
 <p>
 * Continuing with this series of examples, suppose we invoke the
 * <code>add</code> method again as follows:
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'2\');
</pre>
 * The above adds a <em>new</em> attribute <em>also</em> named <code>myattribute</code>,
 * but in a different XML namespace: it is placed in the namespace with no
 * URI, which is to say, the default XML namespace.  Both attributes coexist
 * on this {@link XMLAttributes} object; both can be independently retrieved.
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'3\');
</pre>
 * The code above now replaces the value of the attribute
 * <code>myattribute</code> that resides in the default namespace.  The
 * attribute in the namespace <code>myuri</code> remains untouched.
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'4\', \'myuri\');
</pre>
 * The code above replaces the value of the attribute
 * <code>myattribute</code> that resides in the <code>myuri</code> namespace.
 * The attribute in the default namespace remains untouched.
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'5\', \'myuri\', \'foo\');
</pre>
 * The code above replaces the value of the attribute
 * <code>myattribute</code> that resides in the <code>myuri</code> namespace.
 * It also now assigns a namespace prefix, <code>foo</code>, to the attribute.
 * The attribute <code>myattribute</code> in the default namespace remains
 * untouched. If this {@link XMLAttributes} object were written out in XML, it would
 * look like the following:
 * <center><pre>
myattribute=\'3\'
foo:myattribute=\'5\'
 * </pre></center>
 * Pressing on, now suppose we call the <code>add</code> method as follows:
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'6\', \'myuri\', \'bar\');
</pre>
 * The code above replaces the value of the attribute
 * <code>myattribute</code> that resides in the <code>myuri</code> namespace.
 * It also assigns a different prefix to the attribute.  The namespace of
 * the attribute remains <code>myuri</code>.
 <p>
 * <pre class=\'fragment\'>{.cpp}
att-&gt;add(\'myattribute\', \'7\', \'\', \'foo\');
</pre>
<p>
 * The code above replaces the value of the attribute
 * <code>myattribute</code> that resides in the default namespace.  It also
 * now assigns a namespace prefix, <code>foo</code>, to that attribute.  If
 * this {@link XMLAttributes} object were written out in XML, it would look like the
 * following:
 * <center><pre>
bar:myattribute=\'6\'
foo:myattribute=\'7\'
 * </pre></center>
   <p>
   * @param triple an {@link XMLTriple} object describing the attribute to be added.
   * @param value a string, the value of the attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}. 
   * This value is returned if any of the arguments are <code>null.</code>  To set an
   * empty value for the attribute, use an empty string rather than <code>null.</code>
   *
   * </ul> <p>
   * <p>
 * @note If an attribute with the same name and XML namespace URI already
 * exists in the list of attributes held by this {@link XMLAttributes} object, then
 * the previous value of that attribute will be replaced with the new value
 * provided to this method.
   <p>
   * @see #add(String name, String value, String namespaceURI, String prefix)
   * @see #getIndex(String name, String uri) 
   * @see #getIndex(XMLTriple triple) 
   * @see #hasAttribute(String name, String uri) 
   * @see #hasAttribute(XMLTriple triple) 
   */ public
";


%javamethodmodifiers XMLAttributes::addResource(const std::string& name, const std::string& value) "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::removeResource(int n) "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::remove(int n) "
/**
   * Removes the <em>n</em>th attribute from this list of attributes.
   <p>
   * @param n an integer the index of the resource to be deleted
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * The value {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE} is returned if there is no attribute at the
   * given index <code>n</code>.
   <p>
   * <p>
 * @note Note that although {@link XMLAttributes} provides operations that can
 * manipulate attributes based on a numerical index, XML attributes are in
 * fact unordered when they appear in files and data streams.  The
 * {@link XMLAttributes} class provides some list-like facilities, but it is only for
 * the convenience of callers.  (For example, it permits callers to loop
 * across all attributes more easily.)  Users should keep in mind that the
 * order in which attributes are stored in {@link XMLAttributes} objects has no real
 * impact on the order in which the attributes are read or written from an
 * XML file or data stream.
   <p>
   * @see #getLength()
   * @see #remove(XMLTriple triple)
   * @see #remove(String name, String uri)
   */ public
";


%javamethodmodifiers XMLAttributes::remove(const std::string& name, const std::string& uri = "") "
/**
   * Removes a named attribute from this list of attributes.
   <p>
   * @param name a string, the unprefixed name of the attribute to be
   * removed.
   <p>
   * @param uri a string, the namespace URI of the attribute to be removed.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * The value {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE} is returned if there is no attribute with the
   * given <code>name</code> (and <code>uri</code> if specified).
   <p>
   * @see #remove(int n)
   * @see #remove(XMLTriple triple)
   */ public
";


%javamethodmodifiers XMLAttributes::remove(const XMLTriple& triple) "
/**
   * Removes a specific attribute from this list of attributes.
   <p>
   * @param triple an {@link XMLTriple} describing the attribute to be removed.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * The value {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE} is returned if there is no attribute matching
   * the properties of the given <code>triple</code>.
   <p>
   * @see #remove(int n)
   * @see #remove(String name, String uri)
   */ public
";


%javamethodmodifiers XMLAttributes::clear "
/**
   * Removes all attributes in this {@link XMLAttributes} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #remove(int n)
   * @see #remove(XMLTriple triple)
   * @see #remove(String name, String uri)
   */ public
";


%javamethodmodifiers XMLAttributes::getIndex(const std::string& name) const "
/**
   * Returns the index of an attribute having a given name.
   <p>
   * @note This method does not check XML namespaces.  Thus, if there are
   * multiple attributes with the same local <code>name</code> but different
   * namespaces, this method will return the first one found.  Callers should
   * use the more specific methods
   * {@link XMLAttributes#getIndex(String name, String uri)} 
   * or {@link XMLAttributes#getIndex(XMLTriple triple)} 
   * to find attributes in particular namespaces.
   <p>
   * @param name a string, the name of the attribute whose index is begin
   * sought.
   <p>
   * @return the index of an attribute with the given local name, or
   * <code>-1</code> if no such attribute is present.
   <p>
   * @see #hasAttribute(String name, String uri) 
   * @see #hasAttribute(XMLTriple triple) 
   */ public
";


%javamethodmodifiers XMLAttributes::getIndex(const std::string& name, const std::string& uri) const "
/**
   * Returns the index of the attribute having a given name and XML namespace
   * URI.
   <p>
   * @param name a string, the name of the attribute being sought.
   * @param uri  a string, the namespace URI of the attribute being sought.
   <p>
   * @return the index of an attribute with the given local name and
   * namespace URI, or <code>-1</code> if no such attribute is present.
   <p>
   * @see #hasAttribute(String name, String uri) 
   * @see #hasAttribute(XMLTriple triple) 
   */ public
";


%javamethodmodifiers XMLAttributes::getIndex(const XMLTriple& triple) const "
/**
   * Returns the index of the attribute defined by the given {@link XMLTriple} object.
   <p>
   * @param triple an {@link XMLTriple} describing the attribute being sought.
   <p>
   * @return the index of an attribute described by the given {@link XMLTriple}
   * object, or <code>-1</code> if no such attribute is present.
   <p>
   * @see #hasAttribute(String name, String uri) 
   * @see #hasAttribute(XMLTriple triple) 
   */ public
";


%javamethodmodifiers XMLAttributes::getLength() const "
/**
   * Returns the number of attributes in this list of attributes.
   <p>
   * @return the number of attributes contained in this {@link XMLAttributes} object.
   */ public
";


%javamethodmodifiers XMLAttributes::getNumAttributes() const "
/**
   * Returns the number of attributes in this list of attributes.
   <p>
   * This function is merely an alias of {@link XMLAttributes#getLength()}
   * introduced for consistency with other libXML classes.
   <p>
   * @return the number of attributes contained in this {@link XMLAttributes} object.
   */ public
";


%javamethodmodifiers XMLAttributes::getName(int index) const "
/**
   * Returns the name of the <em>n</em>th attribute in this list of
   * attributes.
   <p>
   * @param index an integer, the position of the attribute whose name
   * is being sought.
   <p>
   * @return the local name of the <em>n</em>th attribute.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  Callers should use {@link XMLAttributes#getLength()} to check the number
 * of attributes contained in this object or {@link XMLAttributes#hasAttribute(int
 * index)}  to test for the existence of an attribute at a given
 * position.
   <p>
   * <p>
 * @note Note that although {@link XMLAttributes} provides operations that can
 * manipulate attributes based on a numerical index, XML attributes are in
 * fact unordered when they appear in files and data streams.  The
 * {@link XMLAttributes} class provides some list-like facilities, but it is only for
 * the convenience of callers.  (For example, it permits callers to loop
 * across all attributes more easily.)  Users should keep in mind that the
 * order in which attributes are stored in {@link XMLAttributes} objects has no real
 * impact on the order in which the attributes are read or written from an
 * XML file or data stream.
   <p>
   * @see #getLength()
   * @see #hasAttribute(int index) 
   */ public
";


%javamethodmodifiers XMLAttributes::getPrefix(int index) const "
/**
   * Returns the namespace prefix of the <em>n</em>th attribute in this
   * attribute set.
   <p>
   * @param index an integer, the position of the attribute whose namespace
   * prefix is being sought.
   <p>
   * @return the XML namespace prefix of the <em>n</em>th attribute.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  Callers should use {@link XMLAttributes#getLength()} to check the number
 * of attributes contained in this object or {@link XMLAttributes#hasAttribute(int
 * index)}  to test for the existence of an attribute at a given
 * position.
   <p>
   * <p>
 * @note Note that although {@link XMLAttributes} provides operations that can
 * manipulate attributes based on a numerical index, XML attributes are in
 * fact unordered when they appear in files and data streams.  The
 * {@link XMLAttributes} class provides some list-like facilities, but it is only for
 * the convenience of callers.  (For example, it permits callers to loop
 * across all attributes more easily.)  Users should keep in mind that the
 * order in which attributes are stored in {@link XMLAttributes} objects has no real
 * impact on the order in which the attributes are read or written from an
 * XML file or data stream.
   <p>
   * @see #getLength()
   * @see #hasAttribute(int index) 
   */ public
";


%javamethodmodifiers XMLAttributes::getPrefixedName(int index) const "
/**
   * Returns the prefix name of the <em>n</em>th attribute in this attribute
   * set.
   <p>
   * @param index an integer, the position of the attribute whose prefixed
   * name is being sought.
   <p>
   * @return the prefixed name of the <em>n</em>th attribute.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  Callers should use {@link XMLAttributes#getLength()} to check the number
 * of attributes contained in this object or {@link XMLAttributes#hasAttribute(int
 * index)}  to test for the existence of an attribute at a given
 * position.
   <p>
   * <p>
 * @note Note that although {@link XMLAttributes} provides operations that can
 * manipulate attributes based on a numerical index, XML attributes are in
 * fact unordered when they appear in files and data streams.  The
 * {@link XMLAttributes} class provides some list-like facilities, but it is only for
 * the convenience of callers.  (For example, it permits callers to loop
 * across all attributes more easily.)  Users should keep in mind that the
 * order in which attributes are stored in {@link XMLAttributes} objects has no real
 * impact on the order in which the attributes are read or written from an
 * XML file or data stream.
   <p>
   * @see #getLength()
   * @see #hasAttribute(int index) 
   */ public
";


%javamethodmodifiers XMLAttributes::getURI(int index) const "
/**
   * Returns the XML namespace URI of the <em>n</em>th attribute in this
   * attribute set.
   <p>
   * @param index an integer, the position of the attribute whose namespace
   * URI is being sought.
   <p>
   * @return the XML namespace URI of the <em>n</em>th attribute.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  Callers should use {@link XMLAttributes#getLength()} to check the number
 * of attributes contained in this object or {@link XMLAttributes#hasAttribute(int
 * index)}  to test for the existence of an attribute at a given
 * position.
   <p>
   * <p>
 * @note Note that although {@link XMLAttributes} provides operations that can
 * manipulate attributes based on a numerical index, XML attributes are in
 * fact unordered when they appear in files and data streams.  The
 * {@link XMLAttributes} class provides some list-like facilities, but it is only for
 * the convenience of callers.  (For example, it permits callers to loop
 * across all attributes more easily.)  Users should keep in mind that the
 * order in which attributes are stored in {@link XMLAttributes} objects has no real
 * impact on the order in which the attributes are read or written from an
 * XML file or data stream.
   <p>
   * @see #getLength()
   * @see #hasAttribute(int index) 
   */ public
";


%javamethodmodifiers XMLAttributes::getValue(int index) const "
/**
   * Returns the value of the <em>n</em>th attribute in this list of attributes.
   <p>
   * @param index an integer, the position of the attribute whose value is
   * being sought.
   <p>
   * @return the XML value of the <em>n</em>th attribute.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  Callers should use {@link XMLAttributes#getLength()} to check the number
 * of attributes contained in this object or {@link XMLAttributes#hasAttribute(int
 * index)}  to test for the existence of an attribute at a given
 * position.
   <p>
   * <p>
 * @note Note that although {@link XMLAttributes} provides operations that can
 * manipulate attributes based on a numerical index, XML attributes are in
 * fact unordered when they appear in files and data streams.  The
 * {@link XMLAttributes} class provides some list-like facilities, but it is only for
 * the convenience of callers.  (For example, it permits callers to loop
 * across all attributes more easily.)  Users should keep in mind that the
 * order in which attributes are stored in {@link XMLAttributes} objects has no real
 * impact on the order in which the attributes are read or written from an
 * XML file or data stream.
   <p>
   * @see #getLength()
   * @see #hasAttribute(int index) 
   */ public
";


%javamethodmodifiers XMLAttributes::getValue(const std::string name) const "
/**
   * Returns a named attribute\'s value.
   <p>
   * @param name a string, the unprefixed name of the attribute whose value
   * is being sought.
   <p>
   * @return The attribute value as a string.
   <p>
   * @note If an attribute with the given local <code>name</code> does not exist in
   * this {@link XMLAttributes} object, this method will return an empty string.
   * Callers can use
   * {@link XMLAttributes#hasAttribute(String name, String uri)} 
   * to test for an attribute\'s existence.  This method also does not check
   * the XML namespace of the named attribute.  Thus, if there are multiple
   * attributes with the same local <code>name</code> but different namespaces, this
   * method will return the value of the first such attribute found.  Callers
   * should use the more specific methods
   * {@link XMLAttributes#getIndex(String name, String uri)} 
   * or {@link XMLAttributes#getIndex(XMLTriple triple)}  to find
   * attributes in particular namespaces.
   <p>
   * @see #hasAttribute(String name, String uri) 
   * @see #hasAttribute(XMLTriple triple) 
   */ public
";


%javamethodmodifiers XMLAttributes::getValue(const std::string name, const std::string uri) const "
/**
   * Returns a named attribute\'s value.
   <p>
   * @param name a string, the name of the attribute whose value is being sought.
   * @param uri  a string, the XML namespace URI of the attribute.
   <p>
   * @return The attribute value as a string.
   <p>
   * @note If an attribute with the given <code>name</code> and namespace <code>uri</code> does
   * not exist in this {@link XMLAttributes} object, this method will return an empty
   * string.  Callers can use
   * {@link XMLAttributes#hasAttribute(String name, String uri)} 
   * to test for an attribute\'s existence.
   <p>
   * @see #hasAttribute(String name, String uri) 
   * @see #hasAttribute(XMLTriple triple) 
   */ public
";


%javamethodmodifiers XMLAttributes::getValue(const XMLTriple& triple) const "
/**
   * Return the value of an attribute described by a given {@link XMLTriple} object.
   <p>
   * @param triple an {@link XMLTriple} describing the attribute whose value is being
   * sought.
   <p>
   * @return The attribute value as a string.
   <p>
   * @note If an attribute with the properties given by <code>triple</code> does not
   * exist in this {@link XMLAttributes} object, this method will return an empty
   * string.  Callers can use
   * {@link XMLAttributes#hasAttribute(String name, String uri)} 
   * to test for an attribute\'s existence.
   <p>
   * @see #hasAttribute(String name, String uri) 
   * @see #hasAttribute(XMLTriple triple) 
   */ public
";


%javamethodmodifiers XMLAttributes::hasAttribute(int index) const "
/**
   * Returns <code>true</code> if an attribute exists at a given index.
   <p>
   * @param index an integer, the position of the attribute to be tested.
   <p>
   * @return <code>true</code> if an attribute with the given index exists in this
   * {@link XMLAttributes} object, <code>false</code> otherwise.
   <p>
   * <p>
 * @note Note that although {@link XMLAttributes} provides operations that can
 * manipulate attributes based on a numerical index, XML attributes are in
 * fact unordered when they appear in files and data streams.  The
 * {@link XMLAttributes} class provides some list-like facilities, but it is only for
 * the convenience of callers.  (For example, it permits callers to loop
 * across all attributes more easily.)  Users should keep in mind that the
 * order in which attributes are stored in {@link XMLAttributes} objects has no real
 * impact on the order in which the attributes are read or written from an
 * XML file or data stream.
   */ public
";


%javamethodmodifiers XMLAttributes::hasAttribute(const std::string name, const std::string uri="") const "
/**
   * Returns <code>true</code> if an attribute with a given name and namespace URI
   * exists.
   <p>
   * @param name a string, the unprefixed name of the attribute.
   * @param uri  a string, the XML namespace URI of the attribute.
   <p>
   * @return <code>true</code> if an attribute with the given local name and XML
   * namespace URI exists in this {@link XMLAttributes} object, <code>false</code> otherwise.
   <p>
   * @see #add(String name, String value, String namespaceURI, String prefix)
   * @see #add(XMLTriple triple, String value)
   */ public
";


%javamethodmodifiers XMLAttributes::hasAttribute(const XMLTriple& triple) const "
/**
   * Returns <code>true</code> if an attribute with the given properties exists.
   <p>
   * @param triple an {@link XMLTriple} describing the attribute to be tested.
   <p>
   * @return <code>true</code> if an attribute with the given XML triple exists in this
   * {@link XMLAttributes} object, <code>false</code> otherwise.
   <p>
   * @see #add(String name, String value, String namespaceURI, String prefix)
   * @see #add(XMLTriple triple, String value)
   */ public
";


%javamethodmodifiers XMLAttributes::isEmpty() const "
/**
   * Returns <code>true</code> if this list of attributes is empty.
   <p>
   * @return <code>true</code> if this {@link XMLAttributes} object is empty, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a Boolean value.
   <p>
   * This method reads the value associated with the attribute <code>name</code> in
   * this {@link XMLAttributes} object and attempts to interpret it as a Boolean.  If
   * successful, this method stores the value into the variable passed in as
   * <code>value</code>.  If no attribute named <code>name</code> can be found in this
   * {@link XMLAttributes} object or the value of the attribute could not be
   * interpreted as a Boolean, <code>value</code> is left unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#boolean\'>XML Schema</a>, the
   * valid Boolean values are: <code>\'true\'</code>, <code>\'false\'</code>,
   * <code>\'1\'</code>, and <code>\'0\'</code>, read in a case-insensitive
   * manner.
   <p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a Boolean, then the
   * error logged to <code>log</code> indicates that a value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param name a string, the name of the attribute.
   <p>
   * @param value a Boolean, the return parameter into which the value should
   * be assigned.
   <p>
   * @copydetails doc_read_methods_common_args
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a Boolean value.
   <p>
   * This method reads the value associated with the attribute described by
   * <code>triple</code> in this {@link XMLAttributes} object and attempts to interpret it as a
   * Boolean.  If successful, this method stores the value into the variable
   * passed in as <code>value</code>.  If no attribute named <code>name</code> can be found in
   * this {@link XMLAttributes} object or the value of the attribute could not be
   * interpreted as a Boolean, <code>value</code> is left unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#boolean\'>XML Schema</a>, the
   * valid Boolean values are: <code>\'true\'</code>, <code>\'false\'</code>,
   * <code>\'1\'</code>, and <code>\'0\'</code>, read in a case-insensitive
   * manner.
   <p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a Boolean, then the
   * error logged to <code>log</code> indicates that a value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param triple an {@link XMLTriple} object describing the attribute to read.
   <p>
   * @param value a Boolean, the return parameter into which the value should
   * be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a <code>double</code> value.
   <p>
   * This method reads the value associated with the attribute <code>name</code> in
   * this {@link XMLAttributes} object and attempts to interpret it as a
   * <code>double</code>.  If successful, this method stores the value into
   * the variable passed in as <code>value</code>.  If no attribute named <code>name</code> can
   * be found in this {@link XMLAttributes} object or the value of the attribute
   * could not be interpreted as a <code>double</code>, <code>value</code> is left
   * unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#double\'>XML Schema</a>, valid
   * doubles are the same as valid doubles for the C language and in
   * addition, the special values <code>\'INF\'</code>, <code>\'-INF\'</code>,
   * and <code>\'NaN\'</code>, read in a case-insensitive manner.
   <p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a
   * <code>double</code>, then the error logged to <code>log</code> indicates that a
   * value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param name a string, the name of the attribute.
   <p>
   * @param value a <code>double</code>, the return parameter into which the
   * value should be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * <p>
 * @note The XML namespace associated with the attribute named <code>name</code> is not
 * considered when looking up the attribute.  If more than one attribute with
 * the same name exists with different XML namespace URI associations, this
 * method will operate on the first one it encounters; this behavior is
 * identical to {@link XMLAttributes#getIndex (String name)} .  To
 * have XML namespaces be considered too, callers should use the variant
 * method that takes an {@link XMLTriple} object instead of a string <code>name</code>
 * argument. 
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a <code>double</code> value.
   <p>
   * This method reads the value associated with the attribute described by
   * <code>triple</code> in this {@link XMLAttributes} object and attempts to interpret it as a
   * <code>double</code>.  If successful, this method stores the value into
   * the variable passed in as <code>value</code>.  If no attribute named <code>name</code> can
   * be found in this {@link XMLAttributes} object or the value of the attribute
   * could not be interpreted as a <code>double</code>, <code>value</code> is left
   * unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#double\'>XML Schema</a>, valid
   * doubles are the same as valid doubles for the C language and in
   * addition, the special values <code>\'INF\'</code>, <code>\'-INF\'</code>,
   * and <code>\'NaN\'</code>, read in a case-insensitive manner.
   <p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a
   * <code>double</code>, then the error logged to <code>log</code> indicates that a
   * value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param triple an {@link XMLTriple} object describing the attribute to read.
   <p>
   * @param value a <code>double</code>, the return parameter into which the
   * value should be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a <code>long</code> integer value.
   <p>
   * This method reads the value associated with the attribute <code>name</code> in
   * this {@link XMLAttributes} object and attempts to interpret it as a
   * <code>long</code>.  If successful, this method stores the value into the
   * variable passed in as <code>value</code>.  If no attribute named <code>name</code> can be
   * found in this {@link XMLAttributes} object or the value of the attribute could
   * not be interpreted as a <code>long</code>, <code>value</code> is left unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#integer\'>XML Schema</a>, valid
   * <code>long</code>-type values are zero, all positive whole numbers and
   * all negative whole numbers.  This is unfortunately a larger space of
   * values than can be represented in a long integer, so libSBML limits the
   * possible values to those that can be stored in a <code>long</code> data
   * type.
   <p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a
   * <code>long</code>, then the error logged to <code>log</code> indicates that a
   * value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param name a string, the name of the attribute.
   <p>
   * @param value a <code>long</code>, the return parameter into which the
   * value should be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * <p>
 * @note The XML namespace associated with the attribute named <code>name</code> is not
 * considered when looking up the attribute.  If more than one attribute with
 * the same name exists with different XML namespace URI associations, this
 * method will operate on the first one it encounters; this behavior is
 * identical to {@link XMLAttributes#getIndex (String name)} .  To
 * have XML namespaces be considered too, callers should use the variant
 * method that takes an {@link XMLTriple} object instead of a string <code>name</code>
 * argument. 
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a <code>long</code> integer value.
   <p>
   * This method reads the value associated with the attribute described by
   * <code>triple</code> in this {@link XMLAttributes} object and attempts to interpret it as a
   * <code>long</code>.  If successful, this method stores the value into the
   * variable passed in as <code>value</code>.  If no attribute named <code>name</code> can be
   * found in this {@link XMLAttributes} object or the value of the attribute could
   * not be interpreted as a <code>long</code>, <code>value</code> is left unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#integer\'>XML Schema</a>, valid
   * <code>long</code>-type values are zero, all positive whole numbers and
   * all negative whole numbers.  This is unfortunately a larger space of
   * values than can be represented in a long, so libSBML limits the possible
   * values to those that can be stored in a <code>long</code> data type.
<p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a
   * <code>long</code>, then the error logged to <code>log</code> indicates that a
   * value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param triple an {@link XMLTriple} object describing the attribute
   <p>
   * @param value a <code>long</code>, the return parameter into which the
   * value should be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * <p>
 * @note The XML namespace associated with the attribute named <code>name</code> is not
 * considered when looking up the attribute.  If more than one attribute with
 * the same name exists with different XML namespace URI associations, this
 * method will operate on the first one it encounters; this behavior is
 * identical to {@link XMLAttributes#getIndex (String name)} .  To
 * have XML namespaces be considered too, callers should use the variant
 * method that takes an {@link XMLTriple} object instead of a string <code>name</code>
 * argument. 
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a <code>int</code> value.
   <p>
   * This method reads the value associated with the attribute <code>name</code> in
   * this {@link XMLAttributes} object and attempts to interpret it as an
   * <code>int</code>.  If successful, this method stores the value into the
   * variable passed in as <code>value</code>.  If no attribute named <code>name</code> can be
   * found in this {@link XMLAttributes} object or the value of the attribute could
   * not be interpreted as an <code>int</code>, <code>value</code> is left unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#integer\'>XML Schema</a>, valid
   * <code>long</code>-type values are zero, all positive whole numbers and
   * all negative whole numbers.  The present method is designed to interpret
   * numbers as signed <code>int</code> values and cannot represent larger
   * values.  Note that variant methods on {@link XMLAttributes} are available to
   * work with <code>long</code> type and <code>long</code> type
   * values; users may wish to investigate those methods if they need to
   * handle larger integer values.
   <p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a
   * <code>long</code>, then the error logged to <code>log</code> indicates that a
   * value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param name a string, the name of the attribute.
   <p>
   * @param value an <code>int</code>, the return parameter into which the
   * value should be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * <p>
 * @note The XML namespace associated with the attribute named <code>name</code> is not
 * considered when looking up the attribute.  If more than one attribute with
 * the same name exists with different XML namespace URI associations, this
 * method will operate on the first one it encounters; this behavior is
 * identical to {@link XMLAttributes#getIndex (String name)} .  To
 * have XML namespaces be considered too, callers should use the variant
 * method that takes an {@link XMLTriple} object instead of a string <code>name</code>
 * argument. 
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a <code>int</code> value.
   <p>
   * This method reads the value associated with the attribute described by
   * <code>triple</code> in this {@link XMLAttributes} object and attempts to interpret it as an
   * <code>int</code>.  If successful, this method stores the value into the
   * variable passed in as <code>value</code>.  If no attribute named <code>name</code> can be
   * found in this {@link XMLAttributes} object or the value of the attribute could
   * not be interpreted as an <code>int</code>, <code>value</code> is left unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#integer\'>XML Schema</a>, valid
   * <code>long</code>-type values are zero, all positive whole numbers and
   * all negative whole numbers.  The present method is designed to interpret
   * numbers as signed <code>int</code> values and cannot represent larger
   * values.  Note that variant methods on {@link XMLAttributes} are available to
   * work with <code>long</code> type and <code>long</code> type
   * values; users may wish to investigate those methods if they need to
   * handle larger integer values.
   <p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a
   * <code>long</code>, then the error logged to <code>log</code> indicates that a
   * value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param triple an {@link XMLTriple} object describing the attribute
   <p>
   * @param value an <code>int</code>, the return parameter into which the
   * value should be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a <code>long</code> value.
   <p>
   * This method reads the value associated with the attribute <code>name</code> in
   * this {@link XMLAttributes} object and attempts to interpret it as an
   * <code>long</code>.  If successful, this method stores the value
   * into the variable passed in as <code>value</code>.  If no attribute named <code>name</code>
   * can be found in this {@link XMLAttributes} object or the value of the attribute
   * could not be interpreted as an <code>long</code>, <code>value</code> is
   * left unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#integer\'>XML Schema</a>, valid
   * <code>long</code>-type values are zero, all positive whole numbers and
   * all negative whole numbers.  The present method is designed to interpret
   * numbers as <code>long</code> and cannot represent larger values.
   * Note that a variant method on {@link XMLAttributes} is available to work with
   * <code>long</code> type values; users may wish to investigate that method
   * if they need to handle large integer values.
   <p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a
   * <code>long</code>, then the error logged to <code>log</code> indicates that a
   * value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param name a string, the name of the attribute.
   <p>
   * @param value an <code>int</code>, the return parameter into which the
   * value should be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * <p>
 * @note The XML namespace associated with the attribute named <code>name</code> is not
 * considered when looking up the attribute.  If more than one attribute with
 * the same name exists with different XML namespace URI associations, this
 * method will operate on the first one it encounters; this behavior is
 * identical to {@link XMLAttributes#getIndex (String name)} .  To
 * have XML namespaces be considered too, callers should use the variant
 * method that takes an {@link XMLTriple} object instead of a string <code>name</code>
 * argument. 
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a <code>long</code> value.
   <p>
   * This method reads the value associated with the attribute described by
   * <code>triple</code> in this {@link XMLAttributes} object and attempts to interpret it as an
   * <code>long</code>.  If successful, this method stores the value
   * into the variable passed in as <code>value</code>.  If no attribute named <code>name</code>
   * can be found in this {@link XMLAttributes} object or the value of the attribute
   * could not be interpreted as an <code>long</code>, <code>value</code> is
   * left unmodified.
   <p>
   * According to the specification of <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#integer\'>XML Schema</a>, valid
   * <code>long</code>-type values are zero, all positive whole numbers and
   * all negative whole numbers.  The present method is designed to interpret
   * numbers as <code>long</code> and cannot represent larger values.
   * Note that a variant method on {@link XMLAttributes} is available to work with
   * <code>long</code> type values; users may wish to investigate that method
   * if they need to handle large integer values.
   <p>
   * Errors in attempting to interpret the format are logged to <code>log</code>, if an
   * error log object is supplied.  If the parameter <code>required</code> is <code>true</code>,
   * then if no attribute named <code>name</code> exists, an error will be logged to 
   * <code>log</code> with a description that explains the error is due to a missing
   * required attribute.  If the parameter <code>required</code> is <code>false</code> (the
   * default), then if no attribute <code>name</code> exists, no error will be logged
   * and this method will simply return <code>false</code> to indicate an unsuccessful
   * assignment.  Finally, if <code>log</code> is provided, <code>name</code> exists, but the
   * value associated with <code>name</code> could not be parsed as a
   * <code>long</code>, then the error logged to <code>log</code> indicates that a
   * value type mismatch occurred.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param triple an {@link XMLTriple} object describing the attribute
   <p>
   * @param value an <code>int</code>, the return parameter into which the
   * value should be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a string value.
   <p>
   * This method reads the value associated with the attribute <code>name</code> in
   * this {@link XMLAttributes} object and stores the value into the variable passed
   * in as <code>value</code>.  If no attribute named <code>name</code> can be found in this
   * {@link XMLAttributes} object, <code>value</code> is left unmodified.
   <p>
   * Unlike the other variant methods on {@link XMLAttributes}, there are no format
   * errors possible when reading strings, since XML attribute values <em>are</em>
   * strings.  However, the case of a missing attribute can still occur.
   * Errors will be logged to <code>log</code>, if an error log object is supplied.  If
   * the parameter <code>required</code> is <code>true</code>, then if no attribute named <code>name</code>
   * exists, an error will be logged to <code>log</code> with a description that
   * explains the error is due to a missing required attribute.  If the
   * parameter <code>required</code> is <code>false</code> (the default), then if no attribute 
   * <code>name</code> exists, no error will be logged and this method will simply return
   * <code>false</code> to indicate an unsuccessful assignment.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param name a string, the name of the attribute.
   <p>
   * @param value a string, the return parameter into which the value should
   * be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * <p>
 * @note The XML namespace associated with the attribute named <code>name</code> is not
 * considered when looking up the attribute.  If more than one attribute with
 * the same name exists with different XML namespace URI associations, this
 * method will operate on the first one it encounters; this behavior is
 * identical to {@link XMLAttributes#getIndex (String name)} .  To
 * have XML namespaces be considered too, callers should use the variant
 * method that takes an {@link XMLTriple} object instead of a string <code>name</code>
 * argument. 
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/**
   * Interprets an attribute as a string value.
   <p>
   * This method reads the value associated with the attribute described by
   * <code>triple</code> in this {@link XMLAttributes} object and stores the value into the
   * variable passed in as <code>value</code>.  If no attribute named <code>name</code> can be
   * found in this {@link XMLAttributes} object, <code>value</code> is left unmodified.
   <p>
   * Unlike the other variant methods on {@link XMLAttributes}, there are no format
   * errors possible when reading strings, since XML attribute values <em>are</em>
   * strings.  However, the case of a missing attribute can still occur.
   * Errors will be logged to <code>log</code>, if an error log object is supplied.  If
   * the parameter <code>required</code> is <code>true</code>, then if no attribute named <code>name</code>
   * exists, an error will be logged to <code>log</code> with a description that
   * explains the error is due to a missing required attribute.  If the
   * parameter <code>required</code> is <code>false</code> (the default), then if no attribute 
   * <code>name</code> exists, no error will be logged and this method will simply return
   * <code>false</code> to indicate an unsuccessful assignment.
   <p>
   * Values are read using the \'C\' locale.
   <p>
   * @param triple an {@link XMLTriple} object describing the attribute
   <p>
   * @param value a string, the return parameter into which the value should
   * be assigned.
   <p>
   * @param log an {@link XMLErrorLog} object, an optional error log for reporting
   * problems.
   <p>
   * @param required a Boolean flag, to indicate whether it should be
   * considered an error if the attribute <code>name</code> cannot be found in this
   * {@link XMLAttributes} object.
   <p>
   * @param line a long integer, the line number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @param column a long integer, the column number at which the error
   * occurred.  Callers can supply this value if it makes sense for their
   * applications.
   <p>
   * @returns <code>true</code> if the attribute was successfully read into value, 
   * <code>false</code> otherwise.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLAttributes::write(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::setErrorLog(XMLErrorLog* log) "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::attributeTypeError "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::attributeRequiredError "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/** * @internal */ public
";


%javamethodmodifiers XMLAttributes::readInto "
/** * @internal */ public
";


%typemap(javaimports) XMLConstructorException "
/** 
 *  Exceptions thrown by some libSBML constructors.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * In some situations, constructors for SBML objects may need to indicate
 * to callers that the creation of the object failed.  The failure may be
 * for different reasons, such as an attempt to use invalid parameters or a
 * system condition such as a memory error.  To communicate this to
 * callers, those classes will throw an {@link XMLConstructorException}.  
 <p>
 * In languages that don\'t have an exception mechanism (e.g., C), the
 * constructors generally try to return an error code instead of throwing
 * an exception.
 <p>
 * @see SBMLConstructorException
 */
"


%javamethodmodifiers XMLConstructorException::XMLConstructorException(std::string message="NULL reference in XML constructor") "
/** * @internal */ public
";


%typemap(javaimports) XMLNamespaces "
/** 
 *  An XML Namespace.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * This class serves to organize functionality for tracking XML namespaces
 * in a document or data stream.  The namespace declarations are stored as
 * a list of pairs of XML namespace URIs and prefix strings.  These
 * correspond to the parts of a namespace declaration on an XML element.
 * For example, in the following XML fragment,
 * <pre class=\'fragment\'>
&lt;annotation&gt;
    &lt;mysim:nodecolors xmlns:mysim=\'urn:lsid:mysim.org\'
         mysim:bgcolor=\'green\' mysim:fgcolor=\'white\'/&gt;
&lt;/annotation&gt;
</pre>
 * there is one namespace declaration.  Its URI is
 * <code>urn:lsid:mysim.org</code> and its prefix is <code>mysim</code>.
 * This pair could be stored as one item in an {@link XMLNamespaces} list.
 <p>
 * {@link XMLNamespaces} provides various methods for manipulating the list of
 * prefix-URI pairs.  Individual namespaces stored in a given XMLNamespace
 * object instance can be retrieved based on their index using
 * {@link XMLNamespaces#getPrefix(int index)}, or by their characteristics such as
 * their URI or position in the list.
 */
"


%javamethodmodifiers XMLNamespaces::XMLNamespaces "
/**
   * Creates a new empty list of XML namespace declarations.
   */ public
";


%javamethodmodifiers XMLNamespaces::XMLNamespaces(const XMLNamespaces& orig) "
/**
   * Copy constructor; creates a copy of this {@link XMLNamespaces} list.
   <p>
   * @param orig the {@link XMLNamespaces} object to copy
   <p>
   * @throws XMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers XMLNamespaces::clone() const "
/**
   * Creates and returns a deep copy of this {@link XMLNamespaces} object.
   <p>
   * @return the (deep) copy of this {@link XMLNamespaces} object.
   */ public
";


%javamethodmodifiers XMLNamespaces::add(const std::string& uri, const std::string& prefix = "") "
/**
   * Appends an XML namespace prefix and URI pair to this list of namespace
   * declarations.
   <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  If there is an XML namespace with the given <code>uri</code> prefix
   * in this list, then its corresponding URI will be overwritten by the
   * new <code>uri</code> unless the uri represents the core sbml namespace.
   * Calling programs could use one of the other {@link XMLNamespaces}
   * methods, such as
   * {@link XMLNamespaces#hasPrefix(String)} and 
   * {@link XMLNamespaces#hasURI(String)} to
   * inquire whether a given prefix and/or URI
   * is already present in this {@link XMLNamespaces} object.
   * If the <code>uri</code> represents the sbml namespaces then it will not be
   * overwritten, as this has potentially serious consequences. If it
   * is necessary to replace the sbml namespace the namespace should be removed
   * prior to adding the new namespace.
   <p>
   * @param uri a string, the uri for the namespace
   * @param prefix a string, the prefix for the namespace
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLNamespaces::remove(int index) "
/**
   * Removes an XML Namespace stored in the given position of this list.
   <p>
   * @param index an integer, position of the namespace to remove.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   * </ul>
   */ public
";


%javamethodmodifiers XMLNamespaces::remove(const std::string& prefix) "
/**
   * Removes an XML Namespace with the given prefix.
   <p>
   * @param prefix a string, prefix of the required namespace.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * @see #remove(int index)
   */ public
";


%javamethodmodifiers XMLNamespaces::clear "
/**
   * Clears (deletes) all XML namespace declarations in this {@link XMLNamespaces}
   * object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #remove(int index)
   */ public
";


%javamethodmodifiers XMLNamespaces::getIndex(const std::string uri) const "
/**
   * Look up the index of an XML namespace declaration by URI.
   <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  If this {@link XMLNamespaces} object contains a pair with the given
   * URI <code>uri</code>, this method returns its index in the list.
   <p>
   * @param uri a string, the URI of the sought-after namespace.
   <p>
   * @return the index of the given declaration, or <code>-1</code> if not
   * present.
   */ public
";


%javamethodmodifiers XMLNamespaces::containsUri(const std::string uri) const "
/**
   * Tests whether the given uri is contained in this set of namespaces. 
   */ public
";


%javamethodmodifiers XMLNamespaces::getIndexByPrefix(const std::string prefix) const "
/**
   * Look up the index of an XML namespace declaration by prefix.
   <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  If this {@link XMLNamespaces} object contains a pair with the given
   * prefix <code>prefix</code>, this method returns its index in the list.
   <p>
   * @param prefix a string, the prefix string of the sought-after
   * namespace
   <p>
   * @return the index of the given declaration, or <code>-1</code> if not
   * present.
   */ public
";


%javamethodmodifiers XMLNamespaces::getLength() const "
/**
   * Returns the total number of URI-and-prefix pairs stored in this
   * particular {@link XMLNamespaces} instance.
   <p>
   * @return the number of namespaces in this list.
   */ public
";


%javamethodmodifiers XMLNamespaces::getNumNamespaces() const "
/**
   * Returns the total number of URI-and-prefix pairs stored in this
   * particular {@link XMLNamespaces} instance.
   <p>
   * @return the number of namespaces in this list.
   <p>
   * This function is an alias for getLength introduced for consistency
   * with other XML classes.
   */ public
";


%javamethodmodifiers XMLNamespaces::getPrefix(int index) const "
/**
   * Look up the prefix of an XML namespace declaration by its position.
   <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the prefix of the <code>n</code>th
   * element in that list (if it exists).  Callers should use
   * {@link XMLAttributes#getLength()} first to find out how many namespaces are
   * stored in the list.
   <p>
   * @param index an integer, position of the sought-after prefix
   <p>
   * @return the prefix of an XML namespace declaration in this list (by
   * position), or an empty string if the <code>index</code> is out of range
   <p>
   * @see #getLength()
   */ public
";


%javamethodmodifiers XMLNamespaces::getPrefix(const std::string& uri) const "
/**
   * Look up the prefix of an XML namespace declaration by its URI.
   <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the prefix for a pair that has the
   * given <code>uri</code>.
   <p>
   * @param uri a string, the URI of the prefix being sought
   <p>
   * @return the prefix of an XML namespace declaration given its URI, or
   * an empty string if no such <code>uri</code> exists in this {@link XMLNamespaces} object
   */ public
";


%javamethodmodifiers XMLNamespaces::getURI(int index) const "
/**
   * Look up the URI of an XML namespace declaration by its position.
   <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the URI of the <code>n</code>th element
   * in that list (if it exists).  Callers should use
   * {@link XMLAttributes#getLength()} first to find out how many namespaces are
   * stored in the list.
   <p>
   * @param index an integer, position of the required URI.
   <p>
   * @return the URI of an XML namespace declaration in this list (by
   * position), or an empty string if the <code>index</code> is out of range.
   <p>
   * @see #getLength()
   */ public
";


%javamethodmodifiers XMLNamespaces::getURI(const std::string& prefix = "") const "
/**
   * Look up the URI of an XML namespace declaration by its prefix.
   <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the namespace URI for a pair that has
   * the given <code>prefix</code>.
   <p>
   * @param prefix a string, the prefix of the required URI
   <p>
   * @return the URI of an XML namespace declaration having the given 
   * <code>prefix</code>, or an empty string if no such prefix-and-URI pair exists
   * in this {@link XMLNamespaces} object
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   <p>
   * @see #getURI()
   */ public
";


%javamethodmodifiers XMLNamespaces::isEmpty() const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link XMLNamespaces} list is empty.
   <p>
   * @return <code>true</code> if this {@link XMLNamespaces} list is empty, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLNamespaces::hasURI(const std::string& uri) const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether an XML
   * Namespace with the given URI is contained in this {@link XMLNamespaces} list.
   <p>
   * @param uri a string, the uri for the namespace
   <p>
   * @return <code>true</code> if an XML Namespace with the given URI is contained in
   * this {@link XMLNamespaces} list, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLNamespaces::hasPrefix(const std::string& prefix) const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether an XML
   * Namespace with the given prefix is contained in this {@link XMLNamespaces}
   * list.
   <p>
   * @param prefix a string, the prefix for the namespace
   <p>
   * @return <code>true</code> if an XML Namespace with the given URI is contained in
   * this {@link XMLNamespaces} list, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLNamespaces::hasNS(const std::string& uri, const std::string& prefix) const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether an XML
   * Namespace with the given URI and prefix pair is contained in this
   * {@link XMLNamespaces} list.
   <p>
   * @param uri a string, the URI for the namespace
   * @param prefix a string, the prefix for the namespace
   <p>
   * @return <code>true</code> if an XML Namespace with the given uri/prefix pair is
   * contained in this {@link XMLNamespaces} list, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLNamespaces::removeDefault "
/** * @internal */ public
";


%javamethodmodifiers XMLNamespaces::containIdenticalSetNS(XMLNamespaces* rhs) "
/** * @internal */ public
";


%typemap(javaimports) XMLToken "
/** 
 *  A token in an XML stream.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The libSBML XML parser interface can read an XML file or data stream and
 * convert the contents into tokens.  The tokens represent items in the XML
 * stream, either XML elements (start or end tags) or text that appears as
 * content inside an element.  The {@link XMLToken} class is libSBML\'s low-level
 * representation of these entities.
 <p>
 * Each {@link XMLToken} has the following information associated with it:
 * <ol>
 * <li> <em>Qualified name</em>: every XML element or XML attribute has a
 * name (e.g., for the element <code>&lt;mytag&gt;</code>, the name is
 * <code>\'mytag\'</code>), but this name may be qualified with a namespace
 * (e.g., it may appear as <code>&lt;someNamespace:mytag&gt;</code> in the
 * input).  An {@link XMLToken} stores the name of a token, along with any namespace
 * qualification present, through the use of an {@link XMLTriple} object.  This
 * object stores the bare name of the element, its XML namespace prefix (if
 * any), and the XML namespace with which that prefix is associated.
 * <li> <em>Namespaces</em>: An XML token can have one or more XML namespaces
 * associated with it.  These namespaces may be specified explicitly on the
 * element or inherited from parent elements.  In libSBML, a list of
 * namespaces is stored in an {@link XMLNamespaces} object.  An {@link XMLToken} possesses a
 * field for storing an {@link XMLNamespaces} object.
 * <li> <em>Attributes</em>: XML elements can have attributes associated with
 * them, and these attributes can have values assigned to them.  The set of
 * attribute-value pairs is stored in an {@link XMLAttributes} object stored in an
 * {@link XMLToken} object.  (Note: only elements can have attributes&mdash;text
 * blocks cannot have them in XML.)
 * <li> <em>Line</em> number: the line number in the input where the token appears.
 * <li> <em>Column</em> number: the column number in the input where the token appears.
 * </ol>
 <p>
 * The {@link XMLToken} class serves as base class for {@link XMLNode}.  XML lends itself to
 * a tree-structured representation, and in libSBML, the nodes in an XML
 * document tree are {@link XMLNode} objects.  Most higher-level libSBML classes and
 * methods that offer XML-level functionality (such as the methods on {@link SBase}
 * for interacting with annotations) work with {@link XMLNode} objects rather than
 * {@link XMLToken} objects directly.
 <p>
 * @see XMLNode
 * @see XMLTriple
 * @see XMLAttributes
 * @see XMLNamespaces
 */
"


%javamethodmodifiers XMLToken::XMLToken "
/**
   * Creates a new empty {@link XMLToken} object.
   */ public
";


%javamethodmodifiers XMLToken::XMLToken(  const XMLTriple&      triple , const XMLAttributes&  attributes , const XMLNamespaces&  namespaces , const unsigned int    line   = 0 , const unsigned int    column = 0 ) "
/**
   * Creates an XML start element with attributes and namespace declarations.
   <p>
   * @param triple an {@link XMLTriple} object describing the start tag.
   <p>
   * @param attributes {@link XMLAttributes}, the attributes to set on the element to
   * be created.
   <p>
   * @param namespaces {@link XMLNamespaces}, the namespaces to set on the element to
   * be created.
   <p>
   * @param line a long integer, the line number to associate with the
   * token (default = 0).
   <p>
   * @param column a long integer, the column number to associate with the
   * token (default = 0).
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::XMLToken(  const XMLTriple&      triple , const XMLAttributes&  attributes , const unsigned int    line   = 0 , const unsigned int    column = 0 ) "
/**
   * Creates an XML start element with attributes.
   <p>
   * @param triple an {@link XMLTriple} object describing the start tag.
   <p>
   * @param attributes {@link XMLAttributes}, the attributes to set on the element to
   * be created.
   <p>
   * @param line a long integer, the line number to associate with the
   * token (default = 0).
   <p>
   * @param column a long integer, the column number to associate with the
   * token (default = 0).
   <p>
   * The XML namespace component of this {@link XMLToken} object will be left empty.
   * See the other variants of the {@link XMLToken} constructors for versions that
   * take namespace arguments.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::XMLToken(  const XMLTriple&    triple , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
/**
   * Creates an XML end element.
   <p>
   * @param triple an {@link XMLTriple} object describing the end tag.
   <p>
   * @param line a long integer, the line number to associate with the
   * token (default = 0).
   <p>
   * @param column a long integer, the column number to associate with the
   * token (default = 0).
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::XMLToken(  const std::string&  chars , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
/**
   * Creates a text object.
   <p>
   * @param chars a string, the text to be added to the {@link XMLToken} object.
   <p>
   * @param line a long integer, the line number to associate with the
   * token (default = 0).
   <p>
   * @param column a long integer, the column number to associate with the
   * token (default = 0).
   <p>
   * @throws XMLConstructorException
   * Thrown if the argument <code>chars</code> is <code>null.</code>
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::XMLToken(const XMLToken& orig) "
/**
   * Copy constructor; creates a copy of this {@link XMLToken} object.
   <p>
   * @param orig the {@link XMLToken} object to copy.
   <p>
   * @throws XMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers XMLToken::clone() const "
/**
   * Creates and returns a deep copy of this {@link XMLToken} object.
   <p>
   * @return the (deep) copy of this {@link XMLToken} object.
   */ public
";


%javamethodmodifiers XMLToken::getAttributes() const "
/**
   * Returns the attributes of the XML element represented by this token.
   <p>
   * @return the attributes of this XML element, stored in an {@link XMLAttributes}
   * object.
   */ public
";


%javamethodmodifiers XMLToken::setAttributes(const XMLAttributes& attributes) "
/**
   * Sets the attributes on the XML element represented by this token.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param attributes an {@link XMLAttributes} object to be assigned to this
   * {@link XMLToken} object, thereby setting the XML attributes associated with this
   * token.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @note This function replaces any existing {@link XMLAttributes} object
   * on this {@link XMLToken} object with the one given by <code>attributes</code>.
   */ public
";


%javamethodmodifiers XMLToken::addAttr(  const std::string& name , const std::string& value , const std::string& namespaceURI = "" , const std::string& prefix = "") "
/**
   * Adds an attribute to the XML element represented by this token.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param name a string, the so-called \'local part\' of the attribute name;
   * that is, the attribute name without any namespace qualifier or prefix.
   <p>
   * @param value a string, the value assigned to the attribute.
   <p>
   * @param namespaceURI a string, the XML namespace URI of the attribute.
   <p>
   * @param prefix a string, the prefix for the XML namespace.
   <p>
   * Recall that in XML, the complete form of an attribute on an XML element
   * is the following:
   * <center>
   * <code>prefix:name=\'value\'</code>
   * </center>
   * The <code>name</code> part is the name of the attribute, the
   * <code>\'value\'</code> part is the value assigned to the attribute (and
   * it is always a quoted string), and the <code>prefix</code> part is
   * an optional XML namespace prefix.  Internally in libSBML, this data
   * is stored in an {@link XMLAttributes} object associated with this {@link XMLToken}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   *
   * </ul> <p>
   * <p>
 * @note If an attribute with the same name and XML namespace URI already
 * exists on this {@link XMLToken} object, then the previous value will be replaced
 * with the new value provided to this method.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::addAttr( const XMLTriple& triple, const std::string& value) "
/**
   * Adds an attribute to the XML element represented by this token.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param triple an {@link XMLTriple} object defining the attribute, its value,
   * and optionally its XML namespace (if any is provided).
   <p>
   * @param value a string, the value assigned to the attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   *
   * </ul> <p>
   * <p>
 * @note If an attribute with the same name and XML namespace URI already
 * exists on this {@link XMLToken} object, then the previous value will be replaced
 * with the new value provided to this method.
   */ public
";


%javamethodmodifiers XMLToken::removeAttr(int n) "
/**
   * Removes the <em>n</em>th attribute from the XML element represented by
   * this token.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param n an integer the index of the resource to be deleted
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * The value {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE} is returned if there is no attribute on this
   * element at the given index <code>n</code>.
   <p>
   * @see #getAttrIndex(XMLTriple triple) 
   * @see #getAttrIndex(String name, String uri) 
   * @see #getAttributesLength()
   */ public
";


%javamethodmodifiers XMLToken::removeAttr(const std::string& name, const std::string& uri = "") "
/**
   * Removes an attribute from the XML element represented by this token.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param name   a string, the name of the attribute to be removed.
   * @param uri    a string, the XML namespace URI of the attribute to be removed.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * The value {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE} is returned if there is no attribute on this
   * element with the given <code>name</code> (and <code>uri</code> if specified).
   <p>
   * @see #hasAttr(String name, String uri) 
   */ public
";


%javamethodmodifiers XMLToken::removeAttr(const XMLTriple& triple) "
/**
   * Removes an attribute from the XML element represented by this token.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param triple an {@link XMLTriple} describing the attribute to be removed.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * The value {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE} is returned if there is no attribute on this
   * element matching the properties of the given <code>triple</code>.
   <p>
   * @see #hasAttr(XMLTriple triple) 
   */ public
";


%javamethodmodifiers XMLToken::clearAttributes "
/**
   * Removes all attributes of this {@link XMLToken} object.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * </ul>
   */ public
";


%javamethodmodifiers XMLToken::getAttrIndex(const std::string& name, const std::string& uri="") const "
/**
   * Returns the index of the attribute with the given name and namespace
   * URI.
   <p>
   * @param name a string, the name of the attribute.
   * @param uri  a string, the namespace URI of the attribute.
   <p>
   * @return the index of an attribute with the given local name and
   * namespace URI, or <code>-1</code> if it is not present on this token.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::getAttrIndex(const XMLTriple& triple) const "
/**
   * Returns the index of the attribute defined by the given {@link XMLTriple}
   * object.
   <p>
   * @param triple the {@link XMLTriple} object that defines the attribute whose
   * index is being sought.
   <p>
   * @return the index of an attribute with the given {@link XMLTriple} object, or
   * <code>-1</code> if no such attribute is present on this token.
   */ public
";


%javamethodmodifiers XMLToken::getAttributesLength() const "
/**
   * Returns the number of attributes on this {@link XMLToken} object.
   <p>
   * @return the number of attributes possessed by this token.
   <p>
   * @see #hasAttr(int)
   */ public
";


%javamethodmodifiers XMLToken::getAttrName(int index) const "
/**
   * Returns the name of the <em>n</em>th attribute in this token\'s list of
   * attributes.
   <p>
   * @param index an integer, the position of the attribute whose name
   * is being sought.
   <p>
   * @return the name of the attribute located at position <code>n</code> in the list
   * of attributes possessed by this {@link XMLToken} object.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  {@link XMLToken#hasAttr(int)} can be used to test for an
 * attribute\'s existence explicitly, and {@link XMLToken#getAttributesLength()} can
 * be used to find out the number of attributes possessed by this token. 
   <p>
   * @see #hasAttr(int)
   * @see #getAttributesLength()
   */ public
";


%javamethodmodifiers XMLToken::getAttrPrefix(int index) const "
/**
   * Returns the prefix of the <em>n</em>th attribute in this token\'s list of
   * attributes.
   <p>
   * @param index an integer, the position of the attribute whose prefix is
   * being sought.
   <p>
   * @return the XML namespace prefix of the attribute located at position 
   * <code>n</code> in the list of attributes possessed by this {@link XMLToken} object.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  {@link XMLToken#hasAttr(int)} can be used to test for an
 * attribute\'s existence explicitly, and {@link XMLToken#getAttributesLength()} can
 * be used to find out the number of attributes possessed by this token.
   <p>
   * @see #hasAttr(int)
   * @see #getAttributesLength()
   */ public
";


%javamethodmodifiers XMLToken::getAttrPrefixedName(int index) const "
/**
   * Returns the prefixed name of the <em>n</em>th attribute in this token\'s
   * list of attributes.
   <p>
   * In this context, <em>prefixed name</em> means the name of the attribute
   * prefixed with the XML namespace prefix assigned to the attribute.  This
   * will be a string of the form <code>prefix:name</code>.
   <p>
   * @param index an integer, the position of the attribute whose prefixed
   * name is being sought.
   <p>
   * @return the prefixed name of the attribute located at position 
   * <code>n</code> in the list of attributes possessed by this {@link XMLToken} object.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  {@link XMLToken#hasAttr(int)} can be used to test for an
 * attribute\'s existence explicitly, and {@link XMLToken#getAttributesLength()} can
 * be used to find out the number of attributes possessed by this token.
   */ public
";


%javamethodmodifiers XMLToken::getAttrURI(int index) const "
/**
   * Returns the XML namespace URI of the <em>n</em>th attribute in this
   * token\'s list of attributes.
   <p>
   * @param index an integer, the position of the attribute whose namespace
   * URI is being sought.
   <p>
   * @return the XML namespace URI of the attribute located at position <code>n</code>
   * in the list of attributes possessed by this {@link XMLToken} object.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  {@link XMLToken#hasAttr(int)} can be used to test for an
 * attribute\'s existence explicitly, and {@link XMLToken#getAttributesLength()} can
 * be used to find out the number of attributes possessed by this token.
   */ public
";


%javamethodmodifiers XMLToken::getAttrValue(int index) const "
/**
   * Returns the value of the <em>n</em>th attribute in this token\'s list of
   * attributes.
   <p>
   * @param index an integer, the position of the attribute whose value is
   * required.
   <p>
   * @return the value of the attribute located at position <code>n</code> in the list
   * of attributes possessed by this {@link XMLToken} object.
   <p>
   * <p>
 * @note If <code>index</code> is out of range, this method will return an empty
 * string.  {@link XMLToken#hasAttr(int)} can be used to test for an
 * attribute\'s existence explicitly, and {@link XMLToken#getAttributesLength()} can
 * be used to find out the number of attributes possessed by this token.
   */ public
";


%javamethodmodifiers XMLToken::getAttrValue(const std::string name, const std::string uri="") const "
/**
   * Returns the value of the attribute with a given name and XML namespace URI.
   <p>
   * @param name a string, the name of the attribute whose value is being
   * sought.
   <p>
   * @param uri a string, the XML namespace URI of the attribute.
   <p>
   * @return The value of the attribute, as a string.
   <p>
   * @note If an attribute with the given <code>name</code> and <code>uri</code> does not exist
   * on this token object, this method will return an empty string.
   * {@link XMLToken#hasAttr(String, String)} can be used to test
   * explicitly for the presence of an attribute with a given name and
   * namespace.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::getAttrValue(const XMLTriple& triple) const "
/**
   * Returns the value of the attribute specified by a given {@link XMLTriple} object.
   <p>
   * @param triple an {@link XMLTriple} describing the attribute whose value is being
   * sought.
   <p>
   * @return The value of the attribute, as a string.
   <p>
   * @note If an attribute defined by the given <code>triple</code> does not exist on
   * this token object, this method will return an empty string.
   * {@link XMLToken#hasAttr(XMLTriple)} can be used to test
   * explicitly for the existence of an attribute with the properties of
   * a given triple.
   */ public
";


%javamethodmodifiers XMLToken::hasAttr(int index) const "
/**
   * Returns <code>true</code> if an attribute with the given index exists.
   <p>
   * @param index an integer, the position of the attribute.
   <p>
   * @return <code>true</code> if this token object possesses an attribute with the
   * given index, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLToken::hasAttr(const std::string name, const std::string uri="") const "
/**
   * Returns <code>true</code> if an attribute with a given name and namespace URI
   * exists.
   <p>
   * @param name a string, the name of the attribute being sought.
   <p>
   * @param uri a string, the XML namespace URI of the attribute being
   * sought.
   <p>
   * @return <code>true</code> if an attribute with the given local name and namespace
   * URI exists in the list of attributes on this token object, <code>false</code>
   * otherwise.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::hasAttr(const XMLTriple& triple) const "
/**
   * Returns <code>true</code> if an attribute defined by a given {@link XMLTriple} object
   * exists.
   <p>
   * @param triple an {@link XMLTriple} object describing the attribute being sought.
   <p>
   * @return <code>true</code> if an attribute matching the properties of the given
   * {@link XMLTriple} object exists in the list of attributes on this token, 
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLToken::isAttributesEmpty() const "
/**
   * Returns <code>true</code> if this token has no attributes.
   <p>
   * @return <code>true</code> if the list of attributes on {@link XMLToken} object is empty,
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLToken::getNamespaces() const "
/**
   * Returns the XML namespaces declared for this token.
   <p>
   * @return the XML namespace declarations for this XML element.
   */ public
";


%javamethodmodifiers XMLToken::setNamespaces(const XMLNamespaces& namespaces) "
/**
   * Sets the XML namespaces on this XML element.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param namespaces the {@link XMLNamespaces} object to be assigned to this {@link XMLToken} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @note This function replaces any existing {@link XMLNamespaces} object on this
   * {@link XMLToken} object with the new one given by <code>namespaces</code>.
   */ public
";


%javamethodmodifiers XMLToken::addNamespace(const std::string& uri, const std::string& prefix = "") "
/**
   * Appends an XML namespace declaration to this token.
   <p>
   * The namespace added will be defined by the given XML namespace URI and
   * an optional prefix.  If this {@link XMLToken} object already possesses an XML
   * namespace declaration with the given <code>prefix</code>, then the existing XML
   * namespace URI will be overwritten by the new one given by <code>uri</code>.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param uri a string, the XML namespace URI for the namespace.
   <p>
   * @param prefix a string, the namespace prefix to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   *
   * </ul> <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::removeNamespace(int index) "
/**
   * Removes the <em>n</em>th XML namespace declaration.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param index an integer, the position of the namespace to be removed.
   * The position in this context refers to the position of the namespace in
   * the {@link XMLNamespaces} object stored in this {@link XMLToken} object.  Callers can
   * use one of the <code>getNamespace___()</code> methods to find the index
   * number of a given namespace.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * @see #getNamespaceIndex(String uri)
   * @see #getNamespaceIndexByPrefix(String prefix)
   * @see #getNamespacesLength()
   */ public
";


%javamethodmodifiers XMLToken::removeNamespace(const std::string& prefix) "
/**
   * Removes an XML namespace declaration having a given prefix.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param prefix a string, the prefix of the namespace to be removed.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * The value {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   * is returned if there is no namespace with the given <code>prefix</code> on this
   * element.
   <p>
   * @see #getNamespaceIndexByPrefix(String prefix)
   */ public
";


%javamethodmodifiers XMLToken::clearNamespaces "
/**
   * Removes all XML namespace declarations from this token.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element. 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers XMLToken::getNamespaceIndex(const std::string& uri) const "
/**
   * Returns the index of an XML namespace declaration based on its URI.
   <p>
   * @param uri a string, the XML namespace URI of the sought-after namespace.
   <p>
   * @return the index of the given declaration, or <code>-1</code> if
   * no such namespace URI is present on this {@link XMLToken} object.
   */ public
";


%javamethodmodifiers XMLToken::getNamespaceIndexByPrefix(const std::string& prefix) const "
/**
   * Returns the index of an XML namespace declaration based on its prefix.
   <p>
   * @param prefix a string, the prefix of the sought-after XML namespace.
   <p>
   * @return the index of the given declaration, or <code>-1</code> if
   * no such namespace URI is present on this {@link XMLToken} object.
   */ public
";


%javamethodmodifiers XMLToken::getNamespacesLength() const "
/**
   * Returns the number of XML namespaces declared on this token.
   <p>
   * @return the number of XML namespaces stored in the {@link XMLNamespaces}
   * object of this {@link XMLToken} object.
   */ public
";


%javamethodmodifiers XMLToken::getNamespacePrefix(int index) const "
/**
   * Returns the prefix of the <em>n</em>th XML namespace declaration.
   <p>
   * @param index an integer, position of the required prefix.
   <p>
   * @return the prefix of an XML namespace declaration in the {@link XMLNamespaces}
   * (by position).
   <p>
   * @note If <code>index</code> is out of range, this method will return an empty
   * string.  {@link XMLToken#getNamespacesLength()} can be used to find out how
   * many namespaces are defined on this {@link XMLToken} object.
   <p>
   * @see #getNamespacesLength()
   */ public
";


%javamethodmodifiers XMLToken::getNamespacePrefix(const std::string& uri) const "
/**
   * Returns the prefix associated with a given XML namespace URI on this
   * token.
   <p>
   * @param uri a string, the URI of the namespace whose prefix is being
   * sought.
   <p>
   * @return the prefix of an XML namespace declaration on this {@link XMLToken} object.
   <p>
   * @note If there is no XML namespace with the given <code>uri</code> declared on
   * this {@link XMLToken} object, this method will return an empty string.
   */ public
";


%javamethodmodifiers XMLToken::getNamespaceURI(int index) const "
/**
   * Returns the URI of the <em>n</em>th XML namespace declared on this token. 
   <p>
   * @param index an integer, the position of the sought-after XML namespace URI.
   <p>
   * @return the URI of the <em>n</em>th XML namespace stored in the
   * {@link XMLNamespaces} object in this {@link XMLToken} object.
   <p>
   * @note If <code>index</code> is out of range, this method will return an empty string.
   <p>
   * @see #getNamespacesLength()
   */ public
";


%javamethodmodifiers XMLToken::getNamespaceURI(const std::string& prefix = "") const "
/**
   * Returns the URI of an XML namespace with a given prefix.
   <p>
   * @param prefix a string, the prefix of the sought-after XML namespace URI.
   <p>
   * @return the URI of an XML namespace declaration given its prefix.
   <p>
   * @note If there is no XML namespace with the given <code>prefix</code> stored in
   * the {@link XMLNamespaces} object of this {@link XMLToken} object, this method will
   * return an empty string.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLToken::isNamespacesEmpty() const "
/**
   * Returns <code>true</code> if there are no namespaces declared on this token.
   <p>
   * @return <code>true</code> if the {@link XMLNamespaces} object stored in this {@link XMLToken}
   * token is empty, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLToken::hasNamespaceURI(const std::string& uri) const "
/**
   * Returns <code>true</code> if this token has an XML namespace with a given URI.
   <p>
   * @param uri a string, the URI of the XML namespace.
   <p>
   * @return <code>true</code> if an XML namespace with the given URI is contained in
   * the {@link XMLNamespaces} object of this {@link XMLToken} object, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLToken::hasNamespacePrefix(const std::string& prefix) const "
/**
   * Returns <code>true</code> if this token has an XML namespace with a given prefix.
   <p>
   * @param prefix a string, the prefix for the XML namespace.
   <p>
   * @return <code>true</code> if an XML Namespace with the given URI is contained in the
   * {@link XMLNamespaces} of this {@link XMLToken}, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLToken::hasNamespaceNS(const std::string& uri, const std::string& prefix) const "
/**
   * Returns <code>true</code> if this token has an XML namespace with a given prefix
   * and URI combination.
   <p>
   * @param uri a string, the URI for the namespace.
   * @param prefix a string, the prefix for the namespace.
   <p>
   * @return <code>true</code> if an XML namespace with the given URI/prefix pair is
   * contained in the {@link XMLNamespaces} object of this {@link XMLToken} object, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers XMLToken::setTriple(const XMLTriple& triple) "
/**
   * Sets the name, namespace prefix and namespace URI of this token.
   <p>
   * <p>
 * This operation only makes sense for XML start elements.  This
 * method will return {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION} if this {@link XMLToken} object is not an XML start
 * element.
   <p>
   * @param triple the new {@link XMLTriple} to use for this {@link XMLToken} object.  If
   * this {@link XMLToken} already had an {@link XMLTriple} object stored within it, that
   * object will be replaced.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers XMLToken::getName() const "
/**
   * Returns the (unqualified) name of token.
   <p>
   * @return the (unqualified) name of token.
   */ public
";


%javamethodmodifiers XMLToken::getPrefix() const "
/**
   * Returns the XML namespace prefix of token.
   <p>
   * @return the XML namespace prefix of token.
   <p>
   * @note If no XML namespace prefix has been assigned to this token, this
   * method will return an empty string.
   */ public
";


%javamethodmodifiers XMLToken::getURI() const "
/**
   * Returns the XML namespace URI of token.
   <p>
   * @return the XML namespace URI of token.
   */ public
";


%javamethodmodifiers XMLToken::getCharacters() const "
/**
   * Returns the character text of token.
   <p>
   * @return the characters of this XML token.  If this token is not a
   * text token (i.e., it\'s an XML element and not character content),
   * then this will return an empty string.
   <p>
   * @see #isText()
   * @see #isElement()
   */ public
";


%javamethodmodifiers XMLToken::append(const std::string& chars) "
/**
   * Appends characters to the text content of token.
   <p>
   * This method only makes sense for {@link XMLToken} objects that contains text.
   * If this method is called on a token that represents an XML start or end
   * tag, it will return the code {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}.
   <p>
   * @param chars string, characters to append to the text of this token.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #isText()
   * @see #isElement()
   */ public
";


%javamethodmodifiers XMLToken::getColumn() const "
/**
   * Returns the column number at which this token occurs in the input.
   <p>
   * @return the column at which this {@link XMLToken} occurred.
   */ public
";


%javamethodmodifiers XMLToken::getLine() const "
/**
   * Returns the line number at which this token occurs in the input.
   <p>
   * @return the line at which this {@link XMLToken} occurred.
   */ public
";


%javamethodmodifiers XMLToken::isElement() const "
/**
   * Returns <code>true</code> if this token represents an XML element.
   <p>
   * This generic predicate returns <code>true</code> if the element is either a start
   * or end tag, and <code>false</code> if it\'s a text object.  The related methods
   * XMLToken:isStart(), {@link XMLToken#isEnd()} and {@link XMLToken#isText()} are more
   * specific predicates.
   <p>
   * @return <code>true</code> if this {@link XMLToken} object represents an XML element, 
   * <code>false</code> otherwise.
   <p>
   * @see #isStart()
   * @see #isEnd()
   * @see #isText()
   */ public
";


%javamethodmodifiers XMLToken::isEnd() const "
/**
   * Returns <code>true</code> if this token represents an XML end element.
   <p>
   * @return <code>true</code> if this {@link XMLToken} object represents an XML end element,
   * <code>false</code> otherwise.
   <p>
   * @see #isStart()
   * @see #isElement()
   * @see #isText()
   */ public
";


%javamethodmodifiers XMLToken::isEndFor(const XMLToken& element) const "
/**
   * Returns <code>true</code> if this token represents an XML end element for a
   * particular start element.
   <p>
   * @param element {@link XMLToken}, the element with which the current object
   * should be compared to determined whether the current object is a
   * start element for the given one.
   <p>
   * @return <code>true</code> if this {@link XMLToken} object represents an XML end tag for
   * the start tag given by <code>element</code>, <code>false</code> otherwise.
   <p>
   * @see #isElement()
   * @see #isStart()
   * @see #isEnd()
   * @see #isText()
   */ public
";


%javamethodmodifiers XMLToken::isEOF() const "
/**
   * Returns <code>true</code> if this token is an end of file marker.
   <p>
   * @return <code>true</code> if this {@link XMLToken} object represents the end of the input,
   * <code>false</code> otherwise.
   <p>
   * @see #setEOF()
   */ public
";


%javamethodmodifiers XMLToken::isStart() const "
/**
   * Returns <code>true</code> if this token represents an XML start element.
   <p>
   * @return <code>true</code> if this {@link XMLToken} is an XML start element, <code>false</code> otherwise.
   <p>
   * @see #isElement()
   * @see #isEnd()
   * @see #isText()
   */ public
";


%javamethodmodifiers XMLToken::isText() const "
/**
   * Returns <code>true</code> if this token represents an XML text element.
   <p>
   * @return <code>true</code> if this {@link XMLToken} is an XML text element, <code>false</code> otherwise.
   <p>
   * @see #isElement()
   * @see #isStart()
   * @see #isEnd()
   */ public
";


%javamethodmodifiers XMLToken::setEnd "
/**
   * Declares that this token represents an XML element end tag.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #isStart()
   * @see #isEnd()
   */ public
";


%javamethodmodifiers XMLToken::setEOF "
/**
   * Declares that this token is an end-of-file/input marker.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #isEOF()
   */ public
";


%javamethodmodifiers XMLToken::unsetEnd "
/**
   * Declares that this token no longer represents an XML start/end element.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers XMLToken::write(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers XMLToken::toString "
/**
   * Prints a string representation of the underlying token stream.
   <p>
   * This method is intended for debugging purposes.
   <p>
   * @return a text string representing this {@link XMLToken} object.
   */ public
";


%typemap(javaimports) XMLNode "
/** 
 *  A node in libSBML\'s XML document tree.
 <p>
 * LibSBML implements an XML abstraction layer.  This layer presents a
 * uniform XML interface to calling programs regardless of which underlying
 * XML parser libSBML has actually been configured to use.  The basic data
 * object in the XML abstraction is a <em>node</em>, represented by {@link XMLNode}.
 <p>
 * An {@link XMLNode} can contain any number of children.  Each child is another
 * {@link XMLNode}, thereby forming a tree.  The methods {@link XMLNode#getNumChildren()}
 * and {@link XMLNode#getChild(long)} can be used to access the tree
 * structure starting from a given node.
 <p>
 * Each {@link XMLNode} is subclassed from {@link XMLToken}, and thus has the same methods
 * available as {@link XMLToken}.  These methods include {@link XMLToken#getNamespaces()},
 * {@link XMLToken#getPrefix()}, {@link XMLToken#getName()}, {@link XMLToken#getURI()}, and
 * {@link XMLToken#getAttributes()}.
 <p>
 * <h2>Conversion between an XML string and an {@link XMLNode}</h2>
 <p>
 * LibSBML provides the following utility functions for converting an XML
 * string (e.g., <code>&lt;annotation&gt;...&lt;/annotation&gt;</code>)
 * to/from an {@link XMLNode} object.
 <p>
 * <ul>
 * <li> {@link XMLNode#toXMLString()} returns a string representation of the {@link XMLNode}
 * object.
 <p>
 * <li> {@link XMLNode#convertXMLNodeToString(XMLNode)} (static
 * function) returns a string representation of the given {@link XMLNode} object.
 <p>
 * <li> {@link XMLNode#convertStringToXMLNode(String)} (static
 * function) returns an {@link XMLNode} object converted from the given XML string.
 *
 * </ul> <p>
 * The returned {@link XMLNode} object by {@link XMLNode#convertStringToXMLNode(String)} is a dummy root (container) {@link XMLNode} if the given XML string
 * has two or more top-level elements (e.g.,
 * &quot;<code>&lt;p&gt;...&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;</code>&quot;). In
 * the dummy root node, each top-level element in the given XML string is
 * contained as a child {@link XMLNode}. {@link XMLToken#isEOF()} can be used to identify
 * if the returned {@link XMLNode} object is a dummy node or not.  Here is an
 * example: 
<p>
<pre class=\'fragment\'>
// Checks if the returned {@link XMLNode} object is a dummy root node:

String str = \'...\';
{@link XMLNode} xn = {@link XMLNode}.convertStringToXMLNode(str);
if ( xn == null )
{
  // returned value is null (error)
  ...
}
else if ( xn.isEOF() )
{
  // Root node is a dummy node.
  for ( int i = 0; i &lt; xn.getNumChildren(); i++ )
  {
    // access to each child node of the dummy node.
    {@link XMLNode} xnChild = xn.getChild(i);
    ...
  }
}
else
{
  // Root node is NOT a dummy node.
  ...
}
</pre>
*/
"


%javamethodmodifiers XMLNode::XMLNode "
/**
   * Creates a new empty {@link XMLNode} with no children.
   */ public
";


%javamethodmodifiers XMLNode::XMLNode(const XMLToken& token) "
/**
   * Creates a new {@link XMLNode} by copying an {@link XMLToken} object.
   <p>
   * @param token {@link XMLToken} to be copied to {@link XMLNode}
   */ public
";


%javamethodmodifiers XMLNode::XMLNode(  const XMLTriple&     triple , const XMLAttributes& attributes , const XMLNamespaces& namespaces , const unsigned int   line   = 0 , const unsigned int   column = 0 ) "
/**
   * Creates a new start element {@link XMLNode} with the given set of attributes and
   * namespace declarations.
   <p>
   * @param triple {@link XMLTriple}.
   * @param attributes {@link XMLAttributes}, the attributes to set.
   * @param namespaces {@link XMLNamespaces}, the namespaces to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLNode::XMLNode(  const XMLTriple&      triple , const XMLAttributes&  attributes , const unsigned int    line   = 0 , const unsigned int    column = 0 ) "
/**
   * Creates a start element {@link XMLNode} with the given set of attributes.
   <p>
   * @param triple {@link XMLTriple}.
   * @param attributes {@link XMLAttributes}, the attributes to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
  */ public
";


%javamethodmodifiers XMLNode::XMLNode(  const XMLTriple&    triple , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
/**
   * Creates an end element {@link XMLNode}.
   <p>
   * @param triple {@link XMLTriple}.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLNode::XMLNode(  const std::string&  chars , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
/**
   * Creates a text {@link XMLNode}.
   <p>
   * @param chars a string, the text to be added to the {@link XMLToken}
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLNode::XMLNode(XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers XMLNode::XMLNode(const XMLNode& orig) "
/**
   * Copy constructor; creates a copy of this {@link XMLNode}.
   <p>
   * @param orig the {@link XMLNode} instance to copy.
   <p>
   * @throws XMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers XMLNode::clone() const "
/**
   * Creates and returns a deep copy of this {@link XMLNode} object.
   <p>
   * @return the (deep) copy of this {@link XMLNode} object.
   */ public
";


%javamethodmodifiers XMLNode::addChild(const XMLNode& node) "
/**
   * Adds a copy of <code>node</code> as a child of this {@link XMLNode}.
   <p>
   * The given <code>node</code> is added at the end of the list of children.
   <p>
   * @param node the {@link XMLNode} to be added as child.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION}
   *
   * </ul> <p>
   * @note The given node is added at the end of the children list.
   */ public
";


%javamethodmodifiers XMLNode::insertChild(unsigned int n, const XMLNode& node) "
/**
   * Inserts a copy of the given node as the <code>n</code>th child of this
   * {@link XMLNode}.
   <p>
   * If the given index <code>n</code> is out of range for this {@link XMLNode} instance,
   * the <code>node</code> is added at the end of the list of children.  Even in
   * that situation, this method does not throw an error.
   <p>
   * @param n an integer, the index at which the given node is inserted
   * @param node an {@link XMLNode} to be inserted as <code>n</code>th child.
   <p>
   * @return a reference to the newly-inserted child <code>node</code>
   */ public
";


%javamethodmodifiers XMLNode::removeChild(unsigned int n) "
/**
   * Removes the <code>n</code>th child of this {@link XMLNode} and returns the
   * removed node.
   <p>
   * It is important to keep in mind that a given {@link XMLNode} may have more
   * than one child.  Calling this method erases all existing references to
   * child nodes <em>after</em> the given position <code>n</code>.  If the index <code>n</code> is
   * greater than the number of child nodes in this {@link XMLNode}, this method
   * takes no action (and returns <code>null</code>).
   <p>
   * @param n an integer, the index of the node to be removed
   <p>
   * @return the removed child, or <code>null</code> if <code>n</code> is greater than the number
   * of children in this node
   <p>
   * @note The caller owns the returned node and is responsible for deleting it.
   */ public
";


%javamethodmodifiers XMLNode::removeChildren "
/**
   * Removes all children from this node.
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers XMLNode::getChild(unsigned int n) "
/**
   * Returns the <code>n</code>th child of this {@link XMLNode}.
   <p>
   * If the index <code>n</code> is greater than the number of child nodes,
   * this method returns an empty node.
   <p>
   * @param n a long integereger, the index of the node to return
   <p>
   * @return the <code>n</code>th child of this {@link XMLNode}.
   */ public
";


%javamethodmodifiers XMLNode::getChild "
/**
   * Returns the  <code>n</code>th child of this {@link XMLNode}.
   <p>
   * If the index <code>n</code> is greater than the number of child nodes,
   * this method returns an empty node.
   <p>
   * @param n a long integereger, the index of the node to return
   <p>
   * @return the <code>n</code>th child of this {@link XMLNode}.
   */ public
";


%javamethodmodifiers XMLNode::getChild(const std::string&  name) "
/**
   * Returns the first child of this {@link XMLNode} with the corresponding name.
   <p>
   * If no child with corrsponding name can be found,
   * this method returns an empty node.
   <p>
   * @param name the name of the node to return
   <p>
   * @return the first child of this {@link XMLNode} with given name.
   */ public
";


%javamethodmodifiers XMLNode::getChild(const std::string&  name) const "
/**
   * Returns the first child of this {@link XMLNode} with the corresponding name.
   <p>
   * If no child with corrsponding name can be found,
   * this method returns an empty node.
   <p>
   * @param name the name of the node to return
   <p>
   * @return the first child of this {@link XMLNode} with given name.
   */ public
";


%javamethodmodifiers XMLNode::getIndex(const std::string& name) const "
/**
   * Return the index of the first child of this {@link XMLNode} with the given name.
   <p>
   * @param name a string, the name of the child for which the
   * index is required.
   <p>
   * @return the index of the first child of this {@link XMLNode} with the given
   * name, or -1 if not present.
   */ public
";


%javamethodmodifiers XMLNode::hasChild(const std::string& name) const "
/**
   * Return a boolean indicating whether this {@link XMLNode} has a child with the
   * given name.
   <p>
   * @param name a string, the name of the child to be checked.
   <p>
   * @return boolean indicating whether this {@link XMLNode} has a child with the
   * given name.
   */ public
";


%javamethodmodifiers XMLNode::equals(const XMLNode& other, bool ignoreURI=false) const "
/**
   * Compare this {@link XMLNode} against another {@link XMLNode} returning true if both
   * nodes represent the same XML tree, or false otherwise.
   <p>
   * @param other another {@link XMLNode} to compare against.
   <p>
   * @param ignoreURI whether to ignore the namespace URI when doing the
   * comparison.
   <p>
   * @return boolean indicating whether this {@link XMLNode} represents the same XML
   * tree as another.
   */ public
";


%javamethodmodifiers XMLNode::getNumChildren() const "
/**
   * Returns the number of children for this {@link XMLNode}.
   <p>
   * @return the number of children for this {@link XMLNode}.
   */ public
";


%javamethodmodifiers XMLNode::write(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers XMLNode::toXMLString() const "
/**
   * Returns a string representation of this {@link XMLNode}.
   <p>
   * @return a string derived from this {@link XMLNode}.
   */ public
";


%javamethodmodifiers XMLNode::convertXMLNodeToString(const XMLNode* node) "
/**
   * Returns a string representation of a given {@link XMLNode}.
   <p>
   * @param node the {@link XMLNode} to be represented as a string
   <p>
   * @return a string-form representation of <code>node</code>
   */ public
";


%javamethodmodifiers XMLNode::convertStringToXMLNode(const std::string& xmlstr, const XMLNamespaces* xmlns = NULL) "
/**
   * Returns an {@link XMLNode} which is derived from a string containing XML
   * content.
   <p>
   * The XML namespace must be defined using argument <code>xmlns</code> if the
   * corresponding XML namespace attribute is not part of the string of the
   * first argument.
   <p>
   * @param xmlstr string to be converted to a XML node.
   * @param xmlns {@link XMLNamespaces} the namespaces to set (default value is <code>null</code>).
   <p>
   * @note The caller owns the returned {@link XMLNode} and is reponsible for
   * deleting it.  The returned {@link XMLNode} object is a dummy root (container)
   * {@link XMLNode} if the top-level element in the given XML string is NOT
   * <code>&lt;html&gt;</code>, <code>&lt;body&gt;</code>,
   * <code>&lt;annotation&gt;</code>, or <code>&lt;notes&gt;</code>.  In
   * the dummy root node, each top-level element in the given XML string is
   * contained as a child {@link XMLNode}. {@link XMLToken#isEOF()} can be used to
   * identify if the returned {@link XMLNode} object is a dummy node.
   <p>
   * @return a {@link XMLNode} which is converted from string <code>xmlstr</code>.  If the
   * conversion failed, this method returns <code>null.</code>
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%typemap(javaimports) XMLTriple "
/** 
 *  A qualified XML name.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * A \'triple\' in the libSBML XML layer encapsulates the notion of qualified
 * name, meaning an element name or an attribute name with an optional
 * namespace qualifier.  Triples by themselves are not entities in an XML
 * stream&mdash;they are not, for example, elements or attributes; rather,
 * {@link XMLTriple} is used in libSBML to construct these other kinds of objects.
 <p>
 * An {@link XMLTriple} instance carries up to three data items:
 * <ol>
 * <li> The name of the attribute or element; that is, the attribute name
 * as it appears in an XML document or data stream;
 * <li> The XML namespace prefix (if any) of the attribute.  For example,
 * in the following fragment of XML, the namespace prefix is the string
 * <code>mysim</code> and it appears on both the element
 * <code>someelement</code> and the attribute <code>attribA</code>.  When
 * both the element and the attribute are stored as {@link XMLTriple} objects,
 * their <i>prefix</i> is <code>mysim</code>.
 * <pre class=\'fragment\'>
&lt;mysim:someelement mysim:attribA=\'value\' /&gt;
</pre>
 * <li> The XML namespace URI with which the prefix is associated.  In
 * XML, every namespace used must be declared and mapped to a URI.
 * </ol>
 <p>
 * {@link XMLTriple} objects are the lowest-level data item in the XML layer
 * of libSBML.  Other objects such as {@link XMLToken} make use of {@link XMLTriple}
 * objects.
 <p>
 * @see XMLToken
 * @see XMLNode
 * @see XMLAttributes
 * @see XMLNamespaces
 */
"


%javamethodmodifiers XMLTriple::XMLTriple "
/**
   * Creates a new, empty {@link XMLTriple} object.
   */ public
";


%javamethodmodifiers XMLTriple::XMLTriple(  const std::string&  name , const std::string&  uri , const std::string&  prefix ) "
/**
   * Creates a new {@link XMLTriple} object with a given <code>name</code>, <code>uri</code> and and 
   * <code>prefix</code>.
   <p>
   * @param name a string, the name for the entity represented by this object.
   * @param uri a string, the XML namespace URI associated with the prefix.
   * @param prefix a string, the XML namespace prefix for this triple.
   <p>
   * @throws XMLConstructorException
   * Thrown if any of the arguments are <code>null.</code>
   */ public
";


%javamethodmodifiers XMLTriple::XMLTriple(const std::string& triplet, const char sepchar = ' ') "
/**
   * Creates an {@link XMLTriple} object by splitting a given string at a given
   * separator character.
   <p>
   * The \'triplet\' in this case is a string that may be in one of the
   * following three possible formats:
   * <ol>
   * <li> <span style=\'background-color: lightblue; padding-left: 2px; padding-right: 2px\'>name</span> </li>
   * <li> <span style=\'background-color: #ccc; padding-left: 2px; padding-right: 2px\'>URI</span><span style=\'background-color: purple; color: white; padding-left: 2px; padding-right: 2px\'>x</span><span style=\'background-color: lightblue; padding-left: 2px; padding-right: 2px\'>name</span></li>
   * <li> <span style=\'background-color: #ccc; padding-left: 2px; padding-right: 2px\'>URI</span><span style=\'background-color: purple; color: white; padding-left: 2px; padding-right: 2px\'>x</span><span style=\'background-color: lightblue; padding-left: 2px; padding-right: 2px\'>name</span><span style=\'background-color: purple; color: white; padding-left: 2px; padding-right: 2px\'>x</span><span style=\'background-color: #d0d0fd; padding-left: 2px; padding-right: 2px\'>prefix</span></li>
   * </ol>
   <p>
   * where <span style=\'background-color: purple; color: white; padding-left: 2px; padding-right: 2px\'>x</span>
   * represents the separator character, <code>sepchar</code>.
   <p>
   * @param triplet a string representing the triplet as shown above
   * @param sepchar a character, the sepchar used in the triplet
   <p>
   * @throws XMLConstructorException
   * Thrown if the argument <code>triplet</code> is <code>null.</code>
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLTriple::XMLTriple(const XMLTriple& orig) "
/**
   * Copy constructor; creates a copy of this {@link XMLTriple} object.
   <p>
   * @param orig the {@link XMLTriple} object to copy.
   <p>
   * @throws XMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers XMLTriple::clone() const "
/**
   * Creates and returns a deep copy of this {@link XMLTriple} object.
   <p>
   * @return the (deep) copy of this {@link XMLTriple} object.
   */ public
";


%javamethodmodifiers XMLTriple::getName() const "
/**
   * Returns the <em>name</em> portion of this {@link XMLTriple} object.
   <p>
   * @return a string, the name portion of this {@link XMLTriple} object.
   */ public
";


%javamethodmodifiers XMLTriple::getPrefix() const "
/**
   * Returns the <em>prefix</em> portion of this {@link XMLTriple} object.
   <p>
   * @return a string, the prefix portion of this {@link XMLTriple} object.
   */ public
";


%javamethodmodifiers XMLTriple::getURI() const "
/**
   * Returns the <em>URI</em> portion of this {@link XMLTriple} object.
   <p>
   * @return URI a string, the URI portion of this {@link XMLTriple} object.
   */ public
";


%javamethodmodifiers XMLTriple::getPrefixedName() const "
/**
   * Returns the prefixed name from this {@link XMLTriple}.
   <p>
   * @return a string, the prefixed name from this {@link XMLTriple}.  This is
   * constructed by concatenating the <em>prefix</em> stored in this {@link XMLTriple}
   * object, followed by a colon character <code>\':\'</code>, followed by the
   * <em>name</em> stored in this {@link XMLTriple} object.
   */ public
";


%javamethodmodifiers XMLTriple::isEmpty() const "
/**
   * Returns <code>true</code> if this {@link XMLTriple} object is empty.
   <p>
   * @return <code>true</code> if this {@link XMLTriple} is empty, <code>false</code> otherwise.
   */ public
";


%typemap(javaimports) XMLOutputStream "
/** 
 *  Interface to an XML output stream.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * SBML content is serialized using XML; the resulting data can be stored and
 * read to/from a file or data stream.  Low-level XML parsers such as Xerces
 * provide facilities to read XML data.  To permit the use of different XML
 * parsers (Xerces, Expat or libxml2), libSBML implements an abstraction
 * layer.  {@link XMLInputStream} and {@link XMLOutputStream} are two parts of that
 * abstraction layer.
 <p>
 * {@link XMLOutputStream} provides a wrapper above output streams to facilitate
 * writing XML.  {@link XMLOutputStream} keeps track of start and end elements,
 * indentation, XML namespace prefixes, and more.  The interface provides
 * features for converting non-text data types into appropriate textual form;
 * this takes the form of overloaded <code>writeAttribute(...)</code> methods
 * that allow users to simply use the same method with any data type.  For
 * example, suppose an element <code>testElement</code> has two attributes, <code>size</code> and
 * <code>id</code>, and the attributes are variables in your code as follows:
<p>
<pre class=\'fragment\'>
double size = 3.2;
String id = \'id\';
</pre>
<p>
  * Then, the element and the attributes can be written to the
  * standard output stream (provided as <code>cout</code> in the libSBML
  * language bindings) as follows:
<p>
<pre class=\'fragment\'>
import org.sbml.libsbml.XMLOutputStream;
import org.sbml.libsbml.libsbml;

public class test
{
    public static void main (String[] args)
    {
        double size = 3.2;
        String id = \'id\';

        // Create an {@link XMLOutputStream} object that will write to the
        // standard output stream, which is provide in libSBML\'s
        // Java language interface as the object \'libsbml.cout\'.

        {@link XMLOutputStream} xos = new {@link XMLOutputStream}(libsbml.cout);

        // Create the start element, write the attributes, and close
        // the element.  The output will be written immediately as
        // each method is called.

        xos.startElement(\'testElement\');
        xos.writeAttribute(\'size\', size);
        xos.writeAttribute(\'id\', id);
        xos.endElement(\'testElement\');
    }

    static
    {
        System.loadLibrary(\'sbmlj\');
    }
}
</pre>
<p>
 * Other classes in SBML take {@link XMLOutputStream} objects as arguments, and use
 * that to write elements and attributes seamlessly to the XML output stream.
 <p>
 * It is also worth noting that unlike {@link XMLInputStream}, {@link XMLOutputStream} is
 * actually independent of the underlying XML parsers.  It does not use the
 * XML parser libraries at all.
 <p>
 * @note The convenience of the {@link XMLInputStream} and {@link XMLOutputStream}
 * abstraction may be useful for developers interested in creating parsers
 * for other XML formats besides SBML.  It can provide developers with a
 * layer above more basic XML parsers, as well as some useful programmatic
 * elements such as {@link XMLToken}, {@link XMLError}, etc.
 <p>
 * @see XMLInputStream
 */
"


%javamethodmodifiers XMLOutputStream::XMLOutputStream(  std::ostream&       stream , const std::string&  encoding       = "UTF-8" , bool                writeXMLDecl   = true , const std::string&  programName    = "" , const std::string&  programVersion = "") "
/**
   * Creates a new {@link XMLOutputStream} that wraps the given <code>stream</code>.
   <p>
   * <p>
 * The functionality associated with the <code>programName</code> and 
 * <code>programVersion</code> arguments concerns an optional comment that libSBML can
 * write at the beginning of the output stream.  The comment is intended
 * for human readers of the XML file, and has the following form:
 * <pre class=\'fragment\'>
&lt;!-- Created by &lt;program name&gt; version &lt;program version&gt;
on yyyy-MM-dd HH:mm with libSBML version &lt;libsbml version&gt;. --&gt;
</pre>
 <p>
 * This program information comment is a separate item from the XML
 * declaration that this method can also write to this output stream.  The
 * comment is also not mandated by any SBML specification.  This libSBML
 * functionality is provided for the convenience of calling programs, and to
 * help humans trace the origin of SBML files.
   <p>
   * <p>
 * The XML declaration has the form
 * <pre class=\'fragment\'>
&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;
</pre>
 * Note that the SBML specifications require the use of UTF-8 encoding and
 * version 1.0, so for SBML documents, the above is the standard XML
 * declaration.
   <p>
   * @param stream the input stream to wrap.
   <p>
   * @param encoding the XML encoding to declare in the output. This value
   * should be <code>\'UTF-8\'</code> for SBML documents.  The default value
   * is <code>\'UTF-8\'</code> if no value is supplied for this parameter.
   <p>
   * @param writeXMLDecl whether to write a standard XML declaration at
   * the beginning of the content written on <code>stream</code>.  The default is
   * <code>true.</code>
   <p>
   * @param programName an optional program name to write as a comment
   * in the output stream.
   <p>
   * @param programVersion an optional version identification string to write
   * as a comment in the output stream.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLOutputStream::endElement(const std::string& name, const std::string& prefix = "") "
/**
   * Writes the given XML end element name to this {@link XMLOutputStream}.
   <p>
   * @param name the name of the element.
   <p>
   * @param prefix an optional XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLOutputStream::endElement(const XMLTriple& triple) "
/**
   * Writes the given element to the stream.
   <p>
   * @param triple the XML element to write.
   */ public
";


%javamethodmodifiers XMLOutputStream::setAutoIndent(bool indent) "
/**
   * Turns automatic indentation on or off for this {@link XMLOutputStream}.
   <p>
   * @param indent if <code>true</code>, automatic indentation is turned on.
   */ public
";


%javamethodmodifiers XMLOutputStream::startElement(const std::string& name, const std::string& prefix = "") "
/**
   * Writes the given XML start element name to this {@link XMLOutputStream}.
   <p>
   * @param name the name of the element.
   <p>
   * @param prefix an optional XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLOutputStream::startElement(const XMLTriple& triple) "
/**
   * Writes the given XML start element
   * <code><em>prefix</em>:<em>name</em></code> on this output stream.
   <p>
   * @param triple the start element to write.
   */ public
";


%javamethodmodifiers XMLOutputStream::startEndElement(const std::string& name, const std::string& prefix = "") "
/**
   * Writes the given XML start and end element name to this {@link XMLOutputStream}.
   <p>
   * @param name the name of the element.
   <p>
   * @param prefix an optional XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLOutputStream::startEndElement(const XMLTriple& triple) "
/**
   * Writes the given start element to this output stream.
   <p>
   * @param triple the XML element to write.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const std::string& value) "
/**
   * Writes the given namespace-prefixed attribute value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param prefix an XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)  See other versions of
   * this method for a variant that does not require a prefix.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const std::string& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param triple the attribute, in the form of an {@link XMLTriple}.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const char* value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const char* value) "
/**
   * Writes the given namespace-prefixed attribute value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param prefix an XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)  See other versions of
   * this method for a variant that does not require a prefix.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const char* value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param triple the attribute, in the form of an {@link XMLTriple}.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const bool& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string &prefix, const bool& value) "
/**
   * Writes the given namespace-prefixed attribute value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param prefix an XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)  See other versions of
   * this method for a variant that does not require a prefix.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const bool& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param triple the attribute, in the form of an {@link XMLTriple}.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const double& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const double& value) "
/**
   * Writes the given namespace-prefixed attribute value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param prefix an XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)  See other versions of
   * this method for a variant that does not require a prefix.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const double& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param triple the attribute, in the form of an {@link XMLTriple}.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const long& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const long& value) "
/**
   * Writes the given namespace-prefixed attribute value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param prefix an XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)  See other versions of
   * this method for a variant that does not require a prefix.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const long& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param triple the attribute, in the form of an {@link XMLTriple}.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const int& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const int& value) "
/**
   * Writes the given namespace-prefixed attribute value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param prefix an XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)  See other versions of
   * this method for a variant that does not require a prefix.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const int& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param triple the attribute, in the form of an {@link XMLTriple}.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const unsigned int& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const unsigned int& value) "
/**
   * Writes the given namespace-prefixed attribute value to this output stream.
   <p>
   * @param name the name of the attribute.
   <p>
   * @param prefix an XML namespace prefix to write in front of the
   * <code>element</code> name.  (The result has the form
   * <code><em>prefix</em>:<em>name</em></code>.)  See other versions of
   * this method for a variant that does not require a prefix.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const unsigned int& value) "
/**
   * Writes the given attribute and value to this output stream.
   <p>
   * @param triple the attribute, in the form of an {@link XMLTriple}.
   <p>
   * @param value the value of the attribute.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeXMLDecl "
/**
   * Writes a standard XML declaration to this output stream.
   <p>
   * <p>
 * The XML declaration has the form
 * <pre class=\'fragment\'>
&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;
</pre>
 * Note that the SBML specifications require the use of UTF-8 encoding and
 * version 1.0, so for SBML documents, the above is the standard XML
 * declaration.
   */ public
";


%javamethodmodifiers XMLOutputStream::writeComment(const std::string& programName, const std::string& programVersion) "
/**
   * Writes an XML comment with the name and version of this program.
   <p>
   * The XML comment has the following form:
   * <pre class=\'fragment\'>
&lt;!-- Created by &lt;program name&gt; version &lt;program version&gt;
on yyyy-MM-dd HH:mm with libSBML version &lt;libsbml version&gt;. --&gt;
</pre>
   <p>
   * See the class constructor for more information about this program
   * comment.
   <p>
   * @param programName an optional program name to write as a comment
   * in the output stream.
   <p>
   * @param programVersion an optional version identification string to write
   * as a comment in the output stream.
   */ public
";


%javamethodmodifiers XMLOutputStream::downIndent "
/**
   * Decreases the indentation level for this {@link XMLOutputStream}.
   <p>
   * <p>
 * LibSBML tries to produce human-readable XML output by automatically
 * indenting the bodies of elements.  Callers can manually control
 * indentation further by using the {@link XMLOutputStream#upIndent()}
 * and {@link XMLOutputStream#downIndent()} methods to increase and
 * decrease, respectively, the current level of indentation in the
 * XML output.
   <p>
   * @see #upIndent()
   */ public
";


%javamethodmodifiers XMLOutputStream::upIndent "
/**
   * Increases the indentation level for this {@link XMLOutputStream}.
   <p>
   * <p>
 * LibSBML tries to produce human-readable XML output by automatically
 * indenting the bodies of elements.  Callers can manually control
 * indentation further by using the {@link XMLOutputStream#upIndent()}
 * and {@link XMLOutputStream#downIndent()} methods to increase and
 * decrease, respectively, the current level of indentation in the
 * XML output.
   <p>
   * @see #downIndent()
   */ public
";


%javamethodmodifiers XMLOutputStream::getStringStream "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::getSBMLNamespaces "
/**
   * Returns the {@link SBMLNamespaces} object attached to this output stream.
   <p>
   * @return the {@link SBMLNamespaces} object, or <code>null</code> if none has been set.
   */ public
";


%javamethodmodifiers XMLOutputStream::setSBMLNamespaces(SBMLNamespaces * sbmlns) "
/**
   * Sets the {@link SBMLNamespaces} object associated with this output stream.
   <p>
   * @param sbmlns the namespace object.
   */ public
";


%javamethodmodifiers XMLOutputStream::XMLOutputStream(const XMLOutputStream& other) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::XMLOutputStream "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeChars(const std::string& name) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeIndent(bool isEnd = false) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeName(const std::string& name, const std::string& prefix = "") "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeName(const XMLTriple& triple) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeValue(const std::string& value) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeValue(const char* value) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeValue(const bool& value) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeValue(const double& value) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeValue(const long& value) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeValue(const int& value) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::writeValue(const unsigned int& value) "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::setStringStream "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStream::unsetStringStream "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStringStream::XMLOutputStringStream(  std::ostringstream& stream , const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&  programName  = "" , const std::string&  programVersion = "") "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputStringStream::getString "
/** * @internal */ public
";


%javamethodmodifiers XMLOwningOutputStringStream::XMLOwningOutputStringStream(  const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&  programName  = "" , const std::string&  programVersion = "") "
/** * @internal */ public
";


%javamethodmodifiers XMLOutputFileStream::XMLOutputFileStream(  std::ofstream&      stream , const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&  programName  = "" , const std::string&  programVersion = "") "
/** * @internal */ public
";


%javamethodmodifiers XMLOwningOutputFileStream::XMLOwningOutputFileStream(  const std::string&  filename , const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&  programName  = "" , const std::string&  programVersion = "") "
/** * @internal */ public
";


%typemap(javaimports) XMLInputStream "
/** 
 *  An interface to an XML input stream.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * SBML content is serialized using XML; the resulting data can be stored and
 * read to/from a file or data stream.  Low-level XML parsers such as Xerces
 * provide facilities to read XML data.  To permit the use of different XML
 * parsers (Xerces, Expat or libxml2), libSBML implements an abstraction
 * layer.  {@link XMLInputStream} and {@link XMLOutputStream} are two parts of that
 * abstraction layer.
 <p>
 * {@link XMLInputStream} is an interface to a file or text string containing XML.
 * It wraps the content to be read, as well as the low-level XML parser to be
 * used and an {@link XMLErrorLog} to record errors and other issues (if any arise).
 * Internally, the content will be in the form of either a pointer to a file
 * name or a character string; {@link XMLInputStream} knows the form of the content
 * and acts appropriately.  Other libSBML object classes use {@link XMLInputStream}
 * as their interface for all read operations on the XML data.
 * {@link XMLInputStream} provides the functionality to extract data in the form of
 * {@link XMLToken} objects.  It logs any errors encountered while reading.  It also
 * keeps track of whether a read operation has failed irrecoverably or
 * determines whether it is safe to continue reading.
 <p>
 * {@link SBMLNamespaces} objects can be associated with an {@link XMLInputStream}; this
 * facilitates logging errors related to reading XML attributes and elements
 * that may only be relevant to particular Level and Version combinations of
 * SBML.
 <p>
 * @note The convenience of the {@link XMLInputStream} and {@link XMLOutputStream}
 * abstraction may be useful for developers interested in creating parsers
 * for other XML formats besides SBML.  It can provide developers with a
 * layer above more basic XML parsers, as well as some useful programmatic
 * elements such as {@link XMLToken}, {@link XMLError}, etc.
 <p>
 * @see XMLOutputStream
 */
"


%javamethodmodifiers XMLInputStream::XMLInputStream(  const char*        content , bool               isFile   = true , const std::string  library  = "" , XMLErrorLog*       errorLog = NULL ) "
/**
   * Creates a new {@link XMLInputStream}.
   <p>
   * @param content the source of the stream.
   <p>
   * @param isFile a boolean flag to indicate whether <code>content</code> is a file
   * name.  If <code>true</code>, <code>content</code> is assumed to be the file from which the
   * XML content is to be read.  If <code>false</code>, <code>content</code> is taken to be a
   * string that <em>is</em> the content to be read.
   <p>
   * @param library the name of the parser library to use.
   <p>
   * @param errorLog the {@link XMLErrorLog} object to use.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLInputStream::getEncoding "
/**
   * Returns the encoding of the XML stream.
   <p>
   * <p>
 The <em>encoding</em> is indicated by the <code>xml</code> declaration at the
 * beginning of an XML document or data stream.  The form of this declaration
 * is
 * <pre class=\'fragment\'>
&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;
</pre>
 * Note that the SBML specifications require the use of UTF-8 encoding, so
 * for SBML documents, the value returned by this method will always be
 * the string <code>\'UTF-8\'</code>. 
   <p>
   * @return the encoding of the XML stream.
   <p>
   * @see #getVersion()
   */ public
";


%javamethodmodifiers XMLInputStream::getVersion "
/**
   * Returns the version of the XML stream.
   <p>
   * <p>
 The <em>version</em> is indicated by the <code>xml</code> declaration at the
 * beginning of an XML document or data stream.  The form of this declaration
 * is
 * <pre class=\'fragment\'>
 &lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;
</pre>
 * Note that the SBML specifications require the use of version 1.0, so
 * for SBML documents, the value returned by this method will always be
 * the string <code>\'1.0\'</code>. 
   <p>
   * @return the version of the XML stream.
   <p>
   * @see #getEncoding()
   */ public
";


%javamethodmodifiers XMLInputStream::getErrorLog "
/**
   * Returns the {@link XMLErrorLog} used to log parsing problems.
   <p>
   * @return the {@link XMLErrorLog} used to log XML parse errors and other
   * validation errors (and messages).
   */ public
";


%javamethodmodifiers XMLInputStream::isEOF() const "
/**
   * Returns <code>true</code> if end of file (stream) has been reached.
   <p>
   * @return <code>true</code> if end of file (stream) has been reached, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers XMLInputStream::isError() const "
/**
   * Returns <code>true</code> if a fatal error occurred while reading from this
   * stream.
   <p>
   * @return <code>true</code> if a fatal error occurred while reading from this
   * stream.
   */ public
";


%javamethodmodifiers XMLInputStream::isGood() const "
/**
   * Returns <code>true</code> if the stream is in a good state.
   <p>
   * The definition of \'good state\' is that isEOF() and isError() both return
   * <code>false.</code>
   <p>
   * @return <code>true</code> if the stream is in a good state, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers XMLInputStream::next "
/**
   * Returns the next token on this XML input stream.
   <p>
   * The token is consumed in the process.
   <p>
   * @return the next {@link XMLToken}, or an EOF token (i.e.,
   * <code>XMLToken.isEOF() == true</code>).
   <p>
   * @see #peek()
   */ public
";


%javamethodmodifiers XMLInputStream::peek "
/**
   * Returns the next token <em>without</em> consuming it.
   <p>
   * A subsequent call to either peek() or next() will return the same token.
   <p>
   * @return the next {@link XMLToken} or EOF (XMLToken.isEOF() == true).
   <p>
   * @see #next()
   */ public
";


%javamethodmodifiers XMLInputStream::skipPastEnd(const XMLToken& element) "
/**
   * Consume zero or more tokens up to and including the corresponding end
   * element or EOF.
   <p>
   * @param element the element whose end will be sought in the input stream.
   */ public
";


%javamethodmodifiers XMLInputStream::skipText "
/**
   * Consume zero or more tokens up to but not including the next XML element
   * or EOF.
   */ public
";


%javamethodmodifiers XMLInputStream::setErrorLog(XMLErrorLog* log) "
/**
   * Sets the {@link XMLErrorLog} this stream will use to log errors.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers XMLInputStream::toString "
/**
   * Prints a string representation of the underlying token stream.
   <p>
   * @return a string representing the underlying XML token stream.
   <p>
   * @note This method is intended for debugging purposes.
   */ public
";


%javamethodmodifiers XMLInputStream::getSBMLNamespaces "
/**
   * Returns the {@link SBMLNamespaces} object attached to this {@link XMLInputStream}.
   <p>
   * @return the {@link SBMLNamespaces} object or <code>null</code> if none has been set.
   */ public
";


%javamethodmodifiers XMLInputStream::setSBMLNamespaces(SBMLNamespaces * sbmlns) "
/**
   * Sets the SBML namespaces associated with this XML input stream.
   <p>
   * This allows this stream to reference the available SBML namespaces being
   * read.
   <p>
   * @param sbmlns the list of namespaces to use.
   */ public
";


%javamethodmodifiers XMLInputStream::determineNumberChildren(const std::string& elementName = "") "
/**
   * Returns the number of child tokens of the given element in this stream.
   <p>
   * This method allows information from the input stream to be determined
   * without the need to actually read and consume the tokens in the stream.
   * It returns the number of child elements of the element represented by
   * the <code>elementName</code>, i.e., the number of child elements encountered
   * before the closing tag for the <code>elementName</code> supplied.
   <p>
   * If no <code>elementName</code> is supplied or it is an empty string, then as a
   * special case, this method assumes the element is a MathML
   * <code>apply</code> element followed by a function name.
   <p>
   * @param elementName a string representing the name of the element for
   * which the number of children are to be determined.
   <p>
   * @return a long integer giving the number of children of the 
   * <code>elementName</code> specified.
   <p>
   * @note This method assumes the stream has been read up to and including
   * the element <code>elementName</code>.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLInputStream::determineNumSpecificChildren(const std::string& childName, const std::string& container) "
/**
   * Returns the number of child tokens of the specified type within a
   * given container element.
   <p>
   * This method allows information from the input stream to be determined
   * without the need to actually read and consume the tokens in the stream.
   * It returns the number of child elements of the <code>childName</code> element
   * within the element specified by <code>container</code>.  In other words, it counts
   * the number of <code>childName</code> elements encountered before the closing tag
   * for the <code>container</code> supplied.
   <p>
   * @param childName a string representing the name of the child
   * element whose number is to be determined.
   <p>
   * @param container a string representing the name of the element
   * for which the number of children are to be determined.
   <p>
   * @return a long integer giving the number of children of type 
   * <code>childName</code> within the <code>container</code> element.
   <p>
   * @note This method assumes the stream has been read up to and including
   * the element <code>container</code>.
   */ public
";


%javamethodmodifiers XMLInputStream::XMLInputStream(const XMLInputStream& other) "
/** * @internal */ public
";


%javamethodmodifiers XMLInputStream::XMLInputStream "
/** * @internal */ public
";


%javamethodmodifiers XMLInputStream::queueToken "
/** * @internal */ public
";


%javamethodmodifiers XMLInputStream::requeueToken "
/** * @internal */ public
";


%typemap(javaimports) XMLError "
/** 
 *  XML-level errors, warnings and other diagnostics.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * LibSBML can be configured to use any of a number of XML parsers; at the
 * time of this writing, libSBML supports Xerces versions 2.4 through 3.1,
 * Expat version 1.95.x and higher, and libxml2 version 2.6.16 and higher.
 * These parsers each report different status codes for the various
 * exceptions that can occur during XML processing.  The {@link XMLError} object
 * class abstracts away from the particular diagnostics reported by the
 * different parsers and presents a single uniform interface and set of
 * status codes, along with operations for manipulating the error objects.
 <p>
 * When the libSBML XML parser layer encounters an error in the XML content
 * being processed, or when there is something else wrong (such as an
 * out-of-memory condition), the problems are reported as {@link XMLError} objects.
 * Each {@link XMLError} object instance has an identification number that
 * identifies the nature of the problem.
 * This
 * error identifier is one of the constants listed in the next section below.
 * Applications can use the error identifiers as a means of recognizing the
 * error encountered and changing their behavior if desired.  
 <p>
 * Integer error codes are useful for software, but not so much for telling
 * humans what happened.  For this reason, {@link XMLError} also provides two text
 * messages describing the nature of the error.  These messages are
 * accessible by means of the methods {@link XMLError#getShortMessage()} and
 * {@link XMLError#getMessage()}.  The method {@link XMLError#getShortMessage()} returns
 * a very brief synopsis of the warning or error condition, whereas
 * {@link XMLError#getMessage()} returns a longer explanation.  These text strings
 * are suitable for displaying to human users.
 <p>
 * Each {@link XMLError} object also contains a category code; its value may be
 * retrieved using the method {@link XMLError#getCategory()}.  Category values
 * are drawn from a
 * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>, described below. &nbsp;Categories
 * are used by libSBML to provide more information to calling programs about
 * the nature of a given error.  
 <p>
 * In addition to category codes, each {@link XMLError} object also has a severity
 * code; its value may be retrieved using the method
 * {@link XMLError#getSeverity()}.  Severity code values are drawn from
 * a
 * set of constants whose names begin with the characters <code>LIBSBML_SEV_</code>,
 * described below. Severity levels range from informational
 * ({@link libsbmlConstants#LIBSBML_SEV_INFO LIBSBML_SEV_INFO}) to
 * fatal errors ({@link libsbmlConstants#LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL}).
 <p>
 * Finally, {@link XMLError} objects record the line and column near where the
 * problem occurred in the XML content.  The values can be retrieved using
 * the methods {@link XMLError#getLine()} and {@link XMLError#getColumn()}.  We say \'near
 * where the problem occurred\', because many factors affect how accurate
 * the line/column information ultimately is.  For example, sometimes, the
 * underlying XML parsers can only report such information for the parent
 * XML element where an error occurs, and not for the specific point where
 * the problem occurs.  In other situations, some parsers report invalid
 * line and/or column numbers altogether.  If this occurs, libSBML sets the
 * line and/or column number in the {@link XMLError} object to either
 * <code>0</code> or the value of the maximum unsigned long integer
 * representable on the platform where libSBML is running.  The probability
 * that a true line or column number in an SBML model would equal this
 * value is vanishingly small; thus, if an application encounters these
 * values in an {@link XMLError} object, it can assume no valid line/column number
 * could be provided by libSBML in that situation.
 <p>
 * <h3><a class=\'anchor\' 
 * name=\'error-codes\'>Error codes associated with {@link XMLError} objects</a></h3>
 <p>
 * The error and warning codes returned by the XML layer in libSBML are
 * listed in the table below.  In the libSBML Java language interface,
 * these error identifiers are currently implemented as static integer
 * constants defined in the interface class <code><a
 * href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.  This is
 * admittedly not an ideal approach from the standpoint of modern Java
 * programming, but it was necessary to work around the lack of
 * enumerations in Java prior to JDK 1.5.  Future versions of libSBML may
 * use a proper Java enumeration type to define the error
 * identifiers. 
 <p>
 * <center>
 * <table cellspacing=\'1\' cellpadding=\'1\' border=\'0\' width=\'95%\'
          class=\'text-table normal-font alt-row-colors\'>
 * <caption>Possible {@link XMLError} error codes.  Depending on the programming
 * language in use, the <em>Enumerator</em> values will be defined either
 * as a value from an enumeration type 
 * or as integer constants.
 * To make this table more compact, we have shortened the identifiers for
 * the category and severity codes to their essential parts.  To get the
 * actual names of the constants, prepend <code>LIBSBML_CAT_</code> to the
 * category names and <code>LIBSBML_SEV_</code> to the severity names
 * shown in the two right-hand columns.
 * </caption>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th style=\'text-align: left\'>Enumerator</th>
 *      <th>Meaning</th>
 *      <th width=\'90\' style=\'text-align: left\'>Category</th>
 *      <th width=\'90\' style=\'text-align: left\'>Severity</th>
 *  </tr>
 * <tr><td>{@link libsbmlConstants#XMLUnknownError XMLUnknownError}</td><td>Unrecognized error encountered internally</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLOutOfMemory XMLOutOfMemory}</td> <td>Out of memory</td><td>SYSTEM</td><td>FATAL</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLFileUnreadable XMLFileUnreadable}</td> <td>File unreadable</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLFileUnwritable XMLFileUnwritable}</td> <td>File unwritable</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLFileOperationError XMLFileOperationError}</td><td>Error encountered while attempting file operation</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLNetworkAccessError XMLNetworkAccessError}</td><td>Network access error</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#InternalXMLParserError InternalXMLParserError}</td><td>Internal XML parser state error</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>{@link libsbmlConstants#UnrecognizedXMLParserCode UnrecognizedXMLParserCode}</td><td>XML parser returned an unrecognized error code</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLTranscoderError XMLTranscoderError}</td><td>Character transcoder error</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>{@link libsbmlConstants#MissingXMLDecl MissingXMLDecl}</td><td>Missing XML declaration at beginning of XML input</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#MissingXMLEncoding MissingXMLEncoding}</td><td>Missing encoding attribute in XML declaration</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLDecl BadXMLDecl}</td><td>Invalid or unrecognized XML declaration or XML encoding</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLDOCTYPE BadXMLDOCTYPE}</td><td>Invalid, malformed or unrecognized XML DOCTYPE declaration</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#InvalidCharInXML InvalidCharInXML}</td><td>Invalid character in XML content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadlyFormedXML BadlyFormedXML}</td><td>XML content is not well-formed</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#UnclosedXMLToken UnclosedXMLToken}</td><td>Unclosed XML token</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#InvalidXMLConstruct InvalidXMLConstruct}</td><td>XML construct is invalid or not permitted</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLTagMismatch XMLTagMismatch}</td><td>Element tag mismatch or missing tag</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#DuplicateXMLAttribute DuplicateXMLAttribute}</td><td>Duplicate XML attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#UndefinedXMLEntity UndefinedXMLEntity}</td><td>Undefined XML entity</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadProcessingInstruction BadProcessingInstruction}</td><td>Invalid, malformed or unrecognized XML processing instruction</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLPrefix BadXMLPrefix}</td><td>Invalid or undefined XML namespace prefix</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLPrefixValue BadXMLPrefixValue}</td><td>Invalid XML namespace prefix value</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#MissingXMLRequiredAttribute MissingXMLRequiredAttribute}</td><td>Missing a required XML attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLAttributeTypeMismatch XMLAttributeTypeMismatch}</td><td>Data type mismatch for the value of an attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLBadUTF8Content XMLBadUTF8Content}</td><td>Invalid UTF8 content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#MissingXMLAttributeValue MissingXMLAttributeValue}</td><td>Missing or improperly formed attribute value</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLAttributeValue BadXMLAttributeValue}</td><td>Invalid or unrecognizable attribute value</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLAttribute BadXMLAttribute}</td><td>Invalid, unrecognized or malformed attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#UnrecognizedXMLElement UnrecognizedXMLElement}</td><td>Element either not recognized or not permitted</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLComment BadXMLComment}</td><td>Badly formed XML comment</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLDeclLocation BadXMLDeclLocation}</td><td>XML declaration not permitted in this location</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLUnexpectedEOF XMLUnexpectedEOF}</td><td>Reached end of input unexpectedly</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLIDValue BadXMLIDValue}</td><td>Value is invalid for XML ID, or has already been used</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLIDRef BadXMLIDRef}</td><td>XML ID value was never declared</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#UninterpretableXMLContent UninterpretableXMLContent}</td><td>Unable to interpret content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#BadXMLDocumentStructure BadXMLDocumentStructure}</td><td>Bad XML document structure</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#InvalidAfterXMLContent InvalidAfterXMLContent}</td><td>Encountered invalid content after expected content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLExpectedQuotedString XMLExpectedQuotedString}</td><td>Expected to find a quoted string</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLEmptyValueNotPermitted XMLEmptyValueNotPermitted}</td><td>An empty value is not permitted in this context</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLBadNumber XMLBadNumber}</td><td>Invalid or unrecognized number</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLBadColon XMLBadColon}</td><td>Colon characters are invalid in this context</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#MissingXMLElements MissingXMLElements}</td><td>One or more expected elements are missing</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link libsbmlConstants#XMLContentEmpty XMLContentEmpty}</td><td>Main XML content is empty</td><td>XML</td><td>ERROR</td></tr>
 * </table>
 * </center>
 <p>
 * <h3><a class=\'anchor\'
 * name=\'error-categories\'>Category codes associated with {@link XMLError} objects</a></h3>
 <p>
 * As discussed above, each {@link XMLError} object contains a value for a category
 * identifier, describing the type of issue that the {@link XMLError} object represents.
 * The category can be retrieved from an {@link XMLError} object using the method
 * {@link XMLError#getCategory()}. The following table lists each possible value
 * and a brief description of its meaning.
 <p>
 * As is the case with the error codes, in the libSBML Java language
 * interface, the category identifiers are currently implemented as static
 * integer constants defined in the interface class
 * <code>libsbmlConstants</code> in the file \'<a
 * href=\'libsbmlConstants.html\'>libsbmlConstants.java</a>\'.
 <p>
 * <center>
 * <table width=\'95%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\'
 *        class=\'text-table normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th style=\'text-align: left\'>Enumerator</th>
 *      <th>Meaning</th>
 *  </tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_INTERNAL LIBSBML_CAT_INTERNAL}</td>
 * <td>A problem involving the libSBML
 * software itself or the underlying XML parser.  This almost certainly
 * indicates a software defect (i.e., bug) in libSBML.  Please report
 * instances of this to the libSBML developers.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_SYSTEM LIBSBML_CAT_SYSTEM}</td>
 * <td>A problem reported by the operating
 * system, such as an inability to read or write a file.  This indicates
 * something that is not a program error but is outside of the control of
 * libSBML.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_XML LIBSBML_CAT_XML}</td>
 * <td>A problem in the XML content itself.  This
 * usually arises from malformed XML or the use of
 * constructs not permitted in SBML.</td></tr>
 * </table>
 * </center>
 <p>
 * <h3><a class=\'anchor\'
 * name=\'error-severities\'>Severity codes associated with {@link XMLError} objects</a></h3>
 <p>
 * As described above, each {@link XMLError} object contains a value for a severity
 * code, describing how severe is the issue that the {@link XMLError} object
 * represents.  The severity be retrieved from an {@link XMLError} object using the
 * method {@link XMLError#getSeverity()}. The following table lists each possible
 * value and a brief description of its meaning.
 <p>
 * As is the case with the category codes, in the libSBML Java language
 * interface, these severity codes are currently
 * implemented as static integer constants defined in the interface class
 * <code>libsbmlConstants</code> in the file \'<a
 * href=\'libsbmlConstants.html\'>libsbmlConstants.java</a>\'.  This
 * is admittedly not an ideal approach from the standpoint of modern Java
 * programming, but it was necessary to work around the lack of
 * enumerations in Java prior to JDK 1.5.  Future versions of libSBML may
 * use a proper Java enumeration type to define the severity
 * codes. 
 <p>
 * <center>
 * <table width=\'95%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\'
 *        class=\'text-table normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th style=\'text-align: left\'>Enumerator</th>
 *      <th>Meaning</th>
 *  </tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_SEV_INFO LIBSBML_SEV_INFO}</td>
 * <td>The error is actually informational and
 * not necessarily a serious problem.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_SEV_WARNING LIBSBML_SEV_WARNING}</td>
 * <td>The error object represents a problem
 * that is not serious enough to necessarily stop the problem, but
 * applications should take note of the problem and evaluate what its
 * implications may be.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_SEV_ERROR LIBSBML_SEV_ERROR}</td>
 * <td>The error object represents a serious
 * error.  The application may continue running but it is unlikely to be
 * able to continue processing the same XML file or data stream.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL}</td>
 * <td>A serious error occurred, such as an
 * out-of-memory condition, and the software should terminate
 * immediately.</td></tr>
 * </table>
 * </center>
 */
"


%javamethodmodifiers XMLError::XMLError( const int errorId           = 0 , const std::string& details  = "" , const unsigned int line     = 0 , const unsigned int column   = 0 , const unsigned int severity = LIBSBML_SEV_FATAL , const unsigned int category = LIBSBML_CAT_INTERNAL ) "
/**
   * Creates a new {@link XMLError} to report that something occurred during XML
   * processing.
   <p>
   * {@link XMLError} objects have identification numbers to indicate the nature of
   * the exception.  These numbers are defined as longeger constants in the file
   * \'libsbmlConstants.java\'.  See the <a class=\'el\'
   * href=\'#error-codes\'>top of this documentation</a> for a table
   * listing the possible values and their meanings.  The argument 
   * <code>errorId</code> to this constructor <em>can</em> be (but does not have to be) a
   * value from this set of constants.  If it is
   * one of the predefined error identifiers, the {@link XMLError} class assumes
   * the error is a low-level system or XML layer error and
   * <em>prepends</em> a built-in, predefined error message to any string
   * passed in the argument <code>details</code> to this constructor.  In addition,
   * all the predefined error identifiers have associated values for the 
   * <code>severity</code> and <code>category</code> codes, and these fields are filled-in as
   * well. 
   <p>
   * If the error identifier <code>errorId</code> is a number greater than 9999, this
   * constructor assumes that the error was generated from another part of
   * the software, and does not do additional filling in of values beyond
   * the defaults in the constructor itself.  This allows {@link XMLError} to serve
   * as a base class for other errors (and is used in this way elsewhere in
   * libSBML).  Callers should fill in all the parameters with suitable
   * values if generating errors with codes greater than 9999 to make
   * maximum use of the {@link XMLError} facilities.
   <p>
   * As mentioned above, 
   * there are additional constants defined for <a class=\'el\'
   * href=\'#error-severities\'>standard severity</a> and <a class=\'el\'
   * href=\'#error-categories\'>standard category</a> codes, and every predefined 
   * error in libSBML has an associated value for severity and category taken
   * from these predefined sets.  These constants have symbol names
   * prefixed with <code>LIBSBML_SEV_</code> and <code>LIBSBML_CAT_</code>,
   * respectively.  If the value of <code>errorId</code> is one of the standard error
   * codes, callers do not need to fill in <code>severity</code> and <code>category</code> in a
   * call to this constructor.  Conversely, if <code>errorId</code> is not an existing
   * XML-level error code, callers can use other values for <code>severity</code> and
   * <code>category</code>. 
   <p>
   * @param errorId a long integer, the identification number of the error.
   <p>
   * @param details a string containing additional details about the error.
   * If the error code in <code>errorId</code> is one that is recognized by {@link XMLError},
   * the given message is <em>appended</em> to a predefined message associated
   * with the given code.  If the error code is not recognized, the message
   * is stored as-is as the text of the error.
   <p>
   * @param line a long integer, the line number at which the error occured.
   <p>
   * @param column a long integer, the column number at which the error occured.
   <p>
   * @param severity an integer indicating severity of the error.
   <p>
   * @param category an integer indicating the category to which the error
   * belongs.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLError::XMLError(const XMLError& orig) "
/**
   * Copy constructor; creates a copy of this {@link XMLError}.
   <p>
   * <code>orig</code> the {@link XMLError} object to copy.
   <p>
   * @throws XMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers XMLError::getErrorId() const "
/**
   * Returns the identifier of this error.
   <p>
   * @return the error code for this error.
   <p>
   * @see #getMessage()
   * @see #getShortMessage()
   * @see #getCategory()
   * @see #getSeverity()
   */ public
";


%javamethodmodifiers XMLError::getMessage() const "
/**
   * Returns the message text of this error.
   <p>
   * The message associated with an error object describes the nature of
   * the problem.  The message returned by this method is generally longer
   * and clearer than the message returned by {@link XMLError#getShortMessage()},
   * but not in all cases.
   <p>
   * Callers may use {@link XMLError#getCategory()} and {@link XMLError#getSeverity()} to
   * obtain additional information about the nature and severity of the
   * problem.
   <p>
   * @return the message text
   <p>
   * @see #getErrorId()
   * @see #getShortMessage()
   * @see #getCategory()
   * @see #getSeverity()
   */ public
";


%javamethodmodifiers XMLError::getShortMessage() const "
/**
   * Returns a brief message for this error.
   <p>
   * This is an alternative error message that, in general, is as short as
   * the authors could make it.  However, brevity is often inversely
   * proportional to clarity, so this short message may not be sufficiently
   * informative to understand the nature of the error.  Calling
   * applications may wish to check {@link XMLError#getMessage()} in addition or
   * instead.
   <p>
   * @return the short error message text
   <p>
   * @see #getErrorId()
   * @see #getMessage()
   * @see #getCategory()
   * @see #getSeverity()
   */ public
";


%javamethodmodifiers XMLError::getLine() const "
/**
   * Returns the line number in the XML input near where the error, warning
   * or other diagnostic occurred.
   <p>
   * We say \'near where the problem occurred\', because many factors affect
   * how accurate the line/column information ultimately is.  For example,
   * sometimes, the underlying XML parsers can only report such information
   * for the parent XML element where an error occurs, and not for the
   * specific point where the problem occurs.  In other situations, some
   * parsers report invalid line and/or column numbers altogether.  If this
   * occurs, libSBML sets the line and/or column number in the {@link XMLError}
   * object to either <code>0</code> or the value of the maximum unsigned
   * long integer representable on the platform where libSBML is running.
   * The probability that a true line or column number in an SBML model
   * would equal this value is vanishingly small; thus, if an application
   * encounters these values in an {@link XMLError} object, it can assume no valid
   * line/column number could be provided by libSBML in that situation.
   <p>
   * @return the line number
   <p>
   * @see #getColumn()
   */ public
";


%javamethodmodifiers XMLError::getColumn() const "
/**
   * Returns the column number in the XML input near where the error,
   * warning or other diagnostic occurred.
   <p>
   * We say \'near where the problem occurred\', because many factors affect
   * how accurate the line/column information ultimately is.  For example,
   * sometimes, the underlying XML parsers can only report such information
   * for the parent XML element where an error occurs, and not for the
   * specific point where the problem occurs.  In other situations, some
   * parsers report invalid line and/or column numbers altogether.  If this
   * occurs, libSBML sets the line and/or column number in the {@link XMLError}
   * object to either <code>0</code> or the value of the maximum unsigned
   * long integer representable on the platform where libSBML is running.
   * The probability that a true line or column number in an SBML model
   * would equal this value is vanishingly small; thus, if an application
   * encounters these values in an {@link XMLError} object, it can assume no valid
   * line/column number could be provided by libSBML in that situation.
   <p>
   * @return the column number
   <p>
   * @see #getLine()
   */ public
";


%javamethodmodifiers XMLError::getSeverity() const "
/**
   * Returns the severity of this error.
   <p>
   * {@link XMLError} defines an enumeration of severity codes for the XML layer.
   * Applications that build on {@link XMLError} by subclassing it may add their
   * own severity codes with numbers higher than those in the predefined
   * set of severity codes.
   <p>
   * @return the severity of this {@link XMLError}.
   <p>
   * @see #getSeverityAsString()
   * @see #getCategory()
   */ public
";


%javamethodmodifiers XMLError::getSeverityAsString() const "
/**
   * Returns a string describing the severity level of this error.
   <p>
   * {@link XMLError} defines an enumeration of severity codes for the XML layer.
   * Applications that build on {@link XMLError} by subclassing it may add their
   * own severity codes with numbers higher than those in the predefined
   * set of severity codes.
   <p>
   * @return string representing the severity of this {@link XMLError}.
   <p>
   * @see #getSeverity()
   * @see #getCategoryAsString()
   */ public
";


%javamethodmodifiers XMLError::getCategory() const "
/**
   * Returns the category of this error.
   <p>
   * {@link XMLError} defines an enumeration of category codes for the XML layer.
   * Applications that build on {@link XMLError} by subclassing it may add their
   * own categories with numbers higher than those in the predefined
   * set of category codes.
   <p>
   * Categories can be used to partition errors into distinct groups.
   * Among other things, this can be used to prevent id conflicts by
   * uniquely identifying an {@link XMLError} by both id and category.
   <p>
   * @return the category of this {@link XMLError}.
   <p>
   * @see #getSeverity()
   * @see #getCategoryAsString()
   */ public
";


%javamethodmodifiers XMLError::getCategoryAsString() const "
/**
   * Returns a string describing the category of this error.
   <p>
   * {@link XMLError} defines an enumeration of category codes for the XML layer.
   * Applications that build on {@link XMLError} by subclassing it may add their
   * own categories with numbers higher than those in the predefined
   * set of category codes.
   <p>
   * Categories can be used to partition errors into distinct groups.
   * Among other things, this can be used to prevent id conflicts by
   * uniquely identifying an {@link XMLError} by both id and category.
   <p>
   * @return string representing the category of this {@link XMLError}.
   <p>
   * @see #getCategory()
   * @see #getSeverityAsString()
   */ public
";


%javamethodmodifiers XMLError::isInfo() const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error object is for information purposes only.
   <p>
   * This is equivalent to obtaining the severity code from an {@link XMLError}
   * object (via {@link XMLError#getSeverity()}) and then comparing it to the
   * value {@link libsbmlConstants#LIBSBML_SEV_INFO LIBSBML_SEV_INFO} from the
   * set of predefined
   * severity codes.
   <p>
   * @return <code>true</code> if this {@link XMLError} is for informational purposes only,
   * <code>false</code> otherwise.
   <p>
   * @see #isWarning()
   * @see #isError()
   * @see #isFatal()
   */ public
";


%javamethodmodifiers XMLError::isWarning() const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this error object is a warning.
   <p>
   * This is equivalent to obtaining the severity code from an {@link XMLError}
   * object (via {@link XMLError#getSeverity()}) and then comparing it to the
   * value {@link libsbmlConstants#LIBSBML_SEV_WARNING LIBSBML_SEV_WARNING} from the
   * set of predefined
   * severity codes.
   <p>
   * @return <code>true</code> if this error is a warning, <code>false</code> otherwise.
   <p>
   * @see #isInfo()
   * @see #isError()
   * @see #isFatal()
   */ public
";


%javamethodmodifiers XMLError::isError() const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error is a significant error.
   <p>
   * This is equivalent to obtaining the severity code from an {@link XMLError}
   * object (via {@link XMLError#getSeverity()}) and then comparing it to the
   * value {@link libsbmlConstants#LIBSBML_SEV_ERROR LIBSBML_SEV_ERROR} from the
   * set of predefined
   * severity codes.
   <p>
   * @return <code>true</code> if this error is an error, <code>false</code> otherwise.
   <p>
   * @see #isInfo()
   * @see #isWarning()
   * @see #isFatal()
   */ public
";


%javamethodmodifiers XMLError::isFatal() const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error is a fatal run-time error.
   <p>
   * This is equivalent to obtaining the severity code from an {@link XMLError}
   * object (via {@link XMLError#getSeverity()}) and then comparing it to the
   * value {@link libsbmlConstants#LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL} from the
   * set of predefined severity codes.
   <p>
   * @return <code>true</code> if this error is a fatal error, <code>false</code> otherwise.
   <p>
   * @see #isInfo()
   * @see #isWarning()
   * @see #isError()
   */ public
";


%javamethodmodifiers XMLError::isInternal() const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error resulted from an internal program error.
   <p>
   * This is equivalent to obtaining the category identifier from an
   * {@link XMLError} object (via {@link XMLError#getCategory()}) and then comparing it to
   * the value {@link libsbmlConstants#LIBSBML_CAT_INTERNAL LIBSBML_CAT_INTERNAL} from the
   * set of predefined category codes.
   <p>
   * @return <code>true</code> or <code>false</code>
   <p>
   * @see #isSystem()
   * @see #isXML()
   */ public
";


%javamethodmodifiers XMLError::isSystem() const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error was generated by the operating system.
   <p>
   * This is equivalent to obtaining the category identifier from an
   * {@link XMLError} object (via {@link XMLError#getCategory()}) and then comparing it to
   * the value {@link libsbmlConstants#LIBSBML_CAT_SYSTEM LIBSBML_CAT_SYSTEM} from the
   * set of predefined category codes.
   <p>
   * @return <code>true</code> or <code>false</code>
   <p>
   * @see #isInternal()
   * @see #isXML()
   */ public
";


%javamethodmodifiers XMLError::isXML() const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error resulted from a problem in the XML input (e.g., an XML syntax
   * error).
   <p>
   * This is equivalent to obtaining the category identifier from an
   * {@link XMLError} object (via {@link XMLError#getCategory()}) and then comparing it to
   * the value {@link libsbmlConstants#LIBSBML_CAT_XML LIBSBML_CAT_XML} from the
   * set of predefined category codes.
   <p>
   * @return <code>true</code> or <code>false</code>
   <p>
   * @see #isInternal()
   * @see #isSystem()
   */ public
";


%javamethodmodifiers XMLError::isValid() const "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error resulted from a problem or whether it was logged as an unknown
   * error.
   <p>
   * This is equivalent to obtaining the error identifier from an
   * {@link XMLError} object (via {@link XMLError#getErrorId()}) and then comparing it to
   * the value XMLUnknownError or UnknownError from the
   * set of predefined error codes.
   <p>
   * @return <code>true</code> or <code>false</code>
   */ public
";


%javamethodmodifiers XMLError::setLine(unsigned int line) "
/**
   * Sets the line number where this error occurred.
   <p>
   * @param line a long integer, the line number to set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #setColumn(long column)
   */ public
";


%javamethodmodifiers XMLError::setColumn(unsigned int column) "
/**
   * Sets the column number where this error occurred.
   <p>
   * @param column a long integer, the column number to set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #setLine(long line)
   */ public
";


%javamethodmodifiers XMLError::getStandardMessage(const int code) "
/**
   * Returns a copy of the message string associated with the given
   * predefined {@link XMLError} code.
   <p>
   * @param code the error code whose message is sought; it must be a
   * predefined value from <a class=\'el\' href=\'#error-codes\'>the set
   * of predefined error identifiers</a>.
   */ public
";


%javamethodmodifiers XMLError::getPackage() const "
/**
   * Returns the SBML Level&nbsp;3 package extension (if any) that logged
   * this error.
   <p>
   * Each error logged by an libSBML extension for SBML Level&nbsp;3 packages
   * includes a record of the package that logged it.  The field is a simple
   * text string.  If the string is empty or has the value <code>\'core\'</code>, then
   * the error came from libSBML core; otherwise, the string will be the
   * short-form name of the package (e.g., <code>\'comp\'</code> for the Hierarchical
   * {@link Model} Composition package).
   <p>
   * @return a string representing the name of the package that logged this
   * error.  If the error did not come from a package extension, the value
   * will be the empty string or <code>\'core\'.</code>
   */ public
";


%javamethodmodifiers XMLError::getErrorIdOffset() const "
/**
   * Returns libSBML\'s internal numerical offset for the error code
   * associated with this error.
   <p>
   * In the SBML Level&nbsp;3 package specifications, package validation
   * rules are identified by 5-digit numbers prefixed with the nickname of
   * the package itself&mdash;e.g., &ldquo;comp-10101&rdquo;,
   * &ldquo;fbc-20301&rdquo;, etc.  Historically, libSBML reported error
   * codes as pure integers, and some application software systems make
   * decisions based on the numerical values of the error codes.  To permit
   * these applications to continue to function in this fashion, libSBML
   * internally continues to maintain error identifiers as pure integers.  To
   * handle the possibility that errors may come from package extensions,
   * libSBML uses numerical offsets added to the internal error codes.  These
   * offsets add two leading digits to the regular 5-digit error codes; for
   * example, &ldquo;comp&rdquo; error codes are stored as 1010101, 1020102,
   * etc.  The offset in this case is 1000000.  Another package will have the
   * offset 2000000, yet another will have 3000000, etc.
   <p>
   * This method returns the integer offset in this error\'s error code.
   * Calling applications can get the 5-digit package-specific number for a
   * given error code by subtracting the offset from the value reported by
   * getErrorId():
   * <pre class=\'fragment\'>
 getErrorId() - getErrorIdOffset()
 </pre>
   * When libSBML produces error messages, it combines the text string
   * returned by getPackage() with the subtracted value of the error code,
   * to produce a text string of the form &ldquo;comp-10101&rdquo;.
   <p>
   * @see #getErrorId()
   * @see #getPackage()
   */ public
";


%javamethodmodifiers XMLError::stringForSeverity "
/** * @internal */ public
";


%javamethodmodifiers XMLError::stringForCategory "
/** * @internal */ public
";


%typemap(javaimports) XMLErrorLog "
/** 
 *  Log of diagnostics reported during XML processing.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The error log is a list.  The XML layer of libSBML maintains an error
 * log associated with a given XML document or data stream.  When an
 * operation results in an error, or when there is something wrong with the
 * XML content, the problem is reported as an {@link XMLError} object stored in the
 * {@link XMLErrorLog} list.  Potential problems range from low-level issues (such
 * as the inability to open a file) to XML syntax errors (such as
 * mismatched tags or other problems).
 <p>
 * A typical approach for using this error log is to first use
 * {@link XMLErrorLog#getNumErrors()}
 * to inquire how many {@link XMLError} object instances it contains, and then to
 * iterate over the list of objects one at a time using
 * getError(long n) .  Indexing in the list begins at 0.
 <p>
 * In normal circumstances, programs using libSBML will actually obtain an
 * {@link SBMLErrorLog} rather than an {@link XMLErrorLog}.  The former is subclassed from
 * {@link XMLErrorLog} and simply wraps commands for working with {@link SBMLError} objects
 * rather than the low-level {@link XMLError} objects.  Classes such as
 * {@link SBMLDocument} use the higher-level {@link SBMLErrorLog}.
 */
"


%javamethodmodifiers XMLErrorLog::getNumErrors() const "
/**
   * Returns the number of errors that have been logged.
   <p>
   * To retrieve individual errors from the log, callers may use
   * {@link XMLErrorLog#getError(long n)} .
   <p>
   * @return the number of errors that have been logged.
   */ public
";


%javamethodmodifiers XMLErrorLog::getError "
/**
   * Returns the <i>n</i>th {@link XMLError} object in this log.
   <p>
   * Index <code>n</code> is counted from 0.  Callers should first inquire about the
   * number of items in the log by using the method
   * {@link XMLErrorLog#getNumErrors()}.
   * Attempts to use an error index number that exceeds the actual number
   * of errors in the log will result in a <code>null</code> being returned.
   <p>
   * @param n the index number of the error to retrieve (with 0 being the
   * first error).
   <p>
   * @return the <i>n</i>th {@link XMLError} in this log, or <code>null</code> if <code>n</code> is
   * greater than or equal to
   * {@link XMLErrorLog#getNumErrors()}.
   <p>
   * @see #getNumErrors()
   */ public
";


%javamethodmodifiers XMLErrorLog::clearLog "
/**
   * Deletes all errors from this log.
   */ public
";


%javamethodmodifiers XMLErrorLog::XMLErrorLog "
/** * @internal */ public
";


%javamethodmodifiers XMLErrorLog::XMLErrorLog(const XMLErrorLog& other) "
/** * @internal */ public
";


%javamethodmodifiers XMLErrorLog::add(const XMLError& error) "
/** * @internal */ public
";


%javamethodmodifiers XMLErrorLog::add(const std::list<XMLError>& errors) "
/** * @internal */ public
";


%javamethodmodifiers XMLErrorLog::add(const std::vector<XMLError*>& errors) "
/** * @internal */ public
";


%javamethodmodifiers XMLErrorLog::setParser(const XMLParser* p) "
/** * @internal */ public
";


%javamethodmodifiers XMLErrorLog::toString() const "
/**
   * Writes all errors contained in this log to a string and returns it.
   <p>
   * This method uses printErrors() to format the diagnostic messages.
   * Please consult that method for information about the organization
   * of the messages in the string returned by this method.
   <p>
   * @return a string containing all logged errors and warnings.
   <p>
   * @see #printErrors()
   */ public
";


%javamethodmodifiers XMLErrorLog::printErrors(std::ostream& stream = std::cerr) const "
/**
   * Prints all the errors or warnings stored in this error log.
   <p>
   * This method prints the text to the stream given by the optional
   * parameter <code>stream</code>.  If no stream is given, the method prints the
   * output to the standard error stream.
   <p>
   * The format of the output is:
   * <pre class=\'fragment\'>
   N error(s):
     line NNN: (id) message
 </pre>
   * If no errors have occurred, i.e.,
   * <code>getNumErrors() == 0</code>, then no output will be produced.
<p>
   * @param stream the ostream or ostringstream object indicating where
   * the output should be printed.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers XMLErrorLog::printErrors "
/**
   * Prints the errors or warnings with given severity stored in this error log.
   <p>
   * This method prints the text to the stream given by the optional
   * parameter <code>stream</code>.  If no stream is given, the method prints the
   * output to the standard error stream.
   <p>
   * The format of the output is:
   * <pre class=\'fragment\'>
   N error(s):
     line NNN: (id) message
</pre>
   * If no errors with that severity was found, then no output will be produced.
   <p>
   * @param stream the ostream or ostringstream object indicating where
   * the output should be printed.
   * @param severity the severity of the errors sought.
   */ public
";


%javamethodmodifiers XMLErrorLog::isSeverityOverridden() const "
/**
   * Returns a boolean indicating whether or not the severity has been
   * overridden.
   <p>
   * <p>
 * The <em>severity override</em> mechanism in {@link XMLErrorLog} is intended to help
 * applications handle error conditions in ways that may be more convenient
 * for those applications.  It is possible to use the mechanism to override
 * the severity code of errors logged by libSBML, and even to disable error
 * logging completely.  An override stays in effect until the override is
 * changed again by the calling application.
   <p>
   * @return <code>true</code> if an error severity override has been set, <code>false</code>
   * otherwise.
   <p>
   * @see #getSeverityOverride()
   * @see #setSeverityOverride(int)
   * @see #unsetSeverityOverride()
   * @see #changeErrorSeverity(int, int, String)
   */ public
";


%javamethodmodifiers XMLErrorLog::unsetSeverityOverride "
/**
   * Usets an existing override.
   <p>
   * <p>
 * The <em>severity override</em> mechanism in {@link XMLErrorLog} is intended to help
 * applications handle error conditions in ways that may be more convenient
 * for those applications.  It is possible to use the mechanism to override
 * the severity code of errors logged by libSBML, and even to disable error
 * logging completely.  An override stays in effect until the override is
 * changed again by the calling application.
   <p>
   * @see #getSeverityOverride()
   * @see #setSeverityOverride(int)
   * @see #isSeverityOverridden()
   * @see #changeErrorSeverity(int, int, String)
   */ public
";


%javamethodmodifiers XMLErrorLog::getSeverityOverride() const "
/**
   * Returns the current override.
   <p>
   * <p>
 * The <em>severity override</em> mechanism in {@link XMLErrorLog} is intended to help
 * applications handle error conditions in ways that may be more convenient
 * for those applications.  It is possible to use the mechanism to override
 * the severity code of errors logged by libSBML, and even to disable error
 * logging completely.  An override stays in effect until the override is
 * changed again by the calling application.
   <p>
   * @return a severity override code.  The possible values are drawn
   * from the
   * set of integer constants whose names begin with the prefix
   * <code>LIBSBML_OVERRIDE_</code>:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OVERRIDE_DISABLED LIBSBML_OVERRIDE_DISABLED}
   * <li> {@link libsbmlConstants#LIBSBML_OVERRIDE_DONT_LOG LIBSBML_OVERRIDE_DONT_LOG}
   * <li> {@link libsbmlConstants#LIBSBML_OVERRIDE_WARNING LIBSBML_OVERRIDE_WARNING}
   *
   * </ul> <p>
   * @see #isSeverityOverridden()
   * @see #setSeverityOverride(int)
   * @see #unsetSeverityOverride()
   * @see #changeErrorSeverity(int, int, String)
   */ public
";


%javamethodmodifiers XMLErrorLog::setSeverityOverride(XMLErrorSeverityOverride_t severity) "
/**
   * Set the severity override.
   <p>
   * <p>
 * The <em>severity override</em> mechanism in {@link XMLErrorLog} is intended to help
 * applications handle error conditions in ways that may be more convenient
 * for those applications.  It is possible to use the mechanism to override
 * the severity code of errors logged by libSBML, and even to disable error
 * logging completely.  An override stays in effect until the override is
 * changed again by the calling application.
   <p>
   * @param severity an override code indicating what to do.  If the value is
   * {@link libsbmlConstants#LIBSBML_OVERRIDE_DISABLED LIBSBML_OVERRIDE_DISABLED}
   * (the default setting) all errors logged will be given the severity
   * specified in their usual definition.   If the value is
   * {@link libsbmlConstants#LIBSBML_OVERRIDE_WARNING LIBSBML_OVERRIDE_WARNING},
   * then all errors will be logged as warnings.  If the value is 
   * {@link libsbmlConstants#LIBSBML_OVERRIDE_DONT_LOG LIBSBML_OVERRIDE_DONT_LOG},
   * no error will be logged, regardless of their severity.
   <p>
   * @see #isSeverityOverridden()
   * @see #getSeverityOverride()
   * @see #unsetSeverityOverride()
   * @see #changeErrorSeverity(int, int, String)
   */ public
";


%javamethodmodifiers XMLErrorLog::changeErrorSeverity(XMLErrorSeverity_t originalSeverity, XMLErrorSeverity_t targetSeverity, std::string package = "all") "
/**
   * Changes the severity override for errors in the log that have a given
   * severity.
   <p>
   * This method searches through the list of errors in the log, comparing
   * each one\'s severity to the value of <code>originalSeverity</code>.  For each error
   * encountered with that severity logged by the named <code>package</code>, the
   * severity of the error is reset to <code>targetSeverity</code>.
   <p>
   * <p>
 * The <em>severity override</em> mechanism in {@link XMLErrorLog} is intended to help
 * applications handle error conditions in ways that may be more convenient
 * for those applications.  It is possible to use the mechanism to override
 * the severity code of errors logged by libSBML, and even to disable error
 * logging completely.  An override stays in effect until the override is
 * changed again by the calling application.
   <p>
   * @param originalSeverity the severity code to match
   <p>
   * @param targetSeverity the severity code to use as the new severity
   <p>
   * @param package a string, the name of an SBML Level&nbsp;3 package
   * extension to use to narrow the search for errors.  A value of <code>\'all\'</code>
   * signifies to match against errors logged from any package; a value of a
   * package nickname such as <code>\'comp\'</code> signifies to limit consideration to
   * errors from just that package.  If no value is provided, <code>\'all\'</code> is the
   * default.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   <p>
   * @see #isSeverityOverridden()
   * @see #getSeverityOverride()
   * @see #setSeverityOverride(int)
   * @see #unsetSeverityOverride()
   */ public
";


%typemap(javaimports) SBMLErrorLog "
/** 
 *  Log of diagnostics reported during processing.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The error log is a list.  Each {@link SBMLDocument} maintains its own
 * {@link SBMLErrorLog}.  When a libSBML operation on SBML content results in an
 * error, or when there is something worth noting about the SBML content,
 * the issue is reported as an {@link SBMLError} object stored in the {@link SBMLErrorLog}
 * list.
 <p>
 * {@link SBMLErrorLog} is derived from {@link XMLErrorLog}, an object class that serves
 * exactly the same purpose but for the XML parsing layer.  {@link XMLErrorLog}
 * provides crucial methods such as
 * {@link XMLErrorLog#getNumErrors()}
 * for determining how many {@link SBMLError} or {@link XMLError} objects are in the log.
 * {@link SBMLErrorLog} inherits these methods.
 <p>
 * The general approach to working with {@link SBMLErrorLog} in user programs
 * involves first obtaining a pointer to a log from a libSBML object such
 * as {@link SBMLDocument}.  Callers should then use
 * {@link XMLErrorLog#getNumErrors()} to inquire how
 * many objects there are in the list.  (The answer may be 0.)  If there is
 * at least one {@link SBMLError} object in the {@link SBMLErrorLog} instance, callers can
 * then iterate over the list using
 * {@link SBMLErrorLog#getError(long n)}@if clike @endif,
 * using methods provided by the {@link SBMLError} class to find out the error code
 * and associated information such as the error severity, the message, and
 * the line number in the input.
 <p>
 * If you wish to simply print the error strings for a human to read, an
 * easier and more direct way might be to use {@link SBMLDocument#printErrors()}.
 <p>
 * @see SBMLError
 * @see XMLErrorLog
 * @see XMLError
 */
"


%javamethodmodifiers SBMLErrorLog::getError "
/**
   * Returns the <i>n</i>th {@link SBMLError} object in this log.
   <p>
   * Index <code>n</code> is counted from 0.  Callers should first inquire about the
   * number of items in the log by using the
   * {@link XMLErrorLog#getNumErrors()} method.
   * Attempts to use an error index number that exceeds the actual number
   * of errors in the log will result in a <code>null</code> being returned.
   <p>
   * @param n the index number of the error to retrieve (with 0 being the
   * first error).
   <p>
   * @return the <i>n</i>th {@link SBMLError} in this log, or <code>null</code> if <code>n</code> is
   * greater than or equal to
   * {@link XMLErrorLog#getNumErrors()}.
   <p>
   * @see #getNumErrors()
   */ public
";


%javamethodmodifiers SBMLErrorLog::getErrorWithSeverity "
/**
   * Returns the <i>n</i>th {@link SBMLError} object with given severity in this log.
   <p>
   * Index <code>n</code> is counted from 0.  Callers should first inquire about the
   * number of items in the log by using the
   * {@link SBMLErrorLog#getNumFailsWithSeverity(long severity)} method.
   * Attempts to use an error index number that exceeds the actual number
   * of errors in the log will result in a <code>null</code> being returned.
   <p>
   * @param n the index number of the error to retrieve (with 0 being the
   * first error).
   * @param severity the severity of the error to retrieve 
   <p>
   * @return the <i>n</i>th {@link SBMLError} in this log, or <code>null</code> if <code>n</code> is
   * greater than or equal to
   * {@link SBMLErrorLog#getNumFailsWithSeverity(long severity)}.
   <p>
   * @see #getNumFailsWithSeverity(long severity)
   */ public
";


%javamethodmodifiers SBMLErrorLog::getNumFailsWithSeverity(unsigned int severity) "
/**
   * Returns the number of errors that have been logged with the given
   * severity code.
   <p>
   * <p>
 * LibSBML associates severity levels with every {@link SBMLError} object to
 * provide an indication of how serious the problem is.  Severities range
 * from informational diagnostics to fatal (irrecoverable) errors.  Given
 * an {@link SBMLError} object instance, a caller can interrogate it for its
 * severity level using methods such as {@link SBMLError#getSeverity()},
 * {@link SBMLError#isFatal()}, and so on.  The present method encapsulates
 * iteration and interrogation of all objects in an {@link SBMLErrorLog}, making
 * it easy to check for the presence of error objects with specific
 * severity levels.
   <p>
   * @param severity a
   * value from the set of <code>LIBSBML_SEV_</code> constants defined by
   * the interface class <code><a
   * href=\'libsbmlConstants.html\'>libsbmlConstants</a></code> 
   <p>
   * @return a count of the number of errors with the given severity code.
   <p>
   * @see #getNumErrors()
   */ public
";


%javamethodmodifiers SBMLErrorLog::getNumFailsWithSeverity "
/**
   * Returns the number of errors that have been logged with the given
   * severity code.
   <p>
   * <p>
 * LibSBML associates severity levels with every {@link SBMLError} object to
 * provide an indication of how serious the problem is.  Severities range
 * from informational diagnostics to fatal (irrecoverable) errors.  Given
 * an {@link SBMLError} object instance, a caller can interrogate it for its
 * severity level using methods such as {@link SBMLError#getSeverity()},
 * {@link SBMLError#isFatal()}, and so on.  The present method encapsulates
 * iteration and interrogation of all objects in an {@link SBMLErrorLog}, making
 * it easy to check for the presence of error objects with specific
 * severity levels.
   <p>
   * @param severity a
   * value from the set of <code>LIBSBML_SEV_</code> constants defined by
   * the interface class <code><a
   * href=\'libsbmlConstants.html\'>libsbmlConstants</a></code> 
   <p>
   * @return a count of the number of errors with the given severity code.
   <p>
   * @see #getNumErrors()
   */ public
";


%javamethodmodifiers SBMLErrorLog::SBMLErrorLog "
/** * @internal */ public
";


%javamethodmodifiers SBMLErrorLog::SBMLErrorLog(const SBMLErrorLog& other) "
/** * @internal */ public
";


%javamethodmodifiers SBMLErrorLog::logError( const unsigned int errorId  = 0 , const unsigned int level    = SBML_DEFAULT_LEVEL , const unsigned int version  = SBML_DEFAULT_VERSION , const std::string& details  = "" , const unsigned int line     = 0 , const unsigned int column   = 0 , const unsigned int severity = LIBSBML_SEV_ERROR , const unsigned int category = LIBSBML_CAT_SBML ) "
/** * @internal */ public
";


%javamethodmodifiers SBMLErrorLog::logPackageError( const std::string& package    = "core" , const unsigned int errorId    = 0 , const unsigned int pkgVersion = 1 , const unsigned int level      = SBML_DEFAULT_LEVEL , const unsigned int version    = SBML_DEFAULT_VERSION , const std::string& details    = "" , const unsigned int line       = 0 , const unsigned int column     = 0 , const unsigned int severity   = LIBSBML_SEV_ERROR , const unsigned int category   = LIBSBML_CAT_SBML ) "
/** * @internal */ public
";


%javamethodmodifiers SBMLErrorLog::add(const SBMLError& error) "
/** * @internal */ public
";


%javamethodmodifiers SBMLErrorLog::add(const std::list<SBMLError>& errors) "
/** * @internal */ public
";


%javamethodmodifiers SBMLErrorLog::add(const std::vector<SBMLError>& errors) "
/** * @internal */ public
";


%javamethodmodifiers SBMLErrorLog::remove(const unsigned int errorId) "
/**
   * Removes an error having errorId from the {@link SBMLError} list.
   <p>
   * Only the first item will be removed if there are multiple errors
   * with the given errorId.
   <p>
   * @param errorId the error identifier of the error to be removed.
   */ public
";


%javamethodmodifiers SBMLErrorLog::contains(const unsigned int errorId) "
/**
   * Returns true if {@link SBMLErrorLog} contains an errorId
   <p>
   * @param errorId the error identifier of the error to be found.
   */ public
";


%typemap(javaimports) SBMLError "
/** 
 *  An error, warning or other diagnostic.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * When a libSBML operation on SBML content results in an error, or when
 * there is something wrong with the SBML content, the problems are
 * reported as {@link SBMLError} objects.  These are generally stored in an
 * {@link SBMLErrorLog} object; this log object, in turn, is kept in the
 * {@link SBMLDocument} object containing the SBML content.  Applications can
 * obtain the list of logged errors using {@link SBMLDocument#getErrorLog()} and
 * then use the methods provided by {@link SBMLErrorLog} to access individual
 * {@link SBMLError} objects.  (Note that despite the word \'error\' in the name,
 * {@link SBMLError} objects are used to represent not only \'true\' errors, but also
 * warnings and some informational diagnostics.  The name is a historical
 * hold-over from early versions of libSBML, in which the object really was
 * only used to report errors.)
 <p>
 * Each {@link SBMLError} object instance has an identification number that
 * identifies the nature of the problem.  This \'error id\' number will be up
 * to five digits long, and it will come from one of two sets of static
 * integer constants defined in the interface class <code><a
 * href=\'libsbmlConstants.html\'> libsbmlConstants</a></code>: either the
 * SBML error identifiers <a class=\'el\' href=\'#SBMLErrorCode_t\'> (described
 * below)</a> or the XML error identifiers (described in the documentation
 * for the class <code><a href=\'XMLError.html\'> {@link XMLError}</a></code>).  The
 * former set of constants includes all the SBML validation rule numbers
 * listed in the appendices of the SBML specification documents, as well as
 * some additional libSBML-specific error codes.
 <p>
 * Error codes are useful mainly for software.  For human readers,
 * {@link SBMLError} also includes text messages that describe the nature of a
 * given problem.  The messages can be accessed using
 * {@link SBMLError#getShortMessage()} and {@link SBMLError#getMessage()}.  The former
 * provides a brief one-line description of the issue, while
 * {@link SBMLError#getMessage()} provides a more detailed text, including (if
 * appropriate) references to sections of the SBML specifications where
 * relevant topics are discussed.  These text strings are suitable for
 * displaying to human users.
 <p>
 * An {@link SBMLError} object also contains a category code; its value may be
 * retrieved using the method {@link SBMLError#getCategory()}.  Category values
 * are drawn from a set of static integer constants
 * defined in <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>,
 * and having names beginning with the characters
 * <code>LIBSBML_CAT_</code>.  The list of possible codes is described in a
 * separate section below.  Categories are used to partition errors into
 * distinct conceptual groups.  This is principally used by the libSBML
 * validation system to group classes of validation checks.  For example,
 * {@link libsbmlConstants#LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY}
 * is the category for tests that check identifier consistency;
 * {@link libsbmlConstants#LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY}
 * is the category for MathML consistency checking; and
 * so on.
 <p>
 * In addition, {@link SBMLError} also has a severity code.  Its value may be
 * retrieved using the method {@link SBMLError#getSeverity()}.  The possible
 * severity values are the same as those reported by <code><a href=\'XMLError.html\'>XMLError</a></code>.
 * Severity levels currently range from informational
 * ({@link libsbmlConstants#LIBSBML_SEV_INFO LIBSBML_SEV_INFO})
 * to fatal errors
 * ({@link libsbmlConstants#LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL}).
 * They can be
 * used by an application to evaluate how serious a given problem
 * is.
 <p>
 * {@link SBMLError} also tracks the Level&nbsp;3 package extension, if any, was
 * responsible for a given warning or error.  Each diagnostic code logged by
 * an libSBML extension for SBML Level&nbsp;3 packages includes a record of
 * the package that logged it.  It can be retrieved using
 * {@link SBMLError#getPackage()}.  The information is a simple text string; the
 * string will be the nickname of the package, such as <code>\'comp\'</code> for the
 * Hierarchical Model Composition package, <code>\'fbc\'</code> for the Flux Balance
 * Constraints package, and so on.  If the value returned by
 * {@link SBMLError#getPackage()} is an empty string or has the value <code>\'core\'</code>,
 * then the error came from libSBML core.
 <p>
 * Finally, {@link SBMLError} records the line and column near where the problem
 * occurred in the SBML content.  The values may be retrieved using the
 * methods {@link SBMLError#getLine()} and {@link SBMLError#getColumn()}.  We say \'near\',
 * because a lot of factors affect how accurate the line/column information
 * ultimately is.  For example, different XML parsers have different
 * conventions for which line and column number they report for a
 * particular problem (which makes a difference when a problem involves an
 * opening XML tag on one line and a closing tag on another line).  In some
 * situations, some parsers report invalid line and/or column numbers
 * altogether.  If this occurs, libSBML sets the line and/or column number
 * in the {@link SBMLError} object to the the value of the maximum unsigned long
 * integer representable on the platform where libSBML is running.  (This
 * is equal to the constant named <code>ULONG_MAX</code> in C and C++.)
 * The probability that a true line or column number in an SBML model would
 * equal this value is vanishingly small; thus, if an application
 * encounters these values in an {@link XMLError} object, it can assume no valid
 * line/column number could be provided by libSBML in that situation.
 <p>
 * <h3><a class=\'anchor\'
 * name=\'SBMLErrorCode_t\'>Error codes associated with {@link SBMLError} objects</a></h3>
 <p>
 * The error and warning codes returned by libSBML are listed in the table
 * below.  The method {@link SBMLError#getErrorId()} returns the error code of a
 * given {@link SBMLError} object instance.  In the libSBML Java language
 * interface, these error identifiers are currently
 * implemented as static integer constants defined in the interface class
 * <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.  This
 * is admittedly not an ideal approach from the standpoint of modern Java
 * programming, but it was necessary to work around the lack of
 * enumerations in Java prior to JDK 1.5.  Future versions of libSBML may
 * use a proper Java enumeration type to define the error identifiers.
 <p>
 * In this table, the right-hand columns titled \'L1V1\', \'L1V2\', etc. refer
 * to Levels and Versions of the SBML specifications, and the entries in
 * each column refer to whether the severity of the condition in that
 * particular Level+Version of SBML.  The codes stand for the following:
 <p>
 * <table cellspacing=\'1\' cellpadding=\'2\' border=\'0\' class=\'normal-font\'>
 * <tr><td class=\'s-na\'></td><td>= Not applicable</td></tr>
 * <tr><td class=\'s-warning\'></td><td>= Warning</td></tr>
 * <tr><td class=\'s-error\'></td><td>= Error</td></tr>
 * <tr><td class=\'s-fatal\'></td><td>= Fatal</td></tr>
 * </table>
 <p>
 * The text shown in the \'Meaning\' is the text returned by the
 * {@link SBMLError#getShortMessage()} method on a given {@link SBMLError} object.  A
 * longer and (hopefully) clearer explanation of the issue is returned by
 * {@link SBMLError#getMessage()}.
 <p>
 * The error codes come from different lists depending on whether they\'re
 * from libSBML core or from an SBML Level&nbsp;3 package extension.
 <p>
 * However, in the language interfaces other than C++, all
 * libSBML error codes are ultimately represented as integer constants rather
 * than separate enumerations lists, and they are all stored in a single
 * interface class.  Codes from different libSBML extensions have names that
 * begin with the package\'s nickname, such as <code>Qual</code> for
 * the Qualitative Models package, <code>Layout</code> for the Layout
 * package, and so on.  If the name of a code does not begin with one of
 * the package nicknames (<code>Layout</code>, <code>Fbc</code>,
 * <code>Comp</code>, <code>Qual</code>, etc.), then it is a code
 * from libSBML core.
 <p>
 * <p>
<table id=\'sbmlerror-table\'
       class=\'text-table small-font alt-row-colors\'
       width=\'95%\' cellspacing=\'1\' cellpadding=\'2\' border=\'0\'>
 <tr style=\'background: lightgray\' class=\'normal-font\'>
     <th valign=\'bottom\'><strong>Enumerator</strong></th>
     <th valign=\'bottom\'><strong>Meaning</strong></th>
     <th align=\'center\' width=\'10\'>L1 V1</th>
     <th align=\'center\' width=\'10\'>L1 V2</th>
     <th align=\'center\' width=\'10\'>L2 V1</th>
     <th align=\'center\' width=\'10\'>L2 V2</th>
     <th align=\'center\' width=\'10\'>L2 V3</th>
     <th align=\'center\' width=\'10\'>L2 V4</th>
     <th align=\'center\' width=\'10\'>L3 V1</th>
 </tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLUnknownError XMLUnknownError}</td>
<td class=\'meaning\'>Unknown error</td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLOutOfMemory XMLOutOfMemory}</td>
<td class=\'meaning\'>Out of memory</td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLFileUnreadable XMLFileUnreadable}</td>
<td class=\'meaning\'>File unreadable</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLFileUnwritable XMLFileUnwritable}</td>
<td class=\'meaning\'>File unwritable</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLFileOperationError XMLFileOperationError}</td>
<td class=\'meaning\'>File operation error</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLNetworkAccessError XMLNetworkAccessError}</td>
<td class=\'meaning\'>Network access error</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InternalXMLParserError InternalXMLParserError}</td>
<td class=\'meaning\'>Internal XML parser error</td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UnrecognizedXMLParserCode UnrecognizedXMLParserCode}</td>
<td class=\'meaning\'>Unrecognized XML parser code</td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLTranscoderError XMLTranscoderError}</td>
<td class=\'meaning\'>Transcoder error</td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingXMLDecl MissingXMLDecl}</td>
<td class=\'meaning\'>Missing XML declaration</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingXMLEncoding MissingXMLEncoding}</td>
<td class=\'meaning\'>Missing XML encoding attribute</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLDecl BadXMLDecl}</td>
<td class=\'meaning\'>Bad XML declaration</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLDOCTYPE BadXMLDOCTYPE}</td>
<td class=\'meaning\'>Bad XML DOCTYPE</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidCharInXML InvalidCharInXML}</td>
<td class=\'meaning\'>Invalid character</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadlyFormedXML BadlyFormedXML}</td>
<td class=\'meaning\'>Badly formed XML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UnclosedXMLToken UnclosedXMLToken}</td>
<td class=\'meaning\'>Unclosed token</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidXMLConstruct InvalidXMLConstruct}</td>
<td class=\'meaning\'>Invalid XML construct</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLTagMismatch XMLTagMismatch}</td>
<td class=\'meaning\'>XML tag mismatch</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateXMLAttribute DuplicateXMLAttribute}</td>
<td class=\'meaning\'>Duplicate attribute</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UndefinedXMLEntity UndefinedXMLEntity}</td>
<td class=\'meaning\'>Undefined XML entity</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadProcessingInstruction BadProcessingInstruction}</td>
<td class=\'meaning\'>Bad XML processing instruction</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLPrefix BadXMLPrefix}</td>
<td class=\'meaning\'>Bad XML prefix</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLPrefixValue BadXMLPrefixValue}</td>
<td class=\'meaning\'>Bad XML prefix value</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingXMLRequiredAttribute MissingXMLRequiredAttribute}</td>
<td class=\'meaning\'>Missing required attribute</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLAttributeTypeMismatch XMLAttributeTypeMismatch}</td>
<td class=\'meaning\'>Attribute type mismatch</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLBadUTF8Content XMLBadUTF8Content}</td>
<td class=\'meaning\'>Bad UTF8 content</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingXMLAttributeValue MissingXMLAttributeValue}</td>
<td class=\'meaning\'>Missing attribute value</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLAttributeValue BadXMLAttributeValue}</td>
<td class=\'meaning\'>Bad attribute value</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLAttribute BadXMLAttribute}</td>
<td class=\'meaning\'>Bad XML attribute</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UnrecognizedXMLElement UnrecognizedXMLElement}</td>
<td class=\'meaning\'>Unrecognized XML element</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLComment BadXMLComment}</td>
<td class=\'meaning\'>Bad XML comment</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLDeclLocation BadXMLDeclLocation}</td>
<td class=\'meaning\'>Bad XML declaration location</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLUnexpectedEOF XMLUnexpectedEOF}</td>
<td class=\'meaning\'>Unexpected EOF</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLIDValue BadXMLIDValue}</td>
<td class=\'meaning\'>Bad XML ID value</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLIDRef BadXMLIDRef}</td>
<td class=\'meaning\'>Bad XML IDREF</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UninterpretableXMLContent UninterpretableXMLContent}</td>
<td class=\'meaning\'>Uninterpretable XML content</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadXMLDocumentStructure BadXMLDocumentStructure}</td>
<td class=\'meaning\'>Bad XML document structure</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidAfterXMLContent InvalidAfterXMLContent}</td>
<td class=\'meaning\'>Invalid content after XML content</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLExpectedQuotedString XMLExpectedQuotedString}</td>
<td class=\'meaning\'>Expected quoted string</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLEmptyValueNotPermitted XMLEmptyValueNotPermitted}</td>
<td class=\'meaning\'>Empty value not permitted</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLBadNumber XMLBadNumber}</td>
<td class=\'meaning\'>Bad number</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLBadColon XMLBadColon}</td>
<td class=\'meaning\'>Colon character not permitted</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingXMLElements MissingXMLElements}</td>
<td class=\'meaning\'>Missing XML elements</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#XMLContentEmpty XMLContentEmpty}</td>
<td class=\'meaning\'>Empty XML content</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UnknownError UnknownError}</td>
<td class=\'meaning\'>Encountered unknown internal libSBML error</td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
<td class=\'s-fatal\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NotUTF8 NotUTF8}</td>
<td class=\'meaning\'>File does not use UTF-8 encoding</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UnrecognizedElement UnrecognizedElement}</td>
<td class=\'meaning\'>Encountered unrecognized element</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NotSchemaConformant NotSchemaConformant}</td>
<td class=\'meaning\'>Document does not conform to the SBML XML schema</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3NotSchemaConformant L3NotSchemaConformant}</td>
<td class=\'meaning\'>Document is not well-formed XML</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidMathElement InvalidMathElement}</td>
<td class=\'meaning\'>Invalid MathML</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DisallowedMathMLSymbol DisallowedMathMLSymbol}</td>
<td class=\'meaning\'>Disallowed MathML symbol found</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DisallowedMathMLEncodingUse DisallowedMathMLEncodingUse}</td>
<td class=\'meaning\'>Use of the MathML \'encoding\' attribute is not allowed on this element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DisallowedDefinitionURLUse DisallowedDefinitionURLUse}</td>
<td class=\'meaning\'>Use of the MathML \'definitionURL\' attribute is not allowed on this element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadCsymbolDefinitionURLValue BadCsymbolDefinitionURLValue}</td>
<td class=\'meaning\'>Invalid <code>&lt;csymbol&gt;</code> \'definitionURL\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DisallowedMathTypeAttributeUse DisallowedMathTypeAttributeUse}</td>
<td class=\'meaning\'>Use of the MathML \'type\' attribute is not allowed on this element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DisallowedMathTypeAttributeValue DisallowedMathTypeAttributeValue}</td>
<td class=\'meaning\'>Disallowed MathML \'type\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LambdaOnlyAllowedInFunctionDef LambdaOnlyAllowedInFunctionDef}</td>
<td class=\'meaning\'>Use of <code>&lt;lambda&gt;</code> not permitted outside of {@link FunctionDefinition} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BooleanOpsNeedBooleanArgs BooleanOpsNeedBooleanArgs}</td>
<td class=\'meaning\'>Non-Boolean argument given to Boolean operator</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NumericOpsNeedNumericArgs NumericOpsNeedNumericArgs}</td>
<td class=\'meaning\'>Non-numerical argument given to numerical operator</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ArgsToEqNeedSameType ArgsToEqNeedSameType}</td>
<td class=\'meaning\'>Arguments to <code>&lt;eq&gt;</code> and <code>&lt;neq&gt;</code> must have the same data types</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#PiecewiseNeedsConsistentTypes PiecewiseNeedsConsistentTypes}</td>
<td class=\'meaning\'>Terms in a <code>&lt;piecewise&gt;</code> expression must have consistent data types</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#PieceNeedsBoolean PieceNeedsBoolean}</td>
<td class=\'meaning\'>The second argument of a <code>&lt;piece&gt;</code> expression must yield a Boolean value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ApplyCiMustBeUserFunction ApplyCiMustBeUserFunction}</td>
<td class=\'meaning\'>A <code>&lt;ci&gt;</code> element in this context must refer to a function definition</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ApplyCiMustBeModelComponent ApplyCiMustBeModelComponent}</td>
<td class=\'meaning\'>A <code>&lt;ci&gt;</code> element in this context must refer to a model component</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#KineticLawParametersAreLocalOnly KineticLawParametersAreLocalOnly}</td>
<td class=\'meaning\'>Cannot use a {@link KineticLaw} local parameter outside of its local scope</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MathResultMustBeNumeric MathResultMustBeNumeric}</td>
<td class=\'meaning\'>A formula\'s result in this context must be a numerical value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OpsNeedCorrectNumberOfArgs OpsNeedCorrectNumberOfArgs}</td>
<td class=\'meaning\'>Incorrect number of arguments given to MathML operator</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidNoArgsPassedToFunctionDef InvalidNoArgsPassedToFunctionDef}</td>
<td class=\'meaning\'>Incorrect number of arguments given to function invocation</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DisallowedMathUnitsUse DisallowedMathUnitsUse}</td>
<td class=\'meaning\'>Attribute \'units\' is only permitted on <code>&lt;cn&gt;</code> elements</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidUnitsValue InvalidUnitsValue}</td>
<td class=\'meaning\'>Invalid value given for the \'units\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateComponentId DuplicateComponentId}</td>
<td class=\'meaning\'>Duplicate \'id\' attribute value</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateUnitDefinitionId DuplicateUnitDefinitionId}</td>
<td class=\'meaning\'>Duplicate unit definition \'id\' attribute value</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateLocalParameterId DuplicateLocalParameterId}</td>
<td class=\'meaning\'>Duplicate local parameter \'id\' attribute value</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MultipleAssignmentOrRateRules MultipleAssignmentOrRateRules}</td>
<td class=\'meaning\'>Multiple rules for the same variable are not allowed</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MultipleEventAssignmentsForId MultipleEventAssignmentsForId}</td>
<td class=\'meaning\'>Multiple event assignments for the same variable are not allowed</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EventAndAssignmentRuleForId EventAndAssignmentRuleForId}</td>
<td class=\'meaning\'>An event assignment and an assignment rule must not have the same value for \'variable\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateMetaId DuplicateMetaId}</td>
<td class=\'meaning\'>Duplicate \'metaid\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSBOTermSyntax InvalidSBOTermSyntax}</td>
<td class=\'meaning\'>Invalid syntax for an \'sboTerm\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidMetaidSyntax InvalidMetaidSyntax}</td>
<td class=\'meaning\'>Invalid syntax for a \'metaid\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidIdSyntax InvalidIdSyntax}</td>
<td class=\'meaning\'>Invalid syntax for an \'id\' attribute value</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidUnitIdSyntax InvalidUnitIdSyntax}</td>
<td class=\'meaning\'>Invalid syntax for the identifier of a unit</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidNameSyntax InvalidNameSyntax}</td>
<td class=\'meaning\'>Invalid syntax for a \'name\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingAnnotationNamespace MissingAnnotationNamespace}</td>
<td class=\'meaning\'>Missing declaration of the XML namespace for the annotation</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateAnnotationNamespaces DuplicateAnnotationNamespaces}</td>
<td class=\'meaning\'>Multiple annotations using the same XML namespace</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SBMLNamespaceInAnnotation SBMLNamespaceInAnnotation}</td>
<td class=\'meaning\'>The SBML XML namespace cannot be used in an Annotation object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MultipleAnnotations MultipleAnnotations}</td>
<td class=\'meaning\'>Only one Annotation object is permitted under a given SBML object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InconsistentArgUnits InconsistentArgUnits}</td>
<td class=\'meaning\'>The units of the function call\'s arguments are not consistent with its definition</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InconsistentKineticLawUnitsL3 InconsistentKineticLawUnitsL3}</td>
<td class=\'meaning\'>The kinetic law\'s units are inconsistent with those of other kinetic laws in the model</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AssignRuleCompartmentMismatch AssignRuleCompartmentMismatch}</td>
<td class=\'meaning\'>Mismatched units in assignment rule for compartment</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AssignRuleSpeciesMismatch AssignRuleSpeciesMismatch}</td>
<td class=\'meaning\'>Mismatched units in assignment rule for species</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AssignRuleParameterMismatch AssignRuleParameterMismatch}</td>
<td class=\'meaning\'>Mismatched units in assignment rule for parameter</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AssignRuleStoichiometryMismatch AssignRuleStoichiometryMismatch}</td>
<td class=\'meaning\'>Mismatched units in assignment rule for stoichiometry</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InitAssignCompartmenMismatch InitAssignCompartmenMismatch}</td>
<td class=\'meaning\'>Mismatched units in initial assignment to compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InitAssignSpeciesMismatch InitAssignSpeciesMismatch}</td>
<td class=\'meaning\'>Mismatched units in initial assignment to species</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InitAssignParameterMismatch InitAssignParameterMismatch}</td>
<td class=\'meaning\'>Mismatched units in initial assignment to parameter</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InitAssignStoichiometryMismatch InitAssignStoichiometryMismatch}</td>
<td class=\'meaning\'>Mismatched units in initial assignment to stoichiometry</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RateRuleCompartmentMismatch RateRuleCompartmentMismatch}</td>
<td class=\'meaning\'>Mismatched units in rate rule for compartment</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RateRuleSpeciesMismatch RateRuleSpeciesMismatch}</td>
<td class=\'meaning\'>Mismatched units in rate rule for species</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RateRuleParameterMismatch RateRuleParameterMismatch}</td>
<td class=\'meaning\'>Mismatched units in rate rule for parameter</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RateRuleStoichiometryMismatch RateRuleStoichiometryMismatch}</td>
<td class=\'meaning\'>Mismatched units in rate rule for stoichiometry</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#KineticLawNotSubstancePerTime KineticLawNotSubstancePerTime}</td>
<td class=\'meaning\'>The units of the kinetic law are not \'substance\'/\'time\'</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpeciesInvalidExtentUnits SpeciesInvalidExtentUnits}</td>
<td class=\'meaning\'>The species\' units are not consistent with units of extent</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DelayUnitsNotTime DelayUnitsNotTime}</td>
<td class=\'meaning\'>The units of the delay expression are not units of time</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EventAssignCompartmentMismatch EventAssignCompartmentMismatch}</td>
<td class=\'meaning\'>Mismatched units in event assignment for compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EventAssignSpeciesMismatch EventAssignSpeciesMismatch}</td>
<td class=\'meaning\'>Mismatched units in event assignment for species</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EventAssignParameterMismatch EventAssignParameterMismatch}</td>
<td class=\'meaning\'>Mismatched units in event assignment for parameter</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EventAssignStoichiometryMismatch EventAssignStoichiometryMismatch}</td>
<td class=\'meaning\'>Mismatched units in event assignment for stoichiometry</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#PriorityUnitsNotDimensionless PriorityUnitsNotDimensionless}</td>
<td class=\'meaning\'>The units of a priority expression must be \'dimensionless\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OverdeterminedSystem OverdeterminedSystem}</td>
<td class=\'meaning\'>The model is overdetermined</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidModelSBOTerm InvalidModelSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link Model} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidFunctionDefSBOTerm InvalidFunctionDefSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link FunctionDefinition} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidParameterSBOTerm InvalidParameterSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link Parameter} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidInitAssignSBOTerm InvalidInitAssignSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for an {@link InitialAssignment} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidRuleSBOTerm InvalidRuleSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link Rule} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidConstraintSBOTerm InvalidConstraintSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link Constraint} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidReactionSBOTerm InvalidReactionSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link Reaction} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSpeciesReferenceSBOTerm InvalidSpeciesReferenceSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link SpeciesReference} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidKineticLawSBOTerm InvalidKineticLawSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link KineticLaw} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidEventSBOTerm InvalidEventSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for an {@link Event} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidEventAssignmentSBOTerm InvalidEventAssignmentSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for an {@link EventAssignment} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidCompartmentSBOTerm InvalidCompartmentSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link Compartment} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSpeciesSBOTerm InvalidSpeciesSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link Species} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidCompartmentTypeSBOTerm InvalidCompartmentTypeSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link CompartmentType} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSpeciesTypeSBOTerm InvalidSpeciesTypeSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for a {@link SpeciesType} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidTriggerSBOTerm InvalidTriggerSBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for an {@link Event} Trigger object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidDelaySBOTerm InvalidDelaySBOTerm}</td>
<td class=\'meaning\'>Invalid \'sboTerm\' attribute value for an {@link Event} Delay object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NotesNotInXHTMLNamespace NotesNotInXHTMLNamespace}</td>
<td class=\'meaning\'>Notes must be placed in the XHTML XML namespace</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NotesContainsXMLDecl NotesContainsXMLDecl}</td>
<td class=\'meaning\'>XML declarations are not permitted in Notes objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NotesContainsDOCTYPE NotesContainsDOCTYPE}</td>
<td class=\'meaning\'>XML DOCTYPE elements are not permitted in Notes objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidNotesContent InvalidNotesContent}</td>
<td class=\'meaning\'>Invalid notes content found</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyOneNotesElementAllowed OnlyOneNotesElementAllowed}</td>
<td class=\'meaning\'>Only one Notes subobject is permitted on a given SBML object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidNamespaceOnSBML InvalidNamespaceOnSBML}</td>
<td class=\'meaning\'>Invalid XML namespace for the SBML container element</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingOrInconsistentLevel MissingOrInconsistentLevel}</td>
<td class=\'meaning\'>Missing or inconsistent value for the \'level\' attribute</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingOrInconsistentVersion MissingOrInconsistentVersion}</td>
<td class=\'meaning\'>Missing or inconsistent value for the \'version\' attribute</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#PackageNSMustMatch PackageNSMustMatch}</td>
<td class=\'meaning\'>Inconsistent or invalid SBML Level/Version for the package namespace declaration</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LevelPositiveInteger LevelPositiveInteger}</td>
<td class=\'meaning\'>The \'level\' attribute must have a positive integer value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#VersionPositiveInteger VersionPositiveInteger}</td>
<td class=\'meaning\'>The \'version\' attribute must have a positive integer value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnSBML AllowedAttributesOnSBML}</td>
<td class=\'meaning\'>Invalid attribute found on the SBML container element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3PackageOnLowerSBML L3PackageOnLowerSBML}</td>
<td class=\'meaning\'>An L3 package ns found on the SBML container element</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingModel MissingModel}</td>
<td class=\'meaning\'>No model definition found</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#IncorrectOrderInModel IncorrectOrderInModel}</td>
<td class=\'meaning\'>Incorrect ordering of components within the {@link Model} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EmptyListElement EmptyListElement}</td>
<td class=\'meaning\'>Empty ListOf___ object found</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NeedCompartmentIfHaveSpecies NeedCompartmentIfHaveSpecies}</td>
<td class=\'meaning\'>The presence of a species requires a compartment</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneOfEachListOf OneOfEachListOf}</td>
<td class=\'meaning\'>Only one of each kind of ListOf___ object is allowed inside a {@link Model} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyFuncDefsInListOfFuncDefs OnlyFuncDefsInListOfFuncDefs}</td>
<td class=\'meaning\'>Only {@link FunctionDefinition}, Notes and Annotation objects are allowed in {@link ListOfFunctionDefinitions}</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyUnitDefsInListOfUnitDefs OnlyUnitDefsInListOfUnitDefs}</td>
<td class=\'meaning\'>Only {@link UnitDefinition}, Notes and Annotation objects are allowed in {@link ListOfUnitDefinitions} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyCompartmentsInListOfCompartments OnlyCompartmentsInListOfCompartments}</td>
<td class=\'meaning\'>Only {@link Compartment}, Notes and Annotation objects are allowed in {@link ListOfCompartments} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlySpeciesInListOfSpecies OnlySpeciesInListOfSpecies}</td>
<td class=\'meaning\'>Only {@link Species}, Notes and Annotation objects are allowed in {@link ListOfSpecies} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyParametersInListOfParameters OnlyParametersInListOfParameters}</td>
<td class=\'meaning\'>Only {@link Parameter}, Notes and Annotation objects are allowed in {@link ListOfParameters} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyInitAssignsInListOfInitAssigns OnlyInitAssignsInListOfInitAssigns}</td>
<td class=\'meaning\'>Only {@link InitialAssignment}, Notes and Annotation objects are allowed in {@link ListOfInitialAssignments} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyRulesInListOfRules OnlyRulesInListOfRules}</td>
<td class=\'meaning\'>Only {@link Rule}, Notes and Annotation objects are allowed in {@link ListOfRules} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyConstraintsInListOfConstraints OnlyConstraintsInListOfConstraints}</td>
<td class=\'meaning\'>Only {@link Constraint}, Notes and Annotation objects are allowed in {@link ListOfConstraints} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyReactionsInListOfReactions OnlyReactionsInListOfReactions}</td>
<td class=\'meaning\'>Only {@link Reaction}, Notes and Annotation objects are allowed in {@link ListOfReactions} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyEventsInListOfEvents OnlyEventsInListOfEvents}</td>
<td class=\'meaning\'>Only {@link Event}, Notes and Annotation objects are allowed in {@link ListOfEvents} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3ConversionFactorOnModel L3ConversionFactorOnModel}</td>
<td class=\'meaning\'>A \'conversionFactor\' attribute value must reference a {@link Parameter} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3TimeUnitsOnModel L3TimeUnitsOnModel}</td>
<td class=\'meaning\'>Invalid \'timeUnits\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3VolumeUnitsOnModel L3VolumeUnitsOnModel}</td>
<td class=\'meaning\'>Invalid \'volumeUnits\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3AreaUnitsOnModel L3AreaUnitsOnModel}</td>
<td class=\'meaning\'>Invalid \'areaUnits\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3LengthUnitsOnModel L3LengthUnitsOnModel}</td>
<td class=\'meaning\'>Invalid \'lengthUnits\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3ExtentUnitsOnModel L3ExtentUnitsOnModel}</td>
<td class=\'meaning\'>Invalid \'extentUnits\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnModel AllowedAttributesOnModel}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link Model} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfFuncs AllowedAttributesOnListOfFuncs}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfFunctionDefinitions} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfUnitDefs AllowedAttributesOnListOfUnitDefs}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfUnitDefinitions} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfComps AllowedAttributesOnListOfComps}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfCompartments} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfSpecies AllowedAttributesOnListOfSpecies}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfSpecies} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfParams AllowedAttributesOnListOfParams}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfParameters} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfInitAssign AllowedAttributesOnListOfInitAssign}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfInitialAssignments} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfRules AllowedAttributesOnListOfRules}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfRules} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfConstraints AllowedAttributesOnListOfConstraints}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfConstraints} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfReactions AllowedAttributesOnListOfReactions}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfReactions} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfEvents AllowedAttributesOnListOfEvents}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfEvents} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FunctionDefMathNotLambda FunctionDefMathNotLambda}</td>
<td class=\'meaning\'>Invalid expression found in the function definition</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidApplyCiInLambda InvalidApplyCiInLambda}</td>
<td class=\'meaning\'>Invalid forward reference in the MathML <code>&lt;apply&gt;</code><code>&lt;ci&gt;</code>...<code>&lt;/ci&gt;</code><code>&lt;/apply&gt;</code> expression</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RecursiveFunctionDefinition RecursiveFunctionDefinition}</td>
<td class=\'meaning\'>Recursive function definitions are not permitted</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidCiInLambda InvalidCiInLambda}</td>
<td class=\'meaning\'>Invalid <code>&lt;ci&gt;</code> reference found inside the <code>&lt;lambda&gt;</code> mathematical formula</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidFunctionDefReturnType InvalidFunctionDefReturnType}</td>
<td class=\'meaning\'>A function\'s return type must be either a number or a Boolean</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMathElementPerFunc OneMathElementPerFunc}</td>
<td class=\'meaning\'>A {@link FunctionDefinition} object must contain one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnFunc AllowedAttributesOnFunc}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link FunctionDefinition} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidUnitDefId InvalidUnitDefId}</td>
<td class=\'meaning\'>Invalid \'id\' attribute value for a {@link UnitDefinition} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSubstanceRedefinition InvalidSubstanceRedefinition}</td>
<td class=\'meaning\'>Invalid redefinition of built-in type \'substance\'</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidLengthRedefinition InvalidLengthRedefinition}</td>
<td class=\'meaning\'>Invalid redefinition of built-in type \'length\'</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidAreaRedefinition InvalidAreaRedefinition}</td>
<td class=\'meaning\'>Invalid redefinition of built-in type name \'area\'</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidTimeRedefinition InvalidTimeRedefinition}</td>
<td class=\'meaning\'>Invalid redefinition of built-in type name \'time\'</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidVolumeRedefinition InvalidVolumeRedefinition}</td>
<td class=\'meaning\'>Invalid redefinition of built-in type name \'volume\'</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#VolumeLitreDefExponentNotOne VolumeLitreDefExponentNotOne}</td>
<td class=\'meaning\'>Must use \'exponent\'=1 when defining \'volume\' in terms of litres</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#VolumeMetreDefExponentNot3 VolumeMetreDefExponentNot3}</td>
<td class=\'meaning\'>Must use \'exponent\'=3 when defining \'volume\' in terms of metres</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EmptyListOfUnits EmptyListOfUnits}</td>
<td class=\'meaning\'>An empty list of {@link Unit} objects is not permitted in a {@link UnitDefinition} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidUnitKind InvalidUnitKind}</td>
<td class=\'meaning\'>Invalid value for the \'kind\' attribute of a {@link UnitDefinition} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OffsetNoLongerValid OffsetNoLongerValid}</td>
<td class=\'meaning\'>Unit attribute \'offset\' is not supported in this Level+Version of SBML</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CelsiusNoLongerValid CelsiusNoLongerValid}</td>
<td class=\'meaning\'>Unit name \'Celsius\' is not defined in this Level+Version of SBML</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EmptyUnitListElement EmptyUnitListElement}</td>
<td class=\'meaning\'>A {@link ListOfUnits} object must not be empty</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneListOfUnitsPerUnitDef OneListOfUnitsPerUnitDef}</td>
<td class=\'meaning\'>At most one {@link ListOfUnits} object is allowed inside a {@link UnitDefinition} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyUnitsInListOfUnits OnlyUnitsInListOfUnits}</td>
<td class=\'meaning\'>Only {@link Unit}, Notes and Annotation objects are allowed in {@link ListOfUnits} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnUnitDefinition AllowedAttributesOnUnitDefinition}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link UnitDefinition} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfUnits AllowedAttributesOnListOfUnits}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfUnits} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnUnit AllowedAttributesOnUnit}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link Unit} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ZeroDimensionalCompartmentSize ZeroDimensionalCompartmentSize}</td>
<td class=\'meaning\'>Invalid use of the \'size\' attribute for a zero-dimensional compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ZeroDimensionalCompartmentUnits ZeroDimensionalCompartmentUnits}</td>
<td class=\'meaning\'>Invalid use of the \'units\' attribute for a zero-dimensional compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ZeroDimensionalCompartmentConst ZeroDimensionalCompartmentConst}</td>
<td class=\'meaning\'>Zero-dimensional compartments must be defined to be constant</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UndefinedOutsideCompartment UndefinedOutsideCompartment}</td>
<td class=\'meaning\'>Invalid value for the \'outside\' attribute of a {@link Compartment} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RecursiveCompartmentContainment RecursiveCompartmentContainment}</td>
<td class=\'meaning\'>Recursive nesting of compartments via the \'outside\' attribute is not permitted</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ZeroDCompartmentContainment ZeroDCompartmentContainment}</td>
<td class=\'meaning\'>Invalid nesting of zero-dimensional compartments</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#Invalid1DCompartmentUnits Invalid1DCompartmentUnits}</td>
<td class=\'meaning\'>Invalid value for the \'units\' attribute of a one-dimensional compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#Invalid2DCompartmentUnits Invalid2DCompartmentUnits}</td>
<td class=\'meaning\'>Invalid value for the \'units\' attribute of a two-dimensional compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#Invalid3DCompartmentUnits Invalid3DCompartmentUnits}</td>
<td class=\'meaning\'>Invalid value for the \'units\' attribute of a three-dimensional compartment</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidCompartmentTypeRef InvalidCompartmentTypeRef}</td>
<td class=\'meaning\'>Invalid value for the \'compartmentType\' attribute of a compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneDimensionalCompartmentUnits OneDimensionalCompartmentUnits}</td>
<td class=\'meaning\'>No units defined for 1-D compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#TwoDimensionalCompartmentUnits TwoDimensionalCompartmentUnits}</td>
<td class=\'meaning\'>No units defined for 2-D compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ThreeDimensionalCompartmentUnits ThreeDimensionalCompartmentUnits}</td>
<td class=\'meaning\'>No units defined for 3-D {@link Compartment} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnCompartment AllowedAttributesOnCompartment}</td>
<td class=\'meaning\'>Invalid attribute found on {@link Compartment} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoUnitsOnCompartment NoUnitsOnCompartment}</td>
<td class=\'meaning\'>No units defined for {@link Compartment} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSpeciesCompartmentRef InvalidSpeciesCompartmentRef}</td>
<td class=\'meaning\'>Invalid value found for {@link Species} \'compartment\' attribute</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#HasOnlySubsNoSpatialUnits HasOnlySubsNoSpatialUnits}</td>
<td class=\'meaning\'>Attribute \'spatialSizeUnits\' must not be set if \'hasOnlySubstanceUnits\'=\'true\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSpatialUnitsInZeroD NoSpatialUnitsInZeroD}</td>
<td class=\'meaning\'>Attribute \'spatialSizeUnits\' must not be set if the compartment is zero-dimensional</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoConcentrationInZeroD NoConcentrationInZeroD}</td>
<td class=\'meaning\'>Attribute \'initialConcentration\' must not be set if the compartment is zero-dimensional</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpatialUnitsInOneD SpatialUnitsInOneD}</td>
<td class=\'meaning\'>Invalid value for \'spatialSizeUnits\' attribute of a one-dimensional compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpatialUnitsInTwoD SpatialUnitsInTwoD}</td>
<td class=\'meaning\'>Invalid value for the \'spatialSizeUnits\' attribute of a two-dimensional compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpatialUnitsInThreeD SpatialUnitsInThreeD}</td>
<td class=\'meaning\'>Invalid value for the \'spatialSizeUnits\' attribute of a three-dimensional compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSpeciesSusbstanceUnits InvalidSpeciesSusbstanceUnits}</td>
<td class=\'meaning\'>Invalid value for a {@link Species} \'units\' attribute</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BothAmountAndConcentrationSet BothAmountAndConcentrationSet}</td>
<td class=\'meaning\'>Cannot set both \'initialConcentration\' and \'initialAmount\' attributes simultaneously</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NonBoundarySpeciesAssignedAndUsed NonBoundarySpeciesAssignedAndUsed}</td>
<td class=\'meaning\'>Cannot use a non-boundary species in both reactions and rules simultaneously</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NonConstantSpeciesUsed NonConstantSpeciesUsed}</td>
<td class=\'meaning\'>Cannot use a constant, non-boundary species as a reactant or product</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSpeciesTypeRef InvalidSpeciesTypeRef}</td>
<td class=\'meaning\'>Invalid value for the \'speciesType\' attribute of a species</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MultSpeciesSameTypeInCompartment MultSpeciesSameTypeInCompartment}</td>
<td class=\'meaning\'>Cannot have multiple species of the same species type in the same compartment</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingSpeciesCompartment MissingSpeciesCompartment}</td>
<td class=\'meaning\'>Missing value for the \'compartment\' attribute</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpatialSizeUnitsRemoved SpatialSizeUnitsRemoved}</td>
<td class=\'meaning\'>Attribute \'spatialSizeUnits\' is not supported in this Level+Version of SBML</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SubstanceUnitsOnSpecies SubstanceUnitsOnSpecies}</td>
<td class=\'meaning\'>No substance units defined for the species</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConversionFactorOnSpecies ConversionFactorOnSpecies}</td>
<td class=\'meaning\'>Invalid value for the \'conversionFactor\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnSpecies AllowedAttributesOnSpecies}</td>
<td class=\'meaning\'>Invalid attribute found on {@link Species} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidParameterUnits InvalidParameterUnits}</td>
<td class=\'meaning\'>Invalid value for the \'units\' attribute of a {@link Parameter} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ParameterUnits ParameterUnits}</td>
<td class=\'meaning\'>No units defined for the parameter</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConversionFactorMustConstant ConversionFactorMustConstant}</td>
<td class=\'meaning\'>A conversion factor must reference a {@link Parameter} object declared to be a constant</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnParameter AllowedAttributesOnParameter}</td>
<td class=\'meaning\'>Invalid attribute found on {@link Parameter} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidInitAssignSymbol InvalidInitAssignSymbol}</td>
<td class=\'meaning\'>Invalid value for the \'symbol\' attribute of an {@link InitialAssignment} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MultipleInitAssignments MultipleInitAssignments}</td>
<td class=\'meaning\'>Multiple initial assignments for the same \'symbol\' value are not allowed</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InitAssignmentAndRuleForSameId InitAssignmentAndRuleForSameId}</td>
<td class=\'meaning\'>Cannot set a value using both an initial assignment and an assignment rule simultaneously</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMathElementPerInitialAssign OneMathElementPerInitialAssign}</td>
<td class=\'meaning\'>An {@link InitialAssignment} object must contain one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnInitialAssign AllowedAttributesOnInitialAssign}</td>
<td class=\'meaning\'>Invalid attribute found on an {@link InitialAssignment} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidAssignRuleVariable InvalidAssignRuleVariable}</td>
<td class=\'meaning\'>Invalid value for the \'variable\' attribute of an {@link AssignmentRule} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidRateRuleVariable InvalidRateRuleVariable}</td>
<td class=\'meaning\'>Invalid value for the \'variable\' attribute of a {@link RateRule} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AssignmentToConstantEntity AssignmentToConstantEntity}</td>
<td class=\'meaning\'>An assignment rule cannot assign an entity declared to be constant</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RateRuleForConstantEntity RateRuleForConstantEntity}</td>
<td class=\'meaning\'>A rate rule cannot assign an entity declared to be constant</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CircularRuleDependency CircularRuleDependency}</td>
<td class=\'meaning\'>Circular dependencies involving rules and reactions are not permitted</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMathElementPerRule OneMathElementPerRule}</td>
<td class=\'meaning\'>A rule object must contain one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnAssignRule AllowedAttributesOnAssignRule}</td>
<td class=\'meaning\'>Invalid attribute found on an {@link AssignmentRule} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnRateRule AllowedAttributesOnRateRule}</td>
<td class=\'meaning\'>Invalid attribute found on a {@link RateRule} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnAlgRule AllowedAttributesOnAlgRule}</td>
<td class=\'meaning\'>Invalid attribute found on an {@link AlgebraicRule} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConstraintMathNotBoolean ConstraintMathNotBoolean}</td>
<td class=\'meaning\'>A {@link Constraint} object\'s <code>&lt;math&gt;</code> must evaluate to a Boolean value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#IncorrectOrderInConstraint IncorrectOrderInConstraint}</td>
<td class=\'meaning\'>Subobjects inside the {@link Constraint} object are not in the prescribed order</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConstraintNotInXHTMLNamespace ConstraintNotInXHTMLNamespace}</td>
<td class=\'meaning\'>A {@link Constraint}\'s Message subobject must be in the XHTML XML namespace</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConstraintContainsXMLDecl ConstraintContainsXMLDecl}</td>
<td class=\'meaning\'>XML declarations are not permitted within {@link Constraint}\'s Message objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConstraintContainsDOCTYPE ConstraintContainsDOCTYPE}</td>
<td class=\'meaning\'>XML DOCTYPE elements are not permitted within {@link Constraint}\'s Message objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidConstraintContent InvalidConstraintContent}</td>
<td class=\'meaning\'>Invalid content for a {@link Constraint} object\'s Message object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMathElementPerConstraint OneMathElementPerConstraint}</td>
<td class=\'meaning\'>A {@link Constraint} object must contain one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMessageElementPerConstraint OneMessageElementPerConstraint}</td>
<td class=\'meaning\'>A {@link Constraint} object must contain one Message subobject</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnConstraint AllowedAttributesOnConstraint}</td>
<td class=\'meaning\'>Invalid attribute found on {@link Constraint} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoReactantsOrProducts NoReactantsOrProducts}</td>
<td class=\'meaning\'>Cannot have a reaction with neither reactants nor products</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#IncorrectOrderInReaction IncorrectOrderInReaction}</td>
<td class=\'meaning\'>Subobjects inside the {@link Reaction} object are not in the prescribed order</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EmptyListInReaction EmptyListInReaction}</td>
<td class=\'meaning\'>Reaction components, if present, cannot be empty</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidReactantsProductsList InvalidReactantsProductsList}</td>
<td class=\'meaning\'>Invalid object found in the list of reactants or products</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidModifiersList InvalidModifiersList}</td>
<td class=\'meaning\'>Invalid object found in the list of modifiers</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneSubElementPerReaction OneSubElementPerReaction}</td>
<td class=\'meaning\'>A {@link Reaction} object can only contain one of each allowed type of object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompartmentOnReaction CompartmentOnReaction}</td>
<td class=\'meaning\'>Invalid value for the {@link Reaction} \'compartment\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnReaction AllowedAttributesOnReaction}</td>
<td class=\'meaning\'>Invalid attribute for a {@link Reaction} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSpeciesReference InvalidSpeciesReference}</td>
<td class=\'meaning\'>Invalid \'species\' attribute value in {@link SpeciesReference} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BothStoichiometryAndMath BothStoichiometryAndMath}</td>
<td class=\'meaning\'>The \'stoichiometry\' attribute and {@link StoichiometryMath} subobject are mutually exclusive</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnSpeciesReference AllowedAttributesOnSpeciesReference}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link SpeciesReference} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnModifier AllowedAttributesOnModifier}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ModifierSpeciesReference} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UndeclaredSpeciesRef UndeclaredSpeciesRef}</td>
<td class=\'meaning\'>Unknown species referenced in the kinetic law <code>&lt;math&gt;</code> formula</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#IncorrectOrderInKineticLaw IncorrectOrderInKineticLaw}</td>
<td class=\'meaning\'>Incorrect ordering of components in the {@link KineticLaw} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EmptyListInKineticLaw EmptyListInKineticLaw}</td>
<td class=\'meaning\'>The list of parameters, if present, cannot be empty</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NonConstantLocalParameter NonConstantLocalParameter}</td>
<td class=\'meaning\'>Parameters local to a {@link KineticLaw} object must have a \'constant\' attribute value of \'true\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SubsUnitsNoLongerValid SubsUnitsNoLongerValid}</td>
<td class=\'meaning\'>Attribute \'substanceUnits\' is not supported in this Level+Version of SBML</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#TimeUnitsNoLongerValid TimeUnitsNoLongerValid}</td>
<td class=\'meaning\'>Attribute \'timeUnits\' is not supported in this Level+Version of SBML</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneListOfPerKineticLaw OneListOfPerKineticLaw}</td>
<td class=\'meaning\'>Only one {@link ListOfLocalParameters} object is permitted within a {@link KineticLaw} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyLocalParamsInListOfLocalParams OnlyLocalParamsInListOfLocalParams}</td>
<td class=\'meaning\'>Only {@link LocalParameter}, Notes and Annotation objects are allowed in ListOfLocalParameter objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfLocalParam AllowedAttributesOnListOfLocalParam}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfLocalParameters} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMathPerKineticLaw OneMathPerKineticLaw}</td>
<td class=\'meaning\'>Only one <code>&lt;math&gt;</code> element is allowed in a {@link KineticLaw} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UndeclaredSpeciesInStoichMath UndeclaredSpeciesInStoichMath}</td>
<td class=\'meaning\'>Unknown species referenced in the {@link StoichiometryMath} object\'s <code>&lt;math&gt;</code> formula</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnKineticLaw AllowedAttributesOnKineticLaw}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link KineticLaw} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfSpeciesRef AllowedAttributesOnListOfSpeciesRef}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfSpeciesReferences} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfMods AllowedAttributesOnListOfMods}</td>
<td class=\'meaning\'>Invalid attribute found on the ListOfModifiers object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnLocalParameter AllowedAttributesOnLocalParameter}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link LocalParameter} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingTriggerInEvent MissingTriggerInEvent}</td>
<td class=\'meaning\'>The {@link Event} object is missing a {@link Trigger} subobject</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#TriggerMathNotBoolean TriggerMathNotBoolean}</td>
<td class=\'meaning\'>A {@link Trigger} object\'s <code>&lt;math&gt;</code> expression must evaluate to a Boolean value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MissingEventAssignment MissingEventAssignment}</td>
<td class=\'meaning\'>The {@link Event} object is missing an {@link EventAssignment} subobject</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#TimeUnitsEvent TimeUnitsEvent}</td>
<td class=\'meaning\'>Units referenced by \'timeUnits\' attribute are not compatible with units of time</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#IncorrectOrderInEvent IncorrectOrderInEvent}</td>
<td class=\'meaning\'>Incorrect ordering of components in {@link Event} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ValuesFromTriggerTimeNeedDelay ValuesFromTriggerTimeNeedDelay}</td>
<td class=\'meaning\'>Attribute \'useValuesFromTriggerTime\'=\'false\', but the {@link Event} object does not define a delay</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DelayNeedsValuesFromTriggerTime DelayNeedsValuesFromTriggerTime}</td>
<td class=\'meaning\'>The use of a {@link Delay} object requires the {@link Event} attribute \'useValuesFromTriggerTime\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMathPerTrigger OneMathPerTrigger}</td>
<td class=\'meaning\'>A {@link Trigger} object must have one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMathPerDelay OneMathPerDelay}</td>
<td class=\'meaning\'>A {@link Delay} object must have one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidEventAssignmentVariable InvalidEventAssignmentVariable}</td>
<td class=\'meaning\'>Invalid \'variable\' attribute value in {@link Event} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EventAssignmentForConstantEntity EventAssignmentForConstantEntity}</td>
<td class=\'meaning\'>An {@link EventAssignment} object cannot assign to a component having attribute \'constant\'=\'true\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMathPerEventAssignment OneMathPerEventAssignment}</td>
<td class=\'meaning\'>An {@link EventAssignment} object must have one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnEventAssignment AllowedAttributesOnEventAssignment}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link EventAssignment} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyOneDelayPerEvent OnlyOneDelayPerEvent}</td>
<td class=\'meaning\'>An {@link Event} object can only have one {@link Delay} subobject</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneListOfEventAssignmentsPerEvent OneListOfEventAssignmentsPerEvent}</td>
<td class=\'meaning\'>An {@link Event} object can only have one {@link ListOfEventAssignments} subobject</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyEventAssignInListOfEventAssign OnlyEventAssignInListOfEventAssign}</td>
<td class=\'meaning\'>Only {@link EventAssignment}, Notes and Annotation objects are allowed in {@link ListOfEventAssignments}</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnListOfEventAssign AllowedAttributesOnListOfEventAssign}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link ListOfEventAssignments} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnEvent AllowedAttributesOnEvent}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link Event} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnTrigger AllowedAttributesOnTrigger}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link Trigger} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnDelay AllowedAttributesOnDelay}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link Delay} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#PersistentNotBoolean PersistentNotBoolean}</td>
<td class=\'meaning\'>The {@link Trigger} attribute \'persistent\' must evaluate to a Boolean value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InitialValueNotBoolean InitialValueNotBoolean}</td>
<td class=\'meaning\'>The {@link Trigger} attribute \'initialValue\' must evaluate to a Boolean value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OnlyOnePriorityPerEvent OnlyOnePriorityPerEvent}</td>
<td class=\'meaning\'>An {@link Event} object can only have one {@link Priority} subobject</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OneMathPerPriority OneMathPerPriority}</td>
<td class=\'meaning\'>A {@link Priority} object must have one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AllowedAttributesOnPriority AllowedAttributesOnPriority}</td>
<td class=\'meaning\'>Invalid attribute found on the {@link Priority} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompartmentShouldHaveSize CompartmentShouldHaveSize}</td>
<td class=\'meaning\'>It\'s best to define a size for every compartment in a model</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpeciesShouldHaveValue SpeciesShouldHaveValue}</td>
<td class=\'meaning\'>It\'s best to define an initial amount or initial concentration for every species in a model</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ParameterShouldHaveUnits ParameterShouldHaveUnits}</td>
<td class=\'meaning\'>It\'s best to declare units for every parameter in a model</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LocalParameterShadowsId LocalParameterShadowsId}</td>
<td class=\'meaning\'>Local parameters defined within a kinetic law shadow global object symbols</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CannotConvertToL1V1 CannotConvertToL1V1}</td>
<td class=\'meaning\'>Cannot convert to SBML Level 1 Version 1</td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoEventsInL1 NoEventsInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support events</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoFunctionDefinitionsInL1 NoFunctionDefinitionsInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support function definitions</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoConstraintsInL1 NoConstraintsInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support constraints</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoInitialAssignmentsInL1 NoInitialAssignmentsInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support initial assignments</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSpeciesTypesInL1 NoSpeciesTypesInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support species types</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoCompartmentTypeInL1 NoCompartmentTypeInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support compartment types</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoNon3DCompartmentsInL1 NoNon3DCompartmentsInL1}</td>
<td class=\'meaning\'>SBML Level 1 only supports three-dimensional compartments</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoFancyStoichiometryMathInL1 NoFancyStoichiometryMathInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support non-integer nor non-rational stoichiometry formulas</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoNonIntegerStoichiometryInL1 NoNonIntegerStoichiometryInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support non-integer \'stoichiometry\' attribute values</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoUnitMultipliersOrOffsetsInL1 NoUnitMultipliersOrOffsetsInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support multipliers or offsets in unit definitions</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpeciesCompartmentRequiredInL1 SpeciesCompartmentRequiredInL1}</td>
<td class=\'meaning\'>In SBML Level 1, a value for \'compartment\' is mandatory in species definitions</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSpeciesSpatialSizeUnitsInL1 NoSpeciesSpatialSizeUnitsInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support species \'spatialSizeUnits\' settings</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSBOTermsInL1 NoSBOTermsInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support the \'sboTerm\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#StrictUnitsRequiredInL1 StrictUnitsRequiredInL1}</td>
<td class=\'meaning\'>SBML Level 1 requires strict unit consistency</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConversionFactorNotInL1 ConversionFactorNotInL1}</td>
<td class=\'meaning\'>SBML Level 1 does not support the \'conversionFactor\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompartmentNotOnL1Reaction CompartmentNotOnL1Reaction}</td>
<td class=\'meaning\'>SBML Level 1 does not support the \'compartment\' attribute on {@link Reaction} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ExtentUnitsNotSubstance ExtentUnitsNotSubstance}</td>
<td class=\'meaning\'>Units of extent must be compatible with units of substance</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#GlobalUnitsNotDeclared GlobalUnitsNotDeclared}</td>
<td class=\'meaning\'>Global units must be refer to unit kind or unitDefinition.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#HasOnlySubstanceUnitsNotinL1 HasOnlySubstanceUnitsNotinL1}</td>
<td class=\'meaning\'>The concept of hasOnlySubstanceUnits was not available in SBML Level 1.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AvogadroNotSupported AvogadroNotSupported}</td>
<td class=\'meaning\'>Avogadro not supported in Levels 2 and 1.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoConstraintsInL2v1 NoConstraintsInL2v1}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support {@link Constraint} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoInitialAssignmentsInL2v1 NoInitialAssignmentsInL2v1}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support {@link InitialAssignment} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSpeciesTypeInL2v1 NoSpeciesTypeInL2v1}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support {@link SpeciesType} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoCompartmentTypeInL2v1 NoCompartmentTypeInL2v1}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support {@link CompartmentType} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSBOTermsInL2v1 NoSBOTermsInL2v1}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support the \'sboTerm\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoIdOnSpeciesReferenceInL2v1 NoIdOnSpeciesReferenceInL2v1}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support the \'id\' attribute on {@link SpeciesReference} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoDelayedEventAssignmentInL2v1 NoDelayedEventAssignmentInL2v1}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support the \'useValuesFromTriggerTime\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#StrictUnitsRequiredInL2v1 StrictUnitsRequiredInL2v1}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 requires strict unit consistency</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#IntegerSpatialDimensions IntegerSpatialDimensions}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 requires that compartments have spatial dimensions of 0-3</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#StoichiometryMathNotYetSupported StoichiometryMathNotYetSupported}</td>
<td class=\'meaning\'>Conversion to {@link StoichiometryMath} objects not yet supported</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#PriorityLostFromL3 PriorityLostFromL3}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support priorities on {@link Event} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NonPersistentNotSupported NonPersistentNotSupported}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support the \'persistent\' attribute on {@link Trigger} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InitialValueFalseEventNotSupported InitialValueFalseEventNotSupported}</td>
<td class=\'meaning\'>SBML Level 2 Version 1 does not support the \'initialValue\' attribute on {@link Trigger} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SBOTermNotUniversalInL2v2 SBOTermNotUniversalInL2v2}</td>
<td class=\'meaning\'>The \'sboTerm\' attribute is invalid for this component in SBML Level 2 Version 2</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoUnitOffsetInL2v2 NoUnitOffsetInL2v2}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'offset\' attribute on {@link Unit} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoKineticLawTimeUnitsInL2v2 NoKineticLawTimeUnitsInL2v2}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'timeUnits\' attribute on {@link KineticLaw} objects</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoKineticLawSubstanceUnitsInL2v2 NoKineticLawSubstanceUnitsInL2v2}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'substanceUnits\' attribute on {@link KineticLaw} objects</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoDelayedEventAssignmentInL2v2 NoDelayedEventAssignmentInL2v2}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'useValuesFromTriggerTime\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ModelSBOBranchChangedBeyondL2v2 ModelSBOBranchChangedBeyondL2v2}</td>
<td class=\'meaning\'>The allowable \'sboTerm\' attribute values for {@link Model} objects differ for this SBML Level+Version</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#StrictUnitsRequiredInL2v2 StrictUnitsRequiredInL2v2}</td>
<td class=\'meaning\'>SBML Level 2 Version 2 requires strict unit consistency</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#StrictSBORequiredInL2v2 StrictSBORequiredInL2v2}</td>
<td class=\'meaning\'>SBML Level 2 Version 2 requires strict {@link SBO} term consistency</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateAnnotationInvalidInL2v2 DuplicateAnnotationInvalidInL2v2}</td>
<td class=\'meaning\'>Duplicate top-level annotations are invalid in SBML Level 2 Version 2</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoUnitOffsetInL2v3 NoUnitOffsetInL2v3}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'offset\' attribute on {@link Unit} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoKineticLawTimeUnitsInL2v3 NoKineticLawTimeUnitsInL2v3}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'timeUnits\' attribute on {@link KineticLaw} objects</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoKineticLawSubstanceUnitsInL2v3 NoKineticLawSubstanceUnitsInL2v3}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'substanceUnits\' attribute on {@link KineticLaw} objects</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSpeciesSpatialSizeUnitsInL2v3 NoSpeciesSpatialSizeUnitsInL2v3}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'spatialSizeUnit\' attribute on {@link Species} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoEventTimeUnitsInL2v3 NoEventTimeUnitsInL2v3}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'timeUnits\' attribute on {@link Event} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoDelayedEventAssignmentInL2v3 NoDelayedEventAssignmentInL2v3}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'useValuesFromTriggerTime\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ModelSBOBranchChangedBeyondL2v3 ModelSBOBranchChangedBeyondL2v3}</td>
<td class=\'meaning\'>The allowable \'sboTerm\' attribute values for {@link Model} objects differ for this SBML Level+Version</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#StrictUnitsRequiredInL2v3 StrictUnitsRequiredInL2v3}</td>
<td class=\'meaning\'>SBML Level 2 Version 3 requires strict unit consistency</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#StrictSBORequiredInL2v3 StrictSBORequiredInL2v3}</td>
<td class=\'meaning\'>SBML Level 2 Version 3 requires strict {@link SBO} term consistency</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateAnnotationInvalidInL2v3 DuplicateAnnotationInvalidInL2v3}</td>
<td class=\'meaning\'>Duplicate top-level annotations are invalid in SBML Level 2 Version 3</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoUnitOffsetInL2v4 NoUnitOffsetInL2v4}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'offset\' attribute on {@link Unit} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoKineticLawTimeUnitsInL2v4 NoKineticLawTimeUnitsInL2v4}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'timeUnits\' attribute on {@link KineticLaw} objects</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoKineticLawSubstanceUnitsInL2v4 NoKineticLawSubstanceUnitsInL2v4}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'substanceUnits\' attribute on {@link KineticLaw} objects</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSpeciesSpatialSizeUnitsInL2v4 NoSpeciesSpatialSizeUnitsInL2v4}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'spatialSizeUnit\' attribute on {@link Species} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoEventTimeUnitsInL2v4 NoEventTimeUnitsInL2v4}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'timeUnits\' attribute on {@link Event} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ModelSBOBranchChangedInL2v4 ModelSBOBranchChangedInL2v4}</td>
<td class=\'meaning\'>The allowable \'sboTerm\' attribute values for {@link Model} objects differ for this SBML Level+Version</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateAnnotationInvalidInL2v4 DuplicateAnnotationInvalidInL2v4}</td>
<td class=\'meaning\'>Duplicate top-level annotations are invalid in SBML Level 2 Version 4</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSpeciesTypeInL3v1 NoSpeciesTypeInL3v1}</td>
<td class=\'meaning\'>SBML Level 3 Version 1 does not support {@link SpeciesType} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoCompartmentTypeInL3v1 NoCompartmentTypeInL3v1}</td>
<td class=\'meaning\'>SBML Level 3 Version 1 does not support {@link CompartmentType} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoUnitOffsetInL3v1 NoUnitOffsetInL3v1}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'offset\' attribute on {@link Unit} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoKineticLawTimeUnitsInL3v1 NoKineticLawTimeUnitsInL3v1}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'timeUnits\' attribute on {@link KineticLaw} objects</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoKineticLawSubstanceUnitsInL3v1 NoKineticLawSubstanceUnitsInL3v1}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'substanceUnits\' attribute on {@link KineticLaw} objects</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoSpeciesSpatialSizeUnitsInL3v1 NoSpeciesSpatialSizeUnitsInL3v1}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'spatialSizeUnit\' attribute on {@link Species} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoEventTimeUnitsInL3v1 NoEventTimeUnitsInL3v1}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'timeUnits\' attribute on {@link Event} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ModelSBOBranchChangedInL3v1 ModelSBOBranchChangedInL3v1}</td>
<td class=\'meaning\'>The allowable \'sboTerm\' attribute values for {@link Model} objects differ for this SBML Level+Version</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DuplicateAnnotationInvalidInL3v1 DuplicateAnnotationInvalidInL3v1}</td>
<td class=\'meaning\'>Duplicate top-level annotations are invalid in SBML Level 3 Version 1</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoCompartmentOutsideInL3v1 NoCompartmentOutsideInL3v1}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'outside\' attribute on {@link Compartment} objects</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoStoichiometryMathInL3v1 NoStoichiometryMathInL3v1}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the {@link StoichiometryMath} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidSBMLLevelVersion InvalidSBMLLevelVersion}</td>
<td class=\'meaning\'>Unknown Level+Version combination of SBML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AnnotationNotesNotAllowedLevel1 AnnotationNotesNotAllowedLevel1}</td>
<td class=\'meaning\'>Annotation objects on the SBML container element are not permitted in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidRuleOrdering InvalidRuleOrdering}</td>
<td class=\'meaning\'>Invalid ordering of rules</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RequiredPackagePresent RequiredPackagePresent}</td>
<td class=\'meaning\'>The SBML document requires an SBML Level 3 package unavailable in this software</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UnrequiredPackagePresent UnrequiredPackagePresent}</td>
<td class=\'meaning\'>The SBML document uses an SBML Level 3 package unavailable in this software</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#PackageRequiredShouldBeFalse PackageRequiredShouldBeFalse}</td>
<td class=\'meaning\'>This package expects required to be false</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SubsUnitsAllowedInKL SubsUnitsAllowedInKL}</td>
<td class=\'meaning\'>Disallowed value for attribute \'substanceUnits\' on {@link KineticLaw} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#TimeUnitsAllowedInKL TimeUnitsAllowedInKL}</td>
<td class=\'meaning\'>Disallowed value for attribute \'timeUnits\' on {@link KineticLaw} object</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FormulaInLevel1KL FormulaInLevel1KL}</td>
<td class=\'meaning\'>Only predefined functions are allowed in SBML Level 1 formulas</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3SubstanceUnitsOnModel L3SubstanceUnitsOnModel}</td>
<td class=\'meaning\'>Invalid \'substanceUnits\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#TimeUnitsRemoved TimeUnitsRemoved}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'timeUnits\' attribute on {@link Event} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadMathML BadMathML}</td>
<td class=\'meaning\'>Invalid MathML expression</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FailedMathMLReadOfDouble FailedMathMLReadOfDouble}</td>
<td class=\'meaning\'>Missing or invalid floating-point number in MathML expression</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FailedMathMLReadOfInteger FailedMathMLReadOfInteger}</td>
<td class=\'meaning\'>Missing or invalid integer in MathML expression</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FailedMathMLReadOfExponential FailedMathMLReadOfExponential}</td>
<td class=\'meaning\'>Missing or invalid exponential expression in MathML</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FailedMathMLReadOfRational FailedMathMLReadOfRational}</td>
<td class=\'meaning\'>Missing or invalid rational expression in MathML</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#BadMathMLNodeType BadMathMLNodeType}</td>
<td class=\'meaning\'>Invalid MathML element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidMathMLAttribute InvalidMathMLAttribute}</td>
<td class=\'meaning\'>Invalid MathML attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoTimeSymbolInFunctionDef NoTimeSymbolInFunctionDef}</td>
<td class=\'meaning\'>Use of <code>&lt;csymbol&gt;</code> for \'time\' not allowed within {@link FunctionDefinition} objects</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NoBodyInFunctionDef NoBodyInFunctionDef}</td>
<td class=\'meaning\'>There must be a <code>&lt;lambda&gt;</code> body within the <code>&lt;math&gt;</code> element of a {@link FunctionDefinition} object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#DanglingUnitSIdRef DanglingUnitSIdRef}</td>
<td class=\'meaning\'>Units must refer to valid unit or unitDefinition</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RDFMissingAboutTag RDFMissingAboutTag}</td>
<td class=\'meaning\'>RDF missing the <code>&lt;about&gt;</code> tag</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RDFEmptyAboutTag RDFEmptyAboutTag}</td>
<td class=\'meaning\'>RDF empty <code>&lt;about&gt;</code> tag</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RDFAboutTagNotMetaid RDFAboutTagNotMetaid}</td>
<td class=\'meaning\'>RDF <code>&lt;about&gt;</code> tag is not metaid</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RDFNotCompleteModelHistory RDFNotCompleteModelHistory}</td>
<td class=\'meaning\'>RDF does not contain valid {@link ModelHistory}</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#RDFNotModelHistory RDFNotModelHistory}</td>
<td class=\'meaning\'>RDF does not result in a {@link ModelHistory}</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#AnnotationNotElement AnnotationNotElement}</td>
<td class=\'meaning\'>Annotation must contain element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UndeclaredUnits UndeclaredUnits}</td>
<td class=\'meaning\'>Missing unit declarations on parameters or literal numbers in expression</td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UndeclaredTimeUnitsL3 UndeclaredTimeUnitsL3}</td>
<td class=\'meaning\'>Unable to verify consistency of units: the unit of time has not been declared</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UndeclaredExtentUnitsL3 UndeclaredExtentUnitsL3}</td>
<td class=\'meaning\'>Unable to verify consistency of units: the units of reaction extent have not been declared</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UndeclaredObjectUnitsL3 UndeclaredObjectUnitsL3}</td>
<td class=\'meaning\'>Unable to verify consistency of units: encountered a model entity with no declared units</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UnrecognisedSBOTerm UnrecognisedSBOTerm}</td>
<td class=\'meaning\'>Unrecognized \'sboTerm\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ObseleteSBOTerm ObseleteSBOTerm}</td>
<td class=\'meaning\'>Obsolete \'sboTerm\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#IncorrectCompartmentSpatialDimensions IncorrectCompartmentSpatialDimensions}</td>
<td class=\'meaning\'>In SBML Level 1, only three-dimensional compartments are allowed</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompartmentTypeNotValidAttribute CompartmentTypeNotValidAttribute}</td>
<td class=\'meaning\'>CompartmentType objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConstantNotValidAttribute ConstantNotValidAttribute}</td>
<td class=\'meaning\'>This Level+Version of SBML does not support the \'constant\' attribute on this component</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MetaIdNotValidAttribute MetaIdNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'metaid\' is not available in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SBOTermNotValidAttributeBeforeL2V3 SBOTermNotValidAttributeBeforeL2V3}</td>
<td class=\'meaning\'>The \'sboTerm\' attribute is not available on this component before SBML Level 2 Version 3</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidL1CompartmentUnits InvalidL1CompartmentUnits}</td>
<td class=\'meaning\'>Invalid units for a compartment in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L1V1CompartmentVolumeReqd L1V1CompartmentVolumeReqd}</td>
<td class=\'meaning\'>In SBML Level 1, a compartment\'s volume must be specified</td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompartmentTypeNotValidComponent CompartmentTypeNotValidComponent}</td>
<td class=\'meaning\'>CompartmentType objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConstraintNotValidComponent ConstraintNotValidComponent}</td>
<td class=\'meaning\'>Constraint objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#EventNotValidComponent EventNotValidComponent}</td>
<td class=\'meaning\'>Event objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SBOTermNotValidAttributeBeforeL2V2 SBOTermNotValidAttributeBeforeL2V2}</td>
<td class=\'meaning\'>The \'sboTerm\' attribute is invalid for this component before Level 2 Version 2</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FuncDefNotValidComponent FuncDefNotValidComponent}</td>
<td class=\'meaning\'>FunctionDefinition objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InitialAssignNotValidComponent InitialAssignNotValidComponent}</td>
<td class=\'meaning\'>InitialAssignment objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#VariableNotValidAttribute VariableNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'variable\' is not available on this component in this Level+Version of SBML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#UnitsNotValidAttribute UnitsNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'units\' is not available on this component in this Level+Version of SBML</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#ConstantSpeciesNotValidAttribute ConstantSpeciesNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'constant\' is not available on {@link Species} objects in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpatialSizeUnitsNotValidAttribute SpatialSizeUnitsNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'spatialSizeUnits\' is not available on {@link Species} objects in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpeciesTypeNotValidAttribute SpeciesTypeNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'speciesType\' is not available on {@link Species} objects in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#HasOnlySubsUnitsNotValidAttribute HasOnlySubsUnitsNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'hasOnlySubstanceUnits\' is not available on {@link Species} objects in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#IdNotValidAttribute IdNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'id\' is not available on {@link SpeciesReference} objects in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#NameNotValidAttribute NameNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'name\' is not available on {@link SpeciesReference} objects in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#SpeciesTypeNotValidComponent SpeciesTypeNotValidComponent}</td>
<td class=\'meaning\'>The {@link SpeciesType} object is not supported in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#StoichiometryMathNotValidComponent StoichiometryMathNotValidComponent}</td>
<td class=\'meaning\'>The {@link StoichiometryMath} object is not supported in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#MultiplierNotValidAttribute MultiplierNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'multiplier\' on {@link Unit} objects is not supported in SBML Level 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#OffsetNotValidAttribute OffsetNotValidAttribute}</td>
<td class=\'meaning\'>Attribute \'offset\' on {@link Unit} objects is only available in SBML Level 2 Version 1</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3SpatialDimensionsUnset L3SpatialDimensionsUnset}</td>
<td class=\'meaning\'>No value given for \'spatialDimensions\' attribute; assuming a value of 3</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#PackageConversionNotSupported PackageConversionNotSupported}</td>
<td class=\'meaning\'>Conversion of SBML Level 3 package constructs is not yet supported</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#InvalidTargetLevelVersion InvalidTargetLevelVersion}</td>
<td class=\'meaning\'>The requested SBML Level/Version combination is not known to exist</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#L3NotSupported L3NotSupported}</td>
<td class=\'meaning\'>SBML Level 3 is not yet supported</td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompUnknown CompUnknown}</td>
<td class=\'meaning\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompNSUndeclared CompNSUndeclared}</td>
<td class=\'meaning\'>The comp ns is not correctly declared</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompElementNotInNs CompElementNotInNs}</td>
<td class=\'meaning\'>Element not in comp namespace</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompDuplicateComponentId CompDuplicateComponentId}</td>
<td class=\'meaning\'>Duplicate \'id\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompUniqueModelIds CompUniqueModelIds}</td>
<td class=\'meaning\'>Model and ExternalModelDefinitions must have unique ids</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompUniquePortIds CompUniquePortIds}</td>
<td class=\'meaning\'>Ports must have unique ids</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidSIdSyntax CompInvalidSIdSyntax}</td>
<td class=\'meaning\'>Invalid SId syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidSubmodelRefSyntax CompInvalidSubmodelRefSyntax}</td>
<td class=\'meaning\'>Invalid submodelRef syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidDeletionSyntax CompInvalidDeletionSyntax}</td>
<td class=\'meaning\'>Invalid deletion syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidConversionFactorSyntax CompInvalidConversionFactorSyntax}</td>
<td class=\'meaning\'>Invalid conversionFactor syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidNameSyntax CompInvalidNameSyntax}</td>
<td class=\'meaning\'>Invalid name syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedUnitsShouldMatch CompReplacedUnitsShouldMatch}</td>
<td class=\'meaning\'>Units of replaced elements should match replacement units.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompOneListOfReplacedElements CompOneListOfReplacedElements}</td>
<td class=\'meaning\'>Only one <code>&lt;listOfReplacedElements&gt;</code> allowed.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOReplaceElementsAllowedElements CompLOReplaceElementsAllowedElements}</td>
<td class=\'meaning\'>Allowed children of <code>&lt;listOfReplacedElements&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOReplacedElementsAllowedAttribs CompLOReplacedElementsAllowedAttribs}</td>
<td class=\'meaning\'>Allowed <code>&lt;listOfReplacedElements&gt;</code> attributes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompEmptyLOReplacedElements CompEmptyLOReplacedElements}</td>
<td class=\'meaning\'><code>&lt;listOfReplacedElements&gt;</code> must not be empty</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompOneReplacedByElement CompOneReplacedByElement}</td>
<td class=\'meaning\'>Only one <code>&lt;replacedBy&gt;</code> object allowed.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompAttributeRequiredMissing CompAttributeRequiredMissing}</td>
<td class=\'meaning\'>Required comp:required attribute on <code>&lt;sbml&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompAttributeRequiredMustBeBoolean CompAttributeRequiredMustBeBoolean}</td>
<td class=\'meaning\'>The comp:required attribute must be Boolean</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompRequiredTrueIfElementsRemain CompRequiredTrueIfElementsRemain}</td>
<td class=\'meaning\'>The comp:required attribute must be \'true\' if math changes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompRequiredFalseIfAllElementsReplaced CompRequiredFalseIfAllElementsReplaced}</td>
<td class=\'meaning\'>The comp:required attribute must be \'false\' if math does not change</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompOneListOfModelDefinitions CompOneListOfModelDefinitions}</td>
<td class=\'meaning\'>Only one <code>&lt;listOfModelDefinitions&gt;</code> allowed.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompEmptyLOModelDefs CompEmptyLOModelDefs}</td>
<td class=\'meaning\'><code>&lt;listOfModelDefinitions&gt;</code> and <code>&lt;listOfExternalModelDefinitions&gt;</code> must not be empty</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOModelDefsAllowedElements CompLOModelDefsAllowedElements}</td>
<td class=\'meaning\'>Only <code>&lt;modelDefinitions&gt;</code> in <code>&lt;listOfModelDefinitions&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOExtModelDefsAllowedElements CompLOExtModelDefsAllowedElements}</td>
<td class=\'meaning\'>Only <code>&lt;externalModelDefinitions&gt;</code> in <code>&lt;listOfExternalModelDefinitions&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOModelDefsAllowedAttributes CompLOModelDefsAllowedAttributes}</td>
<td class=\'meaning\'>Allowed <code>&lt;listOfModelDefinitions&gt;</code> attributes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOExtModDefsAllowedAttributes CompLOExtModDefsAllowedAttributes}</td>
<td class=\'meaning\'>Allowed <code>&lt;listOfExternalModelDefinitions&gt;</code> attributes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompOneListOfExtModelDefinitions CompOneListOfExtModelDefinitions}</td>
<td class=\'meaning\'>Only one <code>&lt;listOfExternalModelDefinitions&gt;</code> allowed.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompAttributeRequiredMustBeTrue CompAttributeRequiredMustBeTrue}</td>
<td class=\'meaning\'>The comp:required attribute must be \'true\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompExtModDefAllowedCoreAttributes CompExtModDefAllowedCoreAttributes}</td>
<td class=\'meaning\'>Allowed <code>&lt;externalModelDefinitions&gt;</code> core attributes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompExtModDefAllowedElements CompExtModDefAllowedElements}</td>
<td class=\'meaning\'>Allowed <code>&lt;externalModelDefinitions&gt;</code> elements</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompExtModDefAllowedAttributes CompExtModDefAllowedAttributes}</td>
<td class=\'meaning\'>Allowed <code>&lt;externalModelDefinitions&gt;</code> attributes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReferenceMustBeL3 CompReferenceMustBeL3}</td>
<td class=\'meaning\'>External models must be L3</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompModReferenceMustIdOfModel CompModReferenceMustIdOfModel}</td>
<td class=\'meaning\'>\'modelRef\' must be the \'id\' of a model in the \'source\' document</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompExtModMd5DoesNotMatch CompExtModMd5DoesNotMatch}</td>
<td class=\'meaning\'>MD5 checksum does not match the \'source\' document</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidSourceSyntax CompInvalidSourceSyntax}</td>
<td class=\'meaning\'>The \'comp:source\' attribute must be of type \'anyURI\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidModelRefSyntax CompInvalidModelRefSyntax}</td>
<td class=\'meaning\'>The \'comp:modelRef\' attribute must have the syntax of \'SId\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidMD5Syntax CompInvalidMD5Syntax}</td>
<td class=\'meaning\'>The \'comp:md5\' attribute must have the syntax of \'string\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompCircularExternalModelReference CompCircularExternalModelReference}</td>
<td class=\'meaning\'>Circular reference in <code>&lt;externalModelDefinition&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompOneListOfOnModel CompOneListOfOnModel}</td>
<td class=\'meaning\'>Only one <code>&lt;listOfSubmodels&gt;</code> and one <code>&lt;listOfPorts&gt;</code> allowed</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompNoEmptyListOfOnModel CompNoEmptyListOfOnModel}</td>
<td class=\'meaning\'>No empty listOf elements allowed</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOSubmodelsAllowedElements CompLOSubmodelsAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on <code>&lt;listOfSubmodels&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOPortsAllowedElements CompLOPortsAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on <code>&lt;listOfPorts&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOSubmodelsAllowedAttributes CompLOSubmodelsAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on <code>&lt;listOfSubmodels&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLOPortsAllowedAttributes CompLOPortsAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on <code>&lt;listOfPorts&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompSubmodelAllowedCoreAttributes CompSubmodelAllowedCoreAttributes}</td>
<td class=\'meaning\'>Allowed core attributes on <code>&lt;submodel&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompSubmodelAllowedElements CompSubmodelAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on <code>&lt;submodel&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompOneListOfDeletionOnSubmodel CompOneListOfDeletionOnSubmodel}</td>
<td class=\'meaning\'>Only one <code>&lt;listOfDeletions&gt;</code> on a <code>&lt;submodel&gt;</code> allowed</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompSubmodelNoEmptyLODeletions CompSubmodelNoEmptyLODeletions}</td>
<td class=\'meaning\'>No empty listOfDeletions elements allowed</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLODeletionsAllowedElements CompLODeletionsAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on <code>&lt;listOfDeletions&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLODeletionAllowedAttributes CompLODeletionAllowedAttributes}</td>
<td class=\'meaning\'>Allowed <code>&lt;listOfDeletions&gt;</code> attributes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompSubmodelAllowedAttributes CompSubmodelAllowedAttributes}</td>
<td class=\'meaning\'>Allowed <code>&lt;submodel&gt;</code> attributes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompModReferenceSyntax CompModReferenceSyntax}</td>
<td class=\'meaning\'>\'comp:modelRef\' must conform to SId syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidTimeConvFactorSyntax CompInvalidTimeConvFactorSyntax}</td>
<td class=\'meaning\'>\'comp:timeConversionFactor\' must conform to SId syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidExtentConvFactorSyntax CompInvalidExtentConvFactorSyntax}</td>
<td class=\'meaning\'>\'comp:extentConversionFactor\' must conform to SId syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompSubmodelMustReferenceModel CompSubmodelMustReferenceModel}</td>
<td class=\'meaning\'>The \'comp:modelRef\' attribute must reference a model</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompSubmodelCannotReferenceSelf CompSubmodelCannotReferenceSelf}</td>
<td class=\'meaning\'>The \'comp:modelRef\' attribute cannot reference own model</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompModCannotCircularlyReferenceSelf CompModCannotCircularlyReferenceSelf}</td>
<td class=\'meaning\'><code>&lt;model&gt;</code> may not reference <code>&lt;submodel&gt;</code> that references itself.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompTimeConversionMustBeParameter CompTimeConversionMustBeParameter}</td>
<td class=\'meaning\'>The \'comp:timeConversionFactor\' must reference a parameter</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompExtentConversionMustBeParameter CompExtentConversionMustBeParameter}</td>
<td class=\'meaning\'>The \'comp:extentConversionFactor\' must reference a parameter</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompPortRefMustReferencePort CompPortRefMustReferencePort}</td>
<td class=\'meaning\'>The \'comp:portRef\' attribute must be the \'id\' of a <code>&lt;port&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompIdRefMustReferenceObject CompIdRefMustReferenceObject}</td>
<td class=\'meaning\'>The \'comp:idRef\' attribute must be the \'id\' of a model element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompUnitRefMustReferenceUnitDef CompUnitRefMustReferenceUnitDef}</td>
<td class=\'meaning\'>The \'comp:unitRef\' attribute must be the \'id\' of a {@link UnitDefinition}</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompMetaIdRefMustReferenceObject CompMetaIdRefMustReferenceObject}</td>
<td class=\'meaning\'>The \'comp:metaIdRef\' attribute must be the \'metaid\' of an object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompParentOfSBRefChildMustBeSubmodel CompParentOfSBRefChildMustBeSubmodel}</td>
<td class=\'meaning\'>If <code>&lt;sBaseRef&gt;</code> has a child <code>&lt;sBaseRef&gt;</code> its parent must be a <code>&lt;submodel&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidPortRefSyntax CompInvalidPortRefSyntax}</td>
<td class=\'meaning\'>The \'comp:portRef\' attribute must have the syntax of an SBML SId</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidIdRefSyntax CompInvalidIdRefSyntax}</td>
<td class=\'meaning\'>The \'comp:idRef\' attribute must have the syntax of an SBML SId</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidUnitRefSyntax CompInvalidUnitRefSyntax}</td>
<td class=\'meaning\'>The \'comp:unitRef\' attribute must have the syntax of an SBML SId</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompInvalidMetaIdRefSyntax CompInvalidMetaIdRefSyntax}</td>
<td class=\'meaning\'>The \'comp:metaIdRef\' attribute must have the syntax of an XML ID</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompOneSBaseRefOnly CompOneSBaseRefOnly}</td>
<td class=\'meaning\'>Only one <code>&lt;sbaseRef&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompDeprecatedSBaseRefSpelling CompDeprecatedSBaseRefSpelling}</td>
<td class=\'meaning\'>The spelling \'sbaseRef\' is deprecated</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompSBaseRefMustReferenceObject CompSBaseRefMustReferenceObject}</td>
<td class=\'meaning\'>An SBaseRef must reference an object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompSBaseRefMustReferenceOnlyOneObject CompSBaseRefMustReferenceOnlyOneObject}</td>
<td class=\'meaning\'>An SBaseRef must reference only one other object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompNoMultipleReferences CompNoMultipleReferences}</td>
<td class=\'meaning\'>Objects may not be referenced by mutiple SBaseRef constructs.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompPortMustReferenceObject CompPortMustReferenceObject}</td>
<td class=\'meaning\'>Port must reference an object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompPortMustReferenceOnlyOneObject CompPortMustReferenceOnlyOneObject}</td>
<td class=\'meaning\'>Port must reference only one other object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompPortAllowedAttributes CompPortAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on a Port</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompPortReferencesUnique CompPortReferencesUnique}</td>
<td class=\'meaning\'>Port definitions must be unique.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompDeletionMustReferenceObject CompDeletionMustReferenceObject}</td>
<td class=\'meaning\'>Deletion must reference an object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompDeletionMustReferOnlyOneObject CompDeletionMustReferOnlyOneObject}</td>
<td class=\'meaning\'>Deletion must reference only one other object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompDeletionAllowedAttributes CompDeletionAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on a Deletion</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedElementMustRefObject CompReplacedElementMustRefObject}</td>
<td class=\'meaning\'>ReplacedElement must reference an object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedElementMustRefOnlyOne CompReplacedElementMustRefOnlyOne}</td>
<td class=\'meaning\'>ReplacedElement must reference only one other object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedElementAllowedAttributes CompReplacedElementAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on <code>&lt;replacedElement&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedElementSubModelRef CompReplacedElementSubModelRef}</td>
<td class=\'meaning\'>The \'comp:submodelRef\' attribute must point to a <code>&lt;submodel&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedElementDeletionRef CompReplacedElementDeletionRef}</td>
<td class=\'meaning\'>The \'comp:deletion\' attribute must point to a <code>&lt;deletion&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedElementConvFactorRef CompReplacedElementConvFactorRef}</td>
<td class=\'meaning\'>The \'comp:conversionFactor attribute must point to a <code>&lt;parameter&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedElementSameReference CompReplacedElementSameReference}</td>
<td class=\'meaning\'>No <code>&lt;replacedElement&gt;</code> refer to same object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedElementNoDelAndConvFact CompReplacedElementNoDelAndConvFact}</td>
<td class=\'meaning\'>No <code>&lt;replacedElement&gt;</code> with deletion and conversionfactor</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedByMustRefObject CompReplacedByMustRefObject}</td>
<td class=\'meaning\'>ReplacedBy must reference an object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedByMustRefOnlyOne CompReplacedByMustRefOnlyOne}</td>
<td class=\'meaning\'>ReplacedBy must reference only one other object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedByAllowedAttributes CompReplacedByAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on <code>&lt;replacedBy&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompReplacedBySubModelRef CompReplacedBySubModelRef}</td>
<td class=\'meaning\'>The \'comp:submodelRef\' attribute must point to a <code>&lt;submodel&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompMustReplaceSameClass CompMustReplaceSameClass}</td>
<td class=\'meaning\'>Replaced classes must match.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompMustReplaceIDs CompMustReplaceIDs}</td>
<td class=\'meaning\'>Replaced IDs must be replaced with IDs.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompMustReplaceMetaIDs CompMustReplaceMetaIDs}</td>
<td class=\'meaning\'>Replaced metaids must be replaced with metaids.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompMustReplacePackageIDs CompMustReplacePackageIDs}</td>
<td class=\'meaning\'>Replaced package IDs must be replaced with package IDs.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompUnresolvedReference CompUnresolvedReference}</td>
<td class=\'meaning\'>Unresolved reference.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompNoModelInReference CompNoModelInReference}</td>
<td class=\'meaning\'>No model in referenced document.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompExtModDefBad CompExtModDefBad}</td>
<td class=\'meaning\'>Referenced <code>&lt;externalModelDefinition&gt;</code> unresolvable.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompModelFlatteningFailed CompModelFlatteningFailed}</td>
<td class=\'meaning\'>Model failed to flatten.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompFlatModelNotValid CompFlatModelNotValid}</td>
<td class=\'meaning\'>Flat model not valid.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompLineNumbersUnreliable CompLineNumbersUnreliable}</td>
<td class=\'meaning\'>Line numbers unreliable.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompFlatteningNotRecognisedReqd CompFlatteningNotRecognisedReqd}</td>
<td class=\'meaning\'>Flattening not implemented for required package.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompFlatteningNotRecognisedNotReqd CompFlatteningNotRecognisedNotReqd}</td>
<td class=\'meaning\'>Flattening not implemented for unrequired package.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompFlatteningNotImplementedNotReqd CompFlatteningNotImplementedNotReqd}</td>
<td class=\'meaning\'>Flattening not implemented for unrequired package.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompFlatteningNotImplementedReqd CompFlatteningNotImplementedReqd}</td>
<td class=\'meaning\'>Flattening not implemented for required package.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompFlatteningWarning CompFlatteningWarning}</td>
<td class=\'meaning\'>Flattening reference may come from package.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompDeprecatedDeleteFunction CompDeprecatedDeleteFunction}</td>
<td class=\'meaning\'>The performDeletions functions is deprecated.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompDeprecatedReplaceFunction CompDeprecatedReplaceFunction}</td>
<td class=\'meaning\'>The performReplacementsAndConversions fuctions is deprecated.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompDeletedReplacement CompDeletedReplacement}</td>
<td class=\'meaning\'>Element deleted before a subelement could be replaced.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompIdRefMayReferenceUnknownPackage CompIdRefMayReferenceUnknownPackage}</td>
<td class=\'meaning\'>The \'comp:idRef\' attribute must be the \'id\' of a model element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#CompMetaIdRefMayReferenceUnknownPkg CompMetaIdRefMayReferenceUnknownPkg}</td>
<td class=\'meaning\'>The \'comp:metaIdRef\' attribute must be the \'metaid\' of a model element</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcUnknown FbcUnknown}</td>
<td class=\'meaning\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcNSUndeclared FbcNSUndeclared}</td>
<td class=\'meaning\'>The fbc ns is not correctly declared</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcElementNotInNs FbcElementNotInNs}</td>
<td class=\'meaning\'>Element not in fbc namespace</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcDuplicateComponentId FbcDuplicateComponentId}</td>
<td class=\'meaning\'>Duplicate \'id\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcSBMLSIdSyntax FbcSBMLSIdSyntax}</td>
<td class=\'meaning\'>Invalid \'id\' attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcAttributeRequiredMissing FbcAttributeRequiredMissing}</td>
<td class=\'meaning\'>Required fbc:required attribute on <code>&lt;sbml&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcAttributeRequiredMustBeBoolean FbcAttributeRequiredMustBeBoolean}</td>
<td class=\'meaning\'>The fbc:required attribute must be Boolean</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcRequiredFalse FbcRequiredFalse}</td>
<td class=\'meaning\'>The fbc:required attribute must be \'false\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcOnlyOneEachListOf FbcOnlyOneEachListOf}</td>
<td class=\'meaning\'>One of each list of allowed</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcNoEmptyListOfs FbcNoEmptyListOfs}</td>
<td class=\'meaning\'>ListOf elements cannot be empty</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcLOFluxBoundsAllowedElements FbcLOFluxBoundsAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on ListOfFluxBounds</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcLOObjectivesAllowedElements FbcLOObjectivesAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on ListOfObjectives</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcLOFluxBoundsAllowedAttributes FbcLOFluxBoundsAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on ListOfFluxBounds</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcLOObjectivesAllowedAttributes FbcLOObjectivesAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on ListOfObjectives</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcActiveObjectiveSyntax FbcActiveObjectiveSyntax}</td>
<td class=\'meaning\'>Type of activeObjective attribute</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcActiveObjectiveRefersObjective FbcActiveObjectiveRefersObjective}</td>
<td class=\'meaning\'>ActiveObjective must reference Objective</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcSpeciesAllowedL3Attributes FbcSpeciesAllowedL3Attributes}</td>
<td class=\'meaning\'>Species allowed attributes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcSpeciesChargeMustBeInteger FbcSpeciesChargeMustBeInteger}</td>
<td class=\'meaning\'>Charge must be integer</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcSpeciesFormulaMustBeString FbcSpeciesFormulaMustBeString}</td>
<td class=\'meaning\'>Chemical formula must be string</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxBoundAllowedL3Attributes FbcFluxBoundAllowedL3Attributes}</td>
<td class=\'meaning\'><code>&lt;fluxBound&gt;</code> may only have \'metaId\' and \'sboTerm\' from L3 namespace</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxBoundAllowedElements FbcFluxBoundAllowedElements}</td>
<td class=\'meaning\'><code>&lt;fluxBound&gt;</code> may only have <code>&lt;notes&gt;</code> and <code>&lt;annotations&gt;</code> from L3 Core</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxBoundRequiredAttributes FbcFluxBoundRequiredAttributes}</td>
<td class=\'meaning\'>Invalid attribute found on <code>&lt;fluxBound&gt;</code> object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxBoundRectionMustBeSIdRef FbcFluxBoundRectionMustBeSIdRef}</td>
<td class=\'meaning\'>Datatype for \'fbc:reaction\' must be SIdRef</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxBoundNameMustBeString FbcFluxBoundNameMustBeString}</td>
<td class=\'meaning\'>The attribute \'fbc:name\' must be of the data type string</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxBoundOperationMustBeEnum FbcFluxBoundOperationMustBeEnum}</td>
<td class=\'meaning\'>The attribute \'fbc:operation\' must be of data type FbcOperation</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxBoundValueMustBeDouble FbcFluxBoundValueMustBeDouble}</td>
<td class=\'meaning\'>The attribute \'fbc:value\' must be of the data type double</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxBoundReactionMustExist FbcFluxBoundReactionMustExist}</td>
<td class=\'meaning\'>\'fbc:reaction\' must refer to valid reaction</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxBoundsForReactionConflict FbcFluxBoundsForReactionConflict}</td>
<td class=\'meaning\'>Conflicting set of FluxBounds for a reaction</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcObjectiveAllowedL3Attributes FbcObjectiveAllowedL3Attributes}</td>
<td class=\'meaning\'><code>&lt;objective&gt;</code> may only have \'metaId\' and \'sboTerm\' from L3 namespace</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcObjectiveAllowedElements FbcObjectiveAllowedElements}</td>
<td class=\'meaning\'><code>&lt;objective&gt;</code> may only have <code>&lt;notes&gt;</code> and <code>&lt;annotations&gt;</code> from L3 Core</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcObjectiveRequiredAttributes FbcObjectiveRequiredAttributes}</td>
<td class=\'meaning\'>Invalid attribute found on <code>&lt;objective&gt;</code> object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcObjectiveNameMustBeString FbcObjectiveNameMustBeString}</td>
<td class=\'meaning\'>The attribute \'fbc:name\' must be of the data type string</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcObjectiveTypeMustBeEnum FbcObjectiveTypeMustBeEnum}</td>
<td class=\'meaning\'>The attribute \'fbc:type\' must be of data type FbcType.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcObjectiveOneListOfObjectives FbcObjectiveOneListOfObjectives}</td>
<td class=\'meaning\'>An <code>&lt;objective&gt;</code> must have one <code>&lt;listOfFluxObjectives&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcObjectiveLOFluxObjMustNotBeEmpty FbcObjectiveLOFluxObjMustNotBeEmpty}</td>
<td class=\'meaning\'><code>&lt;listOfFluxObjectives&gt;</code> subobject must not be empty</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcObjectiveLOFluxObjOnlyFluxObj FbcObjectiveLOFluxObjOnlyFluxObj}</td>
<td class=\'meaning\'>Invalid element found in <code>&lt;listOfFluxObjectives&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcObjectiveLOFluxObjAllowedAttribs FbcObjectiveLOFluxObjAllowedAttribs}</td>
<td class=\'meaning\'><code>&lt;listOfFluxObjectives&gt;</code> may only have \'metaId\' and \'sboTerm\' from L3 core</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxObjectAllowedL3Attributes FbcFluxObjectAllowedL3Attributes}</td>
<td class=\'meaning\'><code>&lt;fluxObjective&gt;</code> may only have \'metaId\' and \'sboTerm\' from L3 namespace</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxObjectAllowedElements FbcFluxObjectAllowedElements}</td>
<td class=\'meaning\'><code>&lt;fluxObjective&gt;</code> may only have <code>&lt;notes&gt;</code> and <code>&lt;annotations&gt;</code> from L3 Core</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxObjectRequiredAttributes FbcFluxObjectRequiredAttributes}</td>
<td class=\'meaning\'>Invalid attribute found on <code>&lt;fluxObjective&gt;</code> object</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxObjectNameMustBeString FbcFluxObjectNameMustBeString}</td>
<td class=\'meaning\'>The attribute \'fbc:name\' must be of the data type string</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxObjectReactionMustBeSIdRef FbcFluxObjectReactionMustBeSIdRef}</td>
<td class=\'meaning\'>Datatype for \'fbc:reaction\' must be SIdRef</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxObjectReactionMustExist FbcFluxObjectReactionMustExist}</td>
<td class=\'meaning\'>\'fbc:reaction\' must refer to valid reaction</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#FbcFluxObjectCoefficientMustBeDouble FbcFluxObjectCoefficientMustBeDouble}</td>
<td class=\'meaning\'>The attribute \'fbc:coefficient\' must be of the data type double</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualUnknown QualUnknown}</td>
<td class=\'meaning\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualNSUndeclared QualNSUndeclared}</td>
<td class=\'meaning\'>The qual ns is not correctly declared</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualElementNotInNs QualElementNotInNs}</td>
<td class=\'meaning\'>Element not in qual namespace</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualFunctionTermBool QualFunctionTermBool}</td>
<td class=\'meaning\'>FunctionTerm should return boolean</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualMathCSymbolDisallowed QualMathCSymbolDisallowed}</td>
<td class=\'meaning\'>CSymbol time or delay not allowed</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-warning\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualDuplicateComponentId QualDuplicateComponentId}</td>
<td class=\'meaning\'>Duplicate \'id\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualAttributeRequiredMissing QualAttributeRequiredMissing}</td>
<td class=\'meaning\'>Required qual:required attribute on <code>&lt;sbml&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualAttributeRequiredMustBeBoolean QualAttributeRequiredMustBeBoolean}</td>
<td class=\'meaning\'>The qual:required attribute must be Boolean</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualRequiredTrueIfTransitions QualRequiredTrueIfTransitions}</td>
<td class=\'meaning\'>The qual:required attribute must be \'true\' if math changes</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOneListOfTransOrQS QualOneListOfTransOrQS}</td>
<td class=\'meaning\'>Only one <code>&lt;listOfTransitions&gt;</code> or <code>&lt;listOfQualitativeSpeciesgt;</code> allowed.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualEmptyLONotAllowed QualEmptyLONotAllowed}</td>
<td class=\'meaning\'>Empty <code>&lt;listOfTransitions&gt;</code> or <code>&lt;listOfQualitativeSpeciesgt;</code> not allowed.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualLOTransitiondAllowedElements QualLOTransitiondAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;listOfTransitions&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualLOQualSpeciesAllowedElements QualLOQualSpeciesAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;listOfTransitions&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualLOQualSpeciesAllowedAttributes QualLOQualSpeciesAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfQualitativeSpeciesgt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualLOTransitionsAllowedAttributes QualLOTransitionsAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfTransitions&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualQualSpeciesAllowedCoreAttributes QualQualSpeciesAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;qualitativeSpeciesgt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualQualSpeciesAllowedElements QualQualSpeciesAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;qualitativeSpeciesgt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualQualSpeciesAllowedAttributes QualQualSpeciesAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;qualitativeSpeciesgt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualConstantMustBeBool QualConstantMustBeBool}</td>
<td class=\'meaning\'>Attribute \'constant\' on <code>&lt;qualitativeSpeciesgt;</code> must be boolean.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualNameMustBeString QualNameMustBeString}</td>
<td class=\'meaning\'>Attribute \'name\' on <code>&lt;qualitativeSpeciesgt;</code> must be string.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInitialLevelMustBeInt QualInitialLevelMustBeInt}</td>
<td class=\'meaning\'>Attribute \'initialLevel\' on <code>&lt;qualitativeSpeciesgt;</code> must be integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualMaxLevelMustBeInt QualMaxLevelMustBeInt}</td>
<td class=\'meaning\'>Attribute \'maxLevel\' on <code>&lt;qualitativeSpeciesgt;</code> must be integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualCompartmentMustReferExisting QualCompartmentMustReferExisting}</td>
<td class=\'meaning\'>Attribute \'compartment\' on <code>&lt;qualitativeSpeciesgt;</code> must reference compartment.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInitialLevelCannotExceedMax QualInitialLevelCannotExceedMax}</td>
<td class=\'meaning\'>Attribute \'initialLevel\' on <code>&lt;qualitativeSpeciesgt;</code> cannot exceed maxLevel.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualConstantQSCannotBeOutput QualConstantQSCannotBeOutput}</td>
<td class=\'meaning\'>Constant <code>&lt;qualitativeSpeciesgt;</code> cannot be an Output.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualQSAssignedOnlyOnce QualQSAssignedOnlyOnce}</td>
<td class=\'meaning\'>A <code>&lt;qualitativeSpeciesgt;</code> can only be assigned once.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInitalLevelNotNegative QualInitalLevelNotNegative}</td>
<td class=\'meaning\'>Attribute \'initialLevel\' on <code>&lt;qualitativeSpeciesgt;</code> cannot be negative.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualMaxLevelNotNegative QualMaxLevelNotNegative}</td>
<td class=\'meaning\'>Attribute \'maxLevel\' on <code>&lt;qualitativeSpeciesgt;</code> cannot be negative.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionAllowedCoreAttributes QualTransitionAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;transition&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionAllowedElements QualTransitionAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;transition&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionAllowedAttributes QualTransitionAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;transition&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionNameMustBeString QualTransitionNameMustBeString}</td>
<td class=\'meaning\'>Attribute \'name\' on <code>&lt;transition&gt;</code> must be string.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionLOElements QualTransitionLOElements}</td>
<td class=\'meaning\'>ListOf elements on <code>&lt;transition&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionEmptyLOElements QualTransitionEmptyLOElements}</td>
<td class=\'meaning\'>ListOf elements on <code>&lt;transition&gt;</code> not empty.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionLOInputElements QualTransitionLOInputElements}</td>
<td class=\'meaning\'>Elements on <code>&lt;listOfInputs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionLOOutputElements QualTransitionLOOutputElements}</td>
<td class=\'meaning\'>Elements on <code>&lt;listOfOutputs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionLOFuncTermElements QualTransitionLOFuncTermElements}</td>
<td class=\'meaning\'>Elements on <code>&lt;listOfFunctionTerms&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionLOInputAttributes QualTransitionLOInputAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfInputs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionLOOutputAttributes QualTransitionLOOutputAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfOutputs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionLOFuncTermAttributes QualTransitionLOFuncTermAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfFunctionTerms&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionLOFuncTermExceedMax QualTransitionLOFuncTermExceedMax}</td>
<td class=\'meaning\'><code>&lt;listOfFunctionTerms&gt;</code> cannot make qualitativeSpecies exceed maxLevel.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualTransitionLOFuncTermNegative QualTransitionLOFuncTermNegative}</td>
<td class=\'meaning\'><code>&lt;listOfFunctionTerms&gt;</code> cannot make qualitativeSpecies negative.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputAllowedCoreAttributes QualInputAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;input&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputAllowedElements QualInputAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;input&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputAllowedAttributes QualInputAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;input&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputNameMustBeString QualInputNameMustBeString}</td>
<td class=\'meaning\'>Attribute \'name\' on <code>&lt;input&gt;</code> must be string.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputSignMustBeSignEnum QualInputSignMustBeSignEnum}</td>
<td class=\'meaning\'>Attribute \'sign\' on <code>&lt;input&gt;</code> must be enum.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputTransEffectMustBeInputEffect QualInputTransEffectMustBeInputEffect}</td>
<td class=\'meaning\'>Attribute \'transitionEffect\' on <code>&lt;input&gt;</code> must be enum.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputThreshMustBeInteger QualInputThreshMustBeInteger}</td>
<td class=\'meaning\'>Attribute \'thresholdLevel\' on <code>&lt;input&gt;</code> must be non negative integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputQSMustBeExistingQS QualInputQSMustBeExistingQS}</td>
<td class=\'meaning\'>Attribute \'qualitativeSpecies\' on <code>&lt;input&gt;</code> must refer to existing</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputConstantCannotBeConsumed QualInputConstantCannotBeConsumed}</td>
<td class=\'meaning\'>Constant <code>&lt;input&gt;</code> cannot be consumed.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualInputThreshMustBeNonNegative QualInputThreshMustBeNonNegative}</td>
<td class=\'meaning\'>Attribute \'thresholdLevel\' on <code>&lt;input&gt;</code> must be non negative integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputAllowedCoreAttributes QualOutputAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;output&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputAllowedElements QualOutputAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;output&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputAllowedAttributes QualOutputAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;output&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputNameMustBeString QualOutputNameMustBeString}</td>
<td class=\'meaning\'>Attribute \'name\' on <code>&lt;output&gt;</code> must be string.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputTransEffectMustBeOutput QualOutputTransEffectMustBeOutput}</td>
<td class=\'meaning\'>Attribute \'transitionEffect\' on <code>&lt;output&gt;</code> must be enum.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputLevelMustBeInteger QualOutputLevelMustBeInteger}</td>
<td class=\'meaning\'>Attribute \'outputLevel\' on <code>&lt;output&gt;</code> must be non negative integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputQSMustBeExistingQS QualOutputQSMustBeExistingQS}</td>
<td class=\'meaning\'>Attribute \'qualitativeSpecies\' on <code>&lt;output&gt;</code> must refer to existing</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputConstantMustBeFalse QualOutputConstantMustBeFalse}</td>
<td class=\'meaning\'>Constant \'qualitativeSpecies\' cannot be <code>&lt;output&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputProductionMustHaveLevel QualOutputProductionMustHaveLevel}</td>
<td class=\'meaning\'><code>&lt;output&gt;</code> being produced must have level</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualOutputLevelMustBeNonNegative QualOutputLevelMustBeNonNegative}</td>
<td class=\'meaning\'>Attribute \'outputLevel\' on <code>&lt;output&gt;</code> must be non negative integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualDefaultTermAllowedCoreAttributes QualDefaultTermAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;defaultTerm&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualDefaultTermAllowedElements QualDefaultTermAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;defaultTerm&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualDefaultTermAllowedAttributes QualDefaultTermAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;defaultTerm&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualDefaultTermResultMustBeInteger QualDefaultTermResultMustBeInteger}</td>
<td class=\'meaning\'>Attribute \'resultLevel\' on <code>&lt;defaultTerm&gt;</code> must be non negative integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualDefaultTermResultMustBeNonNeg QualDefaultTermResultMustBeNonNeg}</td>
<td class=\'meaning\'>Attribute \'resultLevel\' on <code>&lt;defaultTerm&gt;</code> must be non negative integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualFuncTermAllowedCoreAttributes QualFuncTermAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;functionTerm&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualFuncTermAllowedElements QualFuncTermAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;functionTerm&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualFuncTermAllowedAttributes QualFuncTermAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;functionTerm&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualFuncTermOnlyOneMath QualFuncTermOnlyOneMath}</td>
<td class=\'meaning\'>Only one <code>&lt;math&gt;</code> on <code>&lt;functionTerm&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualFuncTermResultMustBeInteger QualFuncTermResultMustBeInteger}</td>
<td class=\'meaning\'>Attribute \'resultLevel\' on <code>&lt;functionTerm&gt;</code> must be non negative integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#QualFuncTermResultMustBeNonNeg QualFuncTermResultMustBeNonNeg}</td>
<td class=\'meaning\'>Attribute \'resultLevel\' on <code>&lt;functionTerm&gt;</code> must be non negative integer.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutUnknownError LayoutUnknownError}</td>
<td class=\'meaning\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutNSUndeclared LayoutNSUndeclared}</td>
<td class=\'meaning\'>The layout ns is not correctly declared</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutElementNotInNs LayoutElementNotInNs}</td>
<td class=\'meaning\'>Element not in layout namespace</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutDuplicateComponentId LayoutDuplicateComponentId}</td>
<td class=\'meaning\'>Duplicate \'id\' attribute value</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSIdSyntax LayoutSIdSyntax}</td>
<td class=\'meaning\'>\'id\' attribute incorrect syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutXsiTypeAllowedLocations LayoutXsiTypeAllowedLocations}</td>
<td class=\'meaning\'>\'xsi:type\' allowed locations</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutXsiTypeSyntax LayoutXsiTypeSyntax}</td>
<td class=\'meaning\'>\'xsi:type\' attribute incorrect syntax</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutAttributeRequiredMissing LayoutAttributeRequiredMissing}</td>
<td class=\'meaning\'>Required layout:required attribute on <code>&lt;sbml&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutAttributeRequiredMustBeBoolean LayoutAttributeRequiredMustBeBoolean}</td>
<td class=\'meaning\'>The layout:required attribute must be Boolean</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRequiredFalse LayoutRequiredFalse}</td>
<td class=\'meaning\'>The layout:required attribute must be \'false\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutOnlyOneLOLayouts LayoutOnlyOneLOLayouts}</td>
<td class=\'meaning\'>Only one listOfLayouts on <code>&lt;model&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOLayoutsNotEmpty LayoutLOLayoutsNotEmpty}</td>
<td class=\'meaning\'>ListOf elements cannot be empty</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOLayoutsAllowedElements LayoutLOLayoutsAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on ListOfLayouts</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOLayoutsAllowedAttributes LayoutLOLayoutsAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on ListOfLayouts</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLayoutAllowedElements LayoutLayoutAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on Layout</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLayoutAllowedCoreAttributes LayoutLayoutAllowedCoreAttributes}</td>
<td class=\'meaning\'>Allowed core attributes on Layout</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutOnlyOneEachListOf LayoutOnlyOneEachListOf}</td>
<td class=\'meaning\'>Only one each listOf on <code>&lt;layout&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutNoEmptyListOfs LayoutNoEmptyListOfs}</td>
<td class=\'meaning\'>ListOf elements cannot be empty</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLayoutAllowedAttributes LayoutLayoutAllowedAttributes}</td>
<td class=\'meaning\'><code>&lt;layout&gt;</code> must have \'id\' and may have \'name\'</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLayoutNameMustBeString LayoutLayoutNameMustBeString}</td>
<td class=\'meaning\'>\'name\' must be string</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOCompGlyphAllowedAttributes LayoutLOCompGlyphAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfCompartmentGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOCompGlyphAllowedElements LayoutLOCompGlyphAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;listOfCompartmentGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOSpeciesGlyphAllowedAttributes LayoutLOSpeciesGlyphAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfSpeciesGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOSpeciesGlyphAllowedElements LayoutLOSpeciesGlyphAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;listOfSpeciesGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLORnGlyphAllowedAttributes LayoutLORnGlyphAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfReactionGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLORnGlyphAllowedElements LayoutLORnGlyphAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;listOfReactionGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOAddGOAllowedAttribut LayoutLOAddGOAllowedAttribut}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfAdditionalGraphicalObjectGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOAddGOAllowedElements LayoutLOAddGOAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;listOfAdditionalGraphicalObjectGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLayoutMustHaveDimensions LayoutLayoutMustHaveDimensions}</td>
<td class=\'meaning\'>Layout must have <code>&lt;dimensions&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOTextGlyphAllowedAttributes LayoutLOTextGlyphAllowedAttributes}</td>
<td class=\'meaning\'>Attributes allowed on <code>&lt;listOfTextGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOTextGlyphAllowedElements LayoutLOTextGlyphAllowedElements}</td>
<td class=\'meaning\'>Elements allowed on <code>&lt;listOfTextGlyphs&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGOAllowedCoreElements LayoutGOAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;graphicalObject&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGOAllowedCoreAttributes LayoutGOAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;graphicalObject&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGOAllowedElements LayoutGOAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;graphicalObject&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGOAllowedAttributes LayoutGOAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;graphicalObject&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGOMetaIdRefMustBeIDREF LayoutGOMetaIdRefMustBeIDREF}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must be IDREF.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGOMetaIdRefMustReferenceObject LayoutGOMetaIdRefMustReferenceObject}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must reference existing object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGOMustContainBoundingBox LayoutGOMustContainBoundingBox}</td>
<td class=\'meaning\'>A <code>&lt;graphicalObject&gt;</code> must contain a <code>&lt;boundingBox&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGAllowedCoreElements LayoutCGAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;compartmentGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGAllowedCoreAttributes LayoutCGAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;compartmentGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGAllowedElements LayoutCGAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;compartmentGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGAllowedAttributes LayoutCGAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;compartmentGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGMetaIdRefMustBeIDREF LayoutCGMetaIdRefMustBeIDREF}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must be IDREF.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGMetaIdRefMustReferenceObject LayoutCGMetaIdRefMustReferenceObject}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must reference existing object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGCompartmentSyntax LayoutCGCompartmentSyntax}</td>
<td class=\'meaning\'>CompartmentGlyph \'compartment\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGCompartmentMustRefComp LayoutCGCompartmentMustRefComp}</td>
<td class=\'meaning\'>CompartmentGlyph compartment must reference existing compartment.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGNoDuplicateReferences LayoutCGNoDuplicateReferences}</td>
<td class=\'meaning\'>CompartmentGlyph cannot reference two objects.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCGOrderMustBeDouble LayoutCGOrderMustBeDouble}</td>
<td class=\'meaning\'>CompartmentGlyph order must be double.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSGAllowedCoreElements LayoutSGAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;speciesGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSGAllowedCoreAttributes LayoutSGAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;speciesGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSGAllowedElements LayoutSGAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;speciesGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSGAllowedAttributes LayoutSGAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;speciesGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSGMetaIdRefMustBeIDREF LayoutSGMetaIdRefMustBeIDREF}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must be IDREF.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSGMetaIdRefMustReferenceObject LayoutSGMetaIdRefMustReferenceObject}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must reference existing object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSGSpeciesSyntax LayoutSGSpeciesSyntax}</td>
<td class=\'meaning\'>SpeciesGlyph \'species\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSGSpeciesMustRefSpecies LayoutSGSpeciesMustRefSpecies}</td>
<td class=\'meaning\'>SpeciesGlyph species must reference existing species.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSGNoDuplicateReferences LayoutSGNoDuplicateReferences}</td>
<td class=\'meaning\'>SpeciesGlyph cannot reference two objects.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRGAllowedCoreElements LayoutRGAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;reactionGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRGAllowedCoreAttributes LayoutRGAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;reactionGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRGAllowedElements LayoutRGAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;reactionGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRGAllowedAttributes LayoutRGAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;reactionGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRGMetaIdRefMustBeIDREF LayoutRGMetaIdRefMustBeIDREF}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must be IDREF.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRGMetaIdRefMustReferenceObject LayoutRGMetaIdRefMustReferenceObject}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must reference existing object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRGReactionSyntax LayoutRGReactionSyntax}</td>
<td class=\'meaning\'>ReactionGlyph \'reaction\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRGReactionMustRefReaction LayoutRGReactionMustRefReaction}</td>
<td class=\'meaning\'>ReactionGlyph reaction must reference existing reaction.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutRGNoDuplicateReferences LayoutRGNoDuplicateReferences}</td>
<td class=\'meaning\'>ReactionGlyph cannot reference two objects.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOSpeciesRefGlyphAllowedElements LayoutLOSpeciesRefGlyphAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on ListOfSpeciesReferenceGlyphs</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOSpeciesRefGlyphAllowedAttribs LayoutLOSpeciesRefGlyphAllowedAttribs}</td>
<td class=\'meaning\'>Allowed attributes on ListOfSpeciesReferenceGlyphs</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOSpeciesRefGlyphNotEmpty LayoutLOSpeciesRefGlyphNotEmpty}</td>
<td class=\'meaning\'>ListOfSpeciesReferenceGlyphs not empty</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGGAllowedCoreElements LayoutGGAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;generalGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGGAllowedCoreAttributes LayoutGGAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;generalGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGGAllowedElements LayoutGGAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;generalGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGGAllowedAttributes LayoutGGAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;generalGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGGMetaIdRefMustBeIDREF LayoutGGMetaIdRefMustBeIDREF}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must be IDREF.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGGMetaIdRefMustReferenceObject LayoutGGMetaIdRefMustReferenceObject}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must reference existing object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGGReferenceSyntax LayoutGGReferenceSyntax}</td>
<td class=\'meaning\'>GeneralGlyph \'reference\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGGReferenceMustRefObject LayoutGGReferenceMustRefObject}</td>
<td class=\'meaning\'>GeneralGlyph \'reference\' must reference existing element.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutGGNoDuplicateReferences LayoutGGNoDuplicateReferences}</td>
<td class=\'meaning\'>GeneralGlyph cannot reference two objects.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOReferenceGlyphAllowedElements LayoutLOReferenceGlyphAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on ListOfReferenceGlyphs</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOReferenceGlyphAllowedAttribs LayoutLOReferenceGlyphAllowedAttribs}</td>
<td class=\'meaning\'>Allowed attributes on ListOfReferenceGlyphs</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOSubGlyphAllowedElements LayoutLOSubGlyphAllowedElements}</td>
<td class=\'meaning\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOSubGlyphAllowedAttribs LayoutLOSubGlyphAllowedAttribs}</td>
<td class=\'meaning\'>Allowed attributes on ListOfSubGlyphs</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGAllowedCoreElements LayoutTGAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;textGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGAllowedCoreAttributes LayoutTGAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;textGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGAllowedElements LayoutTGAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;textGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGAllowedAttributes LayoutTGAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;textGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGMetaIdRefMustBeIDREF LayoutTGMetaIdRefMustBeIDREF}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must be IDREF.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGMetaIdRefMustReferenceObject LayoutTGMetaIdRefMustReferenceObject}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must reference existing object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGOriginOfTextSyntax LayoutTGOriginOfTextSyntax}</td>
<td class=\'meaning\'>TextGlyph \'originOfText\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGOriginOfTextMustRefObject LayoutTGOriginOfTextMustRefObject}</td>
<td class=\'meaning\'>TextGlyph \'originOfText\' must reference existing element.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGNoDuplicateReferences LayoutTGNoDuplicateReferences}</td>
<td class=\'meaning\'>TextGlyph cannot reference two objects.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGGraphicalObjectSyntax LayoutTGGraphicalObjectSyntax}</td>
<td class=\'meaning\'>TextGlyph \'graphicalObject\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGGraphicalObjectMustRefObject LayoutTGGraphicalObjectMustRefObject}</td>
<td class=\'meaning\'>TextGlyph \'graphicalObject\' must reference existing element.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutTGTextMustBeString LayoutTGTextMustBeString}</td>
<td class=\'meaning\'>TextGlyph \'text\' must be string.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGAllowedCoreElements LayoutSRGAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;speciesReferenceGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGAllowedCoreAttributes LayoutSRGAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;speciesReferenceGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGAllowedElements LayoutSRGAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;speciesReferenceGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGAllowedAttributes LayoutSRGAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;speciesReferenceGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGMetaIdRefMustBeIDREF LayoutSRGMetaIdRefMustBeIDREF}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must be IDREF.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGMetaIdRefMustReferenceObject LayoutSRGMetaIdRefMustReferenceObject}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must reference existing object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGSpeciesReferenceSyntax LayoutSRGSpeciesReferenceSyntax}</td>
<td class=\'meaning\'>SpeciesReferenceGlyph \'speciesReference\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGSpeciesRefMustRefObject LayoutSRGSpeciesRefMustRefObject}</td>
<td class=\'meaning\'>SpeciesReferenceGlyph \'speciesReference\' must reference existing element.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGNoDuplicateReferences LayoutSRGNoDuplicateReferences}</td>
<td class=\'meaning\'>SpeciesReferenceGlyph cannot reference two objects.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGSpeciesGlyphSyntax LayoutSRGSpeciesGlyphSyntax}</td>
<td class=\'meaning\'>SpeciesReferenceGlyph \'speciesGlyph\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGSpeciesGlyphMustRefObject LayoutSRGSpeciesGlyphMustRefObject}</td>
<td class=\'meaning\'>SpeciesReferenceGlyph \'speciesGlyph\' must reference existing element.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutSRGRoleSyntax LayoutSRGRoleSyntax}</td>
<td class=\'meaning\'>SpeciesReferenceGlyph \'role\' must be string from enumeration.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGAllowedCoreElements LayoutREFGAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;referenceGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGAllowedCoreAttributes LayoutREFGAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;referenceGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGAllowedElements LayoutREFGAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;referenceGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGAllowedAttributes LayoutREFGAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;referenceGlyph&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGMetaIdRefMustBeIDREF LayoutREFGMetaIdRefMustBeIDREF}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must be IDREF.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGMetaIdRefMustReferenceObject LayoutREFGMetaIdRefMustReferenceObject}</td>
<td class=\'meaning\'>Layout \'metIdRef\' must reference existing object.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGReferenceSyntax LayoutREFGReferenceSyntax}</td>
<td class=\'meaning\'>ReferenceGlyph \'reference\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGReferenceMustRefObject LayoutREFGReferenceMustRefObject}</td>
<td class=\'meaning\'>ReferenceGlyph \'reference\' must reference existing element.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGNoDuplicateReferences LayoutREFGNoDuplicateReferences}</td>
<td class=\'meaning\'>ReferenceGlyph cannot reference two objects.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGGlyphSyntax LayoutREFGGlyphSyntax}</td>
<td class=\'meaning\'>ReferenceGlyph \'glyph\' must have SIdRef syntax.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGGlyphMustRefObject LayoutREFGGlyphMustRefObject}</td>
<td class=\'meaning\'>ReferenceGlyph \'glyph\' must reference existing element.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutREFGRoleSyntax LayoutREFGRoleSyntax}</td>
<td class=\'meaning\'>ReferenceGlyph \'role\' must be string.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutPointAllowedCoreElements LayoutPointAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;point&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutPointAllowedCoreAttributes LayoutPointAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;point&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutPointAllowedAttributes LayoutPointAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;point&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutPointAttributesMustBeDouble LayoutPointAttributesMustBeDouble}</td>
<td class=\'meaning\'>Layout \'x\', \'y\' and \'z\' must be double.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutBBoxAllowedCoreElements LayoutBBoxAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;boundingBox&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutBBoxAllowedCoreAttributes LayoutBBoxAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;boundingBox&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutBBoxAllowedElements LayoutBBoxAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;boundingBox&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutBBoxAllowedAttributes LayoutBBoxAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;boundingBox&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutBBoxConsistent3DDefinition LayoutBBoxConsistent3DDefinition}</td>
<td class=\'meaning\'>Layout consistent dimensions on a <code>&lt;boundingBox&gt;</code></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCurveAllowedCoreElements LayoutCurveAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;curve&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCurveAllowedCoreAttributes LayoutCurveAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;curve&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCurveAllowedElements LayoutCurveAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;curve&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCurveAllowedAttributes LayoutCurveAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;curve&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOCurveSegsAllowedAttributes LayoutLOCurveSegsAllowedAttributes}</td>
<td class=\'meaning\'>Allowed attributes on ListOfCurveSegments</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOCurveSegsAllowedElements LayoutLOCurveSegsAllowedElements}</td>
<td class=\'meaning\'>Allowed elements on ListOfCurveSegments</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLOCurveSegsNotEmpty LayoutLOCurveSegsNotEmpty}</td>
<td class=\'meaning\'>No empty ListOfCurveSegments</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLSegAllowedCoreElements LayoutLSegAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;lineSegment&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLSegAllowedCoreAttributes LayoutLSegAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;lineSegment&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLSegAllowedElements LayoutLSegAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;lineSegment&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutLSegAllowedAttributes LayoutLSegAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;lineSegment&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCBezAllowedCoreElements LayoutCBezAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;cubicBezier&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCBezAllowedCoreAttributes LayoutCBezAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;cubicBezier&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCBezAllowedElements LayoutCBezAllowedElements}</td>
<td class=\'meaning\'>Layout elements allowed on <code>&lt;cubicBezier&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutCBezAllowedAttributes LayoutCBezAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;cubicBezier&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutDimsAllowedCoreElements LayoutDimsAllowedCoreElements}</td>
<td class=\'meaning\'>Core elements allowed on <code>&lt;dimensions&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutDimsAllowedCoreAttributes LayoutDimsAllowedCoreAttributes}</td>
<td class=\'meaning\'>Core attributes allowed on <code>&lt;dimensions&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutDimsAllowedAttributes LayoutDimsAllowedAttributes}</td>
<td class=\'meaning\'>Layout attributes allowed on <code>&lt;dimensions&gt;</code>.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
<tr><td class=\'code\'>{@link libsbmlConstants#LayoutDimsAttributesMustBeDouble LayoutDimsAttributesMustBeDouble}</td>
<td class=\'meaning\'>Layout \'width\', \'height\' and \'depth\' must be double.</td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-na\'></td>
<td class=\'s-error\'></td>
</tr>
</table>
 <p>
 * <h3><a class=\'anchor\'
 * name=\'SBMLErrorCategory_t\'>Category codes associated with {@link SBMLError} objects</a></h3>
 <p>
 * As discussed above, each {@link SBMLError} object contains a value for a
 * category identifier, describing the type of issue that the {@link SBMLError}
 * object represents.  The category can be retrieved from an {@link SBMLError}
 * object using the method {@link SBMLError#getCategory()}.  The following table
 * lists each possible value and a brief description of its meaning.
 <p>
 * As is the case with the error codes, in the libSBML Java language
 * interface, the category identifiers are currently implemented as static
 * integer constants defined in the interface class
 * {@link libsbmlConstants}.
 <p>
 * The following table lists each possible value and a brief description of
 * its meaning.
 <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'4\' border=\'0\'  class=\'text-table normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th>Enumerator</td>
 *      <th>Meaning</td>
 *  </tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_SBML LIBSBML_CAT_SBML}</td><td>General error not falling into
 * another category below.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_SBML_L1_COMPAT LIBSBML_CAT_SBML_L1_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model from SBML Level&nbsp;2 to SBML
 * Level&nbsp;1.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_SBML_L2V1_COMPAT LIBSBML_CAT_SBML_L2V1_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;1.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_SBML_L2V2_COMPAT LIBSBML_CAT_SBML_L2V2_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;2.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_GENERAL_CONSISTENCY LIBSBML_CAT_GENERAL_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating general SBML constructs.  With
 * respect to the SBML specification, these concern failures in applying
 * the validation rules numbered 2xxxx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating symbol identifiers in a model.
 * With respect to the SBML specification, these concern failures in
 * applying the validation rules numbered 103xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_UNITS_CONSISTENCY LIBSBML_CAT_UNITS_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating the units of measurement on
 * quantities in a model.  With respect to the SBML specification, these
 * concern failures in applying the validation rules numbered 105xx in the
 * Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating MathML formulas in a model.  With
 * respect to the SBML specification, these concern failures in applying
 * the validation rules numbered 102xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_SBO_CONSISTENCY LIBSBML_CAT_SBO_CONSISTENCY}</td><td>Category of errors
 * that can occur while validating {@link SBO} identifiers in a model.  With
 * respect to the SBML specification, these concern failures in applying
 * the validation rules numbered 107xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_OVERDETERMINED_MODEL LIBSBML_CAT_OVERDETERMINED_MODEL}</td><td>Error in the
 * system of equations in the model: the system is overdetermined,
 * therefore violating a tenet of proper SBML.  With respect to the SBML
 * specification, this is validation rule #10601 in the SBML Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_SBML_L2V3_COMPAT LIBSBML_CAT_SBML_L2V3_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;3.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_MODELING_PRACTICE LIBSBML_CAT_MODELING_PRACTICE}</td><td>Category of
 * warnings about recommended good practices involving SBML and
 * computational modeling.  (These are tests performed by libSBML and do
 * not have equivalent SBML validation rules.)</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_INTERNAL_CONSISTENCY LIBSBML_CAT_INTERNAL_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating libSBML\'s internal representation
 * of SBML constructs. (These are tests performed by libSBML and do
 * not have equivalent SBML validation rules.)</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_SBML_L2V4_COMPAT LIBSBML_CAT_SBML_L2V4_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;4.</td></tr>
 * <tr><td>{@link libsbmlConstants#LIBSBML_CAT_SBML_L3V1_COMPAT LIBSBML_CAT_SBML_L3V1_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;3
 * Version&nbsp;1.</td></tr>
 <p>
 * </table>
 * </center>
 <p>
 * <h3><a class=\'anchor\'
 * name=\'SBMLErrorSeverity_t\'>Severity codes associated with {@link SBMLError}
 * objects</h3>
 <p>
 * In libSBML version 5.11.0
 * there are no additional severity codes beyond those defined by {@link XMLError}.
 * They are implemented as static integer constants defined in the interface
 * class <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>,
 * and have names beginning with <code>LIBSBML_SEV_</code>.
 */
"


%javamethodmodifiers SBMLError::SBMLError( const unsigned int errorId  = 0 , const unsigned int level    = SBML_DEFAULT_LEVEL , const unsigned int version  = SBML_DEFAULT_VERSION , const std::string& details  = "" , const unsigned int line     = 0 , const unsigned int column   = 0 , const unsigned int severity = LIBSBML_SEV_ERROR , const unsigned int category = LIBSBML_CAT_SBML , const std::string& package  = "core" , const unsigned int pkgVersion = 1 ) "
/**
   * Creates a new {@link SBMLError} to report that something occurred during SBML
   * processing.
   <p>
   * When a libSBML operation on SBML content results in a warning, error
   * or other diagnostic, the issue is reported as an {@link SBMLError} object.
   * {@link SBMLError} objects have identification numbers to indicate the nature
   * of the exception.  These numbers are
   * defined as longeger constants in the file
   * \'libsbmlConstants.html\'.  See the <a class=\'el\'
   * href=\'#SBMLErrorCode_t\'>top of this documentation page</a> for a table
   * listing the possible values and their meanings.  The argument
   * <code>errorId</code> to this constructor <em>can</em> be (but does not have to be) a
   * value from this set of constants.  If it 
   * <em>is</em> one of the predefined error identifiers, the {@link SBMLError} class
   * assumes the error is a low-level system or SBML layer error and
   * <em>prepends</em> a built-in, predefined error message to any string
   * passed in the argument <code>details</code> to this constructor.  In addition,
   * all the predefined error identifiers have associated values for the
   * <code>severity</code> and <code>category</code> codes, and these fields are filled-in using
   * the libSBML defaults for each different error identifier. 
   <p>
   * If the error identifier <code>errorId</code> is a number greater than 99999, the
   * {@link SBMLError} class assumes the error was generated from another part of
   * the software and does not do additional filling in of values beyond
   * the default in the constructor itself.  This allows {@link SBMLError} to serve
   * as a base class for other errors, such as for user-defined validation
   * rules (see Validator).  Callers should fill in all the parameters with
   * suitable values if generating errors with codes greater than 99999 to
   * make maximum use of the {@link SBMLError} facilities.
   <p>
   * As mentioned above,
   * there are additional constants defined for <a class=\'el\'
   * href=\'#SBMLErrorSeverity_t\'>standard severity</a> and <a class=\'el\'
   * href=\'#SBMLErrorCategory_t\'>standard category</a> codes, and every predefined
   * error in libSBML has an associated value for severity and category taken
   * from these predefined sets.  These constants have symbol names
   * prefixed with <code>LIBSBML_SEV_</code> and <code>LIBSBML_CAT_</code>,
   * respectively.  If the value of <code>errorId</code> is one of the standard error
   * codes, callers do not need to fill in <code>severity</code> and <code>category</code> in a
   * call to this constructor.  Conversely, if <code>errorId</code> is not an existing
   * SBML-level error code, callers can use other values for <code>severity</code> and
   * <code>category</code>. 
   <p>
   * Please see the top of the documentation for {@link SBMLError} for a longer
   * discussion of the possible error codes, their meanings, and their
   * applicability to different combinations of Level+Version of SBML.
   <p>
   * @param errorId a long integer, the identification number of the error.
   <p>
   * @param level the SBML Level of the SBML model
   <p>
   * @param version the SBML Version within the Level of the SBML model
   <p>
   * @param details a string containing additional details about the error.
   * If the error code in <code>errorId</code> is one that is recognized by {@link SBMLError},
   * the given message is <em>appended</em> to a predefined message associated
   * with the given code.  If the error code is not recognized, the message
   * is stored as-is as the text of the error.
   <p>
   * @param line a long integer, the line number at which the error occured.
   <p>
   * @param column a long integer, the column number at which the error occured.
   <p>
   * @param severity an integer indicating severity of the error.
   <p>
   * @param category an integer indicating the category to which the error
   * belongs.
   <p>
   * @param package the SBML Level package involved.
   <p>
   * @param pkgVersion the version of the <code>package</code>.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers SBMLError::SBMLError(const SBMLError& orig) "
/**
   * Copy constructor; creates a copy of this {@link SBMLError}.
   */ public
";


%javamethodmodifiers SBMLError::stringForSeverity "
/** * @internal */ public
";


%javamethodmodifiers SBMLError::stringForCategory "
/** * @internal */ public
";


%javamethodmodifiers SBMLError::adjustErrorId(unsigned int offset) "
/** * @internal */ public
";


%typemap(javaimports) CVTerm "
/** 
 *  A MIRIAM-compliant controlled vocabulary term.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
 * format for annotating models when (a) referring to controlled vocabulary
 * terms and database identifiers that define and describe biological and
 * biochemical entities, and (b) describing the creator of a model and the
 * model\'s modification history.  This SBML format is a concrete syntax that
 * conforms to the guidelines of MIRIAM (<a target=\'_blank\'
 * href=\'http://www.nature.com/nbt/journal/v23/n12/abs/nbt1156.html\'>\'Minimum
 * Information Requested in the Annotation of biochemical Models\'</a>,
 * <i>Nature Biotechnology</i>, vol. 23, no. 12, Dec. 2005).  The format uses
 * a subset of W3C RDF (<a target=\'_blank\'
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  In order
 * to help application developers work with annotations in this format,
 * libSBML provides several helper classes that provide higher-level
 * interfaces to the data elements; these classes include {@link CVTerm},
 * {@link ModelCreator}, {@link ModelHistory}, {@link RDFAnnotationParser}, and {@link Date}.
 <p>
 * <h2>Components of an SBML annotation</h2>
 <p>
 * The SBML annotation format consists of RDF-based content placed inside an
 * <code>&lt;annotation&gt;</code> element attached to an SBML component such
 * as {@link Species}, {@link Compartment}, etc.  A small change was introduced in SBML
 * Level&nbsp;2 Version&nbsp;5 and SBML Level&nbsp;3 Version&nbsp;2 to permit
 * nested annotations: lower Versions of the SBML specifications did not
 * explicitly allow this.  We first describe the different parts of SBML
 * annotations in XML form for SBML Level&nbsp;2 below Version&nbsp;5 and
 * SBML Level&nbsp;3 below Version&nbsp;2:
 <p>
 <pre class=\'fragment\'>
 &lt;<span style=\'background-color: #bbb\'>SBML_ELEMENT</span> <span style=\'background-color: #d0eed0\'>+++</span> metaid=&quot;<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot; <span style=\'background-color: #d0eed0\'>+++</span>&gt;
   <span style=\'background-color: #d0eed0\'>+++</span>
   &lt;annotation&gt;
     <span style=\'background-color: #d0eed0\'>+++</span>
     &lt;rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'
              xmlns:dcterm=\'http://purl.org/dc/terms/\'
              xmlns:vcard=\'http://www.w3.org/2001/vcard-rdf/3.0#\'
              xmlns:bqbiol=\'http://biomodels.net/biology-qualifiers/\'
              xmlns:bqmodel=\'http://biomodels.net/model-qualifiers/\' &gt;
       &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
         <span style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span>
         &lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
           &lt;rdf:Bag&gt;
             &lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>URI</span>&quot; /&gt;
             <span style=\'background-color: #edd\'>...</span>
           &lt;/rdf:Bag&gt;
         &lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
         <span style=\'background-color: #edd\'>...</span>
       &lt;/rdf:Description&gt;
       <span style=\'background-color: #d0eed0\'>+++</span>
     &lt;/rdf:RDF&gt;
     <span style=\'background-color: #d0eed0\'>+++</span>
   &lt;/annotation&gt;
   <span style=\'background-color: #d0eed0\'>+++</span>
 &lt;/<span style=\'background-color: #bbb\'>SBML_ELEMENT</span>&gt;
 </pre>
 <p>
 * In the template above, the placeholder
 * <span class=\'code\' style=\'background-color: #bbb\'>SBML_ELEMENT</span> stands for
 * the XML tag name of an SBML model component (e.g., <code>model</code>,
 * <code>reaction</code>, etc.) and the placeholder 
 * <span class=\'code\' style=\'border-bottom: 1px solid black\'>meta id</span>
 * stands for the element\'s meta identifier, which is a field available
 * on all SBML components derived from the {@link SBase} base object class.
 * The <span style=\'border-bottom: 2px dotted #888\'>dotted</span>
 * portions are optional, the symbol
 * <span class=\'code\' style=\'background-color: #d0eed0\'>+++</span> is a placeholder
 * for either no content or valid XML content that is not defined by
 * this annotation scheme, and the ellipses
 * <span class=\'code\' style=\'background-color: #edd\'>...</span>
 * are placeholders for zero or more elements of the same form as the
 * immediately preceding element.  The optional content
 * <span class=\'code\' style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span>
 * is a creation and modification history; in libSBML, this is stored
 * using {@link ModelHistory} objects.
 <p>
 * The placeholder <span class=\'code\' style=\'background-color:
 * #bbb\'>RELATION_ELEMENT</span> refers to a BioModels.net qualifier element
 * name.  This is an element in either the XML namespace
 * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
 * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code> (for
 * biological qualifier).  Note that these namespace URIs are only labels,
 * and not actual Web locations, which means you cannot visit an address such
 * as <code>\'http://biomodels.net/model-qualifiers\'</code> in your browser or
 * try to have your application access it.  
 <p>
 * The <span class=\'code\' style=\'background-color: #d0d0ee\'>URI</span> is a
 * required data value that uniquely identifies a resource and data within
 * that resource to which the annotation refers.  Again, being URIs, these do
 * not refer to physical Web locations; nevertheless, applications will often
 * want a means of finding the resource to which a given <span class=\'code\'
 * style=\'background-color: #d0d0ee\'>URI</span> refers.  Providing the
 * facilities for this task is the purpose of MIRIAM Resources, described in
 * detail online at <a target=\'_blank\'
 * href=\'http://biomodels.net/miriam\'>http://biomodels.net/miriam</a>) and
 * also in the paper <a target=\'_blank\'
 * href=\'http://www.biomedcentral.com/1752-0509/1/58\'>\'MIRIAM Resources: tools to generate and
 * resolve robust cross-references in Systems Biology\'</a>, <i>BMC Systems
 * Biology</i>, 58(1), 2007.
 <p>
 * Finally, the following is the same template as above, but this time
 * showing the nested content permitted by the most recent SBML
 * specifications (SBML Level&nbsp;2 Version&nbsp;5 and Level&nbsp;3
 * Version&nbsp;2):
 <pre class=\'fragment\'>
 &lt;<span style=\'background-color: #bbb\'>SBML_ELEMENT</span> <span style=\'background-color: #d0eed0\'>+++</span> metaid=&quot;<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot; <span style=\'background-color: #d0eed0\'>+++</span>&gt;
   <span style=\'background-color: #d0eed0\'>+++</span>
   &lt;annotation&gt;
     <span style=\'background-color: #d0eed0\'>+++</span>
     &lt;rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'
              xmlns:dcterm=\'http://purl.org/dc/terms/\'
              xmlns:vcard=\'http://www.w3.org/2001/vcard-rdf/3.0#\'
              xmlns:bqbiol=\'http://biomodels.net/biology-qualifiers/\'
              xmlns:bqmodel=\'http://biomodels.net/model-qualifiers/\' &gt;
       &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
         <span style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span>
         &lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
           &lt;rdf:Bag&gt;
             &lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>URI</span>&quot; /&gt;
             <span style=\'background-color: #fef\'>NESTED_CONTENT</span>
             <span style=\'background-color: #edd\'>...</span>
           &lt;/rdf:Bag&gt;
         &lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
         <span style=\'background-color: #edd\'>...</span>
       &lt;/rdf:Description&gt;
       <span style=\'background-color: #d0eed0\'>+++</span>
     &lt;/rdf:RDF&gt;
     <span style=\'background-color: #d0eed0\'>+++</span>
   &lt;/annotation&gt;
   <span style=\'background-color: #d0eed0\'>+++</span>
 &lt;/<span style=\'background-color: #bbb\'>SBML_ELEMENT</span>&gt;
 </pre>
 <p>
 * The placeholder
 * <span class=\'code\' style=\'background-color: #fef\'>NESTED_CONTENT</span>
 * refers to other optional RDF elements such as
 * <code>\'bqbiol:isDescribedBy\'</code> that describe a clarification or
 * another annotation about the
 * <span class=\'code\' style=\'background-color: #bbb\'>RELATION_ELEMENT</span>
 * in which it appears.  Nested content allows one to, for example, describe
 * protein modifications on species, or to add evidence codes for an
 * annotation.  Nested content relates to its containing
 * <span class=\'code\' style=\'background-color: #bbb\'>RELATION_ELEMENT</span>,
 * not the other way around.  It qualifies it, but does not change its
 * meaning.  As such, ignoring a
 * <span class=\'code\' style=\'background-color: #fef\'>NESTED_CONTENT</span>
 * does not affect the information provided by the containing
 * <span class=\'code\' style=\'background-color: #bbb\'>RELATION_ELEMENT</span>.
 <p>
 * For more information about SBML annotations in general, please refer to
 * Section&nbsp;6 in the SBML Level&nbsp;2 (Versions 2&ndash;4) or
 * Level&nbsp;3 specification documents.
 <p>
 * <h2>The parts of a {@link CVTerm}</h2>
 <p>
 * Annotations that refer to controlled vocabularies are managed in libSBML
 * using {@link CVTerm} objects.  The relation-resource pairs discussed in the
 * previous section are the \'controlled vocabulary\' terms that {@link CVTerm} is
 * designed to store and manipulate.  A set of RDF-based annotations attached
 * to a given SBML <code>&lt;annotation&gt;</code> element are read by
 * {@link RDFAnnotationParser} and converted into a list of these {@link CVTerm} objects.
 * Each {@link CVTerm} object instance stores the following components of an
 * annotation:
 <p>
 * <ul>
 <p>
 * <li>The <em>qualifier</em>, which can be a BioModels.net \'biological
 * qualifier\', a BioModels.net \'model qualifier\', or an unknown qualifier
 * (as far as the {@link CVTerm} class is concerned).  Qualifiers are used in
 * MIRIAM to indicate the nature of the relationship between the object
 * being annotated and the resource.  In {@link CVTerm}, the qualifiers can be
 * manipulated using the methods {@link CVTerm#getQualifierType()},
 * {@link CVTerm#setQualifierType(int)}, and related methods.
 <p>
 * <li>The <em>resource</em>, represented by a URI (which, we must remind
 * developers, is not the same as a URL).  In the {@link CVTerm} class, the
 * resource component can be manipulated using the methods
 * {@link CVTerm#addResource(String)} and
 * {@link CVTerm#removeResource(String)}.
 <p>
 * </ul>
 <p>
 * Note that a {@link CVTerm} contains a single qualifier, but possibly more than
 * one resource.  This corresponds to the possibility of an annotation that
 * points to multiple resources, all of which are qualified by the same
 * BioModels.net qualifier.  The {@link CVTerm} object class supports this by
 * supporting a list of resources.
 <p>
 * Detailed explanations of the qualifiers defined by BioModels.net can be
 * found at <a target=\'_blank\'
 * href=\'http://co.mbine.org/standards/qualifiers\'>http://co.mbine.org/standards/qualifiers</a>.
 */
"


%javamethodmodifiers CVTerm::CVTerm(QualifierType_t type = UNKNOWN_QUALIFIER) "
/**
   * Creates an empty {@link CVTerm}, optionally with the given
   * qualifier <code>type</code>.
   <p>
   * <p>
 * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
 * format for annotating models when (a) referring to controlled
 * vocabulary terms and database identifiers that define and describe
 * biological and other entities, and (b) describing the creator of a
 * model and the model\'s modification history.  The annotation content is
 * stored in <code>&lt;annotation&gt;</code> elements attached to
 * individual SBML elements.  The format for storing the content inside
 * SBML <code>&lt;annotation&gt;</code> elements is a subset of W3C RDF
 * (<a target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
 * Format</a>) expressed in XML.  The {@link CVTerm} class provides a programming
 * interface for working directly with controlled vocabulary term (\'CV
 * term\') objects without having to deal directly with the XML form.
 * When libSBML reads in an SBML model containing RDF annotations, it
 * parses those annotations into a list of {@link CVTerm} objects, and when
 * writing a model, it parses the {@link CVTerm} objects back into the
 * appropriate SBML <code>&lt;annotation&gt;</code> structure. 
   <p>
   * This method creates an empty {@link CVTerm} object.  The possible qualifier
   * types usable as values of <code>type</code> are {@link libsbmlConstants#MODEL_QUALIFIER MODEL_QUALIFIER} and {@link libsbmlConstants#BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER}.  If an explicit value for <code>type</code> is not given, this
   * method defaults to using {@link libsbmlConstants#UNKNOWN_QUALIFIER UNKNOWN_QUALIFIER}.  The qualifier
   * type can be set later using the
   * {@link CVTerm#setQualifierType(int)} method.
   <p>
   * Different BioModels.net qualifier elements encode different types of
   * relationships.  Please refer to the SBML specification or the <a
   * target=\'_blank\' href=\'http://co.mbine.org/standards/qualifiers/\'>BioModels.net
   * qualifiers web page</a> for an explanation of the meaning of these
   * different qualifiers.
   <p>
   * @param type a qualifier type
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers CVTerm::CVTerm(const XMLNode node) "
/**
   * Creates a new {@link CVTerm} from the given {@link XMLNode}.
   <p>
   * <p>
 * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
 * format for annotating models when (a) referring to controlled
 * vocabulary terms and database identifiers that define and describe
 * biological and other entities, and (b) describing the creator of a
 * model and the model\'s modification history.  The annotation content is
 * stored in <code>&lt;annotation&gt;</code> elements attached to
 * individual SBML elements.  The format for storing the content inside
 * SBML <code>&lt;annotation&gt;</code> elements is a subset of W3C RDF
 * (<a target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
 * Format</a>) expressed in XML.  The {@link CVTerm} class provides a programming
 * interface for working directly with controlled vocabulary term (\'CV
 * term\') objects without having to deal directly with the XML form.
 * When libSBML reads in an SBML model containing RDF annotations, it
 * parses those annotations into a list of {@link CVTerm} objects, and when
 * writing a model, it parses the {@link CVTerm} objects back into the
 * appropriate SBML <code>&lt;annotation&gt;</code> structure.
   <p>
   * This method creates a {@link CVTerm} object from the given {@link XMLNode} object 
   * <code>node</code>.  {@link XMLNode} is libSBML\'s representation of a node in an XML tree of
   * elements, and each such element can be placed in a namespace.  This
   * constructor looks for the element to be in the XML namespaces
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for
   * model qualifiers) and
   * <code>\'http://biomodels.net/biology-qualifiers\'</code> (for
   * biological qualifier), and if they are, creates {@link CVTerm} objects for
   * the result.
   <p>
   * @param node an XMLNode representing a {@link CVTerm}.
   <p>
   * @note This method assumes that the given {@link XMLNode} object <code>node</code> is of
   * the correct structural form.
   */ public
";


%javamethodmodifiers CVTerm::CVTerm(const CVTerm& orig) "
/**
   * Copy constructor; creates a copy of a {@link CVTerm} object.
   <p>
   * @param orig the {@link CVTerm} instance to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers CVTerm::clone() const "
/**
   * Creates and returns a deep copy of this {@link CVTerm} object.
   <p>
   * @return the (deep) copy of this {@link CVTerm} object.
   */ public
";


%javamethodmodifiers CVTerm::getQualifierType "
/**
   * Returns the qualifier type of this {@link CVTerm} object.
   <p>
   * <p>
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the {@link SBase} base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
   <p>
   * The placeholder <span class=\'code\' style=\'background-color: #bbb\'>
   * RELATION_ELEMENT</span> refers to a BioModels.net qualifier
   * element name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).  The present method returns a code
   * identifying which one of these two relationship namespaces is being
   * used; any other qualifier in libSBML is considered unknown (as far as
   * the {@link CVTerm} class is concerned).  Consequently, this method will return
   * one of the following values:
   <p>
   * <ul>
   * <li> {@link libsbmlConstants#MODEL_QUALIFIER MODEL_QUALIFIER}
   * <li> {@link libsbmlConstants#BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER}
   * <li> {@link libsbmlConstants#UNKNOWN_QUALIFIER UNKNOWN_QUALIFIER}
   *
   * </ul> <p>
   * The specific relationship of this {@link CVTerm} to the enclosing SBML object
   * can be determined using the {@link CVTerm} methods such as
   * {@link CVTerm#getModelQualifierType()} and
   * {@link CVTerm#getBiologicalQualifierType()}.  Callers will typically want to
   * use the present method to find out which one of the <em>other</em> two
   * methods to call to find out the specific relationship.
   <p>
   * @return the qualifier type
   * of this object or {@link libsbmlConstants#UNKNOWN_QUALIFIER UNKNOWN_QUALIFIER}
   * (the default).
   <p>
   * @see CVTerm#getResources()
   * @see CVTerm#getModelQualifierType()
   * @see CVTerm#getBiologicalQualifierType()
   */ public
";


%javamethodmodifiers CVTerm::getQualifierType() const "
/** * @internal */ public
";


%javamethodmodifiers CVTerm::getModelQualifierType "
/**
   * Returns the model qualifier type of this {@link CVTerm} object.
   <p>
   * <p>
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the {@link SBase} base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
   <p>
   * The placeholder <span class=\'code\' style=\'background-color: #bbb\'>
   * RELATION_ELEMENT</span> refers to a BioModels.net qualifier
   * element name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).  Callers will typically use
   * {@link CVTerm#getQualifierType()} to find out the type of qualifier relevant to this
   * particular {@link CVTerm} object, then if it is a <em>model</em> qualifier, use the
   * present method to determine the specific qualifier.
   <p>
   * Annotations with model qualifiers express a relationship between an
   * annotation resource and the <em>modeling concept</em> represented by a
   * given object in the model.  The diagram below illustrates the
   * relationship in this case:
   <p>
   * <center class=\'image\'><img src=\'model-qualifiers.png\'></center>
   * 
   <p>
   * <br> The set of known model qualifiers is, at the time of this libSBML
   * release, the following:
   <p>
   * <ul>
   * <li> {@link libsbmlConstants#BQM_IS BQM_IS}
   * <li> {@link libsbmlConstants#BQM_IS_DESCRIBED_BY BQM_IS_DESCRIBED_BY}
   * <li> {@link libsbmlConstants#BQM_IS_DERIVED_FROM BQM_IS_DERIVED_FROM}
   * <li> {@link libsbmlConstants#BQM_IS_INSTANCE_OF BQM_IS_INSTANCE_OF}
   * <li> {@link libsbmlConstants#BQM_HAS_INSTANCE BQM_HAS_INSTANCE}
   *
   * </ul> <p>
   * Any other BioModels.net qualifier found in the model is considered
   * unknown by libSBML and reported as
   * {@link libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN}.
   <p>
   * @return the model qualifier type
   * of this object or {@link libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN}
   * (the default).
   */ public
";


%javamethodmodifiers CVTerm::getModelQualifierType() const "
/** * @internal */ public
";


%javamethodmodifiers CVTerm::getBiologicalQualifierType "
/**
   * Returns the biological qualifier type of this {@link CVTerm} object.
   <p>
   * <p>
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the {@link SBase} base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
   <p>
   * The placeholder <span class=\'code\' style=\'background-color: #bbb\'>
   * RELATION_ELEMENT</span> refers to a BioModels.net qualifier element
   * name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).  Callers will typically use
   * {@link CVTerm#getQualifierType()} to find out the type of qualifier relevant to
   * this particular {@link CVTerm} object, then if it is a <em>biological</em> qualifier,
   * use the present method to determine the specific qualifier.
   <p>
   * Annotations with biological qualifiers express a relationship between an
   * annotation resource and the <em>biological concept</em> represented by a
   * given object in the model.    The diagram
   * below illustrates the relationship in this case:
   <p>
   * <center class=\'image\'><img src=\'biology-qualifiers.png\'></center>
   * 
   <p>
   * <br> The set of known biological qualifiers is, at the time of this
   * libSBML release, the following:
   <p>
   * <ul>
   * <li> {@link libsbmlConstants#BQB_IS BQB_IS}
   * <li> {@link libsbmlConstants#BQB_HAS_PART BQB_HAS_PART}
   * <li> {@link libsbmlConstants#BQB_IS_PART_OF BQB_IS_PART_OF}
   * <li> {@link libsbmlConstants#BQB_IS_VERSION_OF BQB_IS_VERSION_OF}
   * <li> {@link libsbmlConstants#BQB_HAS_VERSION BQB_HAS_VERSION}
   * <li> {@link libsbmlConstants#BQB_IS_HOMOLOG_TO BQB_IS_HOMOLOG_TO}
   * <li> {@link libsbmlConstants#BQB_IS_DESCRIBED_BY BQB_IS_DESCRIBED_BY}
   * <li> {@link libsbmlConstants#BQB_IS_ENCODED_BY BQB_IS_ENCODED_BY}
   * <li> {@link libsbmlConstants#BQB_ENCODES BQB_ENCODES}
   * <li> {@link libsbmlConstants#BQB_OCCURS_IN BQB_OCCURS_IN}
   * <li> {@link libsbmlConstants#BQB_HAS_PROPERTY BQB_HAS_PROPERTY}
   * <li> {@link libsbmlConstants#BQB_IS_PROPERTY_OF BQB_IS_PROPERTY_OF}
   * <li> {@link libsbmlConstants#BQB_HAS_TAXON BQB_HAS_TAXON}
   *
   * </ul> <p>
   * Any other BioModels.net qualifier found in the model is considered
   * unknown by libSBML and reported as
   * {@link libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN}.
   <p>
   * @return the biology qualifier type
   * of this object or {@link libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN}
   * (the default).
   */ public
";


%javamethodmodifiers CVTerm::getBiologicalQualifierType() const "
/** * @internal */ public
";


%javamethodmodifiers CVTerm::getResources "
/**
   * Returns the resource references for this {@link CVTerm} object.
   <p>
   * <p>
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the {@link SBase} base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
   <p>
   * The <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values shown in the template above are stored internally in
   * {@link CVTerm} objects using an {@link XMLAttributes} object.  Each attribute stored
   * inside the {@link XMLAttributes} will have the same name (specifically,
   * &quot;<code>rdf:resource</code>&quot;) but a different value, and the
   * value will be a <span class=\'code\' style=\'background-color: #d0d0ee\'>
   * resource URI</span> shown in the XML template above.
   <p>
   * A valid {@link CVTerm} entity must always have at least one resource and
   * a value for the relationship qualifier.
   <p>
   * @return the {@link XMLAttributes} that store the resources of this {@link CVTerm}.
   <p>
   * @see CVTerm#getQualifierType()
   * @see CVTerm#addResource(String resource)
   * @see CVTerm#getResourceURI(long n)
   */ public
";


%javamethodmodifiers CVTerm::getResources() const "
/**
   * Returns the resources for this {@link CVTerm} object.
   <p>
   * <p>
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the {@link SBase} base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
   <p>
   * The <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values shown in the template above are stored internally in
   * {@link CVTerm} objects using an {@link XMLAttributes} object.  Each attribute stored
   * inside the {@link XMLAttributes} will have the same name (specifically,
   * &quot;<code>rdf:resource</code>&quot;) but a different value, and the
   * value will be a <span class=\'code\' style=\'background-color: #d0d0ee\'>
   * resource URI</span> shown in the XML template above.
   <p>
   * A valid {@link CVTerm} entity must always have at least one resource and
   * a value for the relationship qualifier.
   <p>
   * @return the {@link XMLAttributes} that store the resources of this {@link CVTerm}.
   <p>
   * @see CVTerm#getQualifierType()
   * @see CVTerm#addResource(String resource)
   * @see CVTerm#getResourceURI(long n)
   */ public
";


%javamethodmodifiers CVTerm::getNumResources "
/**
   * Returns the number of resources for this {@link CVTerm} object.
   <p>
   * <p>
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the {@link SBase} base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
   <p>
   * The fragment above illustrates that there can be more than one
   * resource referenced by a given relationship annotation (i.e., the
   * <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values associated with a particular <span class=\'code\'
   * style=\'background-color: #bbb\'>RELATION_ELEMENT</span>).  The present
   * method returns a count of the resources stored in this {@link CVTerm} object.
   <p>
   * @return the number of resources in the set of {@link XMLAttributes}
   * of this {@link CVTerm}.
   <p>
   * @see CVTerm#getResources()
   * @see CVTerm#getResourceURI(long n)
   */ public
";


%javamethodmodifiers CVTerm::getNumResources() const "
/**
   * Returns the number of resources for this {@link CVTerm} object.
   <p>
   * <p>
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the {@link SBase} base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
   <p>
   * The fragment above illustrates that there can be more than one
   * resource referenced by a given relationship annotation (i.e., the
   * <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values associated with a particular <span class=\'code\'
   * style=\'background-color: #bbb\'>RELATION_ELEMENT</span>).  The present
   * method returns a count of the resources stored in this {@link CVTerm} object.
   <p>
   * @return the number of resources in the set of {@link XMLAttributes}
   * of this {@link CVTerm}.
   <p>
   * @see CVTerm#getResources()
   * @see CVTerm#getResourceURI(long n)
   */ public
";


%javamethodmodifiers CVTerm::getResourceURI(unsigned int n) "
/**
   * Returns the value of the <em>n</em>th resource for this {@link CVTerm} object.
   <p>
   * <p>
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the {@link SBase} base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
   <p>
   * The fragment above illustrates that there can be more than one resource
   * referenced by a given relationship annotation (i.e., the <span
   * class=\'code\' style=\'background-color: #d0d0ee\'>resource URI</span>
   * values associated with a particular <span class=\'code\'
   * style=\'background-color: #bbb\'>RELATION_ELEMENT</span>).  LibSBML stores
   * all resource URIs in a single {@link CVTerm} object for a given relationship.
   * Callers can use {@link CVTerm#getNumResources()} to find out how many resources
   * are stored in this {@link CVTerm} object, then call this method to retrieve the
   * <em>n</em>th resource URI.
   <p>
   * @param n the index of the resource to query
   <p>
   * @return string representing the value of the nth resource
   * in the set of {@link XMLAttributes} of this {@link CVTerm}.
   <p>
   * @see CVTerm#getNumResources()
   * @see CVTerm#getQualifierType()
   */ public
";


%javamethodmodifiers CVTerm::getResourceURI "
/**
   * Returns the value of the <em>n</em>th resource for this {@link CVTerm} object.
   <p>
   * <p>
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the {@link SBase} base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
   <p>
   * The fragment above illustrates that there can be more than one resource
   * referenced by a given relationship annotation (i.e., the <span
   * class=\'code\' style=\'background-color: #d0d0ee\'>resource URI</span>
   * values associated with a particular <span class=\'code\'
   * style=\'background-color: #bbb\'>RELATION_ELEMENT</span>).  LibSBML stores
   * all resource URIs in a single {@link CVTerm} object for a given relationship.
   * Callers can use {@link CVTerm#getNumResources()} to find out how many resources
   * are stored in this {@link CVTerm} object, then call this method to retrieve the
   * <em>n</em>th resource URI.
   <p>
   * @param n the index of the resource to query
   <p>
   * @return string representing the value of the nth resource
   * in the set of {@link XMLAttributes} of this {@link CVTerm}.
   <p>
   * @see CVTerm#getNumResources()
   * @see CVTerm#getQualifierType()
   */ public
";


%javamethodmodifiers CVTerm::setQualifierType(QualifierType_t type) "
/**
   * Sets the qualifier code of this
   * {@link CVTerm} object.
   <p>
   * @param type the qualifier type.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see CVTerm#getQualifierType()
   */ public
";


%javamethodmodifiers CVTerm::setModelQualifierType(ModelQualifierType_t type) "
/**
   * Sets the model qualifier type
   * of this {@link CVTerm} object.
   <p>
   * @param type the model qualifier type
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note If the Qualifier Type of this object is not
   * {@link libsbmlConstants#MODEL_QUALIFIER MODEL_QUALIFIER}, then the
   * then the model qualifier type
   * will default to {@link libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN}.
   <p>
   * @see CVTerm#getQualifierType()
   * @see CVTerm#setQualifierType(int)
   */ public
";


%javamethodmodifiers CVTerm::setBiologicalQualifierType(BiolQualifierType_t type) "
/**
   * Sets the biology qualifier
   * type of this {@link CVTerm} object.
   <p>
   * @param type the biology
   * qualifier type.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note If the Qualifier Type of this object is not
   * {@link libsbmlConstants#BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER},
   * then the biology qualifier type
   * will default to {@link libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN}.
   <p>
   * @see CVTerm#getQualifierType()
   * @see CVTerm#setQualifierType(int)
   */ public
";


%javamethodmodifiers CVTerm::setModelQualifierType(const std::string& qualifier) "
/**
   * Sets the model qualifier
   * type value of this {@link CVTerm} object.
   <p>
   * @param qualifier the string representing a model qualifier
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note If the Qualifier Type of this object is not
   * {@link libsbmlConstants#MODEL_QUALIFIER MODEL_QUALIFIER}, 
   * then the model qualifier type
   * will default to {@link libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN}.
   <p>
   * @see CVTerm#getQualifierType()
   * @see CVTerm#setQualifierType(int)
   */ public
";


%javamethodmodifiers CVTerm::setBiologicalQualifierType(const std::string& qualifier) "
/**
   * Sets the biology qualifier
   * type code of this {@link CVTerm} object.
   <p>
   * @param qualifier the string representing a biology qualifier
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note If the Qualifier Type of this object is not
   * {@link libsbmlConstants#BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER},
   * then the biology qualifier type code
   * will default to {@link libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN}.
   <p>
   * @see CVTerm#getQualifierType()
   * @see CVTerm#setQualifierType(int)
   */ public
";


%javamethodmodifiers CVTerm::addResource(const std::string& resource) "
/**
   * Adds a resource reference to this {@link CVTerm} object.
   <p>
   * <p>
 * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
 * format for annotating models when (a) referring to controlled
 * vocabulary terms and database identifiers that define and describe
 * biological and other entities, and (b) describing the creator of a
 * model and the model\'s modification history.  The annotation content is
 * stored in <code>&lt;annotation&gt;</code> elements attached to
 * individual SBML elements.  The format for storing the content inside
 * SBML <code>&lt;annotation&gt;</code> elements is a subset of W3C RDF
 * (<a target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
 * Format</a>) expressed in XML.  The {@link CVTerm} class provides a programming
 * interface for working directly with controlled vocabulary term (\'CV
 * term\') objects without having to deal directly with the XML form.
 * When libSBML reads in an SBML model containing RDF annotations, it
 * parses those annotations into a list of {@link CVTerm} objects, and when
 * writing a model, it parses the {@link CVTerm} objects back into the
 * appropriate SBML <code>&lt;annotation&gt;</code> structure. 
   <p>
   * The specific RDF element used in this SBML format for referring to
   * external entities is <code>&lt;rdf:Description&gt;</code>, with a
   * <code>&lt;rdf:Bag&gt;</code> element containing one or more
   * <code>&lt;rdf:li&gt;</code> elements.  Each such element refers to a
   * data item in an external resource; the resource and data item are
   * together identified uniquely using a URI.  The following template
   * illustrates the structure:
   <p>
   <pre class=\'fragment\'>
   &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
     <span style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span>
     &lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
       &lt;rdf:Bag&gt;
         &lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
         <span style=\'background-color: #edd\'>...</span>
       &lt;/rdf:Bag&gt;
     &lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
     <span style=\'background-color: #edd\'>...</span>
   &lt;/rdf:Description&gt;
   </pre>
   <p>
   * In the template above, the placeholder <span class=\'code\'
   * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
   * element\'s meta identifier, which is a field available on all SBML
   * components derived from the {@link SBase} base object class.  The <span
   * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
   * optional, and the ellipses <span class=\'code\'
   * style=\'background-color: #edd\'>...</span> are placeholders for zero or
   * more elements of the same form as the immediately preceding element.
   * The placeholder <span class=\'code\' style=\'background-color: #bbb\'>
   * RELATION_ELEMENT</span> refers to a BioModels.net qualifier element
   * name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).
   <p>
   * The <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> is a required data value that uniquely identifies a
   * resource and data within that resource to which the annotation refers.
   * The present method allows callers to add a reference to a resource URI
   * with the same relationship to the enclosing SBML object.  (In other
   * words, the argument to this method is a <span class=\'code\'
   * style=\'background-color: #d0d0ee\'>resource URI</span> as shown in the
   * XML fragment above.)  Resources are stored in this {@link CVTerm} object
   * within an {@link XMLAttributes} object.
   <p>
   * The relationship of this {@link CVTerm} to the enclosing SBML object can be
   * determined using the {@link CVTerm} methods such as
   * {@link CVTerm#getModelQualifierType()} and {@link CVTerm#getBiologicalQualifierType()}.
   <p>
   * @param resource a string representing the URI of the resource and data
   * item being referenced; e.g.,
   * <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see CVTerm#getResources()
   * @see CVTerm#removeResource(String resource)
   * @see CVTerm#getQualifierType()
   * @see CVTerm#getModelQualifierType()
   * @see CVTerm#getBiologicalQualifierType()
   */ public
";


%javamethodmodifiers CVTerm::removeResource(std::string resource) "
/**
   * Removes a resource URI from the set of resources stored in this {@link CVTerm}
   * object.
   <p>
   * @param resource a string representing the resource URI to remove;
   * e.g., <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @see CVTerm#addResource(String resource)
   */ public
";


%javamethodmodifiers CVTerm::hasRequiredAttributes "
/**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link CVTerm} object have been set.
   <p>
   * @note The required attributes for a {@link CVTerm} are:
   * <ul>
   * <li> a <em>qualifier type</em>, which can be either a model qualifier or a biological qualifier
   * <li> at least one resource
   * </ul>
   */ public
";


%javamethodmodifiers CVTerm::hasBeenModified "
/** * @internal */ public
";


%javamethodmodifiers CVTerm::resetModifiedFlags "
/** * @internal */ public
";


%javamethodmodifiers CVTerm::hasRequiredAttributes() const "
/** * @internal */ public
";


%typemap(javaimports) Date "
/** 
 *  A MIRIAM-compliant date representation.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * A {@link Date} object stores a reasonably complete representation of date and
 * time.  Its purpose is to serve as a way to store dates to be read and
 * written in the <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format</a> used in
 * RDF Dublin Core annotations within SBML.  The W3C date format is a
 * restricted form of <a target=\'_blank\'
 * href=\'http://en.wikipedia.org/wiki/ISO_8601\'>ISO 8601</a>, the
 * international standard for the representation of dates and times.  A
 * time and date value in this W3C format takes the form
 * YYYY-MM-DDThh:mm:ssXHH:ZZ (e.g., <code>1997-07-16T19:20:30+01:00</code>)
 * where XHH:ZZ is the time zone offset.  The libSBML {@link Date} object contains
 * the following fields to represent these values:
 <p>
 * <ul>
 * <li> <em>year</em>: a long integer representing the year.  This should be a
 * four-digit number such as <code>2011.</code>
 <p>
 * <li> <em>month</em>: a long integer representing the month, with a range of
 * values of 1&ndash;12.  The value <code>1</code> represents January, and so on.
 <p>
 * <li> <em>day</em>: a long integer representing the day of the month, with a
 * range of values of 1&ndash;31.
 <p>
 * <li> <em>hour</em>: a long integer representing the hour on a 24-hour clock,
 * with a range of values of 0&ndash;23.
 <p>
 * <li> <em>minute</em>: a long integer representing the minute, with a range
 * of 0&ndash;59.
 <p>
 * <li> <em>second</em>: a long integer representing the second, with a range
 * of 0&ndash;59.
 <p>
 * <li> <em>sign</em>: a long integer representing the sign of the offset (<code>0</code>
 * signifying <code>+</code> and <code>1</code> signifying <code>-</code>).  See the paragraph below for
 * further explanations.
 <p>
 * <li> <em>hours</em> offset: a long integer representing the time zone\'s hour
 * offset from GMT.
 <p>
 * <li> <em>minute</em> offset: a long integer representing the time zone\'s
 * minute offset from GMT.
 *
 * </ul> <p>
 * To illustrate the time zone offset, a value of <code>-05:00</code> would
 * correspond to USA Eastern Standard Time.  In the {@link Date} object, this would
 * require a value of <code>1</code> for the sign field, <code>5</code> for the hour offset and
 * <code>0</code> for the minutes offset.
 <p>
 * In the restricted RDF annotations used in SBML, described in
 * Section&nbsp;6 of the SBML Level&nbsp;2 and Level&nbsp;3 specification
 * documents, date/time stamps can be used to indicate the time of
 * creation and modification of a model.  The following SBML model fragment
 * illustrates this:
<pre class=\'fragment\'>
&lt;model metaid=\'_180340\' id=\'GMO\' name=\'Goldbeter1991_MinMitOscil\'&gt;
    &lt;annotation&gt;
        &lt;rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'
                 xmlns:dc=\'http://purl.org/dc/elements/1.1/\'
                 xmlns:dcterms=\'http://purl.org/dc/terms/\'
                 xmlns:vCard=\'http://www.w3.org/2001/vcard-rdf/3.0#\' &gt;
            &lt;rdf:Description rdf:about=\'#_180340\'&gt;
                &lt;dc:creator&gt;
                    &lt;rdf:Bag&gt;
                        &lt;rdf:li rdf:parseType=\'Resource\'&gt;
                            &lt;vCard:N rdf:parseType=\'Resource\'&gt;
                                &lt;vCard:Family&gt;Shapiro&lt;/vCard:Family&gt;
                                &lt;vCard:Given&gt;Bruce&lt;/vCard:Given&gt;
                            &lt;/vCard:N&gt;
                            &lt;vCard:EMAIL&gt;bshapiro@jpl.nasa.gov&lt;/vCard:EMAIL&gt;
                            &lt;vCard:ORG rdf:parseType=\'Resource\'&gt;
                                &lt;vCard:Orgname&gt;NASA Jet Propulsion Laboratory&lt;/vCard:Orgname&gt;
                            &lt;/vCard:ORG&gt;
                        &lt;/rdf:li&gt;
                    &lt;/rdf:Bag&gt;
                &lt;/dc:creator&gt;
                &lt;dcterms:created rdf:parseType=\'Resource\'&gt;
                    &lt;dcterms:W3CDTF&gt;2005-02-06T23:39:40+00:00&lt;/dcterms:W3CDTF&gt;
                &lt;/dcterms:created&gt;
                &lt;dcterms:modified rdf:parseType=\'Resource\'&gt;
                    &lt;dcterms:W3CDTF&gt;2005-09-13T13:24:56+00:00&lt;/dcterms:W3CDTF&gt;
                &lt;/dcterms:modified&gt;
            &lt;/rdf:Description&gt;
        &lt;/rdf:RDF&gt;
    &lt;/annotation&gt;
&lt;/model&gt;
</pre>
 */
"


%javamethodmodifiers Date::Date(unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1, unsigned int hour = 0, unsigned int minute = 0, unsigned int second = 0, unsigned int sign = 0, unsigned int hoursOffset = 0, unsigned int minutesOffset = 0) "
/**
   * Creates a time and date representation for use in model annotations
   * and elsewhere.
   <p>
   * The following is the complete set of possible arguments to this
   * constructor, with default values as indicated:
   <p>
   * @param year a long integereger representing the year.  This should be
   * a four-digit number such as <code>2011.</code>  (Default value used if this
   * argument is not given: <code>2000.</code>)
   <p>
   * @param month a long integereger representing the month, with a range
   * of values of 1&ndash;12.  The value <code>1</code> represents January, and so
   * on.  (Default value used if this argument is not given: <code>1.</code>)
   <p>
   * @param day a long integereger representing the day of the month, with
   * a range of values of 1&ndash;31.  (Default value used if this argument
   * is not given: <code>1.</code>)
   <p>
   * @param hour a long integereger representing the hour on a 24-hour
   * clock, with a range of values of 0&ndash;23.  (Default value used if
   * this argument is not given: <code>0.</code>)
   <p>
   * @param minute a long integereger representing the minute, with a
   * range of 0&ndash;59.  (Default value used if this argument is not
   * given: <code>0.</code>)
   <p>
   * @param second a long integereger representing the second, with a
   * range of 0&ndash;59.  (Default value used if this argument is not
   * given: <code>0.</code>)
   <p>
   * @param sign a long integereger representing the sign of the offset
   * (<code>0</code> signifying <code>+</code> and <code>1</code> signifying <code>-</code>).  See the paragraph
   * below for further explanations.  (Default value used if this argument
   * is not given: <code>0.</code>)
   <p>
   * @param hoursOffset a long integereger representing the time zone\'s
   * hour offset from GMT.  (Default value used if this argument is not
   * given: <code>0.</code>)
   <p>
   * @param minutesOffset a long integereger representing the time zone\'s
   * minute offset from GMT.  (Default value used if this argument is not
   * given: <code>0.</code>)
   <p>
   * To illustrate the time zone offset, a value of <code>-05:00</code>
   * would correspond to USA Eastern Standard Time.  In the {@link Date} object,
   * this would require a value of <code>1</code> for the sign field, <code>5</code> for the
   * hour offset and <code>0</code> for the minutes offset.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers Date::Date(const std::string& date) "
/**
   * Creates a {@link Date} object from a string expressing a date and time value.
   <p>
   * This constructor expects its argument to be in the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format with time
   * zone offset</a>, used in RDF Dublin Core annotations within SBML.
   <p>
   * <p>
 * The date format expresses a date and time value as a string of the form
 * YYYY-MM-DDThh:mm:ssXHH:ZZ, where
 <p>
 * <ul>
 * <li> <em>YYYY</em> is a four-digit integer representing the year.  This
 * should be a four-digit number such as <code>2011.</code>
 <p>
 * <li> <em>MM</em> is a two-digit integer representing the month, with a range
 * of values of 01&ndash;12.  The value <code>1</code> represents January, and so
 * on.
 <p>
 * <li> <em>DD</em> is a two-digit integer representing the day of the month,
 * with a range of values of 01&ndash;31.
 <p>
 * <li> <em>hh</em> is a two-digit integer representing the hour on a 24-hour
 * clock, with a range of values of 00&ndash;23.
 <p>
 * <li> <em>mm</em> is a two-digit integer representing the minute, with a
 * range of 00&ndash;59.
 <p>
 * <li> <em>ss</em> is a two-digit integer representing the second, with a
 * range of 0&ndash;59.
 <p>
 * <li> <em>X</em> is the the sign of the time zone offset, either <code>+</code> or
 * <code>-</code>.
 <p>
 * <li> <em>HH</em> is a two-digit integer representing the hour of the time
 * zone offset, with a range of 00&ndash;23.
 <p>
 * <li> <em>ZZ</em> is a two-digit integer representing the minutes of the time
 * zone offset, with a range of 00&ndash;59.
 *
 * </ul> <p>
 * In the string format above, it is important not to forget the literal
 * character <code>T</code> in the string.  Here is an example date/time string:
 * <code>1997-07-16T19:20:30+01:00</code>, which would represent July 16,
 * 1997, at 19:20:30 in Central European Time (which is UTC +1:00). 
   <p>
   * If this constructor is given a <code>null</code> argument or a string of length
   * zero, it constructs a {@link Date} object with the value of January 1, 2000,
   * at time 00:00 UTC.  Otherwise, the argument <em>must</em> be in the
   * complete format described above, or unpredictable results will happen.
   <p>
   * @param date a string representing the date.
   */ public
";


%javamethodmodifiers Date::Date(const Date& orig) "
/**
   * Copy constructor; creates a copy of this {@link Date}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers Date::clone() const "
/**
   * Creates and returns a deep copy of this {@link Date} object.
   <p>
   * @return the (deep) copy of this {@link Date} object.
   */ public
";


%javamethodmodifiers Date::getYear "
/**
   * Returns the year from this {@link Date}.
   <p>
   * @return the year from this {@link Date}.
   */ public
";


%javamethodmodifiers Date::getMonth "
/**
   * Returns the month from this {@link Date}.
   <p>
   * @return the month from this {@link Date}.
   */ public
";


%javamethodmodifiers Date::getDay "
/**
   * Returns the day from this {@link Date}.
   <p>
   * @return the day from this {@link Date}.
   */ public
";


%javamethodmodifiers Date::getHour "
/**
   * Returns the hour from this {@link Date}.
   <p>
   * @return the hour from this {@link Date}.
   */ public
";


%javamethodmodifiers Date::getMinute "
/**
   * Returns the minute from this {@link Date}.
   <p>
   * @return the minute from this {@link Date}.
   */ public
";


%javamethodmodifiers Date::getSecond "
/**
   * Returns the seconds from this {@link Date}.
   <p>
   * @return the seconds from this {@link Date}.
   */ public
";


%javamethodmodifiers Date::getSignOffset "
/**
   * Returns the sign of the time zone offset from this {@link Date}.
   <p>
   * @return the sign of the offset from this {@link Date}.
   */ public
";


%javamethodmodifiers Date::getHoursOffset "
/**
   * Returns the hours of the time zone offset from this {@link Date}.
   <p>
   * @return the hours of the offset from this {@link Date}.
   */ public
";


%javamethodmodifiers Date::getMinutesOffset "
/**
   * Returns the minutes of the time zone offset from this {@link Date}.
   <p>
   * @return the minutes of the offset from this {@link Date}.
   */ public
";


%javamethodmodifiers Date::getDateAsString "
/**
   * Returns the current {@link Date} value in text-string form.
   <p>
   * The string returned will be in the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format with time
   * zone offset</a>, used in RDF Dublin Core annotations within SBML.
   <p>
   * <p>
 * The date format expresses a date and time value as a string of the form
 * YYYY-MM-DDThh:mm:ssXHH:ZZ, where
 <p>
 * <ul>
 * <li> <em>YYYY</em> is a four-digit integer representing the year.  This
 * should be a four-digit number such as <code>2011.</code>
 <p>
 * <li> <em>MM</em> is a two-digit integer representing the month, with a range
 * of values of 01&ndash;12.  The value <code>1</code> represents January, and so
 * on.
 <p>
 * <li> <em>DD</em> is a two-digit integer representing the day of the month,
 * with a range of values of 01&ndash;31.
 <p>
 * <li> <em>hh</em> is a two-digit integer representing the hour on a 24-hour
 * clock, with a range of values of 00&ndash;23.
 <p>
 * <li> <em>mm</em> is a two-digit integer representing the minute, with a
 * range of 00&ndash;59.
 <p>
 * <li> <em>ss</em> is a two-digit integer representing the second, with a
 * range of 0&ndash;59.
 <p>
 * <li> <em>X</em> is the the sign of the time zone offset, either <code>+</code> or
 * <code>-</code>.
 <p>
 * <li> <em>HH</em> is a two-digit integer representing the hour of the time
 * zone offset, with a range of 00&ndash;23.
 <p>
 * <li> <em>ZZ</em> is a two-digit integer representing the minutes of the time
 * zone offset, with a range of 00&ndash;59.
 *
 * </ul> <p>
 * In the string format above, it is important not to forget the literal
 * character <code>T</code> in the string.  Here is an example date/time string:
 * <code>1997-07-16T19:20:30+01:00</code>, which would represent July 16,
 * 1997, at 19:20:30 in Central European Time (which is UTC +1:00). 
   <p>
   * @return the date as a string.
   */ public
";


%javamethodmodifiers Date::setYear(unsigned int year) "
/**
   * Sets the value of the year of this {@link Date} object.
   <p>
   * The value given as argument must be between 1000 and 9999 inclusive.
   * (In the millennium during which this libSBML documentation is being
   * written, a typical value is <code>2011</code>, but we hope that SBML will
   * continue to be used for a long time.)
   <p>
   * @param year a long integer representing the year.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::setMonth(unsigned int month) "
/**
   * Sets the value of the month of this {@link Date} object.
   <p>
   * @param month a long integer representing the month; it must be in the
   * range 1&ndash;12 or an error will be signaled.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::setDay(unsigned int day) "
/**
   * Sets the value of the day of this {@link Date} object.
   <p>
   * @param day a long integer representing the day; it must be in the
   * range 0&ndash;31 or an error will be signaled.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::setHour(unsigned int hour) "
/**
   * Sets the value of the hour of this {@link Date} object.
   <p>
   * @param hour a long integer representing the hour to set; it must be
   * in the range 0&ndash;23 or an error will be signaled.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::setMinute(unsigned int minute) "
/**
   * Sets the value of the minute of this {@link Date} object.
   <p>
   * @param minute a long integer representing the minute to set; it must
   * be in the range 0&ndash;59 or an error will be signaled.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::setSecond(unsigned int second) "
/**
   * Sets the value of the second of the {@link Date} object.
   <p>
   * @param second a long integer representing the seconds; it must
   * be in the range 0&ndash;59 or an error will be signaled.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::setSignOffset(unsigned int sign) "
/**
   * Sets the value of the sign of the time zone offset of this {@link Date} object.
   <p>
   * The only permissible values are <code>0</code> and <code>1.</code>
   <p>
   * @param sign a long integer representing the sign of the offset, with
   * <code>0</code> signifying <code>+</code> and <code>1</code> signifying <code>-.</code>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::setHoursOffset(unsigned int hoursOffset) "
/**
   * Sets the value of this {@link Date} object\'s time zone hour offset.
   <p>
   * @param hoursOffset a long integer representing the hours of the
   * offset; it must be in the range 0&ndash;23 or an error will be
   * signaled.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::setMinutesOffset(unsigned int minutesOffset) "
/**
   * Sets the value of this {@link Date} object\'s time zone minutes offset.
   <p>
   * @param minutesOffset a long integer representing the minutes of the
   * offset; it must be in the range 0&ndash;59 or an error will be
   * signaled.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::setDateAsString(const std::string& date) "
/**
   * Sets the value of this {@link Date} object using a date and time value
   * expressed as a text string.
   <p>
   * This method expects its argument to be in the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format with time
   * zone offset</a>, used in RDF Dublin Core annotations within SBML.
   <p>
   * <p>
 * The date format expresses a date and time value as a string of the form
 * YYYY-MM-DDThh:mm:ssXHH:ZZ, where
 <p>
 * <ul>
 * <li> <em>YYYY</em> is a four-digit integer representing the year.  This
 * should be a four-digit number such as <code>2011.</code>
 <p>
 * <li> <em>MM</em> is a two-digit integer representing the month, with a range
 * of values of 01&ndash;12.  The value <code>1</code> represents January, and so
 * on.
 <p>
 * <li> <em>DD</em> is a two-digit integer representing the day of the month,
 * with a range of values of 01&ndash;31.
 <p>
 * <li> <em>hh</em> is a two-digit integer representing the hour on a 24-hour
 * clock, with a range of values of 00&ndash;23.
 <p>
 * <li> <em>mm</em> is a two-digit integer representing the minute, with a
 * range of 00&ndash;59.
 <p>
 * <li> <em>ss</em> is a two-digit integer representing the second, with a
 * range of 0&ndash;59.
 <p>
 * <li> <em>X</em> is the the sign of the time zone offset, either <code>+</code> or
 * <code>-</code>.
 <p>
 * <li> <em>HH</em> is a two-digit integer representing the hour of the time
 * zone offset, with a range of 00&ndash;23.
 <p>
 * <li> <em>ZZ</em> is a two-digit integer representing the minutes of the time
 * zone offset, with a range of 00&ndash;59.
 *
 * </ul> <p>
 * In the string format above, it is important not to forget the literal
 * character <code>T</code> in the string.  Here is an example date/time string:
 * <code>1997-07-16T19:20:30+01:00</code>, which would represent July 16,
 * 1997, at 19:20:30 in Central European Time (which is UTC +1:00). 
   <p>
   * If this method is given a <code>null</code> argument or a string of length zero,
   * it constructs a {@link Date} object with the value of January 1, 2000, at time
   * 00:00 UTC.  Otherwise, the argument <em>must</em> be in the complete format
   * described above, or unpredictable results will happen.
   <p>
   * @param date a string representing the date.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers Date::representsValidDate "
/**
   * Returns true or false depending on whether this date object represents
   * a valid date and time value.
   <p>
   * This method verifies that the date/time value stored in this object is
   * well-formed and represents plausible values.  A time and date value in
   * the W3C format takes the form YYYY-MM-DDThh:mm:ssXHH:ZZ (e.g.,
   * <code>1997-07-16T19:20:30+01:00</code>) where XHH:ZZ is the time zone
   * offset.  This method checks such things as whether the value of the
   * month number is less than or equal to 12, whether the value of the
   * minutes number is less than or equal to 59, whether a time zone offset
   * is set, etc.
   <p>
   * @return <code>true</code> if the date is valid, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers Date::hasBeenModified "
/** * @internal */ public
";


%javamethodmodifiers Date::resetModifiedFlags "
/** * @internal */ public
";


%javamethodmodifiers Date::parseDateStringToNumbers "
/** * @internal */ public
";


%javamethodmodifiers Date::parseDateNumbersToString "
/** * @internal */ public
";


%typemap(javaimports) ModelCreator "
/** 
 *  MIRIAM-compliant data about a model\'s creator.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The SBML specification beginning with Level&nbsp;2 Version&nbsp;2
 * defines a standard approach to recording model history and model creator
 * information in a form that complies with MIRIAM (\'Minimum Information
 * Requested in the Annotation of biochemical Models\', <i>Nature
 * Biotechnology</i>, vol. 23, no. 12, Dec. 2005).  For the model creator,
 * this form involves the use of parts of the <a target=\'_blank\'
 * href=\'http://en.wikipedia.org/wiki/VCard\'>vCard</a> representation.
 * LibSBML provides the {@link ModelCreator} class as a convenience high-level
 * interface for working with model creator data.  Objects of class
 * {@link ModelCreator} can be used to store and carry around creator data within a
 * program, and the various methods in this object class let callers
 * manipulate the different parts of the model creator representation.
 <p>
 * <h2>The different parts of a model creator definition</h2>
 <p>
 * The {@link ModelCreator} class mirrors the structure of the MIRIAM model creator
 * annotations in SBML.  The following template illustrates these different
 * fields when they are written in XML form:
 <p>
 <pre class=\'fragment\'>
 &lt;vCard:N rdf:parseType=\'Resource\'&gt;
   &lt;vCard:Family&gt;<span style=\'background-color: #bbb\'>family name</span>&lt;/vCard:Family&gt;
   &lt;vCard:Given&gt;<span style=\'background-color: #bbb\'>given name</span>&lt;/vCard:Given&gt;
 &lt;/vCard:N&gt;
 ...
 &lt;vCard:EMAIL&gt;<span style=\'background-color: #bbb\'>email address</span>&lt;/vCard:EMAIL&gt;
 ...
 &lt;vCard:ORG rdf:parseType=\'Resource\'&gt;
   &lt;vCard:Orgname&gt;<span style=\'background-color: #bbb\'>organization</span>&lt;/vCard:Orgname&gt;
 &lt;/vCard:ORG&gt;
 </pre>
 <p>
 * Each of the separate data values
 * <span class=\'code\' style=\'background-color: #bbb\'>family name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>given name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>email address</span>, and
 * <span class=\'code\' style=\'background-color: #bbb\'>organization</span> can
 * be set and retrieved via corresponding methods in the {@link ModelCreator} 
 * class.  These methods are documented in more detail below.
 */
"


%javamethodmodifiers ModelCreator::ModelCreator "
/**
   * Creates a new {@link ModelCreator} object.
   */ public
";


%javamethodmodifiers ModelCreator::ModelCreator(const XMLNode creator) "
/**
   * Creates a new {@link ModelCreator} from an {@link XMLNode}.
   <p>
   * @param creator the {@link XMLNode} from which to create the {@link ModelCreator}.
   */ public
";


%javamethodmodifiers ModelCreator::ModelCreator(const ModelCreator& orig) "
/**
   * Copy constructor; creates a copy of the {@link ModelCreator}.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers ModelCreator::clone() const "
/**
   * Creates and returns a deep copy of this {@link ModelCreator} object.
   <p>
   * @return the (deep) copy of this {@link ModelCreator} object.
   */ public
";


%javamethodmodifiers ModelCreator::getFamilyName() const "
/**
   * Returns the \'family name\' stored in this {@link ModelCreator} object.
   <p>
   * @return the \'family name\' portion of the {@link ModelCreator} object.
   */ public
";


%javamethodmodifiers ModelCreator::getGivenName() const "
/**
   * Returns the \'given name\' stored in this {@link ModelCreator} object.
   <p>
   * @return the \'given name\' portion of the {@link ModelCreator} object.
   */ public
";


%javamethodmodifiers ModelCreator::getEmail() const "
/**
   * Returns the \'email\' stored in this {@link ModelCreator} object.
   <p>
   * @return email from the {@link ModelCreator}.
   */ public
";


%javamethodmodifiers ModelCreator::getOrganization() const "
/**
   * Returns the \'organization\' stored in this {@link ModelCreator} object.
   <p>
   * @return organization from the {@link ModelCreator}.
   */ public
";


%javamethodmodifiers ModelCreator::getOrganisation() const "
/**
   * (Alternate spelling) Returns the \'organization\' stored in this
   * {@link ModelCreator} object.
   <p>
   * @note This function is an alias of getOrganization().
   <p>
   * @return organization from the {@link ModelCreator}.
   <p>
   * @see #getOrganization()
   */ public
";


%javamethodmodifiers ModelCreator::isSetFamilyName "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelCreator}\'s \'family name\' part is set.
   <p>
   * @return <code>true</code> if the familyName of this {@link ModelCreator} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ModelCreator::isSetGivenName "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelCreator}\'s \'given name\' part is set.
   <p>
   * @return <code>true</code> if the givenName of this {@link ModelCreator} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ModelCreator::isSetEmail "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelCreator}\'s \'email\' part is set.
   <p>
   * @return <code>true</code> if the email of this {@link ModelCreator} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ModelCreator::isSetOrganization "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelCreator}\'s \'organization\' part is set.
   <p>
   * @return <code>true</code> if the organization of this {@link ModelCreator} is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ModelCreator::isSetOrganisation "
/**
   * (Alternate spelling) Predicate returning <code>true</code> or <code>false</code> depending
   * on whether this {@link ModelCreator}\'s \'organization\' part is set.
   <p>
   * @note This function is an alias of isSetOrganization().
   <p>
   * @return <code>true</code> if the organization of this {@link ModelCreator} is set, <code>false</code> otherwise.
   <p>
   * @see #isSetOrganization()
   */ public
";


%javamethodmodifiers ModelCreator::setFamilyName(const std::string& familyName) "
/**
   * Sets the \'family name\' portion of this {@link ModelCreator} object.
   <p>
   * @param familyName a string representing the familyName of the {@link ModelCreator}. 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers ModelCreator::setGivenName(const std::string& givenName) "
/**
   * Sets the \'given name\' portion of this {@link ModelCreator} object.
   <p>
   * @param givenName a string representing the givenName of the {@link ModelCreator}. 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers ModelCreator::setEmail(const std::string& email) "
/**
   * Sets the \'email\' portion of this {@link ModelCreator} object.
   <p>
   * @param email a string representing the email of the {@link ModelCreator}. 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers ModelCreator::setOrganization(const std::string& organization) "
/**
   * Sets the \'organization\' portion of this {@link ModelCreator} object.
   <p>
   * @param organization a string representing the organization of the 
   * {@link ModelCreator}. 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers ModelCreator::setOrganisation(const std::string& organization) "
/**
   * (Alternate spelling) Sets the \'organization\' portion of this
   * {@link ModelCreator} object.
   <p>
   * @param organization a string representing the organization of the
   * {@link ModelCreator}.
   <p>
   * @note This function is an alias of setOrganization(String organization).
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @see #setOrganization(String organization)
   */ public
";


%javamethodmodifiers ModelCreator::unsetFamilyName "
/**
   * Unsets the \'family name\' portion of this {@link ModelCreator} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ModelCreator::unsetGivenName "
/**
   * Unsets the \'given name\' portion of this {@link ModelCreator} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ModelCreator::unsetEmail "
/**
   * Unsets the \'email\' portion of this {@link ModelCreator} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ModelCreator::unsetOrganization "
/**
   * Unsets the \'organization\' portion of this {@link ModelCreator} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ModelCreator::unsetOrganisation "
/**
   * (Alternate spelling) Unsets the \'organization\' portion of this {@link ModelCreator} object.
   <p>
   * @note This function is an alias of unsetOrganization().
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #unsetOrganization()
   */ public
";


%javamethodmodifiers ModelCreator::getAdditionalRDF "
/** * @internal */ public
";


%javamethodmodifiers ModelCreator::hasRequiredAttributes "
/**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link ModelCreator} object have been set.
   <p>
   * The only required elements for a {@link ModelCreator} object are the \'family
   * name\' and \'given name\'.
   <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers ModelCreator::hasBeenModified "
/** * @internal */ public
";


%javamethodmodifiers ModelCreator::resetModifiedFlags "
/** * @internal */ public
";


%typemap(javaimports) ModelHistory "
/** 
 *  MIRIAM-compliant data about a model\'s history.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The SBML specification beginning with Level&nbsp;2 Version&nbsp;2 defines
 * a standard approach to recording optional model history and model creator
 * information in a form that complies with MIRIAM (<a target=\'_blank\'
 * href=\'http://www.nature.com/nbt/journal/v23/n12/abs/nbt1156.html\'>\'Minimum
 * Information Requested in the Annotation of biochemical Models\'</a>,
 * <i>Nature Biotechnology</i>, vol. 23, no. 12, Dec. 2005).  LibSBML
 * provides the {@link ModelHistory} class as a convenient high-level interface for
 * working with model history data.
 <p>
 * {@link Model} histories in SBML consist of one or more <em>model creators</em>,
 * a single date of <em>creation</em>, and one or more <em>modification</em> dates.
 * The overall XML form of this data takes the following form:
 <p>
 <pre class=\'fragment\'>
 &lt;dc:creator&gt;
   &lt;rdf:Bag&gt;
     &lt;rdf:li rdf:parseType=\'Resource\'&gt;
       <span style=\'background-color: #d0eed0\'>+++</span>
       &lt;vCard:N rdf:parseType=\'Resource\'&gt;
         &lt;vCard:Family&gt;<span style=\'background-color: #bbb\'>family name</span>&lt;/vCard:Family&gt;
         &lt;vCard:Given&gt;<span style=\'background-color: #bbb\'>given name</span>&lt;/vCard:Given&gt;
       &lt;/vCard:N&gt;
       <span style=\'background-color: #d0eed0\'>+++</span>
       <span style=\'border-bottom: 2px dotted #888\'>&lt;vCard:EMAIL&gt;<span style=\'background-color: #bbb\'>email address</span>&lt;/vCard:EMAIL&gt;</span>
       <span style=\'background-color: #d0eed0\'>+++</span>
       <span style=\'border-bottom: 2px dotted #888\'>&lt;vCard:ORG rdf:parseType=\'Resource\'&gt;</span>
        <span style=\'border-bottom: 2px dotted #888\'>&lt;vCard:Orgname&gt;<span style=\'background-color: #bbb\'>organization name</span>&lt;/vCard:Orgname&gt;</span>
       <span style=\'border-bottom: 2px dotted #888\'>&lt;/vCard:ORG&gt;</span>
       <span style=\'background-color: #d0eed0\'>+++</span>
     &lt;/rdf:li&gt;
     <span style=\'background-color: #edd\'>...</span>
   &lt;/rdf:Bag&gt;
 &lt;/dc:creator&gt;
 &lt;dcterms:created rdf:parseType=\'Resource\'&gt;
   &lt;dcterms:W3CDTF&gt;<span style=\'background-color: #bbb\'>creation date</span>&lt;/dcterms:W3CDTF&gt;
 &lt;/dcterms:created&gt;
 &lt;dcterms:modified rdf:parseType=\'Resource\'&gt;
   &lt;dcterms:W3CDTF&gt;<span style=\'background-color: #bbb\'>modification date</span>&lt;/dcterms:W3CDTF&gt;
 &lt;/dcterms:modified&gt;
 <span style=\'background-color: #edd\'>...</span>
 </pre>
 <p>
 * In the template above, the <span style=\'border-bottom: 2px dotted #888\'>underlined</span>
 * portions are optional, the symbol
 * <span class=\'code\' style=\'background-color: #d0eed0\'>+++</span> is a placeholder
 * for either no content or valid XML content that is not defined by
 * the annotation scheme, and the ellipses
 * <span class=\'code\' style=\'background-color: #edd\'>...</span>
 * are placeholders for zero or more elements of the same form as the
 * immediately preceding element.  The various placeholders for content, namely
 * <span class=\'code\' style=\'background-color: #bbb\'>family name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>given name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>email address</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>organization</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>creation date</span>, and
 * <span class=\'code\' style=\'background-color: #bbb\'>modification date</span>
 * are data that can be filled in using the various methods on
 * the {@link ModelHistory} class described below.
 <p>
 * @see ModelCreator
 * @see Date
 */
"


%javamethodmodifiers ModelHistory::ModelHistory "
/**
   * Creates a new {@link ModelHistory} object.
   */ public
";


%javamethodmodifiers ModelHistory::ModelHistory(const ModelHistory& orig) "
/**
   * Copy constructor; creates a copy of this {@link ModelHistory} object.
   <p>
   * @param orig the object to copy.
   <p>
   * @throws SBMLConstructorException
   * Thrown if the argument <code>orig</code> is <code>null.</code>
   */ public
";


%javamethodmodifiers ModelHistory::clone() const "
/**
   * Creates and returns a deep copy of this {@link ModelHistory} object.
   <p>
   * @return the (deep) copy of this {@link ModelHistory} object.
   */ public
";


%javamethodmodifiers ModelHistory::getCreatedDate "
/**
   * Returns the \'creation date\' portion of this {@link ModelHistory} object.
   <p>
   * @return a {@link Date} object representing the creation date stored in
   * this {@link ModelHistory} object.
   */ public
";


%javamethodmodifiers ModelHistory::getModifiedDate "
/**
   * Returns the \'modified date\' portion of this {@link ModelHistory} object.
   <p>
   * Note that in the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.  If this {@link ModelHistory} object
   * contains more than one \'modified date\' value in the list, this method
   * will return the first one in the list.
   <p>
   * @return a {@link Date} object representing the date of modification
   * stored in this {@link ModelHistory} object.
   */ public
";


%javamethodmodifiers ModelHistory::isSetCreatedDate "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelHistory}\'s \'creation date\' is set.
   <p>
   * @return <code>true</code> if the creation date value of this {@link ModelHistory} is
   * set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ModelHistory::isSetModifiedDate "
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelHistory}\'s \'modified date\' is set.
   <p>
   * @return <code>true</code> if the modification date value of this {@link ModelHistory}
   * object is set, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ModelHistory::setCreatedDate(Date* date) "
/**
   * Sets the creation date of this {@link ModelHistory} object.
   <p>
   * @param date a {@link Date} object representing the date to which the \'created
   * date\' portion of this {@link ModelHistory} should be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers ModelHistory::setModifiedDate(Date* date) "
/**
   * Sets the modification date of this {@link ModelHistory} object.
   <p>
   * @param date a {@link Date} object representing the date to which the \'modified
   * date\' portion of this {@link ModelHistory} should be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers ModelHistory::addModifiedDate(Date* date) "
/**
   * Adds a copy of a {@link Date} object to the list of \'modified date\' values
   * stored in this {@link ModelHistory} object.
   <p>
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.
   <p>
   * @param date a {@link Date} object representing the \'modified date\' that should
   * be added to this {@link ModelHistory} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
";


%javamethodmodifiers ModelHistory::getListModifiedDates "
/**
   * Returns the list of \'modified date\' values (as {@link Date} objects) stored in
   * this {@link ModelHistory} object.
   <p>
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.
   <p>
   * @return the list of modification dates for this {@link ModelHistory} object.
   */ public
";


%javamethodmodifiers ModelHistory::getModifiedDate(unsigned int n) "
/**
   * Get the nth {@link Date} object in the list of \'modified date\' values stored
   * in this {@link ModelHistory} object.
   <p>
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.
   <p>
   * @return the nth {@link Date} in the list of ModifiedDates of this
   * {@link ModelHistory}.
   */ public
";


%javamethodmodifiers ModelHistory::getNumModifiedDates "
/**
   * Get the number of {@link Date} objects in this {@link ModelHistory} object\'s list of
   * \'modified dates\'.
   <p>
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.
   <p>
   * @return the number of ModifiedDates in this {@link ModelHistory}.
   */ public
";


%javamethodmodifiers ModelHistory::addCreator(ModelCreator * mc) "
/**
   * Adds a copy of a {@link ModelCreator} object to the list of \'model creator\'
   * values stored in this {@link ModelHistory} object.
   <p>
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML {@link ModelHistory} class supports this by storing a
   * list of \'model creator\' values.
   <p>
   * @param mc the {@link ModelCreator} to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ModelHistory::getListCreators "
/**
   * Returns the list of {@link ModelCreator} objects stored in this {@link ModelHistory}
   * object.
   <p>
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML {@link ModelHistory} class supports this by storing a
   * list of \'model creator\' values.
   <p>
   * @return the list of {@link ModelCreator} objects.
   */ public
";


%javamethodmodifiers ModelHistory::getCreator(unsigned int n) "
/**
   * Get the nth {@link ModelCreator} object stored in this {@link ModelHistory} object.
   <p>
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML {@link ModelHistory} class supports this by storing a
   * list of \'model creator\' values.
   <p>
   * @return the nth {@link ModelCreator} object.
   */ public
";


%javamethodmodifiers ModelHistory::getNumCreators "
/**
   * Get the number of {@link ModelCreator} objects stored in this {@link ModelHistory}
   * object.
   <p>
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML {@link ModelHistory} class supports this by storing a
   * list of \'model creator\' values.
   <p>
   * @return the number of ModelCreators objects.
   */ public
";


%javamethodmodifiers ModelHistory::hasRequiredAttributes "
/**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link ModelHistory} object have been set.
   <p>
   * The required elements for a {@link ModelHistory} object are \'created
   * name\', \'modified date\', and at least one \'model creator\'.
   <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%javamethodmodifiers ModelHistory::hasBeenModified "
/** * @internal */ public
";


%javamethodmodifiers ModelHistory::resetModifiedFlags "
/** * @internal */ public
";


%typemap(javaimports) RDFAnnotationParser "
/** 
 *  MIRIAM-compliant RDF annotation reader/writer.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * {@link RDFAnnotationParser} is a libSBML construct used as part of the libSBML
 * support for annotations conforming to the guidelines specified by MIRIAM
 * (<a target=\'_blank\'
 * href=\'http://www.nature.com/nbt/journal/v23/n12/abs/nbt1156.html\'>\'Minimum
 * Information Requested in the Annotation of biochemical Models\'</a>,
 * <i>Nature Biotechnology</i>, vol. 23, no. 12, Dec. 2005).  Section 6 of
 * the SBML Level&nbsp;2 and Level&nbsp;3 specification documents defines a
 * recommended way of encoding MIRIAM information using a subset of RDF (<a
 * target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
 * Format</a>).  The general scheme is as follows.  A set of RDF-based
 * annotations attached to a given SBML <code>&lt;annotation&gt;</code>
 * element are read by {@link RDFAnnotationParser} and converted into a list of
 * {@link CVTerm} objects.  There are different versions of the main method, {@link RDFAnnotationParser#parseRDFAnnotation(XMLNode, CVTermList)}  and
 * {@link RDFAnnotationParser#parseRDFAnnotation(XMLNode annotation)}, used
 * depending on whether the annotation in question concerns the MIRIAM model
 * history or other MIRIAM resource annotations.  A special object class,
 * {@link ModelHistory}, is used to make it easier to manipulate model history
 * annotations.
 <p>
 * All of the methods on {@link RDFAnnotationParser} are static; the class exists
 * only to encapsulate the annotation and {@link CVTerm} parsing and manipulation
 * functionality.
 */
"


%javamethodmodifiers RDFAnnotationParser::parseRDFAnnotation(const XMLNode *annotation, List *CVTerms, const char* metaId = NULL, XMLInputStream* stream = NULL) "
/**
   * Parses an annotation (given as an {@link XMLNode} tree) into a list of
   * {@link CVTerm} objects.
   <p>
   * This is used to take an annotation that has been read into an SBML
   * model, identify the RDF elements within it, and create a list of
   * corresponding {@link CVTerm} (controlled vocabulary term) objects.
   <p>
   * @param annotation {@link XMLNode} containing the annotation.
   * @param CVTerms list of {@link CVTerm} objects to be created.
   * @param metaId optional metaId, if set only the RDF annotation for this metaId will be returned.
   * @param stream optional {@link XMLInputStream} that facilitates error logging.
   <p>
   * 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::parseRDFAnnotation(const XMLNode *annotation, const char* metaId = NULL, XMLInputStream* stream = NULL) "
/**
   * Parses an annotation into a {@link ModelHistory} class instance.
   <p>
   * This is used to take an annotation that has been read into an SBML
   * model, identify the RDF elements representing model history
   * information, and create a list of corresponding {@link CVTerm} objects.
   <p>
   * @param annotation {@link XMLNode} containing the annotation.
   * @param stream optional {@link XMLInputStream} that facilitates error logging
   * @param metaId optional metaId, if set only the RDF annotation for this metaId will be returned.
   <p>
   * 
   <p>
   * @return a pointer to the {@link ModelHistory} created.
   */ public
";


%javamethodmodifiers RDFAnnotationParser::createAnnotation "
/**
   * Creates a blank annotation and returns its root {@link XMLNode} object.
   <p>
   * This creates a completely empty SBML <code>&lt;annotation&gt;</code>
   * element.  It is not attached to any SBML element.  An example of how
   * this might be used is illustrated in the following code fragment.  In
   * this example, suppose that <code>content</code> is an {@link XMLNode} object previously
   * created, containing MIRIAM-style annotations, and that <code>sbmlObject</code>
   * is an SBML object derived from {@link SBase} (e.g., a {@link Model}, or a {@link Species}, or
   * a {@link Compartment}, etc.).  Then:<pre class=\'fragment\'>
int success;                                   // Status code variable.

{@link XMLNode} RDF = createRDFAnnotation();          // Create XML structure.
success      = RDF.addChild(...content...);    // Put some content into it.
...                                            // Check return code value.

{@link XMLNode} ann = createAnnotation();             // Create &lt;annotation&gt;.
success      = ann.addChild(RDF);              // Put the annotation into it.
...                                            // Check return code value.

success      = sbmlObject.setAnnotation(ann); // Set object\'s annotation.
...                                            // Check return code value.
</pre>
   <p>
   * The SBML specification contains more information about the format of
   * annotations.  We urge readers to consult Section&nbsp;6 of the SBML
   * Level&nbsp;2 (Versions 2&ndash;4) and SBML Level&nbsp;3 specification
   * documents.
   <p>
   * @return a pointer to an {@link XMLNode} for the annotation
   <p>
   * 
   <p>
   * @see RDFAnnotationParser#createRDFAnnotation() 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::createRDFAnnotation "
/**
   * Creates a blank RDF element suitable for use in SBML annotations.
   <p>
   * The annotation created by this method has namespace declarations for
   * all the relevant XML namespaces used in RDF annotations and also has
   * an empty RDF element.  The result is the following XML:
<pre class=\'fragment\'>
&lt;rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'
         xmlns:dc=\'http://purl.org/dc/elements/1.1/\'
         xmlns:dcterms=\'http://purl.org/dc/terms/\'
         xmlns:vCard=\'http://www.w3.org/2001/vcard-rdf/3.0#\'
         xmlns:bqbiol=\'http://biomodels.net/biology-qualifiers/\'
         xmlns:bqmodel=\'http://biomodels.net/model-qualifiers/\' &gt;

&lt;/rdf:RDF&gt;
</pre>
   <p>
   * Note that this does not create the containing SBML
   * <code>&lt;annotation&gt;</code> element; the method
   * {@link RDFAnnotationParser#createAnnotation()}
   * is available for creating the container.
   <p>
   * @return a pointer to an {@link XMLNode}
   <p>
   * 
   <p>
   * @see RDFAnnotationParser#createAnnotation() 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::createRDFDescription(const SBase *obj) "
/**
   * Takes an SBML object and creates an empty {@link XMLNode} corresponding to an
   * RDF \'Description\' element.
   <p>
   * This method is a handy way of creating RDF description objects linked
   * by the appropriate \'metaid\' field to the given <code>object</code>, for
   * insertion into RDF annotations in a model.  The method retrieves the
   * \'metaid\' attribute from the <code>object</code> passed in as argument, then
   * creates an empty element having the following form
   * (where <span class=\'code\' style=\'background-color: #eed0d0\'>metaid</span> 
   * the value of the \'metaid\' attribute of the argument):
   <p>
 <pre class=\'fragment\'>
 &lt;rdf:Description rdf:about=&quot;#<span style=\'background-color: #eed0d0\'>metaid</span>&quot; xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'&gt;
 ...
 &lt;/rdf:Description&gt;
 </pre>
   * Note that this method does <em>not</em> create a complete annotation or
   * even an RDF element; it only creates the \'Description\' portion.  Callers
   * will need to use other methods such as
   * {@link RDFAnnotationParser#createRDFAnnotation()}
   * to create the rest of the structure for an annotation.
   <p>
   * @param obj the object to which the \'Description\' refers
   <p>
   * @return a new {@link XMLNode} containing the \'rdf:Description\' element with
   * its \'about\' attribute value set to the <code>object</code> meta identifier.
   <p>
   * 
   <p>
   * @see RDFAnnotationParser#createRDFAnnotation() 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::createCVTerms(const SBase *obj) "
/**
   * Takes a list of {@link CVTerm} objects and creates a the RDF \'Description\'
   * element.
   <p>
   * This essentially takes the given SBML object, reads out the {@link CVTerm}
   * objects attached to it, creates an RDF \'Description\' element to hold
   * the terms, and adds each term with appropriate qualifiers.
   <p>
   * @param obj the SBML object to start from
   <p>
   * @return the {@link XMLNode} tree corresponding to the Description element of
   * an RDF annotation.
   <p>
   * 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::parseCVTerms(const SBase * obj) "
/**
   * Takes a list of {@link CVTerm} objects and creates a complete SBML annotation
   * around it.
   <p>
   * This essentially takes the given SBML object, reads out the {@link CVTerm}
   * objects attached to it, calls * {@link RDFAnnotationParser#createRDFAnnotation()} to create an RDF
   * annotation to hold the terms, and finally calls * {@link RDFAnnotationParser#createAnnotation()} to wrap the result as
   * an SBML <code>&lt;annotation&gt;</code> element.
   <p>
   * @param obj the SBML object to start from
   <p>
   * @return the {@link XMLNode} tree corresponding to the annotation.
   <p>
   * 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::parseModelHistory(const SBase * obj) "
/**
   * Reads the model history and cvTerms stored in <code>obj</code> and creates the
   * XML structure for an SBML annotation representing that metadata if 
   * there is a model history stored in <code>obj</code>.
   <p>
   * @param obj any {@link SBase} object
   <p>
   * @return the {@link XMLNode} corresponding to an annotation containing 
   * MIRIAM-compliant model history and CV term information in RDF format.
   <p>
   * @note If the object does not have a history element stored then
   * <code>null</code> is returned even if CVTerms are present.
   <p>
   * 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::parseOnlyModelHistory(const SBase * obj) "
/**
   * Reads the model history stored in <code>obj</code> and creates the
   * XML structure for an SBML annotation representing that history.
   <p>
   * @param obj any {@link SBase} object
   <p>
   * @return the {@link XMLNode} corresponding to an annotation containing 
   * MIRIAM-compliant model history information in RDF format.
   <p>
   * 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::deleteRDFAnnotation(const XMLNode *annotation) "
/**
   * Deletes any SBML MIRIAM RDF annotation found in the given {@link XMLNode} 
   * tree and returns
   * any remaining annotation content.
   <p>
   * The name of the {@link XMLNode} given as parameter <code>annotation</code> must be
   * \'annotation\', or else this method returns <code>null.</code>  The method will
   * walk down the XML structure looking for elements that are in the
   * RDF XML namespace, and remove them if they conform to the syntax
   * of a History or {@link CVTerm} element.
   <p>
   * @param annotation the {@link XMLNode} tree within which the RDF annotation is
   * to be found and deleted
   <p>
   * @return the {@link XMLNode} structure that is left after RDF annotations are
   * deleted.
   <p>
   * 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::deleteRDFHistoryAnnotation(const XMLNode *annotation) "
/**
   * Deletes any SBML MIRIAM RDF \'History\' annotation found in the given 
   * {@link XMLNode} tree and returns
   * any remaining annotation content.
   <p>
   * The name of the {@link XMLNode} given as parameter <code>annotation</code> must be
   * \'annotation\', or else this method returns <code>null.</code>  The method will
   * walk down the XML structure looking for elements that are in the
   * RDF XML namespace, and remove any that conform to the syntax of a
   * History element.
   <p>
   * @param annotation the {@link XMLNode} tree within which the RDF annotation is
   * to be found and deleted
   <p>
   * @return the {@link XMLNode} structure that is left after RDF annotations are
   * deleted.
   <p>
   * 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::deleteRDFCVTermAnnotation(const XMLNode *annotation) "
/**
   * Deletes any SBML MIRIAM RDF \'{@link CVTerm}\' annotation found in the given 
   * {@link XMLNode} tree and returns
   * any remaining annotation content.
   <p>
   * The name of the {@link XMLNode} given as parameter <code>annotation</code> must be
   * \'annotation\', or else this method returns <code>null.</code>  The method will
   * walk down the XML structure looking for elements that are in the
   * RDF XML namespace, and remove any that conform to the syntax of a
   * {@link CVTerm} element.
   <p>
   * @param annotation the {@link XMLNode} tree within which the RDF annotation is
   * to be found and deleted
   <p>
   * @return the {@link XMLNode} structure that is left after RDF annotations are
   * deleted.
   <p>
   * 
   */ public
";


%javamethodmodifiers RDFAnnotationParser::hasRDFAnnotation(const XMLNode *annotation) "
/** * @internal */ public
";


%javamethodmodifiers RDFAnnotationParser::hasAdditionalRDFAnnotation(const XMLNode *annotation) "
/** * @internal */ public
";


%javamethodmodifiers RDFAnnotationParser::hasCVTermRDFAnnotation(const XMLNode *annotation) "
/** * @internal */ public
";


%javamethodmodifiers RDFAnnotationParser::hasHistoryRDFAnnotation(const XMLNode *annotation) "
/** * @internal */ public
";


%javamethodmodifiers RDFAnnotationParser::createRDFDescription(const std::string& metaid) "
/** * @internal */ public
";


%javamethodmodifiers RDFAnnotationParser::createRDFDescriptionWithCVTerms(const SBase *obj) "
/** * @internal */ public
";


%javamethodmodifiers RDFAnnotationParser::createRDFDescriptionWithHistory(const SBase *obj) "
/** * @internal */ public
";


%javamethodmodifiers RDFAnnotationParser::deriveCVTermsFromAnnotation(const XMLNode *annotation, List *CVTerms) "
/** * @internal */ public
";


%javamethodmodifiers RDFAnnotationParser::deriveHistoryFromAnnotation(const XMLNode *annotation) "
/** * @internal */ public
";


%typemap(javaimports) ISBMLExtensionNamespaces "
/** 
 *  
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * @internal
 */
"


%typemap(javaimports) SBaseExtensionPoint "
/** 
 *  Base class for extending SBML components
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * @internal 
 <p>
 * <p>
 * This class is used as part of the mechanism that connects plugin objects
 * (implemented using {@link SBasePlugin} or {@link SBMLDocumentPlugin}) to a given package
 * extension.  For instance, an implementation of an extended version of
 * {@link Model} (e.g., LayoutModelPlugin in the Layout package) would involve the
 * creation of an extension point using {@link SBaseExtensionPoint} and a mediator
 * object created using SBasePluginCreator, to \'plug\' the extended {@link Model}
 * object (LayoutModelPlugin) into the overall LayoutExtension object.
 <p>
 * The use of {@link SBaseExtensionPoint} is relatively straightforward.  The
 * class needs to be used for each extended SBML object implemented using
 * {@link SBMLDocumentPlugin} or {@link SBasePlugin}.  Doing so requires knowing just two
 * things:
 <p>
 * <ul>
 * <li> The short-form name of the <em>parent</em> package being extended.  The
 * parent package is often simply core SBML, identified in libSBML by the
 * nickname <code>\'core\'</code>, but a SBML Level&nbsp;3 package could
 * conceivably extend another Level&nbsp;3 package.
 <p>
 * <li> The libSBML type code assigned to the object being extended.  For
 * example, if an extension of {@link Model} is implemented, the relevant type code
 * is #SBML_MODEL, found in #SBMLTypeCode_t.
 *
 * </ul> <p>
 * The typical use of {@link SBaseExtensionPoint} is illustrated by the following
 * code fragment:
 <p>
 * <pre class=\'fragment\'>{.cpp}
 * {@link SBaseExtensionPoint} docExtPoint(\'core\', SBML_DOCUMENT);
 * {@link SBaseExtensionPoint} modelExtPoint(\'core\', SBML_MODEL);
 * 
 * SBasePluginCreator&lt;GroupsSBMLDocumentPlugin, GroupsExtension&gt; docPluginCreator(docExtPoint, pkgURIs);
 * SBasePluginCreator&lt;GroupsModelPlugin, GroupsExtension&gt; modelPluginCreator(modelExtPoint, pkgURIs);</pre>
 <p>
 * The code above shows two core SBML components being extended: the
 * document object, and the {@link Model} object.  These extended objects are
 * created elsewhere (not shown) as the
 * <code>GroupsSBMLDocumentPlugin</code> and <code>GroupsModelPlugin</code>
 * objects.  The corresponding {@link SBaseExtensionPoint} objects are handed as
 * arguments to the constructor for SBasePluginCreator to create the
 * connection between the extended core components and the overall package
 * extension (here, for the Groups package, with the
 * <code>GroupsExtension</code> object).
 <p>
 * The code above is typically placed in the implementation of the
 * <code>init()</code> method of the package class derived from
 * {@link SBMLExtension}.  (For the example above, it would be in the
 * <code>GroupsExtension.cpp</code> file.)
 */
"


%javamethodmodifiers SBaseExtensionPoint::SBaseExtensionPoint(const std::string& pkgName, int typeCode) "
/**
   * Constructor for {@link SBaseExtensionPoint}.
   <p>
   * The use of {@link SBaseExtensionPoint} is relatively straightforward.  The
   * class needs to be used for each extended SBML object implemented
   * using {@link SBMLDocumentPlugin} or {@link SBasePlugin}.  Doing so requires knowing
   * just two things:
   <p>
   * <ul>
   * <li> The short-form name of the <em>parent</em> package being extended.
   * The parent package is often simply core SBML, identified in libSBML
   * by the nickname <code>\'core\'</code>, but a SBML Level&nbsp;3
   * package could conceivably extend another Level&nbsp;3 package and
   * the mechanism supports this.
   <p>
   * <li> The libSBML type code assigned to the object being extended.
   * For example, if an extension of {@link Model} is implemented, the relevant
   * type code is SBML_MODEL, found in #SBMLTypeCode_t.
   *
   * </ul> <p>
   * @param pkgName the short-form name of the parent package where
   * that this package extension is extending.
   <p>
   * @param typeCode the type code of the object being extended.
   */ public
";


%javamethodmodifiers SBaseExtensionPoint::SBaseExtensionPoint(const SBaseExtensionPoint& rhs) "
/**
   * Copy constructor.
   <p>
   * This creates a copy of an {@link SBaseExtensionPoint} instance.
   <p>
   * @param rhs the object to copy.
   */ public
";


%javamethodmodifiers SBaseExtensionPoint::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBaseExtensionPoint} object.
   <p>
   * @return the (deep) copy of this {@link SBaseExtensionPoint} object.
   */ public
";


%javamethodmodifiers SBaseExtensionPoint::getPackageName() const "
/**
   * Returns the package name of this extension point.
   */ public
";


%javamethodmodifiers SBaseExtensionPoint::getTypeCode() const "
/**
   * Returns the libSBML type code of this extension point.
   */ public
";


%typemap(javaimports) SBasePlugin "
/** 
 *  Base class for extending SBML objects in packages.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The {@link SBasePlugin} class is libSBML\'s base class for extensions of core SBML
 * component objects.  {@link SBasePlugin} defines basic virtual methods for
 * reading/writing/checking additional attributes and/or subobjects; these
 * methods should be overridden by subclasses to implement the necessary
 * features of an extended SBML object.
 <p>
 * Perhaps the easiest way to explain and motivate the role of {@link SBasePlugin} is
 * through an example.  The SBML Layout package specifies the existence of an
 * element, <code>&lt;listOfLayouts&gt;</code>, contained inside an SBML
 * <code>&lt;model&gt;</code> element.  In terms of libSBML components, this
 * means a new ListOfLayouts class of objects must be defined, and this
 * object placed in an <em>extended</em> class of {@link Model} (because {@link Model} in
 * plain/core SBML does not allow the inclusion of a ListOfLayouts
 * subobject).  This extended class of {@link Model} is LayoutModelPlugin, and it is
 * derived from {@link SBasePlugin}.
 <p>
 * <h2>How to extend {@link SBasePlugin} for a package implementation</h2>
 * <p>
 * LibSBML package extensions can extend existing libSBML objects such as {@link Model}
 * using {@link SBasePlugin} as a base class, to hold attributes and/or subcomponents
 * necessary for the SBML package being implemented.  Package developers must
 * implement an {@link SBasePlugin} extended class for each element to be extended
 * (e.g., {@link Model}, {@link Reaction}, and others) where additional attributes and/or
 * top-level objects of the package extension are directly contained.  The
 * following subsections detail the basic steps necessary to use {@link SBasePlugin}
 * for the implementation of a class extension.
 <p>
 * <h3>1. Identify the SBML components that need to be extended</h3>
 <p>
 * The specification for a SBML Level&nbsp;3 package will define the
 * attributes and subojects that make up the package constructs.  Those
 * constructs that modify existing SBML components such as {@link Model},
 * {@link Reaction}, etc., will be the ones that need to be extended using {@link SBasePlugin}.
 <p>
 * For example, the Layout package makes additions to {@link Model},
 * {@link SpeciesReference}, and the <code>&lt;sbml&gt;</code> element (which is
 * represented in libSBML by {@link SBMLDocument}).  This means that the Layout
 * package extension in libSBML needs to define extended versions of {@link Model},
 * {@link SpeciesReference} and {@link SBMLDocument}.  Elements <em>other</em> than the SBML
 * document need to be implemented using {@link SBasePlugin}; the document component
 * must be implemented using {@link SBMLDocumentPlugin} instead.
 <p>
 * <h3>2. Create a {@link SBasePlugin} subclass for each extended SBML component</h3>
 <p>
 * A new class definition that subclasses {@link SBasePlugin} needs to be created for
 * each SBML component to be extended by the package.  For instance, the
 * Layout package needs LayoutModelPlugin and LayoutSpeciesReferencePlugin.
 * (As mentioned above, the Layout class also needs LayoutSBMLDocumentPlugin,
 * but this one is implemented using {@link SBMLDocumentPlugin} instead of
 * {@link SBasePlugin}.)  Below, we describe in detail the different parts of an
 * {@link SBasePlugin} subclass definition.
 <p>
 * <h4>2.1 Define protected data members</h4>
 <p>
 * Data attributes on each extended class in an SBML package will have one of
 * the data types <code>String</code>, <code>double</code>,
 * <code>int</code>, or <code>boolean</code>.  Subelements/subobjects will normally
 * be derived from the {@link ListOf} class or from {@link SBase}.
 <p>
 * The additional data members must be properly initialized in the class
 * constructor, and must be properly copied in the copy constructor and
 * assignment operator.  For example, the following data member is defined in
 * the <code>GroupsModelPlugin</code> class (in the file
 * <code>GroupsModelPlugin.h</code>):
 * <pre class=\'fragment\'>{.cpp}
ListOfGroups mGroups;
</pre>
 <p>
 * <h4>2.2 Override {@link SBasePlugin} class-related methods</h4>
 <p>
 * The derived class must override the constructor, copy constructor, assignment
 * operator (<code>operator=</code>) and <code>clone()</code> methods from
 * {@link SBasePlugin}.
 <p>
 * <h4>2.3 Override {@link SBasePlugin} virtual methods for attributes</h4>
 <p>
 * If the extended component is defined by the SBML Level&nbsp;3 package to have
 * attributes, then the extended class definition needs to override the
 * following internal methods on {@link SBasePlugin} and provide appropriate
 * implementations:
 <p>
 * <ul>
 * <li> <code>addExpectedAttributes(ExpectedAttributes& attributes)</code>: This
 * method should add the attributes that are expected to be found on this kind
 * of extended component in an SBML file or data stream.
 <p>
 * <li> <code>readAttributes(XMLAttributes attributes, ExpectedAttributes&
 * expectedAttributes)</code>: This method should read the attributes
 * expected to be found on this kind of extended component in an SBML file or
 * data stream.
 <p>
 * <li> <code>hasRequiredAttributes()</code>: This method should return <code>true</code>
 * if all of the required attribute for this extended component are present on
 * instance of the object.
 <p>
 * <li> <code>writeAttributes(XMLOutputStream stream)</code>: This method should
 * write out the attributes of an extended component.  The implementation should
 * use the different kinds of <code>writeAttribute</code> methods defined by
 * {@link XMLOutputStream} to achieve this.
 *
 * </ul> <p>
 * <h4>2.4 Override {@link SBasePlugin} virtual methods for subcomponents</h4>
 <p>
 * If the extended component is defined by the Level&nbsp;3 package to have
 * subcomponents (i.e., full XML elements rather than mere attributes), then the
 * extended class definition needs to override the following internal
 * {@link SBasePlugin} methods and provide appropriate implementations:
 <p>
 * <ul>
 * <li> <code>createObject(XMLInputStream stream)</code>: Subclasses must
 * override this method to create, store, and then return an SBML object
 * corresponding to the next {@link XMLToken} in the {@link XMLInputStream}.  To do this,
 * implementations can use methods like <code>peek()</code> on {@link XMLInputStream} to
 * test if the next object in the stream is something expected for the package.
 * For example, LayoutModelPlugin uses <code>peek()</code> to examine the next
 * element in the input stream, then tests that element against the Layout
 * namespace and the element name <code>\'listOfLayouts\'</code> to see if it\'s
 * the single subcomponent (ListOfLayouts) permitted on a {@link Model} object using the
 * Layout package.  If it is, it returns the appropriate object.
 <p>
 * <li> <code>connectToParent(SBase sbase)</code>: This creates a parent-child
 * relationship between a given extended component and its subcomponent(s).
 <p>
 * <li> <code>setSBMLDocument(SBMLDocument d)</code>: This method should set the
 * parent {@link SBMLDocument} object on the subcomponent object instances, so that the
 * subcomponent instances know which {@link SBMLDocument} contains them.
 <p>
 * <li> <code>enablePackageInternal(String& pkgURI, String& pkgPrefix,
 * boolean flag)</code>: This method should enable or disable the subcomponent
 * based on whether a given XML namespace is active.
 <p>
 * <li> <code>writeElements(XMLOutputStream stream)</code>: This method must be
 * overridden to provide an implementation that will write out the expected
 * subcomponents/subelements to the XML output stream.
 <p>
 * <li> <code>readOtherXML(SBase parentObject, {@link XMLInputStream} stream)</code>:
 * This function should be overridden if elements of annotation, notes, MathML
 * content, etc., need to be directly parsed from the given {@link XMLInputStream}
 * object.
 <p>
 * <li> <code>hasRequiredElements()</code>: This method should return <code>true</code> if
 * a given object contains all the required subcomponents defined by the
 * specification for that SBML Level&nbsp;3 package.
 *
 * </ul> <p>
 * <h4>2.5 Override {@link SBasePlugin} virtual methods for XML namespaces</h4>
 <p>
 * If the package needs to add additional <code>xmlns</code> attributes to
 * declare additional XML namespace URIs, the extended class should override the
 * following method:
 <p>
 * <ul>
 * <li> <code>writeXMLNS(XMLOutputStream stream)</code>: This method should
 * write out any additional XML namespaces that might be needed by a package
 * implementation.
 *
 * </ul> <p>
 * <h4>2.6 Implement additional methods as needed</h4>
 <p>
 * Extended component implementations can add whatever additional utility
 * methods are useful for their implementation.
 */
"


%javamethodmodifiers SBasePlugin::getElementNamespace() const "
/**
   * Returns the namespace URI of the package to which this plugin object
   * belongs.
   <p>
   * @return the XML namespace URI of the SBML Level&nbsp;3 package
   * implemented by this libSBML package extension.
   */ public
";


%javamethodmodifiers SBasePlugin::getPrefix() const "
/**
   * Returns the XML namespace prefix of the package to which this plugin
   * object belongs.
   <p>
   * @return the XML namespace prefix of the SBML Level&nbsp;3 package
   * implemented by this libSBML package extension.
   */ public
";


%javamethodmodifiers SBasePlugin::getPackageName() const "
/**
   * Returns the short-form name of the package to which this plugin
   * object belongs.
   <p>
   * @return the short-form package name (or nickname) of the SBML package
   * implemented by this package extension.
   */ public
";


%javamethodmodifiers SBasePlugin::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBasePlugin} object.
   <p>
   * @return the (deep) copy of this {@link SBasePlugin} object.
   */ public
";


%javamethodmodifiers SBasePlugin::getElementBySId(const std::string& id) "
/**
   * Return the first child object found with a given identifier.
   <p>
   * This method searches all the subobjects under this one, compares their
   * identifiers to <code>id</code>, and returns the first one that machines.
   <p>
   * Normally, <code>SId</code> type identifier values are unique across
   * a model in SBML.  However, in some circumstances they may not be, such
   * as if a model is invalid because of multiple objects having the same
   * identifier.
   <p>
   * @param id string representing the identifier of the object to find
   <p>
   * @return pointer to the first object with the given <code>id</code>.
   */ public
";


%javamethodmodifiers SBasePlugin::getElementByMetaId(const std::string& metaid) "
/**
   * Return the first child object found with a given meta identifier.
   <p>
   * This method searches all the subobjects under this one, compares their
   * meta identifiers to <code>metaid</code>, and returns the first one that machines.
   <p>
   * @param metaid string, the metaid of the object to find.
   <p>
   * @return pointer to the first object found with the given <code>metaid</code>.
   */ public
";


%javamethodmodifiers SBasePlugin::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns all child objects of this object.
   <p>
   * This returns a List object containing all child {@link SBase} objects of this
   * one, at any nesting depth.  Optionally, callers can supply a filter
   * that will establish the search criteria for matching objects.
   <p>
   * @param filter an {@link ElementFilter} to use for determining the properties
   * of the objects to be returned.
   <p>
   * @return a List of pointers to all children objects.
   */ public
";


%javamethodmodifiers SBasePlugin::setSBMLDocument(SBMLDocument* d) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::connectToParent(SBase *sbase) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::stripPackage(const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::getSBMLDocument "
/**
   * Returns the {@link SBMLDocument} object containing this object instance.
   <p>
   * <p>
 * LibSBML uses the class {@link SBMLDocument} as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * {@link SBMLDocument} object.  {@link SBMLDocument} corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
   <p>
   * This method allows the caller to obtain the {@link SBMLDocument} for the
   * current object.
   <p>
   * @return the parent {@link SBMLDocument} object of this plugin object.
   <p>
   * @see #getParentSBMLObject()
   */ public
";


%javamethodmodifiers SBasePlugin::getSBMLDocument() const "
/**
   * Returns the {@link SBMLDocument} object containing this object instance.
   <p>
   * <p>
 * LibSBML uses the class {@link SBMLDocument} as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * {@link SBMLDocument} object.  {@link SBMLDocument} corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
   <p>
   * This method allows the caller to obtain the {@link SBMLDocument} for the
   * current object.
   <p>
   * @return the parent {@link SBMLDocument} object of this plugin object.
   <p>
   * @see #getParentSBMLObject()
   */ public
";


%javamethodmodifiers SBasePlugin::getURI() const "
/**
   * Returns the XML namespace URI for the package to which this object belongs.
   <p>
   * <p>
 * In the XML representation of an SBML document, XML namespaces are used to
 * identify the origin of each XML construct used.  XML namespaces are
 * identified by their unique resource identifiers (URIs).  The core SBML
 * specifications stipulate the namespaces that must be used for core SBML
 * constructs; for example, all XML elements that belong to SBML Level&nbsp;3
 * Version&nbsp;1 Core must be placed in the XML namespace identified by the URI
 * <code>\'http://www.sbml.org/sbml/level3/version1/core\'</code>.  Individual
 * SBML Level&nbsp;3 packages define their own XML namespaces; for example,
 * all elements belonging to the SBML Level&nbsp;3 Layout Version&nbsp;1
 * package must be placed in the XML namespace
 * <code>\'http://www.sbml.org/sbml/level3/version1/layout/version1/\'</code>.
   <p>
   * This method first looks into the {@link SBMLNamespaces} object possessed by the
   * parent {@link SBMLDocument} object of the current object.  If this cannot be
   * found, this method returns the result of getElementNamespace().
   <p>
   * @return a string, the URI of the XML namespace to which this object belongs.
   <p>
   * @see #getPackageName()
   * @see #getElementNamespace()
   * @see SBMLDocument#getSBMLNamespaces()
   * @see #getSBMLDocument()
   */ public
";


%javamethodmodifiers SBasePlugin::getParentSBMLObject "
/**
   * Returns the parent object to which this plugin object is connected.
   <p>
   * @return the parent object of this object.
   */ public
";


%javamethodmodifiers SBasePlugin::getParentSBMLObject() const "
/**
   * Returns the parent object to which this plugin object is connected.
   <p>
   * @return the parent object of this object.
   */ public
";


%javamethodmodifiers SBasePlugin::setElementNamespace(const std::string &uri) "
/**
   * Sets the XML namespace to which this object belongs.
   <p>
   * <p>
 * In the XML representation of an SBML document, XML namespaces are used to
 * identify the origin of each XML construct used.  XML namespaces are
 * identified by their unique resource identifiers (URIs).  The core SBML
 * specifications stipulate the namespaces that must be used for core SBML
 * constructs; for example, all XML elements that belong to SBML Level&nbsp;3
 * Version&nbsp;1 Core must be placed in the XML namespace identified by the URI
 * <code>\'http://www.sbml.org/sbml/level3/version1/core\'</code>.  Individual
 * SBML Level&nbsp;3 packages define their own XML namespaces; for example,
 * all elements belonging to the SBML Level&nbsp;3 Layout Version&nbsp;1
 * package must be placed in the XML namespace
 * <code>\'http://www.sbml.org/sbml/level3/version1/layout/version1/\'</code>.
   <p>
   * @param uri the URI to assign to this object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #getElementNamespace()
   */ public
";


%javamethodmodifiers SBasePlugin::getLevel() const "
/**
   * Returns the SBML Level of the package extension of this plugin object.
   <p>
   * @return the SBML Level.
   <p>
   * @see #getVersion()
   */ public
";


%javamethodmodifiers SBasePlugin::getVersion() const "
/**
   * Returns the Version within the SBML Level of the package extension of
   * this plugin object.
   <p>
   * @return the SBML Version.
   <p>
   * @see #getLevel()
   */ public
";


%javamethodmodifiers SBasePlugin::getPackageVersion() const "
/**
   * Returns the package version of the package extension of this plugin
   * object.
   <p>
   * @return the package version of the package extension of this plugin
   * object.
   <p>
   * @see #getLevel()
   * @see #getVersion()
   */ public
";


%javamethodmodifiers SBasePlugin::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::hasIdentifierBeginningWith(const std::string& prefix) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::prependStringToAllIdentifiers(const std::string& prefix) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::transformIdentifiers(IdentifierTransformer* sidTransformer) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::getLine() const "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::getColumn() const "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::getSBMLNamespaces() const "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::logUnknownElement(const std::string &element, const unsigned int sbmlLevel, const unsigned int sbmlVersion, const unsigned int pkgVersion ) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::SBasePlugin(const std::string &uri, const std::string &prefix, SBMLNamespaces *sbmlns) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::SBasePlugin(const SBasePlugin& orig) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::getErrorLog "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::logUnknownAttribute(const std::string &attribute, const unsigned int sbmlLevel, const unsigned int sbmlVersion, const unsigned int pkgVersion, const std::string& element) "
/** * @internal */ public
";


%javamethodmodifiers SBasePlugin::logEmptyString(const std::string &attribute, const unsigned int sbmlLevel, const unsigned int sbmlVersion, const unsigned int pkgVersion, const std::string& element) "
/** * @internal */ public
";


%typemap(javaimports) SBMLDocumentPlugin "
/** 
 *  Base class for extending {@link SBMLDocument} in packages.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The {@link SBMLDocumentPlugin} class is a specialization of {@link SBasePlugin}
 * designed specifically for extending {@link SBMLDocument}.  All package
 * extensions must extend {@link SBMLDocument} to implement support for SBML
 * Level&nbsp;3 packages; these extensions can be subclasses of this
 * class or from a derived class of this class.
 <p>
 * <h2>How to extend {@link SBMLDocumentPlugin} for a package implementation</h2>
 * <p>
 * The following subsections detail the basic steps necessary to use
 * {@link SBMLDocumentPlugin} to extend {@link SBMLDocument} for a given package extension.
 <p>
 * <h3>1. Identify the changes necessary to {@link SBMLDocument}</h3>
 <p>
 * The specification for a SBML Level&nbsp;3 package will define the
 * changes to the SBML <code>&lt;sbml&gt;</code> element.  Packages
 * typically do not make any changes beyond adding an attribute named
 * \'required\' (discussed below), so in most cases, the extension of
 * {@link SBMLDocument} is very simple.  However, some packages do more.  For
 * instance, the Hierarchical Model Composition package adds subobjects
 * for lists of model definitions.  {@link SBMLDocumentPlugin} supports all these
 * cases.
 <p>
 * <h3>2. Create the {@link SBMLDocumentPlugin} subclass</h3>
 <p>
 * A package extension will only define one subclass of {@link SBMLDocumentPlugin}.
 * Below, we describe in detail the different parts of a subclass
 * definition.
 <p>
 * <h4>2.1 Override {@link SBasePlugin} class-related methods</h4>
 <p>
 * The derived class must override the constructor, copy constructor, assignment
 * operator (<code>operator=</code>) and <code>clone()</code> methods from
 * {@link SBasePlugin}.
 <p>
 * <h4>2.2 Determine the necessary value of the \'required\' attribute</h4>
 <p>
 * At minimum, it is necessary for a package implementation to add the
 * \'required\' attribute to the SBML <code>&lt;sbml&gt;</code> element
 * mandated by SBML for all Level&nbsp;3 packages, and this is done using
 * this class as a base.  If the \'required\' attribute is the <em>only</em>
 * addition necessary for a particular SBML Level&nbsp;3 package, then the
 * subclass of {@link SBMLDocumentPlugin} for the package can have a very simple
 * implementation.  Some Level&nbsp;3 packages add additional attributes or
 * elements to <code>&lt;sbml&gt;</code>, and their implementations would
 * go into the subclassed {@link SBMLDocumentPlugin}.
 <p>
 * {@link SBMLDocumentPlugin} provides methods with default implementations that
 * support managing the \'required\' attribute, so package extension code
 * does not need to provide implementations&mdash;they only need to set the
 * correct value for the SBML Level&nbsp;3 package based on its
 * specification.  The following are the virtual methods for working with
 * the \'required\' attribute.  Package extensions would only need to
 * override them in special circumstances:
 <p>
 * <ul>
 * <li> <code>setRequired(boolean value)</code>: This method sets the value
 * of the flag.
 <p>
 * <li> <code>getRequired()</code>: This method gets the value of the
 * \'required\' flag.
 <p>
 * <li> <code>isSetRequired()</code>: This method tests if the value has
 * been set.
 <p>
 * <li> <code>unsetRequired()</code>: This method unsets the value of the
 * \'required\' flag.
 *
 * </ul> <p>
 * <h4>2.3 Define protected data members</h4>
 <p>
 * An extended {@link SBMLDocument} object may need more than just the \'required\'
 * attribute, depending on what is defined in the specification for the
 * package being implemented.  Data attributes on the extended
 * <code>&lt;sbml&gt;</code> object in an SBML package will have one of the
 * data types <code>String</code>, <code>double</code>,
 * <code>int</code>, or <code>boolean</code>.  Subelements/subobjects will
 * normally be derived from the {@link ListOf} class or from {@link SBase}.
 <p>
 * The additional data members must be properly initialized in the class
 * constructor, and must be properly copied in the copy constructor and
 * assignment operator.
 <p>
 * <h4>2.4 Override virtual methods for attributes</h4>
 <p>
 * If the extended component is defined by the SBML Level&nbsp;3 package to
 * have attributes, then the extended {@link SBMLDocumentPlugin} class definition
 * needs to override the following internal methods that come from
 * {@link SBasePlugin} (the base class of {@link SBMLDocumentPlugin}) and provide
 * appropriate implementations:
 <p>
 * <ul>
 * <li> <code>addExpectedAttributes(ExpectedAttributes& attributes)</code>: This
 * method should add the attributes that are expected to be found on this kind
 * of extended component in an SBML file or data stream.
 <p>
 * <li> <code>readAttributes(XMLAttributes attributes, ExpectedAttributes&
 * expectedAttributes)</code>: This method should read the attributes
 * expected to be found on this kind of extended component in an SBML file or
 * data stream.
 <p>
 * <li> <code>hasRequiredAttributes()</code>: This method should return <code>true</code>
 * if all of the required attribute for this extended component are present on
 * instance of the object.
 <p>
 * <li> <code>writeAttributes(XMLOutputStream stream)</code>: This method should
 * write out the attributes of an extended component.  The implementation should
 * use the different kinds of <code>writeAttribute</code> methods defined by
 * {@link XMLOutputStream} to achieve this.
 *
 * </ul> <p>
 * <h4>2.5 Override virtual methods for subcomponents</h4>
 <p>
 * If the extended component is defined by the Level&nbsp;3 package to have
 * subcomponents (i.e., full XML elements rather than mere attributes),
 * then the extended class definition needs to override the following
 * internal methods on {@link SBasePlugin} (the base class of {@link SBMLDocumentPlugin})
 * and provide appropriate implementations:
 <p>
 * <ul>
 * <li> <code>createObject(XMLInputStream stream)</code>: Subclasses must
 * override this method to create, store, and then return an SBML object
 * corresponding to the next {@link XMLToken} in the {@link XMLInputStream}.  To do this,
 * implementations can use methods like <code>peek()</code> on {@link XMLInputStream} to
 * test if the next object in the stream is something expected for the package.
 * For example, LayoutModelPlugin uses <code>peek()</code> to examine the next
 * element in the input stream, then tests that element against the Layout
 * namespace and the element name <code>\'listOfLayouts\'</code> to see if it\'s
 * the single subcomponent (ListOfLayouts) permitted on a {@link Model} object using the
 * Layout package.  If it is, it returns the appropriate object.
 <p>
 * <li> <code>connectToParent(SBase sbase)</code>: This creates a parent-child
 * relationship between a given extended component and its subcomponent(s).
 <p>
 * <li> <code>setSBMLDocument(SBMLDocument d)</code>: This method should set the
 * parent {@link SBMLDocument} object on the subcomponent object instances, so that the
 * subcomponent instances know which {@link SBMLDocument} contains them.
 <p>
 * <li> <code>enablePackageInternal(String& pkgURI, String& pkgPrefix,
 * boolean flag)</code>: This method should enable or disable the subcomponent
 * based on whether a given XML namespace is active.
 <p>
 * <li> <code>writeElements(XMLOutputStream stream)</code>: This method must be
 * overridden to provide an implementation that will write out the expected
 * subcomponents/subelements to the XML output stream.
 <p>
 * <li> <code>readOtherXML(SBase parentObject, {@link XMLInputStream} stream)</code>:
 * This function should be overridden if elements of annotation, notes, MathML
 * content, etc., need to be directly parsed from the given {@link XMLInputStream}
 * object.
 <p>
 * <li> <code>hasRequiredElements()</code>: This method should return <code>true</code> if
 * a given object contains all the required subcomponents defined by the
 * specification for that SBML Level&nbsp;3 package.
 *
 * </ul> <p>
 * <h4>2.6 Override virtual methods for XML namespaces</h4>
 <p>
 * If the package needs to add additional <code>xmlns</code> attributes to
 * declare additional XML namespace URIs, the extended class should
 * override the following method coming from {@link SBasePlugin} (the parent class
 * of {@link SBMLDocumentPlugin}):
 <p>
 * <ul>
 * <li> <code>writeXMLNS(XMLOutputStream stream)</code>: This method should
 * write out any additional XML namespaces that might be needed by a package
 * implementation.
 *
 * </ul> <p>
 * <h4>2.7 Implement additional methods as needed</h4>
 <p>
 * Extended {@link SBMLDocumentPlugin} implementations can add whatever additional
 * utility methods are useful for their implementation.
 */
"


%javamethodmodifiers SBMLDocumentPlugin::SBMLDocumentPlugin(const std::string &uri, const std::string &prefix, SBMLNamespaces *sbmlns) "
/**
   * Creates a new {@link SBMLDocumentPlugin} object using the given parameters.
   <p>
   * <p>
 * In the XML representation of an SBML document, XML namespaces are used to
 * identify the origin of each XML construct used.  XML namespaces are
 * identified by their unique resource identifiers (URIs).  The core SBML
 * specifications stipulate the namespaces that must be used for core SBML
 * constructs; for example, all XML elements that belong to SBML Level&nbsp;3
 * Version&nbsp;1 Core must be placed in the XML namespace identified by the URI
 * <code>\'http://www.sbml.org/sbml/level3/version1/core\'</code>.  Individual
 * SBML Level&nbsp;3 packages define their own XML namespaces; for example,
 * all elements belonging to the SBML Level&nbsp;3 Layout Version&nbsp;1
 * package must be placed in the XML namespace
 * <code>\'http://www.sbml.org/sbml/level3/version1/layout/version1/\'</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param uri the URI of the SBML Level&nbsp;3 package implemented by
   * this libSBML package extension.
   <p>
   * @param prefix the XML namespace prefix being used for the package.
   <p>
   * @param sbmlns the {@link SBMLNamespaces} object for the package.
   */ public
";


%javamethodmodifiers SBMLDocumentPlugin::SBMLDocumentPlugin(const SBMLDocumentPlugin& orig) "
/**
   * Copy constructor.
   <p>
   * This creates a copy of this object.
   <p>
   * @param orig the {@link SBMLDocumentPlugin} instance to copy.
   */ public
";


%javamethodmodifiers SBMLDocumentPlugin::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLDocumentPlugin} object.
   <p>
   * @return the (deep) copy of this {@link SBMLDocumentPlugin} object.
   */ public
";


%javamethodmodifiers SBMLDocumentPlugin::setRequired(bool value) "
/**
   * Sets the SBML \'required\' attribute value.
   <p>
   * <p>
 * SBML Level&nbsp;3 requires that every package defines an attribute named
 * \'required\' on the root <code>&lt;sbml&gt;</code> element in an SBML file
 * or data stream.  The attribute, being in the namespace of the Level&nbsp;3
 * package in question, must be prefixed by the XML namespace prefix
 * associated with the package.  The value of the \'required\' attribute
 * indicates whether constructs in that package may change the mathematical
 * interpretation of constructs defined in SBML Level&nbsp;3 Core.  A
 * \'required\' value of <code>true</code> indicates that the package may do so.  The
 * value of the attribute is set by the Level&nbsp;3 package specification,
 * and does <em>not</em> depend on the actual presence or absence of particular
 * package constructs in a given SBML document: in other words, if the
 * package specification defines any construct that can change the model\'s
 * meaning, the value of the \'required\' attribute must always be set to 
 * <code>true</code> in any SBML document that uses the package.
 <p>
 * The XML namespace declaration for an SBML Level&nbsp;3 package is an
 * indication that a model makes use of features defined by that package,
 * while the \'required\' attribute indicates whether the features may be
 * ignored without compromising the mathematical meaning of the model.  Both
 * are necessary for a complete reference to an SBML Level&nbsp;3 package.
   <p>
   * @param value the value to be assigned to the \'required\' attribute.
   * The \'required\' attribute takes a Boolean value, either <code>true</code> or
   * <code>false.</code>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   *
   * </ul> <p>
   * @see #getRequired()
   * @see #isSetRequired()
   * @see #unsetRequired()
   */ public
";


%javamethodmodifiers SBMLDocumentPlugin::getRequired() const "
/**
   * Returns the value of the \'required\' attribute.
   <p>
   * <p>
 * SBML Level&nbsp;3 requires that every package defines an attribute named
 * \'required\' on the root <code>&lt;sbml&gt;</code> element in an SBML file
 * or data stream.  The attribute, being in the namespace of the Level&nbsp;3
 * package in question, must be prefixed by the XML namespace prefix
 * associated with the package.  The value of the \'required\' attribute
 * indicates whether constructs in that package may change the mathematical
 * interpretation of constructs defined in SBML Level&nbsp;3 Core.  A
 * \'required\' value of <code>true</code> indicates that the package may do so.  The
 * value of the attribute is set by the Level&nbsp;3 package specification,
 * and does <em>not</em> depend on the actual presence or absence of particular
 * package constructs in a given SBML document: in other words, if the
 * package specification defines any construct that can change the model\'s
 * meaning, the value of the \'required\' attribute must always be set to 
 * <code>true</code> in any SBML document that uses the package.
 <p>
 * The XML namespace declaration for an SBML Level&nbsp;3 package is an
 * indication that a model makes use of features defined by that package,
 * while the \'required\' attribute indicates whether the features may be
 * ignored without compromising the mathematical meaning of the model.  Both
 * are necessary for a complete reference to an SBML Level&nbsp;3 package.
   <p>
   * @return the boolean value of \'required\' attribute for the SBML package.
   <p>
   * @see #setRequired(boolean value)
   * @see #isSetRequired()
   * @see #unsetRequired()
   */ public
";


%javamethodmodifiers SBMLDocumentPlugin::isSetRequired() const "
/**
   * Returns the value of the \'required\' attribute.
   <p>
   * <p>
 * SBML Level&nbsp;3 requires that every package defines an attribute named
 * \'required\' on the root <code>&lt;sbml&gt;</code> element in an SBML file
 * or data stream.  The attribute, being in the namespace of the Level&nbsp;3
 * package in question, must be prefixed by the XML namespace prefix
 * associated with the package.  The value of the \'required\' attribute
 * indicates whether constructs in that package may change the mathematical
 * interpretation of constructs defined in SBML Level&nbsp;3 Core.  A
 * \'required\' value of <code>true</code> indicates that the package may do so.  The
 * value of the attribute is set by the Level&nbsp;3 package specification,
 * and does <em>not</em> depend on the actual presence or absence of particular
 * package constructs in a given SBML document: in other words, if the
 * package specification defines any construct that can change the model\'s
 * meaning, the value of the \'required\' attribute must always be set to 
 * <code>true</code> in any SBML document that uses the package.
 <p>
 * The XML namespace declaration for an SBML Level&nbsp;3 package is an
 * indication that a model makes use of features defined by that package,
 * while the \'required\' attribute indicates whether the features may be
 * ignored without compromising the mathematical meaning of the model.  Both
 * are necessary for a complete reference to an SBML Level&nbsp;3 package.
   <p>
   * @return <code>true</code> if the \'required\' attribute of this {@link SBMLDocument}
   * has been set to <code>true</code>, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLDocumentPlugin::unsetRequired "
/**
   * Unsets the value of the \'required\' attribute of this {@link SBMLDocumentPlugin}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLDocumentPlugin::isCompFlatteningImplemented() const "
/** * @internal */ public
";


%javamethodmodifiers SBMLDocumentPlugin::checkConsistency "
/** * @internal */ public
";


%typemap(javaimports) SBMLExtension "
/** 
 *  Base class for SBML Level 3 package plug-ins.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The {@link SBMLExtension} class is a component of the libSBML package extension
 * mechanism.  It is an abstract class that is extended by each package
 * extension implementation. 
 <p>
 * <h2>Special handling for SBML Level&nbsp;2</h2>
 * <p>
 * Due to the historical background of the SBML Layout package, libSBML
 * implements special behavior for that package: it <em>always</em> creates a
 * Layout plugin object for any SBML Level&nbsp;2 document it reads in,
 * regardless of whether that document actually uses Layout constructs.  This
 * is unlike the case for SBML Level&nbsp;3 documents that use Layout; for
 * them, libSBML will <em>not</em> create a plugin object unless the document
 * actually declares the use of the Layout package (via the usual Level&nbsp;3
 * namespace declaration for Level&nbsp;3 packages).
 <p>
 * This has the following consequence.  If an application queries for the
 * presence of Layout in an SBML Level&nbsp;2 document by testing only for
 * the existence of the plugin object, <strong>it will always get a positive
 * result</strong>; in other words, the presence of a Layout extension
 * object is not an indication of whether a read-in Level&nbsp;2 document
 * does or does not use SBML Layout.  Instead, callers have to query
 * explicitly for the existence of layout information.  An example of such a
 * query is the following code:
 <p>
<pre class=\'fragment\'>
// Assume \'doc\' below is an {@link SBMLDocument} object.
{@link Model} m = doc.getModel();
LayoutModelPlugin lmp = (LayoutModelPlugin) m.getPlugin(\'layout\');
if (lmp != null)
{
  int numLayouts = lmp.getNumLayouts();
  // If numLayouts is greater than zero, then the model uses Layout.
}
</pre>
<p>
 * The special, always-available Level&nbsp;2 Layout behavior was motivated
 * by a desire to support legacy applications.  In SBML Level&nbsp;3, the
 * Layout package uses the normal SBML Level&nbsp;3 scheme of requiring
 * declarations on the SBML document element.  This means that upon reading a
 * model, libSBML knows right away whether it contains layout information.
 * In SBML Level&nbsp;2, there is no top-level declaration because layout is
 * stored as annotations in the body of the model.  Detecting the presence of
 * layout information when reading a Level&nbsp;2 model requires parsing the
 * annotations.  For efficiency reasons, libSBML normally does not parse
 * annotations automatically when reading a model.  However, applications
 * that predated the introduction of Level&nbsp;3 Layout and the updated
 * version of libSBML never had to do anything special to enable parsing
 * layout; the facilities were always available for every Level&nbsp;2 model
 * as long as libSBML was compiled with Layout support.  To avoid burdening
 * developers of legacy applications with the need to modify their software,
 * libSBML provides backward compatibility by always preloading the Layout
 * package extension when reading Level&nbsp;2 models.  The same applies to
 * the creation of Level&nbsp;2 models: with the plugin-oriented libSBML,
 * applications normally would have to take deliberate steps to activate
 * package code, instantiate objects, manage namespaces, and so on.  LibSBML
 * again loads the Layout package plugin automatically when creating a
 * Level&nbsp;2 model, thereby making the APIs available to legacy
 * applications without further work on their part.
 */
"


%javamethodmodifiers SBMLExtension::SBMLExtension "
/**
   * Constructor.
   */ public
";


%javamethodmodifiers SBMLExtension::SBMLExtension(const SBMLExtension& orig) "
/**
   * Copy constructor.
   <p>
   * This creates a copy of an {@link SBMLExtension} object.
   <p>
   * @param orig The {@link SBMLExtension} object to copy.
   */ public
";


%javamethodmodifiers SBMLExtension::getNumOfSBasePlugins() const "
/**
   * Returns the number of SBasePluginCreatorBase objects stored in this
   * object.
   <p>
   * @return the total number of SBasePluginCreatorBase objects stored in
   * this {@link SBMLExtension}-derived object.
   */ public
";


%javamethodmodifiers SBMLExtension::getNumOfSupportedPackageURI() const "
/**
   * Returns the number of supported package namespace URIs.
   <p>
   * @return the number of supported package XML namespace URIs of this
   * package extension.
   */ public
";


%javamethodmodifiers SBMLExtension::isSupported(const std::string& uri) const "
/**
   * Returns <code>true</code> if the given XML namespace URI is supported by this
   * package extension.
   <p>
   * @return <code>true</code> if the given XML namespace URI (equivalent to a package
   * version) is supported by this package extension, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLExtension::getSupportedPackageURI "
/**
   * Returns the nth XML namespace URI.
   <p>
   * @param n the index number of the namespace URI being sought.
<p>
   * @return a string representing the XML namespace URI understood to be
   * supported by this package.  An empty string will be returned if there is
   * no nth URI.
   */ public
";


%javamethodmodifiers SBMLExtension::clone() const "
/**
   * Creates and returns a deep copy of this {@link SBMLExtension} object.
   <p>
   * @return a (deep) copy of this {@link SBMLExtension} object.
   <p>
   * <p>
 * @note
 * This is a method that package extension implementations must override.
 * See the libSBML documentation on extending libSBML to support SBML
 * packages for more information on this topic.
   */ public
";


%javamethodmodifiers SBMLExtension::getName() const "
/**
   * Returns the nickname of this package.
   <p>
   * This returns the short-form name of an SBML Level&nbsp;3 package
   * implemented by a given {@link SBMLExtension}-derived class.  Examples of
   * such names are \'layout\', \'fbc\', etc.
   <p>
   * @return a string, the nickname of SBML package.
   <p>
   * <p>
 * @note
 * This is a method that package extension implementations must override.
 * See the libSBML documentation on extending libSBML to support SBML
 * packages for more information on this topic.
   */ public
";


%javamethodmodifiers SBMLExtension::getURI "
/**
   * Returns the XML namespace URI for a given Level and Version.
   <p>
   * @param sbmlLevel the SBML Level.
   * @param sbmlVersion the SBML Version.
   * @param pkgVersion the version of the package.
   <p>
   * @return a string, the XML namespace URI for the package for the given
   * SBML Level, SBML Version, and package version.
   <p>
   * <p>
 * @note
 * This is a method that package extension implementations must override.
 * See the libSBML documentation on extending libSBML to support SBML
 * packages for more information on this topic.
   */ public
";


%javamethodmodifiers SBMLExtension::getLevel(const std::string &uri) const "
/**
   * Returns the SBML Level associated with the given XML namespace URI.
   <p>
   * @param uri the string of URI that represents a version of the package.
   <p>
   * @return the SBML Level associated with the given URI of this package.
   <p>
   * <p>
 * @note
 * This is a method that package extension implementations must override.
 * See the libSBML documentation on extending libSBML to support SBML
 * packages for more information on this topic.
   */ public
";


%javamethodmodifiers SBMLExtension::getVersion(const std::string &uri) const "
/**
   * Returns the SBML Version associated with the given XML namespace URI.
   <p>
   * @param uri the string of URI that represents a version of the package.
   <p>
   * @return the SBML Version associated with the given URI of this package.
   <p>
   * <p>
 * @note
 * This is a method that package extension implementations must override.
 * See the libSBML documentation on extending libSBML to support SBML
 * packages for more information on this topic.
   */ public
";


%javamethodmodifiers SBMLExtension::getPackageVersion(const std::string &uri) const "
/**
   * Returns the package version associated with the given XML namespace URI.
   <p>
   * @param uri the string of URI that represents a version of this package.
   <p>
   * @return the package version associated with the given URI of this package.
   <p>
   * <p>
 * @note
 * This is a method that package extension implementations must override.
 * See the libSBML documentation on extending libSBML to support SBML
 * packages for more information on this topic.
   */ public
";


%javamethodmodifiers SBMLExtension::getStringFromTypeCode(int typeCode) const "
/**
   * Returns a string representation of a type code.
   <p>
   * This method takes a numerical type code <code>typeCode</code> for a component
   * object implemented by this package extension, and returns a string
   * representing that type code.
   <p>
   * @param typeCode the type code to turn into a string.
   <p>
   * @return the string representation of <code>typeCode</code>.
   <p>
   * <p>
 * @note
 * This is a method that package extension implementations must override.
 * See the libSBML documentation on extending libSBML to support SBML
 * packages for more information on this topic.
   */ public
";


%javamethodmodifiers SBMLExtension::getSBMLExtensionNamespaces(const std::string &uri) const "
/**
   * Returns a specialized {@link SBMLNamespaces} object corresponding to a given
   * namespace URI.
   <p>
   * LibSBML package extensions each define a subclass of
   * {@link SBMLNamespaces}.
   <p>
   * The present method returns the appropriate object corresponding
   * to the given XML namespace URI in argument <code>uri</code>.
   <p>
   * @param uri the namespace URI that represents one of versions of the
   * package implemented in this extension.
   <p>
   * @return an {@link SBMLNamespaces}  
   * object, or <code>null</code> if the given <code>uri</code> is not defined in the
   * corresponding package.
   <p>
   * <p>
 * @note
 * This is a method that package extension implementations must override.
 * See the libSBML documentation on extending libSBML to support SBML
 * packages for more information on this topic.
   */ public
";


%javamethodmodifiers SBMLExtension::setEnabled(bool isEnabled) "
/**
   * Enable or disable this package.
   <p>
   * @param isEnabled flag indicating whether to enable (if <code>true</code>) or
   * disable (<code>false</code>) this package extension.
   <p>
   * @return <code>true</code> if this call succeeded; <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLExtension::isEnabled() const "
/**
   * Returns <code>true</code> if this package is enabled.
   <p>
   * @return <code>true</code> if this package is enabled, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLExtension::removeL2Namespaces(XMLNamespaces* xmlns) const "
/**
   * Removes the package\'s Level&nbsp;2 namespace(s).
   <p>
   * <p>
 * This method is related to special facilities designed to support
 * legacy behaviors surrounding SBML Level&nbsp;2 models.  Due to the
 * historical background of the SBML Layout package, libSBML implements
 * special behavior for that package: it <em>always</em> creates a Layout
 * plugin object for any SBML Level&nbsp;2 document it reads in,
 * regardless of whether that document actually uses Layout constructs.
 * Since Level&nbsp;2 does not use namespaces on the top level of the
 * SBML document object, libSBML simply keys off the fact that the model
 * is a Level&nbsp;2 model.  To allow the extensions for the Layout and
 * Render (and possibly other) packages to support this behavior, the
 * {@link SBMLExtension} class contains special methods to allow packages to
 * hook themselves into the Level&nbsp;2 parsing apparatus when necessary.
   <p>
   * @param xmlns an {@link XMLNamespaces} object that will be used for the annotation.
   * Implementations should override this method with something that removes
   * the package\'s namespace(s) from the set of namespaces in <code>xmlns</code>.  For
   * instance, here is the code from the Layout package extension:
   * <pre class=\'fragment\'>{.cpp}
for (int n = 0; n &lt; xmlns-&gt;getNumNamespaces(); n++)
{
  if (xmlns-&gt;getURI(n) == {@link LayoutExtension#getXmlnsL2()})
    xmlns-&gt;remove(n);
}
</pre>
   */ public
";


%javamethodmodifiers SBMLExtension::addL2Namespaces(XMLNamespaces *xmlns) const "
/**
   * Adds the package\'s Level&nbsp;2 namespace(s).
   <p>
   * <p>
 * This method is related to special facilities designed to support
 * legacy behaviors surrounding SBML Level&nbsp;2 models.  Due to the
 * historical background of the SBML Layout package, libSBML implements
 * special behavior for that package: it <em>always</em> creates a Layout
 * plugin object for any SBML Level&nbsp;2 document it reads in,
 * regardless of whether that document actually uses Layout constructs.
 * Since Level&nbsp;2 does not use namespaces on the top level of the
 * SBML document object, libSBML simply keys off the fact that the model
 * is a Level&nbsp;2 model.  To allow the extensions for the Layout and
 * Render (and possibly other) packages to support this behavior, the
 * {@link SBMLExtension} class contains special methods to allow packages to
 * hook themselves into the Level&nbsp;2 parsing apparatus when necessary.
   <p>
   * @param xmlns an {@link XMLNamespaces} object that will be used for the annotation.
   * Implementation should override this method with something that adds
   * the package\'s namespace(s) to the set of namespaces in <code>xmlns</code>.  For
   * instance, here is the code from the Layout package extension:
   * <pre class=\'fragment\'>{.cpp}
if (!xmlns-&gt;containsUri( {@link LayoutExtension#getXmlnsL2()}))
  xmlns-&gt;add({@link LayoutExtension#getXmlnsL2()}, \'layout\');
</pre>
   */ public
";


%javamethodmodifiers SBMLExtension::enableL2NamespaceForDocument(SBMLDocument* doc) const "
/**
   * Called to enable the package on the {@link SBMLDocument} object.
   <p>
   * <p>
 * This method is related to special facilities designed to support
 * legacy behaviors surrounding SBML Level&nbsp;2 models.  Due to the
 * historical background of the SBML Layout package, libSBML implements
 * special behavior for that package: it <em>always</em> creates a Layout
 * plugin object for any SBML Level&nbsp;2 document it reads in,
 * regardless of whether that document actually uses Layout constructs.
 * Since Level&nbsp;2 does not use namespaces on the top level of the
 * SBML document object, libSBML simply keys off the fact that the model
 * is a Level&nbsp;2 model.  To allow the extensions for the Layout and
 * Render (and possibly other) packages to support this behavior, the
 * {@link SBMLExtension} class contains special methods to allow packages to
 * hook themselves into the Level&nbsp;2 parsing apparatus when necessary.
   <p>
   * @param doc the {@link SBMLDocument} object for the model.
   * Implementations should override this method with something that
   * enables the package based on the package\'s namespace(s). For example,
   * here is the code from the Layout package extension:
   * <pre class=\'fragment\'>{.cpp}
if (doc-&gt;getLevel() == 2)
  doc-&gt;enablePackage({@link LayoutExtension#getXmlnsL2()}, \'layout\', true);
</pre>
   */ public
";


%javamethodmodifiers SBMLExtension::isInUse(SBMLDocument *doc) const "
/**
   * Indicates whether this extension is being used by the given {@link SBMLDocument}.
   <p>
   * The default implementation returns <code>true.</code>  This means that when a
   * document had this extension enabled, it will not be possible to convert
   * it to SBML Level&nbsp;2 as we cannot make sure that the extension can be
   * converted.
   <p>
   * @param doc the SBML document to test.
   <p>
   * @return a boolean indicating whether the extension is actually being
   * used by the document.
   */ public
";


%javamethodmodifiers SBMLExtension::getErrorTableIndex "
/** * @internal */ public
";


%typemap(javaimports) SBMLExtensionException "
/** 
 *  Exception used by package extensions
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * <p>
 * Certain situations can result in an exception being thrown by libSBML
 * package extensions.  A prominent example involves the constructor for
 * {@link SBMLNamespaces} (and its subclasses), which will throw
 * {@link SBMLExtensionException} if the arguments it is given refer to an unknown
 * SBML Level&nbsp;3 package.  The situation can arise for legitimate SBML
 * files if the necessary package extension has not been registered with
 * a given copy of libSBML.
 <p>
 * @see SBMLNamespaces
 */
"


%javamethodmodifiers SBMLExtensionException::SBMLExtensionException(const std::string& errmsg) throw() "
/**
   * Creates a new {@link SBMLExtensionException} object with a given message.
   <p>
   * @param errmsg a string, the text of the error message to store
   * with this exception
   */ public
";


%typemap(javaimports) SBMLExtensionNamespaces "
/** 
 *  Set of SBML Level + Version + namespace triples.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * {@link SBMLExtensionNamespaces} is a template class.  It is extended from
 * {@link SBMLNamespaces} and is meant to be used by package extensions to store the
 * SBML Level, Version within a Level, and package version of the SBML
 * Level&nbsp;3 package implemented by a libSBML package extension.
 <p>
 * <h2>How to use {@link SBMLExtensionNamespaces} for a package implementation</h2>
 * <p>
 * Each package extension in libSBML needs to extend and instantiate the
 * template class {@link SBMLExtensionNamespaces}, as well as declare a specific
 * <code>typedef</code>.  The following sections explain these steps in detail.
 <p>
 * <h3>1. Define the typedef</h3>
 <p>
 * Each package needs to declare a package-specific version of the
 * {@link SBMLExtensionNamespaces} class using a <code>typedef</code>.  The following
 * example code demonstrates how this is done in the case of the Layout package:
 <p>
 * <pre class=\'fragment\'>{.cpp}
 * typedef {@link SBMLExtensionNamespaces}&lt;LayoutExtension&gt; LayoutPkgNamespaces;</pre>
 <p>
 * This creates a new type called LayoutPkgNamespaces.  The code above is
 * usually placed in the same file that contains the {@link SBMLExtension}-derived
 * definition of the package extension base class.  In the case of the Layout
 * package, this is in the file
 * <code>src/packages/layout/extension/LayoutExtension.h</code> in the libSBML
 * source distribution.
 <p>
 * <h3>2. Instantiate a template instance</h3>
 <p>
 * Each package needs to instantiate a template instance of the
 * {@link SBMLExtensionNamespaces} class.  The following
 * example code demonstrates how this is done in the case of the Layout package:
 <p>
 * <pre class=\'fragment\'>{.cpp}
 * template class LIBSBML_EXTERN {@link SBMLExtensionNamespaces}&lt;LayoutExtension&gt;;</pre>
 <p>
 * In the case of the Layout package, the code above is located in the file
 * <code>src/packages/layout/extension/LayoutExtension.cpp</code> in the libSBML
 * source distribution.
 <p>
 * <h3>3. Create constructors that accept the class</h3>
 <p>
 * Each {@link SBase}-derived class in the package extension should implement a
 * constructor that accepts the {@link SBMLExtensionNamespaces}-derived class as an
 * argument.  For example, in the Layout package, the class BoundBox has a
 * constructor declared as follows
 <p>
 * <pre class=\'fragment\'>{.cpp}
 * BoundingBox(LayoutPkgNamespaces* layoutns);</pre>
 <p>
 * The implementation of this constructor must, among other things, take the
 * argument namespace object and use it to set the XML namespace URI for the
 * object.  Again, for the BoundingBox example:
 <p>
 * <pre class=\'fragment\'>{.cpp}
 * {@link BoundingBox#BoundingBox(LayoutPkgNamespaces* layoutns)}
 *  : {@link SBase}(layoutns)
 *   ,mPosition(layoutns)
 *   ,mDimensions(layoutns)
 *   ,mPositionExplicitlySet (false)
 *   ,mDimensionsExplicitlySet (false)
 * {
 *   // Standard extension actions.
 *   setElementNamespace(layoutns-&gt;getURI());
 *   connectToChild();
 * 
 *   // Package-specific actions.
 *   mPosition.setElementName(\'position\');
 * 
 *   // Load package extensions bound with this object (if any).
 *   loadPlugins(layoutns);
 * }</pre>
 */
"


%typemap(javaimports) SBMLExtensionRegistry "
/** 
 *  Registry where package extensions are registered.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * This class provides a central registry of all extensions known to libSBML.
 * Each package extension must be registered with the registry.  The registry
 * class is accessed by various classes to retrieve information about known
 * package extensions and to create additional attributes and/or elements by
 * factory objects of the package extensions.
 <p>
 * <p>
 * The package extension registry is implemented as a singleton instance of
 * {@link SBMLExtensionRegistry}.  The class provides only utility functionality;
 * implementations of SBML packages do not need to implement any subclasses or
 * methods of this class.  {@link SBMLExtensionRegistry} is useful for its facilities
 * to query the known packages, and to enable or disable packages selectively.
 */
"


%javamethodmodifiers SBMLExtensionRegistry::getInstance "
/**
   * Returns a singleton instance of the registry.
   <p>
   * Callers need to obtain a copy of the package extension registry before
   * they can invoke its methods.  The registry is implemented as a
   * singleton, and this is the method callers can use to get a copy of it.
   <p>
   * @return the instance of the {@link SBMLExtensionRegistry} object.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::addExtension(const SBMLExtension* ext) "
/**
   * Add the given {@link SBMLExtension} object to this {@link SBMLExtensionRegistry}.
   <p>
   * @param ext the {@link SBMLExtension} object to be added.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_CONFLICT LIBSBML_PKG_CONFLICT}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::getExtension(const std::string& package) "
/**
   * Returns an {@link SBMLExtension} object with the given package URI or package
   * name.
   <p>
   * @param package a string representing the URI or name of the SBML package
   * whose package extension is being sought.
   <p>
   * @return a clone of the {@link SBMLExtension} object with the given package URI
   * or name.
   <p>
   * @note The caller is responsible for freeing the object returned.  Since
   * the object is a clone, freeing it will not result in the deletion of the
   * original package extension object.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::removeL2Namespaces(XMLNamespaces *xmlns) const "
/**
   * Removes SBML Level&nbsp;2 namespaces from the namespace list.
   <p>
   * @param xmlns an {@link XMLNamespaces} object listing one or more namespaces
   * to be removed.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::addL2Namespaces(XMLNamespaces *xmlns) const "
/**
   * Adds SBML Level&nbsp;2 namespaces to the namespace list.
   <p>
   * @param xmlns an {@link XMLNamespaces} object providing one or more namespaces to
   * be added.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::enableL2NamespaceForDocument(SBMLDocument* doc) const "
/**
   * Enables package extensions that support serialization to SBML annotations.
   <p>
   * SBML Level&nbsp;2 does not have a package mechanism in the way that SBML
   * Level&nbsp;3 does.  However, SBML annotations can be used to store SBML
   * constructs.  In fact, a widely-used approach to developing SBML
   * Level&nbsp;3 packages involves first using them as annotations.
   <p>
   * @param doc the {@link SBMLDocument} object for which this should be enabled.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::disableUnusedPackages(SBMLDocument *doc) "
/**
   * Disables unused packages.
   <p>
   * This method walks through all extensions in the list of plugins of the
   * given SBML document <code>doc</code>, and disables all that are not being used.
   <p>
   * @param doc the {@link SBMLDocument} object whose unused package extensions
   * should be disabled.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::disablePackage(const std::string& package) "
/**
   * Disables the package with the given URI or name.
   <p>
   * @param package a string representing the URI or name of the SBML package
   * whose package extension is to be disabled.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::isPackageEnabled(const std::string& package) "
/**
   * Returns <code>true</code> if the named package is enabled.
   <p>
   * @param package the name or URI of a package to test.
   <p>
   * @return <code>true</code> if the package is enabled, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::enablePackage(const std::string& package) "
/**
   * Enables the package with the given URI / name.
   <p>
   * @param package the name or URI of a package to enable.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::getExtensionInternal(const std::string& package) "
/**
   * Returns an {@link SBMLExtension} object with the given package URI or package name (string).
   <p>
   * @param package the URI or name of the package extension
   <p>
   * @return the {@link SBMLExtension} object with the given package URI or name. The returned
   *         extension is NOT ALLOWED to be freed (i.e.: deleted)!
   * @internal
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::getNumExtension(const SBaseExtensionPoint& extPoint) "
/**
   * Returns the number of extensions that have a given extension point.
   <p>
   * @param extPoint the {@link SBaseExtensionPoint} object
   <p>
   * @return the number of {@link SBMLExtension}-derived objects with the given
   * extension point.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::setEnabled(const std::string& uri, bool isEnabled) "
/**
   * Enables or disable the package with the given URI.
   <p>
   * @param uri the URI of the target package.
   * @param isEnabled <code>true</code> to enable the package, <code>false</code> to disable.
   <p>
   * @return <code>false</code> if <code>isEnabled</code> is <code>false</code> or the given package is not
   * registered, otherwise this method returns <code>true.</code>
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::isEnabled(const std::string& uri) "
/**
   * Returns <code>true</code> if the given extension is enabled.
   <p>
   * @param uri the URI of the target package.
   <p>
   * @return <code>false</code> if the given package is disabled or not registered,
   * <code>true</code> otherwise.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::isRegistered(const std::string& uri) "
/**
   * Returns <code>true</code> if a package extension is registered for the
   * corresponding package URI.
   <p>
   * @param uri the URI of the target package.
   <p>
   * @return <code>true</code> if the package with the given URI is registered,
   * otherwise returns <code>false.</code>
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::getRegisteredPackageNames "
/**
   * Returns a list of registered packages.
   <p>
   * This method returns a List object containing the nicknames of the SBML
   * packages for which package extensions are registered with this copy of
   * libSBML.  The list will contain strings (e.g., <code>\'layout\'</code>,
   * <code>\'fbc\'</code>, etc.) and has to be freed by the caller.
   <p>
   * @return a list of strings representing the names of the registered
   * packages.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::getAllRegisteredPackageNames "
/**
   * Returns a list of registered packages.
   <p>
   * This method returns a vector of strings containing the nicknames of the
   * SBML packages for which package extensions are registered with this copy
   * of libSBML.  The vector will contain <code>String</code> objects.
   <p>
   * @return a vector of strings
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::getNumRegisteredPackages "
/**
   * Returns the number of registered packages.
   <p>
   * @return a count of the registered package extensions.
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::getRegisteredPackageName(unsigned int index) "
/**
   * Returns the nth registered package.
   <p>
   * @param index zero-based index of the package name to return.
   <p>
   * @return the package name with the given index, or <code>null</code> if none
   * such exists.
   <p>
   * @see #getNumRegisteredPackages()
   */ public
";


%javamethodmodifiers SBMLExtensionRegistry::SBMLExtensionRegistry "
/** * @internal */ public
";


%javamethodmodifiers SBMLExtensionRegistry::SBMLExtensionRegistry(const SBMLExtensionRegistry& orig) "
/** * @internal */ public
";


%typemap(javaimports) OStream "
/** 
 * Wrapper class for the C++ standard streams <code>cout</code>,
 * <code>cerr</code>, and <code>clog</code>.
 <p>
 * A few libSBML methods accept an argument for indicating where to send
 * text string output.  An example is the {@link SBMLDocument#printErrors(OStream
 * stream)} method. However, the methods use C++ style streams and not Java
 * stream objects.  The {@link OStream} object exists to bridge the Java and
 * underlying native implementation.  It is a simple wrapper around the
 * underlying stream object and provides a few basic methods for
 * manipulating it.
 */
"


%typemap(javaimports) OFStream "
/** 
 * Wrapper class for the C++ standard file stream <code>ofstream</code>.
 <p>
 * The C++ <code>ofstream</code> (\'output file stream\') provides an
 * interface for writing data to files as output streams.  This class,
 * {@link OFStream}, wraps the C++ <code>ofstream</code> and provides an {@link OStream}
 * interface to it.  The file to be associated with the stream can be
 * specified as a parameter to the constructors in this class.
 <p>
 * This class may be useful because some libSBML methods accept an argument
 * for indicating where to send text string output.  An example is the
 * {@link SBMLDocument#printErrors(OStream stream)} method.  The methods use C++ style streams
 * and not Java stream objects.  The {@link OStream} object exists to bridge the
 * Java and underlying native implementation.  It is a simple wrapper
 * around the underlying stream object and provides a few basic methods for
 * manipulating it.
 */
"


%typemap(javaimports) OStringStream "
/** 
 * Wrapper class for the C++ standard stream <code>ostringstream</code>.
 <p>
 * The C++ <code>ostringstream</code> (\'output string stream class\')
 * provides an interface to manipulating strings as if they were output
 * streams.  This class class, {@link OStringStream}, wraps the
 * <code>ostringstream</code> and provides an {@link OStream} interface to it.
 <p>
 * This class may be useful because some libSBML methods accept an argument
 * for indicating where to send text string output.  An example is the 
 * {@link SBMLDocument#printErrors(OStream stream)} method.  The methods use
 * C++ style streams and not Java stream objects.  The {@link OStream} object
 * exists to bridge the Java and underlying native implementation.  It is a
 * simple wrapper around the underlying stream object and provides a few
 * basic methods for manipulating it.
 */
"


%javamethodmodifiers OStream::OStream(StdOSType sot = COUT) "
/**
      * Creates a new {@link OStream} object with one of standard output stream objects.
      <p>
      * @param sot a value from the StdOSType enumeration(COUT, CERR, or CLOG) 
			* indicating the type of stream to create.
      */ public
";


%javamethodmodifiers OStream::get_ostream "
/**
     * Returns the stream object.
     <p>
     * @return the stream object
     */ public
";


%javamethodmodifiers OStream::endl "
/**
     * Writes an end-of-line character on this tream.
     */ public
";


%javamethodmodifiers OFStream::OFStream(const std::string& filename, bool is_append = false) "
/**
     * Creates a new {@link OFStream} object for a file.
     <p>
     * This opens the given file <code>filename</code> with the <code>is_append</code> flag
     * (default is <code>false</code>), and creates an {@link OFStream} object
     * instance that associates the file\'s content with an {@link OStream} object.
     <p>
     * @param filename the name of the file to open
     * @param is_append whether to open the file for appending (default:
     * <code>false</code>, meaning overwrite the content instead)
     <p>
     * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
     */ public
";


%javamethodmodifiers OFStream::open(const std::string& filename, bool is_append = false) "
/**
     * Opens a file and associates this stream object with it.
     <p>
     * This method opens a given file <code>filename</code> with the given
     * <code>is_append</code> flag (whose default value is <code>false</code>),
     * and associates <i>this</i> stream object with the file\'s content.
     <p>
     * @param filename the name of the file to open
     * @param is_append whether to open the file for appending (default:
     * <code>false</code>, meaning overwrite the content instead)
     <p>
     * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
     */ public
";


%javamethodmodifiers OFStream::close "
/**
     * Closes the file currently associated with this stream object.
     */ public
";


%javamethodmodifiers OFStream::is_open "
/**
     * Returns <code>true</code> if this stream object is currently
     * associated with a file.
     <p>
     * @return <code>true</code> if the stream object is currently
     * associated with a file, <code>false</code> otherwise
     */ public
";


%javamethodmodifiers OStringStream::OStringStream "
/**
     * Creates a new {@link OStringStream} object
     */ public
";


%javamethodmodifiers OStringStream::str "
/**
     * Returns the copy of the string object currently assosiated 
     * with this <code>ostringstream</code> buffer.
     <p>
     * @return a copy of the string object for this stream
     */ public
";


%javamethodmodifiers OStringStream::str(const std::string& s) "
/**
     * Sets string <code>s</code> to the string object currently assosiated with
     * this stream buffer.
     <p>
     * @param s the string to write to this stream
     */ public
";


%javamethodmodifiers representsNumber(int type) "
/** * @internal */ public
";


%javamethodmodifiers representsFunction(int type, ASTBasePlugin* plugin = NULL) "
/** * @internal */ public
";


%javamethodmodifiers representsUnaryFunction(int type, ASTBasePlugin* plugin = NULL) "
/** * @internal */ public
";


%javamethodmodifiers representsBinaryFunction(int type, ASTBasePlugin* plugin = NULL) "
/** * @internal */ public
";


%javamethodmodifiers representsNaryFunction(int type, ASTBasePlugin* plugin = NULL) "
/** * @internal */ public
";


%javamethodmodifiers representsQualifier(int type, ASTBasePlugin* plugin = NULL) "
/** * @internal */ public
";


%javamethodmodifiers representsFunctionRequiringAtLeastTwoArguments(int type) "
/** * @internal */ public
";


%javamethodmodifiers getCoreTypeFromName(const std::string& name) "
/** * @internal */ public
";


%javamethodmodifiers getNameFromCoreType(int type) "
/** * @internal */ public
";


%javamethodmodifiers isCoreTopLevelMathMLFunctionNodeTag(const std::string& name) "
/** * @internal */ public
";


%javamethodmodifiers isCoreTopLevelMathMLNumberNodeTag(const std::string& name) "
/** * @internal */ public
";


%typemap(javaimports) ASTBase "
/** 
 *  Base node for AST classes.
 * @internal
 */
"


%javamethodmodifiers ASTBase::ASTBase(const ASTBase& orig) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::deepCopy() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::loadASTPlugins(const SBMLNamespaces* sbmlns) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getType() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getExtendedType() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isSetType "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setType(ASTNodeType_t type) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setType(int type) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isAvogadro() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isBoolean() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isBinaryFunction() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isConstant() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isExponential() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isCiNumber() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isConstantNumber() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isCSymbolFunction() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isCSymbolNumber() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isFunction() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isInteger() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isLambda() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isLogical() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isName() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isNaryFunction() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isNumber() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isOperator() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isPiecewise() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isQualifier() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isRational() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isReal() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isRelational() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isSemantics() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isUnaryFunction() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isUnknown() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isUserFunction() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::representsBvar() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setIsBvar(bool isbvar) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isNumberNode() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isFunctionNode() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isTopLevelMathMLFunctionNodeTag(const std::string& name) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isTopLevelMathMLNumberNodeTag(const std::string& name) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::write(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::read(XMLInputStream& stream, const std::string& reqd_prefix="") "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::addExpectedAttributes(ExpectedAttributes& attributes, XMLInputStream& stream) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes, XMLInputStream& stream, const XMLToken& element) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::logError(XMLInputStream& stream, const XMLToken& element, SBMLErrorCode_t code, const std::string& msg = "") "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isChild() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setIsChildFlag(bool flag) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getClass() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getId() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getStyle() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getParentSBMLObject() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isSetClass() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isSetId() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isSetStyle() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isSetParentSBMLObject() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setClass(std::string className) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setId(std::string id) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setStyle(std::string style) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setParentSBMLObject(SBase* sb) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::unsetClass "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::unsetId "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::unsetStyle "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::unsetParentSBMLObject "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getFunction() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::addPlugin(ASTBasePlugin* plugin) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getPlugin(const std::string& package) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getPlugin(const std::string& package) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getPlugin(unsigned int n) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getPlugin "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getNumPlugins() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getTypeFromName(const std::string& name) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getNameFromType(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setUserData(void *userData) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::*getUserData() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isSetUserData() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::unsetUserData "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::writeNodeOfType(XMLOutputStream& stream, int type, bool inChildNode = false) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isWellFormedNode() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::hasCorrectNumberArguments() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getTypeCode() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getPackageName() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::setPackageName(const std::string& name) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::hasCnUnits() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getUnitsPrefix() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::isPackageInfixFunction() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::hasPackageOnlyInfixSyntax() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getL3PackageInfixPrecedence() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::hasUnambiguousPackageInfixGrammar(const ASTNode *child) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::resetPackageName "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::checkPrefix(XMLInputStream& stream, const std::string& reqd_prefix, const XMLToken& element) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::writeStartEndElement(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::writeConstant(XMLOutputStream& stream, const std::string & name) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::writeStartElement(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::writeAttributes(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::writeENotation(  double    mantissa , long             exponent , XMLOutputStream& stream ) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::writeENotation(  const std::string&    mantissa , const std::string&    exponent , XMLOutputStream& stream ) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::writeNegInfinity(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::syncMembersFrom(ASTBase* rhs) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::syncMembersAndResetParentsFrom(ASTBase* rhs) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::syncPluginsFrom(ASTBase* rhs) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::syncMembersOnlyFrom(ASTBase* rhs) "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getNumChildren() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::getValue() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBase::clearPlugins "
/** * @internal */ public
";


%typemap(javaimports) ASTNode "
/** 
 *  Abstract Syntax Trees for mathematical expressions.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * <a target=\'_blank\'
 * href=\'http://en.wikipedia.org/wiki/Abstract_syntax_tree\'>Abstract Syntax
 * Trees</a> (ASTs) are a simple kind of data structure used in libSBML for
 * storing mathematical expressions.  LibSBML ASTs provide a canonical,
 * in-memory representation for all mathematical formulas regardless of their
 * original format (which might be MathML or might be text strings).
 <p>
 * <p>
 * An AST <em>node</em> in libSBML is a recursive tree structure; each node has a
 * type, a pointer to a value, and a list of children nodes.  Each {@link ASTNode}
 * node may have none, one, two, or more children depending on its type.
 * There are node types to represent numbers (with subtypes to distinguish
 * integer, real, and rational numbers), names (e.g., constants or
 * variables), simple mathematical operators, logical or relational operators
 * and functions.  The following diagram illustrates an example of how the
 * mathematical expression <code>\'1 + 2\'</code> is represented as an AST with
 * one <em>plus</em> node having two <em>integer</em> children nodes for the numbers
 * <code>1</code> and <code>2</code>.  The figure also shows the
 * corresponding MathML representation:
 <p>
 * <table border=\"0\" class=\"centered text-table width80 normal-font\" style=\"padding-bottom: 0.5em\">
<caption class=\"top-caption\">Example AST representation of a mathematical expression.</caption>
<tr>
<th width=\"50px\">Infix</th>
<th>AST</th>
<th>MathML</th>
</tr>
<tr>
<td valign=\"middle\" align=\"center\">
<code>1 + 2</code>
</td>
<td valign=\"middle\">
  <object type=\"image/svg+xml\" data=\"simple-ast.svg\" class=\"centered\" width=\"140px\"></object>
</td>
<td valign=\"middle\">
<code>&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;</code><br>
<code>&nbsp;&nbsp;&lt;apply&gt;</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;plus/&gt;</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;cn type=\"integer\"&gt; 1 &lt;/cn&gt;</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;cn type=\"integer\"&gt; 2 &lt;/cn&gt;</code><br>
<code>&nbsp;&nbsp;&lt;/apply&gt;</code><br>
<code>&lt;/math&gt;</code>
</td>
</tr>
</table>

 <p>
 * The following are other noteworthy points about the AST representation
 * in libSBML:
<p>
 * <ul>
 * <li> A numerical value represented in MathML as a real number with an
 * exponent is preserved as such in the AST node representation, even if the
 * number could be stored in a <code>double</code> data type.  This is done so that
 * when an SBML model is read in and then written out again, the amount of
 * change introduced by libSBML to the SBML during the round-trip activity is
 * minimized.
 <p>
 * <li> Rational numbers are represented in an AST node using separate
 * numerator and denominator values.  These can be retrieved using the
 * methods {@link ASTNode#getNumerator()} and {@link ASTNode#getDenominator()}.
 <p>
 * <li> The children of an {@link ASTNode} are other {@link ASTNode} objects.  The list of
 * children is empty for nodes that are leaf elements, such as numbers.
 * For nodes that are actually roots of expression subtrees, the list of
 * children points to the parsed objects that make up the rest of the
 * expression.
 *
 * </ul> <p>
 * For many applications, the details of ASTs are irrelevant because libSBML
 * provides text-string based translation functions such as
 * <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a> and
 * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>.  If you find the complexity
 * of using the AST representation of expressions too high for your purposes,
 * perhaps the string-based functions will be more suitable.
 <p>
 * <h3><a class=\'anchor\'
 * name=\'ASTNodeType_t\'>The set of possible ASTNode types</a></h3> 
 <p>
 * <p>
 * Every {@link ASTNode} has an associated type code to indicate whether, for
 * example, it holds a number or stands for an arithmetic operator.
 <p>
 * The type is recorded as a value drawn from a
 * set of static integer constants defined in the class {@link 
 * libsbmlConstants}. Their names begin with the characters <code>AST_.</code>
 <p>
 * The list of possible types is quite long, because it covers all the
 * mathematical functions that are permitted in SBML. The values are shown
 * in the following table:
 <p>
 * <table border=\"0\" class=\"centered text-table borderless code\">
<tr><td>AST_CONSTANT_E</td><td>         AST_FUNCTION_COT</td><td>       AST_LOGICAL_NOT</td></tr>
<tr><td>AST_CONSTANT_FALSE</td><td>     AST_FUNCTION_COTH</td><td>      AST_LOGICAL_OR</td></tr>
<tr><td>AST_CONSTANT_PI</td><td>        AST_FUNCTION_CSC</td><td>       AST_LOGICAL_XOR</td></tr>
<tr><td>AST_CONSTANT_TRUE</td><td>      AST_FUNCTION_CSCH</td><td>      AST_MINUS</td></tr>
<tr><td>AST_DIVIDE</td><td>             AST_FUNCTION_DELAY</td><td>     AST_NAME</td></tr>
<tr><td>AST_FUNCTION</td><td>           AST_FUNCTION_EXP</td><td>       AST_NAME_AVOGADRO <span class='warning'><em>(Level&nbsp;3 only)</em></span></td></tr>
<tr><td>AST_FUNCTION_ABS</td><td>       AST_FUNCTION_FACTORIAL</td><td> AST_NAME_TIME</td></tr>
<tr><td>AST_FUNCTION_ARCCOS</td><td>    AST_FUNCTION_FLOOR</td><td>     AST_PLUS</td></tr>
<tr><td>AST_FUNCTION_ARCCOSH</td><td>   AST_FUNCTION_LN</td><td>        AST_POWER</td></tr>
<tr><td>AST_FUNCTION_ARCCOT</td><td>    AST_FUNCTION_LOG</td><td>       AST_RATIONAL</td></tr>
<tr><td>AST_FUNCTION_ARCCOTH</td><td>   AST_FUNCTION_PIECEWISE</td><td> AST_REAL</td></tr>
<tr><td>AST_FUNCTION_ARCCSC</td><td>    AST_FUNCTION_POWER</td><td>     AST_REAL_E</td></tr>
<tr><td>AST_FUNCTION_ARCCSCH</td><td>   AST_FUNCTION_ROOT</td><td>      AST_RELATIONAL_EQ</td></tr>
<tr><td>AST_FUNCTION_ARCSEC</td><td>    AST_FUNCTION_SEC</td><td>       AST_RELATIONAL_GEQ</td></tr>
<tr><td>AST_FUNCTION_ARCSECH</td><td>   AST_FUNCTION_SECH</td><td>      AST_RELATIONAL_GT</td></tr>
<tr><td>AST_FUNCTION_ARCSIN</td><td>    AST_FUNCTION_SIN</td><td>       AST_RELATIONAL_LEQ</td></tr>
<tr><td>AST_FUNCTION_ARCSINH</td><td>   AST_FUNCTION_SINH</td><td>      AST_RELATIONAL_LT</td></tr>
<tr><td>AST_FUNCTION_ARCTAN</td><td>    AST_FUNCTION_TAN</td><td>       AST_RELATIONAL_NEQ</td></tr>
<tr><td>AST_FUNCTION_ARCTANH</td><td>   AST_FUNCTION_TANH</td><td>      AST_TIMES</td></tr>
<tr><td>AST_FUNCTION_CEILING</td><td>   AST_INTEGER</td><td>            AST_UNKNOWN</td></tr>
<tr><td>AST_FUNCTION_COS</td><td>       AST_LAMBDA</td></tr>
<tr><td>AST_FUNCTION_COSH</td><td>      AST_LOGICAL_AND</td></tr>
</table>

 <p>
 * The types have the following meanings:
 <p>
 * <ul>
 * <li> If the node is basic mathematical operator (e.g., <code>\'+\'</code>), then the
 * node\'s type will be {@link libsbmlConstants#AST_PLUS AST_PLUS},
 * {@link libsbmlConstants#AST_MINUS AST_MINUS},
 * {@link libsbmlConstants#AST_TIMES AST_TIMES},
 * {@link libsbmlConstants#AST_DIVIDE AST_DIVIDE}, or
 * {@link libsbmlConstants#AST_POWER AST_POWER}, as appropriate.
 <p>
 * <li> If the node is a predefined function or operator from SBML
 * Level&nbsp;1 (in the string-based formula syntax used in Level&nbsp;1) or
 * SBML Level&nbsp;2 and&nbsp;3 (in the subset of MathML used in SBML
 * Levels&nbsp;2 and&nbsp;3), then the node\'s type
 * will be either <code style=\'margin-right: 0\'>AST_FUNCTION_</code><span
 * class=\'placeholder-nospace\'>X</span>, <code style=\'margin-right: 0\'>AST_LOGICAL_</code><span
 * class=\'placeholder-nospace\'>X</span>, or <code style=\'margin-right: 0\'>AST_RELATIONAL_</code><span
 * class=\'placeholder-nospace\'>X</span>, as appropriate.  (Examples:
 * {@link libsbmlConstants#AST_FUNCTION_LOG AST_FUNCTION_LOG},
 * {@link libsbmlConstants#AST_RELATIONAL_LEQ AST_RELATIONAL_LEQ}.)
 <p>
 * <li> If the node refers to a user-defined function, the node\'s type will
 * be {@link libsbmlConstants#AST_FUNCTION AST_FUNCTION} (because it holds the
 * name of the function).
 <p>
 * <li> If the node is a lambda expression, its type will be
 * {@link libsbmlConstants#AST_LAMBDA AST_LAMBDA}.
 <p>
 * <li> If the node is a predefined constant (<code>\'ExponentialE\'</code>, <code>\'Pi\'</code>, 
 * <code>\'True\'</code> or <code>\'False\'</code>), then the node\'s type will be
 * {@link libsbmlConstants#AST_CONSTANT_E AST_CONSTANT_E},
 * {@link libsbmlConstants#AST_CONSTANT_PI AST_CONSTANT_PI},
 * {@link libsbmlConstants#AST_CONSTANT_TRUE AST_CONSTANT_TRUE}, or
 * {@link libsbmlConstants#AST_CONSTANT_FALSE AST_CONSTANT_FALSE}.
 <p>
 * <li> (Levels&nbsp;2 and&nbsp;3 only) If the node is the special MathML
 * csymbol <code>time</code>, the value of the node will be
 * {@link libsbmlConstants#AST_NAME_TIME AST_NAME_TIME}.  (Note, however, that the
 * MathML csymbol <code>delay</code> is translated into a node of type
 * {@link libsbmlConstants#AST_FUNCTION_DELAY AST_FUNCTION_DELAY}.  The difference is due to
 * the fact that <code>time</code> is a single variable, whereas <code>delay</code> is actually a
 * function taking arguments.)
 <p>
 * <li> (Level&nbsp;3 only) If the node is the special MathML csymbol 
 * <code>avogadro</code>, the value of the node will be
 * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO}.
 <p>
 * <li> If the node contains a numerical value, its type will be
 * {@link libsbmlConstants#AST_INTEGER AST_INTEGER},
 * {@link libsbmlConstants#AST_REAL AST_REAL},
 * {@link libsbmlConstants#AST_REAL_E AST_REAL_E}, or
 * {@link libsbmlConstants#AST_RATIONAL AST_RATIONAL}, as appropriate.
 *
 * </ul>
 <p>
 * <h3><a class=\'anchor\' name=\'math-convert\'>Converting between ASTs and text
 * strings</a></h3>
 <p>
 * The text-string form of mathematical formulas produced by
 * <a href=\'libsbml.html#formulaToString(java.lang.String)\'><code>libsbml.formulaToString(String)</code></a> and
 * <a href=\'libsbml.html#formulaToL3String(java.lang.String)\'><code>libsbml.formulaToL3String(String)</code></a>, and read by
 * <a href=\'libsbml.html#parseFormula(org.sbml.libsbml.ASTNode)\'><code>libsbml.parseFormula(ASTNode)</code></a> and
 * <a href=\'libsbml.html#parseL3Formula(org.sbml.libsbml.ASTNode)\'><code>libsbml.parseL3Formula(ASTNode)</code></a>, are in a simple C-inspired
 * infix notation.  A formula in one of these two text-string formats can be
 * handed to a program that understands SBML mathematical expressions, or
 * used as part of a translation system.  The libSBML distribution comes with
 * example programs in the <code>\'examples\'</code> subdirectory that demonstrate such
 * things as translating infix formulas into MathML and vice-versa.
 <p>
 * Please see the documentation for the functions <a href=\'libsbml.html#parseFormula(org.sbml.libsbml.ASTNode)\'><code>libsbml.parseFormula(ASTNode)</code></a> and <a href=\'libsbml.html#parseL3Formula(org.sbml.libsbml.ASTNode)\'><code>libsbml.parseL3Formula(ASTNode)</code></a> for detailed
 * explanations of the infix syntax they accept.
 <p>
 * <h3><a class=\'anchor\' name=\'math-history\'>Historical notes</a></h3>
 <p>
 * Readers may wonder why this part of libSBML uses a seemingly less
 * object-oriented design than other parts.  Originally, much of libSBML was
 * written in&nbsp;C.  All subsequent development was done in C++, but the
 * complexity of some of the functionality for converting between infix, AST
 * and MathML, coupled with the desire to maintain stability and backward
 * compatibility, means that some of the underlying code is still written
 * in&nbsp;C.  This has lead to the exposed API being more C-like.
<p>
 * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#getDefaultL3ParserSettings()\'><code>libsbml.getDefaultL3ParserSettings()</code></a>
 */
"


%javamethodmodifiers ASTNode::ASTNode(ASTNodeType_t type) "
/**
   * Creates a new {@link ASTNode}.
   <p>
   * Unless the argument <code>type</code> is given, the returned node will by default
   * have a type of {@link libsbmlConstants#AST_UNKNOWN AST_UNKNOWN}.  If the type
   * isn\'t supplied when caling this constructor, the caller should set the
   * node type to something else as soon as possible using
   * {@link ASTNode#setType(int)}.
   <p>
   * @param type an optional
   * integer type
   * code indicating the type of node to create.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   */ public
";


%javamethodmodifiers ASTNode::ASTNode(SBMLNamespaces* sbmlns, ASTNodeType_t type) "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::ASTNode(int type = AST_UNKNOWN) "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::ASTNode(SBMLNamespaces* sbmlns, int type = AST_UNKNOWN) "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::ASTNode(Token_t *token) "
/**
   * Creates a new {@link ASTNode} from the given Token.
   <p>
   * The resulting {@link ASTNode} will contain the same data as the given <code>token</code>.
   <p>
   * @param token the token to use as a starting point for creating the
   * {@link ASTNode} object.
   */ public
";


%javamethodmodifiers ASTNode::ASTNode(const ASTNode& orig) "
/**
   * Copy constructor; creates a deep copy of the given {@link ASTNode}.
   <p>
   * @param orig the {@link ASTNode} to be copied.
   */ public
";


%javamethodmodifiers ASTNode::freeName "
/**
   * Frees the name of this {@link ASTNode} and sets it to <code>null.</code>
   <p>
   * This operation is only applicable to {@link ASTNode} objects corresponding to
   * operators, numbers, or {@link libsbmlConstants#AST_UNKNOWN AST_UNKNOWN}.  This
   * method has no effect on other types of nodes.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::canonicalize "
/**
   * Converts this {@link ASTNode} to a canonical form.
   <p>
   * The rules determining the canonical form conversion are as follows:
   <p>
   * <ul>
   * <li> If the node type is {@link libsbmlConstants#AST_NAME AST_NAME}
   * and the node name matches <code>\'ExponentialE\'</code>, <code>\'Pi\'</code>, <code>\'True\'</code> or 
   * <code>\'False\'</code> the node type is converted to the corresponding
   * <code>AST_CONSTANT_</code><em><span class=\'placeholder\'>X</span></em> type.
   * <li> If the node type is an {@link libsbmlConstants#AST_FUNCTION AST_FUNCTION} and
   * the node name matches an SBML (MathML) function name, logical operator name,
   * or relational operator name, the node is converted to the corresponding
   * <code>AST_FUNCTION_</code><em><span class=\'placeholder\'>X</span></em> or
   * <code>AST_LOGICAL_</code><em><span class=\'placeholder\'>X</span></em> type.
   *
   * </ul> <p>
   * SBML Level&nbsp;1 function names are searched first; thus, for example,
   * canonicalizing <code>log</code> will result in a node type of
   * {@link libsbmlConstants#AST_FUNCTION_LN AST_FUNCTION_LN}.  (See the SBML
   * Level&nbsp;1 Version&nbsp;2 Specification, Appendix C.)
   <p>
   * Sometimes, canonicalization of a node results in a structural conversion
   * of the node as a result of adding a child.  For example, a node with the
   * SBML Level&nbsp;1 function name <code>sqr</code> and a single child node (the
   * argument) will be transformed to a node of type
   * {@link libsbmlConstants#AST_FUNCTION_POWER AST_FUNCTION_POWER} with two children.  The
   * first child will remain unchanged, but the second child will be an
   * {@link ASTNode} of type {@link libsbmlConstants#AST_INTEGER AST_INTEGER} and a value of
   * 2.  The function names that result in structural changes are: <code>log10</code>,
   * <code>sqr</code>, and <code>sqrt.</code>
   <p>
   * @return <code>true</code> if this node was successfully converted to
   * canonical form, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::addChild(ASTNode* child) "
/**
   * Adds the given node as a child of this {@link ASTNode}.
   <p>
   * Child nodes are added in-order, from left to right.
   <p>
   * @param child the {@link ASTNode} instance to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @warning Explicitly adding, removing or replacing children of an
 * {@link ASTNode} object may change the
 * structure of the mathematical formula it represents, and may even render
 * the representation invalid.  Callers need to be careful to use this method
 * in the context of other operations to create complete and correct
 * formulas.  The method
 * {@link ASTNode#isWellFormedASTNode()}
 * may also be useful for checking the results of node modifications.
   <p>
   * @see #prependChild(ASTNode child)
   * @see #replaceChild(long n, ASTNode child)
   * @see #insertChild(long n, ASTNode child)
   * @see #removeChild(long n)
   * @see #isWellFormedASTNode()
   */ public
";


%javamethodmodifiers ASTNode::prependChild(ASTNode* child) "
/**
   * Adds the given node as a child of this {@link ASTNode}.
   <p>
   * This method adds child nodes from right to left.
   <p>
   * @param child the {@link ASTNode} instance to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @warning Explicitly adding, removing or replacing children of an
 * {@link ASTNode} object may change the
 * structure of the mathematical formula it represents, and may even render
 * the representation invalid.  Callers need to be careful to use this method
 * in the context of other operations to create complete and correct
 * formulas.  The method
 * {@link ASTNode#isWellFormedASTNode()}
 * may also be useful for checking the results of node modifications.
   <p>
   * @see #addChild(ASTNode child)
   * @see #replaceChild(long n, ASTNode child)
   * @see #insertChild(long n, ASTNode child)
   * @see #removeChild(long n)
   */ public
";


%javamethodmodifiers ASTNode::removeChild(unsigned int n) "
/**
   * Removes the nth child of this {@link ASTNode} object.
   <p>
   * @param n long the index of the child to remove
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   *
   * </ul> <p>
   * <p>
 * @warning Explicitly adding, removing or replacing children of an
 * {@link ASTNode} object may change the
 * structure of the mathematical formula it represents, and may even render
 * the representation invalid.  Callers need to be careful to use this method
 * in the context of other operations to create complete and correct
 * formulas.  The method
 * {@link ASTNode#isWellFormedASTNode()}
 * may also be useful for checking the results of node modifications.
   <p>
   * @see #addChild(ASTNode child)
   * @see #prependChild(ASTNode child)
   * @see #replaceChild(long n, ASTNode child)
   * @see #insertChild(long n, ASTNode child)
   */ public
";


%javamethodmodifiers ASTNode::replaceChild(unsigned int n, ASTNode *newChild, bool delreplaced=false) "
/**
   * Replaces the nth child of this {@link ASTNode} with the given {@link ASTNode}.
   <p>
   * @param n long the index of the child to replace
   * @param newChild {@link ASTNode} to replace the nth child
   * @param delreplaced boolean indicating whether to delete the replaced child.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * <p>
 * @warning Explicitly adding, removing or replacing children of an
 * {@link ASTNode} object may change the
 * structure of the mathematical formula it represents, and may even render
 * the representation invalid.  Callers need to be careful to use this method
 * in the context of other operations to create complete and correct
 * formulas.  The method
 * {@link ASTNode#isWellFormedASTNode()}
 * may also be useful for checking the results of node modifications.
   <p>
   * @see #addChild(ASTNode child)
   * @see #prependChild(ASTNode child)
   * @see #insertChild(long n, ASTNode child)
   * @see #removeChild(long n)
   */ public
";


%javamethodmodifiers ASTNode::insertChild(unsigned int n, ASTNode *newChild) "
/**
   * Inserts the given {@link ASTNode} node at a given point in the current {@link ASTNode}\'s
   * list of children.
   <p>
   * @param n long the index of the {@link ASTNode} being added
   * @param newChild {@link ASTNode} to insert as the nth child
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * <p>
 * @warning Explicitly adding, removing or replacing children of an
 * {@link ASTNode} object may change the
 * structure of the mathematical formula it represents, and may even render
 * the representation invalid.  Callers need to be careful to use this method
 * in the context of other operations to create complete and correct
 * formulas.  The method
 * {@link ASTNode#isWellFormedASTNode()}
 * may also be useful for checking the results of node modifications.
   <p>
   * @see #addChild(ASTNode child)
   * @see #prependChild(ASTNode child)
   * @see #replaceChild(long n, ASTNode child)
   * @see #removeChild(long n)
   */ public
";


%javamethodmodifiers ASTNode::deepCopy() const "
/**
   * Creates a recursive copy of this node and all its children.
   <p>
   * @return a copy of this {@link ASTNode} and all its children.  The caller owns
   * the returned {@link ASTNode} and is responsible for deleting it.
   */ public
";


%javamethodmodifiers ASTNode::getChild "
/**
   * Returns the child at index n of this node.
   <p>
   * @param n the index of the child to get
   <p>
   * @return the nth child of this {@link ASTNode} or <code>null</code> if this node has no nth
   * child (<code>n &gt; </code>
   * {@link ASTNode#getNumChildren()}
   * <code>- 1</code>).
   <p>
   * @see #getNumChildren()
   * @see #getLeftChild()
   * @see #getRightChild()
   */ public
";


%javamethodmodifiers ASTNode::getLeftChild() const "
/**
   * Returns the left child of this node.
   <p>
   * @return the left child of this {@link ASTNode}.  This is equivalent to calling
   * {@link ASTNode#getChild(long)}
   * with an argument of <code>0.</code>
   <p>
   * @see #getNumChildren()
   * @see #getChild(long)
   * @see #getRightChild()
   */ public
";


%javamethodmodifiers ASTNode::getRightChild() const "
/**
   * Returns the right child of this node.
   <p>
   * @return the right child of this {@link ASTNode}, or <code>null</code> if this node has no
   * right child.  If
   * {@link ASTNode#getNumChildren()}
   * <code>&gt; 1</code>, then this is equivalent to:
   * <pre class=\'fragment\'>
getChild( getNumChildren() - 1 );
</pre>
   <p>
   * @see #getNumChildren()
   * @see #getLeftChild()
   * @see #getChild(long)
   */ public
";


%javamethodmodifiers ASTNode::getNumChildren() const "
/**
   * Returns the number of children of this node.
   <p>
   * @return the number of children of this {@link ASTNode}, or 0 is this node has
   * no children.
   */ public
";


%javamethodmodifiers ASTNode::addSemanticsAnnotation(XMLNode* sAnnotation) "
/**
   * Adds the given {@link XMLNode} as a MathML <code>&lt;semantics&gt;</code>
   * element to this {@link ASTNode}.
   <p>
   * <p>
 * The <code>&lt;semantics&gt;</code> element is a MathML&nbsp;2.0 construct
 * that can be used to associate additional information with a MathML
 * construct.  The construct can be used to decorate a MathML expressions with
 * a sequence of one or more <code>&lt;annotation&gt;</code> or
 * <code>&lt;annotation-xml&gt;</code> elements.  Each such element contains a
 * pair of items; the first is a symbol that acts as an attribute or key, and
 * the second is the value associated with the attribute or key.  Please refer
 * to the MathML&nbsp;2.0 documentation, particularly the <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2007/WD-MathML3-20071005/chapter5.html#mixing.semantic.annotations\'>Section
 * 5.2, Semantic Annotations</a> for more information about these constructs.
   <p>
   * @param sAnnotation the annotation to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * <p>
 * @note Although SBML permits the use of the MathML
 * <code>&lt;semantics&gt;</code> annotation construct, the truth is that
 * this construct has so far (at this time of this writing, which is early
 * 2014) seen very little use in SBML software.  The full implications of
 * using these annotations are still poorly understood.  If you wish to
 * use this construct, we urge you to discuss possible uses and applications
 * on the SBML discussion lists, particularly <a target=\'_blank\'
 * href=\'http://sbml.org/Forums\'>sbml-discuss</a> and/or <a target=\'_blank\'
 * href=\'http://sbml.org/Forums\'>sbml-interoperability</a>.
   <p>
   * @see ASTNode#getNumSemanticsAnnotations()
   * @see ASTNode#getSemanticsAnnotation(long)
   */ public
";


%javamethodmodifiers ASTNode::getNumSemanticsAnnotations() const "
/**
   * Returns the number of MathML <code>&lt;semantics&gt;</code> element
   * elements on this node.
   <p>
   * <p>
 * The <code>&lt;semantics&gt;</code> element is a MathML&nbsp;2.0 construct
 * that can be used to associate additional information with a MathML
 * construct.  The construct can be used to decorate a MathML expressions with
 * a sequence of one or more <code>&lt;annotation&gt;</code> or
 * <code>&lt;annotation-xml&gt;</code> elements.  Each such element contains a
 * pair of items; the first is a symbol that acts as an attribute or key, and
 * the second is the value associated with the attribute or key.  Please refer
 * to the MathML&nbsp;2.0 documentation, particularly the <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2007/WD-MathML3-20071005/chapter5.html#mixing.semantic.annotations\'>Section
 * 5.2, Semantic Annotations</a> for more information about these constructs.
   <p>
   * @return the number of annotations of this {@link ASTNode}.
   <p>
   * <p>
 * @note Although SBML permits the use of the MathML
 * <code>&lt;semantics&gt;</code> annotation construct, the truth is that
 * this construct has so far (at this time of this writing, which is early
 * 2014) seen very little use in SBML software.  The full implications of
 * using these annotations are still poorly understood.  If you wish to
 * use this construct, we urge you to discuss possible uses and applications
 * on the SBML discussion lists, particularly <a target=\'_blank\'
 * href=\'http://sbml.org/Forums\'>sbml-discuss</a> and/or <a target=\'_blank\'
 * href=\'http://sbml.org/Forums\'>sbml-interoperability</a>.
   <p>
   * @see ASTNode#addSemanticsAnnotation(XMLNode)
   * @see ASTNode#getSemanticsAnnotation(long)
   */ public
";


%javamethodmodifiers ASTNode::getSemanticsAnnotation "
/**
   * Returns the nth MathML <code>&lt;semantics&gt;</code> element on this
   * {@link ASTNode}.
   <p>
   * <p>
 * The <code>&lt;semantics&gt;</code> element is a MathML&nbsp;2.0 construct
 * that can be used to associate additional information with a MathML
 * construct.  The construct can be used to decorate a MathML expressions with
 * a sequence of one or more <code>&lt;annotation&gt;</code> or
 * <code>&lt;annotation-xml&gt;</code> elements.  Each such element contains a
 * pair of items; the first is a symbol that acts as an attribute or key, and
 * the second is the value associated with the attribute or key.  Please refer
 * to the MathML&nbsp;2.0 documentation, particularly the <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2007/WD-MathML3-20071005/chapter5.html#mixing.semantic.annotations\'>Section
 * 5.2, Semantic Annotations</a> for more information about these constructs.
   <p>
   * @param n the index of the annotation to return.  Callers should
   * use {@link ASTNode#getNumSemanticsAnnotations()} to first find out how
   * many annotations there are.
   <p>
   * @return the nth annotation inside this {@link ASTNode}, or <code>null</code> if this node has
   * no nth annotation (<code>n &gt;</code>
   * {@link ASTNode#getNumSemanticsAnnotations()}
   * <code>- 1</code>).
   <p>
   * <p>
 * @note Although SBML permits the use of the MathML
 * <code>&lt;semantics&gt;</code> annotation construct, the truth is that
 * this construct has so far (at this time of this writing, which is early
 * 2014) seen very little use in SBML software.  The full implications of
 * using these annotations are still poorly understood.  If you wish to
 * use this construct, we urge you to discuss possible uses and applications
 * on the SBML discussion lists, particularly <a target=\'_blank\'
 * href=\'http://sbml.org/Forums\'>sbml-discuss</a> and/or <a target=\'_blank\'
 * href=\'http://sbml.org/Forums\'>sbml-interoperability</a>.
   <p>
   * @see ASTNode#addSemanticsAnnotation(XMLNode)
   * @see ASTNode#getNumSemanticsAnnotations()
   */ public
";


%javamethodmodifiers ASTNode::getListOfNodes(ASTNodePredicate predicate) const "
/**
   * Returns a list of nodes satisfying a given predicate.
   <p>
   * This performs a depth-first search of the tree rooted at this {@link ASTNode}
   * object, and returns a List of nodes for which the given function
   * <code>predicate(node)</code> returns <code>true.</code>  For portability between
   * different programming languages, the predicate is passed in as a pointer
   * to a function.  
   <p>
   * @param predicate the predicate to use
   <p>
   * @return the list of nodes for which the predicate returned <code>true.</code>
   * The List returned is owned by the caller and should be
   * deleted after the caller is done using it.  The {@link ASTNode} objects in the
   * list; however, are not owned by the caller (as they still belong to
   * the tree itself), and therefore should not be deleted.
   <p>
   * @see ASTNode#fillListOfNodes(ASTNodePredicate, List)
   */ public
";


%javamethodmodifiers ASTNode::fillListOfNodes(ASTNodePredicate predicate, List* lst) const "
/**
   * Returns a list of nodes rooted at a given node and satisfying a given
   * predicate.
   <p>
   * This method is identical to calling
   * {@link ASTNode#getListOfNodes(ASTNodePredicate)}, except
   * that instead of creating a new List object, it uses the one passed in as
   * argument <code>lst</code>.  This method a depth-first search of the tree rooted at
   * this {@link ASTNode} object, and adds to the list <code>lst</code> the nodes for which the
   * given function <code>predicate(node)</code> returns <code>true.</code>
   <p>
   * For portability between different programming languages, the predicate
   * is passed in as a pointer to a function.  The function definition must
   * have the type @link {@link ASTNode}.h.ASTNodePredicate
   * ASTNodePredicate@endlink, which is defined as
   * <pre class=\'fragment\'>{.cpp}
int (*ASTNodePredicate) ( ASTNode_t *node);
</pre>
   * where a return value of nonzero represents <code>true</code> and zero
   * represents <code>false.</code>
   <p>
   * @param predicate the predicate to use.
   <p>
   * @param lst the List to which {@link ASTNode} objects should be added.
   <p>
   * @see #getListOfNodes(ASTNodePredicate)
   */ public
";


%javamethodmodifiers ASTNode::getCharacter() const "
/**
   * Returns the value of this node as a single character.
   <p>
   * This function should be called only when {@link ASTNode#getType()} returns
   * {@link libsbmlConstants#AST_MINUS AST_MINUS}, {@link libsbmlConstants#AST_TIMES AST_TIMES}, {@link libsbmlConstants#AST_DIVIDE AST_DIVIDE} or
   * {@link libsbmlConstants#AST_POWER AST_POWER}.
   <p>
   * @return the value of this {@link ASTNode} as a single character
   */ public
";


%javamethodmodifiers ASTNode::getId() const "
/**
   * Returns the MathML <code>id</code> attribute value of this {@link ASTNode}.
   <p>
   * @return the MathML id of this {@link ASTNode}.
   <p>
   * @see #isSetId()
   * @see #setId(String id)
   * @see #unsetId()
   */ public
";


%javamethodmodifiers ASTNode::getClass() const "
/**
   * Returns the MathML <code>class</code> attribute value of this {@link ASTNode}.
   <p>
   * @return the MathML class of this {@link ASTNode}, if any exists.
   <p>
   * @see #isSetClass()
   * @see #setClassName(String id)
   * @see #unsetClass()
   */ public
";


%javamethodmodifiers ASTNode::getStyle() const "
/**
   * Returns the MathML <code>style</code> attribute value of this {@link ASTNode}.
   <p>
   * @return the MathML style of this {@link ASTNode}, if any exists.
   <p>
   * @see #isSetStyle()
   * @see #setStyle(String id)
   * @see #unsetStyle()
   */ public
";


%javamethodmodifiers ASTNode::getInteger() const "
/**
   * Returns the value of this node as an integer.
   <p>
   * If this node type is {@link libsbmlConstants#AST_RATIONAL AST_RATIONAL}, this
   * method returns the value of the numerator.
   <p>
   * @return the value of this {@link ASTNode} as a (<code>long</code>) integer.
   <p>
   * @note This function should be called only when
   * {@link ASTNode#getType()} returns
   * {@link libsbmlConstants#AST_INTEGER AST_INTEGER} or
   * {@link libsbmlConstants#AST_RATIONAL AST_RATIONAL}.
   * It will return <code>0</code> if the node type is <em>not</em> one of these, but since
   * <code>0</code> may be a valid value for integer, it is important to be sure that
   * the node type is one of the expected types in order to understand if 
   * <code>0</code> is the actual value.
   */ public
";


%javamethodmodifiers ASTNode::getName() const "
/**
   * Returns the value of this node as a string.
   <p>
   * This function may be called on nodes that (1) are not operators, i.e.,
   * nodes for which {@link ASTNode#isOperator()}
   * returns <code>false</code>, and (2) are not numbers, i.e.,
   * {@link ASTNode#isNumber()} returns <code>false.</code>
   <p>
   * @return the value of this {@link ASTNode} as a string, or <code>null</code> if it is
   * a node that does not have a name equivalent (e.g., if it is a number).
   */ public
";


%javamethodmodifiers ASTNode::getOperatorName() const "
/**
   * Returns the value of this operator node as a string.
   <p>
   * This function may be called on nodes that are operators, i.e., nodes for
   * which {@link ASTNode#isOperator()} returns
   * <code>true.</code>
   <p>
   * @return the name of this operator {@link ASTNode} as a string (or <code>null</code> if not
   * an operator).
   */ public
";


%javamethodmodifiers ASTNode::getNumerator() const "
/**
   * Returns the value of the numerator of this node.
   <p>
   * This function should be called only when
   * {@link ASTNode#getType()} returns
   * {@link libsbmlConstants#AST_RATIONAL AST_RATIONAL} or
   * {@link libsbmlConstants#AST_INTEGER AST_INTEGER}.
   <p>
   * @return the value of the numerator of this {@link ASTNode}.
   */ public
";


%javamethodmodifiers ASTNode::getDenominator() const "
/**
   * Returns the value of the denominator of this node.
   <p>
   * @return the value of the denominator of this {@link ASTNode}, or <code>1</code> if
   * this node has no numerical value.
   <p>
   * @note This function should be called only when
   * {@link ASTNode#getType()} returns
   * {@link libsbmlConstants#AST_RATIONAL AST_RATIONAL}.
   * It will return <code>1</code> if the node type is another type, but since <code>1</code> may
   * be a valid value for the denominator of a rational number, it is
   * important to be sure that the node type is the correct type in order to
   * correctly interpret the returned value.
   */ public
";


%javamethodmodifiers ASTNode::getReal() const "
/**
   * Returns the real-numbered value of this node.
   <p>
   * This function performs the necessary arithmetic if the node type is
   * {@link libsbmlConstants#AST_REAL_E AST_REAL_E} (<em>mantissa *
   * 10<sup> exponent</sup></em>) or
   * {@link libsbmlConstants#AST_RATIONAL AST_RATIONAL}
   * (<em>numerator / denominator</em>).
   <p>
   * @return the value of this {@link ASTNode} as a real (double), or <code>0</code>
   * if this is not a node that holds a number.
   <p>
   * @note This function should be called only when this {@link ASTNode} has a
   * numerical value type.  It will return <code>0</code> if the node type is another
   * type, but since <code>0</code> may be a valid value, it is important to be sure
   * that the node type is the correct type in order to correctly interpret
   * the returned value.
   */ public
";


%javamethodmodifiers ASTNode::getMantissa() const "
/**
   * Returns the mantissa value of this node.
   <p>
   * If {@link ASTNode#getType()} returns
   * {@link libsbmlConstants#AST_REAL AST_REAL}, this method is
   * identical to {@link ASTNode#getReal()}.
   <p>
   * @return the value of the mantissa of this {@link ASTNode}, or <code>0</code> if this
   * node is not a type that has a real-numbered value.
   <p>
   * @note This function should be called only when
   * {@link ASTNode#getType()} returns
   * {@link libsbmlConstants#AST_REAL_E AST_REAL_E},
   * {@link libsbmlConstants#AST_REAL AST_REAL} or
   * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO}.  It
   * will return <code>0</code> if the node type is another type, but since <code>0</code> may be
   * a valid value, it is important to be sure that the node type is the
   * correct type in order to correctly interpret the returned value.
   */ public
";


%javamethodmodifiers ASTNode::getExponent() const "
/**
   * Returns the exponent value of this {@link ASTNode}.
   <p>
   * @return the value of the exponent of this {@link ASTNode}, or <code>0</code> if this
   * is not a type of node that has an exponent.
   <p>
   * @note This function should be called only when
   * {@link ASTNode#getType()}
   * returns {@link libsbmlConstants#AST_REAL_E AST_REAL_E}.
   * It will return <code>0</code> if the node type is another type, but since <code>0</code> may
   * be a valid value, it is important to be sure that the node type is the
   * correct type in order to correctly interpret the returned value.
   */ public
";


%javamethodmodifiers ASTNode::getPrecedence() const "
/**
   * Returns the precedence of this node in the infix math syntax of SBML
   * Level&nbsp;1.
   <p>
   * For more information about the infix syntax, see the discussion about <a
   * href=\'#math-convert\'>text string formulas</a> at the top of the
   * documentation for {@link ASTNode}.
   <p>
   * @return an integer indicating the precedence of this {@link ASTNode}
   */ public
";


%javamethodmodifiers ASTNode::getType() const "
/**
   * Returns the type of this {@link ASTNode}.
   <p>
   * The value returned is one of the Core AST type codes such as
   * {@link libsbmlConstants#AST_LAMBDA AST_LAMBDA},
   * {@link libsbmlConstants#AST_PLUS AST_PLUS}, etc.
   <p>
   * @return the type of this {@link ASTNode}.
   <p>
   * @note The introduction of extensibility in SBML Level&nbsp;3 brings with
   * it a need to allow for the possibility of node types that are defined by
   * plug-ins implementing SBML Level&nbsp;3 packages.  If a given {@link ASTNode} is
   * a construct created by a package rather than libSBML Core, then
   * getType() will return
   * {@link libsbmlConstants#AST_ORIGINATES_IN_PACKAGE AST_ORIGINATES_IN_PACKAGE}.
   * Callers can then obtain the package-specific type by
   * calling getExtendedType().
   <p>
   * @see #getExtendedType()
   */ public
";


%javamethodmodifiers ASTNode::getExtendedType() const "
/**
   * Returns the extended type of this {@link ASTNode}.
   <p>
   * The type may be either a core
   * integer type code
   * or a value of a type code defined by an SBML Level&nbsp;3 package.
   <p>
   * @return the type of this {@link ASTNode}.
   <p>
   * @note When the {@link ASTNode} is of a type from a package, the value returned
   * by {@link ASTNode#getType()} will be
   * {@link libsbmlConstants#AST_ORIGINATES_IN_PACKAGE AST_ORIGINATES_IN_PACKAGE}
   * and getExtendedType() will return a package-specific type
   * code.  To find out the possible package-specific types (if any), please
   * consult the documentation for the particular package.
   <p>
   * @see #getType()
   */ public
";


%javamethodmodifiers ASTNode::getUnits() const "
/**
   * Returns the units of this {@link ASTNode}.
   <p>
   * SBML Level&nbsp;3 Version&nbsp;1 introduced the ability to include an
attribute <code>sbml:units</code> on MathML <code>cn</code> elements
appearing in SBML mathematical formulas.  The value of this attribute can
be used to indicate the unit of measurement to be associated with the
number in the content of the <code>cn</code> element.  The value of this
attribute must be the identifier of a unit of measurement defined by SBML
or the enclosing Model.  Here, the <code>sbml</code> portion is an XML
namespace prefix that must be associated with the SBML namespace for SBML
Level&nbsp;3.  The following example illustrates how this attribute can be
used to define a number with value <code>10</code> and unit of measurement
<code>second</code>:
<pre class=\"fragment\">&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"
      xmlns:sbml=\"http://www.sbml.org/sbml/level3/version1/core\"&gt;
        &lt;cn type=\"integer\" sbml:units=\"second\"&gt; 10 &lt;/cn&gt;
&lt;/math&gt;
</pre>

   <p>
   * @return the units of this {@link ASTNode}.
   <p>
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   <p>
   * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
   */ public
";


%javamethodmodifiers ASTNode::isAvogadro() const "
/**
   * Returns <code>true</code> if this node represents the predefined
   * value for Avogadro\'s constant.
   <p>
   * SBML Level&nbsp;3 introduced a predefined MathML <code>&lt;csymbol&gt;</code>
   * for the value of Avogadro\'s constant.  LibSBML stores this internally as
   * a node of type {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO}.
   * This method returns <code>true</code> if this node has that type.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is the special symbol avogadro,
   * <code>false</code> otherwise.
   <p>
   * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
   */ public
";


%javamethodmodifiers ASTNode::isBoolean() const "
/**
   * Returns <code>true</code> if this node has a Boolean type.
   <p>
   * The {@link ASTNode} objects that have Boolean types are the logical operators,
   * relational operators, and the constants <code>true</code> or <code>false.</code>
   <p>
   * @return <code>true</code> if this {@link ASTNode} has a Boolean type, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::returnsBoolean(const Model* model=NULL) const "
/**
   * Returns <code>true</code> if this node returns a Boolean value.
   <p>
   * This function looks at the whole {@link ASTNode} rather than just the top level
   * of the {@link ASTNode}. Thus, it will consider return values from piecewise
   * statements.  In addition, if this {@link ASTNode} uses a function call to a
   * user-defined function, the return value of the corresponding
   * {@link FunctionDefinition} object will be determined.  Note that this is only
   * possible where the {@link ASTNode} can trace its parent {@link Model}; that is, the
   * {@link ASTNode} must represent the <code>&lt;math&gt;</code> element of some
   * SBML object that has already been added to an instance of an
   * {@link SBMLDocument}.
   <p>
   * @param model the {@link Model} to use as context
   <p>
   * 
   * @return true if this {@link ASTNode} returns a boolean, <code>false</code> otherwise.
   <p>
   * @see #isBoolean()
   */ public
";


%javamethodmodifiers ASTNode::isConstant() const "
/**
   * Returns <code>true</code> if this node represents a MathML
   * constant.
   <p>
   * Examples of MathML constants include such things as pi.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML constant, <code>false</code>
   * otherwise.
   <p>
   * @note This function will also return <code>true</code> for nodes of type
   * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} in SBML Level&nbsp;3.
   */ public
";


%javamethodmodifiers ASTNode::isFunction() const "
/**
   * Returns <code>true</code> if this node represents a function.
   <p>
   * The three types of functions in SBML are MathML functions (e.g.,
   * <code>abs()</code>), SBML Level&nbsp;1 functions (in the SBML
   * Level&nbsp;1 math syntax), and user-defined functions (using
   * {@link FunctionDefinition} in SBML Level&nbsp;2 and&nbsp;3).
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a function, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isInfinity() const "
/**
   * Returns <code>true</code> if this node represents the special IEEE 754
   * value for infinity.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is the special IEEE 754 value infinity,
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isInteger() const "
/**
   * Returns <code>true</code> if this node contains an integer value.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is of type {@link libsbmlConstants#AST_INTEGER AST_INTEGER}, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isLambda() const "
/**
   * Returns <code>true</code> if this node is a MathML
   * <code>&lt;lambda&gt;</code>.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is of type {@link libsbmlConstants#AST_LAMBDA AST_LAMBDA}, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isLog10() const "
/**
   * Returns <code>true</code> if this node represents a <code>log10</code> function.
   <p>
   * More precisely, this predicate returns <code>true</code> if the node type is
   * {@link libsbmlConstants#AST_FUNCTION_LOG AST_FUNCTION_LOG} with two children, the
   * first of which is an {@link libsbmlConstants#AST_INTEGER AST_INTEGER} equal to
   * 10.
   <p>
   * @return <code>true</code> if the given {@link ASTNode} represents a <code>log10</code>() function, 
   * <code>false</code> otherwise.
   <p>
   * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
   */ public
";


%javamethodmodifiers ASTNode::isLogical() const "
/**
   * Returns <code>true</code> if this node is a MathML logical operator.
   <p>
   * The possible MathML logical operators are <code>and</code>, <code>or</code>, <code>not</code>, and 
   * <code>xor.</code>
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML logical operator, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isName() const "
/**
   * Returns <code>true</code> if this node is a user-defined variable name
   * or the symbols for time or Avogadro\'s constant.
   <p>
   * SBML Levels&nbsp;2 and&nbsp;3 provides <code>&lt;csymbol&gt;</code>
   * definitions for \'time\' and \'avogadro\', which can be used to represent
   * simulation time and Avogadro\'s constant in MathML.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a user-defined variable name in SBML
   * or the special symbols for time or Avogadro\'s constant. It returns 
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isNaN() const "
/**
   * Returns <code>true</code> if this node represents the special IEEE 754
   * value \'not a number\' (NaN).
   <p>
   * @return <code>true</code> if this {@link ASTNode} is the special IEEE 754 NaN, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isNegInfinity() const "
/**
   * Returns <code>true</code> if this node represents the special IEEE 754
   * value \'negative infinity\'.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is the special IEEE 754 value negative
   * infinity, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isNumber() const "
/**
   * Returns <code>true</code> if this node contains a number.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a number, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isOperator() const "
/**
   * Returns <code>true</code> if this node is a mathematical
   * operator.
   <p>
   * The possible mathematical operators in the MathML syntax supported by
   * SBML are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>
   * and <code>^</code> (power).
   <p>
   * @return <code>true</code> if this {@link ASTNode} is an operator, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isPiecewise() const "
/**
   * Returns <code>true</code> if this node is the MathML
   * <code>&lt;piecewise&gt;</code> construct.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML <code>piecewise</code> function,
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isQualifier() const "
/**
   * Predicate returning <code>true</code> if this node is a MathML
   * qualifier.
   <p>
   * The MathML qualifier node types are <code>bvar</code>, <code>degree</code>, <code>base</code>, 
   * <code>piece</code>, and <code>otherwise.</code>
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML qualifier, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isRational() const "
/**
   * Returns <code>true</code> if this node represents a rational number.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is of type {@link libsbmlConstants#AST_RATIONAL AST_RATIONAL}, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isReal() const "
/**
   * Returns <code>true</code> if this node can represent a real number.
   <p>
   * More precisely, this node must be of one of the following types:
   * {@link libsbmlConstants#AST_REAL AST_REAL}, {@link libsbmlConstants#AST_REAL_E AST_REAL_E} or {@link libsbmlConstants#AST_RATIONAL AST_RATIONAL}.
   <p>
   * @return <code>true</code> if the value of this {@link ASTNode} can represented as a real
   * number, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isRelational() const "
/**
   * Returns <code>true</code> if this node is a MathML
   * relational operator.
   <p>
   * The MathML relational operators are <code>==</code>, <code>&gt;=</code>,
   * <code>&gt;</code>, <code>&lt;</code>, and <code>!=</code>.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML relational operator, 
   * <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isSemantics() const "
/**
   * Predicate returning <code>true</code> if this node is a MathML
   * semantics node.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML semantics node, <code>false</code>
   * otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isSqrt() const "
/**
   * Returns <code>true</code> if this node represents a square root
   * function.
   <p>
   * More precisely, the node type must be {@link libsbmlConstants#AST_FUNCTION_ROOT AST_FUNCTION_ROOT} with two children, the first of which is an
   * {@link libsbmlConstants#AST_INTEGER AST_INTEGER} node having value equal to 2.
   <p>
   * @return <code>true</code> if the given {@link ASTNode} represents a <code>sqrt()</code>
   * function, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isUMinus() const "
/**
   * Returns <code>true</code> if this node is a unary minus operator.
   <p>
   * A node is defined as a unary minus node if it is of type
   * {@link libsbmlConstants#AST_MINUS AST_MINUS} and has exactly one child.
   <p>
   * For numbers, unary minus nodes can be \'collapsed\' by negating the
   * number.  In fact, <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> does this during
   * its parsing process, and <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> has a
   * configuration option that allows this behavior to be turned on or off.
   * However, unary minus nodes for symbols ({@link libsbmlConstants#AST_NAME AST_NAME}) cannot be \'collapsed\', so this predicate function is
   * necessary.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a unary minus, <code>false</code>
   * otherwise.
   <p>
   * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
   */ public
";


%javamethodmodifiers ASTNode::isUPlus() const "
/**
   * Returns <code>true</code> if this node is a unary plus operator.
   <p>
   * A node is defined as a unary plus node if it is of type
   * {@link libsbmlConstants#AST_PLUS AST_PLUS} and has exactly one child.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is a unary plus, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::hasTypeAndNumChildren "
/**
  * Returns <code>true</code> if this node is of a certain type with a specific number
  * of children.
  <p>
  * Designed for use in cases where it is useful to discover if the node is a
  * unary not or unary minus, or a times node with no children, etc.
  <p>
  * @param type the type of {@link ASTNode} sought.
  * @param numchildren the number of child nodes sought.
  <p>
  * @return <code>true</code> if this {@link ASTNode} is has the specified type and number of
  * children, <code>false</code> otherwise.
  */ public
";


%javamethodmodifiers ASTNode::isUnknown() const "
/**
   * Returns <code>true</code> if this node has an unknown type.
   <p>
   * \'Unknown\' nodes have the type {@link libsbmlConstants#AST_UNKNOWN AST_UNKNOWN}.
   * Nodes with unknown types will not appear in an {@link ASTNode} tree returned by
   * libSBML based upon valid SBML input; the only situation in which a node
   * with type {@link libsbmlConstants#AST_UNKNOWN AST_UNKNOWN} may appear is
   * immediately after having create a new, untyped node using the {@link ASTNode}
   * constructor.  Callers creating nodes should endeavor to set the type to
   * a valid node type as soon as possible after creating new nodes.
   <p>
   * @return <code>true</code> if this {@link ASTNode} is of type {@link libsbmlConstants#AST_UNKNOWN AST_UNKNOWN}, <code>false</code> otherwise.
   */ public
";


%javamethodmodifiers ASTNode::isSetId() const "
/**
   * Returns <code>true</code> if this node has a value for the MathML
   * attribute <code>id.</code>
   <p>
   * @return true if this {@link ASTNode} has an attribute id, <code>false</code>
   * otherwise.
   <p>
   * @see #isSetClass()
   * @see #isSetStyle()
   * @see #setId(String id)
   * @see #unsetId()
   */ public
";


%javamethodmodifiers ASTNode::isSetClass() const "
/**
   * Returns <code>true</code> if this node has a value for the MathML
   * attribute <code>class.</code>
   <p>
   * @return true if this {@link ASTNode} has an attribute class, <code>false</code>
   * otherwise.
   <p>
   * @see #isSetId()
   * @see #isSetStyle()
   * @see #setClassName(String id)
   * @see #unsetClass()
   */ public
";


%javamethodmodifiers ASTNode::isSetStyle() const "
/**
   * Returns <code>true</code> if this node has a value for the MathML
   * attribute <code>style.</code>
   <p>
   * @return true if this {@link ASTNode} has an attribute style, <code>false</code>
   * otherwise.
   <p>
   * @see #isSetClass()
   * @see #isSetId()
   * @see #setStyle(String id)
   * @see #unsetStyle()
   */ public
";


%javamethodmodifiers ASTNode::isSetUnits() const "
/**
   * Returns <code>true</code> if this node has the attribute
   * <code>sbml:units</code>.
   <p>
   * SBML Level&nbsp;3 Version&nbsp;1 introduced the ability to include an
attribute <code>sbml:units</code> on MathML <code>cn</code> elements
appearing in SBML mathematical formulas.  The value of this attribute can
be used to indicate the unit of measurement to be associated with the
number in the content of the <code>cn</code> element.  The value of this
attribute must be the identifier of a unit of measurement defined by SBML
or the enclosing Model.  Here, the <code>sbml</code> portion is an XML
namespace prefix that must be associated with the SBML namespace for SBML
Level&nbsp;3.  The following example illustrates how this attribute can be
used to define a number with value <code>10</code> and unit of measurement
<code>second</code>:
<pre class=\"fragment\">&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"
      xmlns:sbml=\"http://www.sbml.org/sbml/level3/version1/core\"&gt;
        &lt;cn type=\"integer\" sbml:units=\"second\"&gt; 10 &lt;/cn&gt;
&lt;/math&gt;
</pre>

   <p>
   * @return <code>true</code> if this {@link ASTNode} has units associated with it, <code>false</code>
   * otherwise.
   <p>
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   <p>
   * @see #hasUnits()
   * @see #setUnits(String units)
   */ public
";


%javamethodmodifiers ASTNode::hasUnits() const "
/**
   * Returns <code>true</code> if this node or any of its
   * children nodes have the attribute <code>sbml:units</code>.
   <p>
   * SBML Level&nbsp;3 Version&nbsp;1 introduced the ability to include an
attribute <code>sbml:units</code> on MathML <code>cn</code> elements
appearing in SBML mathematical formulas.  The value of this attribute can
be used to indicate the unit of measurement to be associated with the
number in the content of the <code>cn</code> element.  The value of this
attribute must be the identifier of a unit of measurement defined by SBML
or the enclosing Model.  Here, the <code>sbml</code> portion is an XML
namespace prefix that must be associated with the SBML namespace for SBML
Level&nbsp;3.  The following example illustrates how this attribute can be
used to define a number with value <code>10</code> and unit of measurement
<code>second</code>:
<pre class=\"fragment\">&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"
      xmlns:sbml=\"http://www.sbml.org/sbml/level3/version1/core\"&gt;
        &lt;cn type=\"integer\" sbml:units=\"second\"&gt; 10 &lt;/cn&gt;
&lt;/math&gt;
</pre>

   <p>
   * @return <code>true</code> if this {@link ASTNode} or its children has units associated
   * with it, <code>false</code> otherwise.
   <p>
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   <p>
   * @see #isSetUnits()
   * @see #setUnits(String units)
   */ public
";


%javamethodmodifiers ASTNode::setCharacter(char value) "
/**
   * Sets the value of this {@link ASTNode} to the given character.  If character
   * is one of <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> or <code>^</code>, the node
   * type will be set accordingly.  For all other characters, the node type
   * will be set to {@link libsbmlConstants#AST_UNKNOWN AST_UNKNOWN}.
   <p>
   * @param value the character value to which the node\'s value should be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::setId(const std::string& id) "
/**
   * Sets the MathML attribute <code>id</code> of this {@link ASTNode}.
   <p>
   * @param id <code>string</code> representing the identifier.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #isSetId()
   * @see #getId()
   * @see #unsetId()
   */ public
";


%javamethodmodifiers ASTNode::setClass(const std::string& className) "
/**
   * Sets the MathML attribute <code>class</code> of this {@link ASTNode}.
   <p>
   * @param className <code>string</code> representing the MathML class for this node.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @note In the API interfaces for languages other than Java, this method
   * is named <code>setClass()</code>, but in Java it is renamed
   * <code>setClassName()</code> to avoid a name collision with Java\'s
   * standard object method of the same name.
   <p>
   * @see #isSetClass()
   * @see #getClass()
   * @see #unsetClass()
   */ public
";


%javamethodmodifiers ASTNode::setStyle(const std::string& style) "
/**
   * Sets the MathML attribute <code>style</code> of this {@link ASTNode}.
   <p>
   * @param style <code>string</code> representing the identifier.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * @see #isSetStyle()
   * @see #getStyle()
   * @see #unsetStyle()
   */ public
";


%javamethodmodifiers ASTNode::setName(const char* name) "
/**
   * Sets the value of this {@link ASTNode} to the given name.
   <p>
   * As a side effect, this {@link ASTNode} object\'s type will be reset to
   * {@link libsbmlConstants#AST_NAME AST_NAME} if (and <em>only if</em>) the
   * {@link ASTNode} was previously an operator (i.e., * {@link ASTNode#isOperator()} returns <code>true</code>), number (i.e., {@link ASTNode#isNumber()} returns <code>true</code>), or
   * unknown.  This allows names to be set for {@link libsbmlConstants#AST_FUNCTION AST_FUNCTION} nodes and the like.
   <p>
   * @param name the string containing the name to which this node\'s value
   * should be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::setValue(int value) "
/**
   * Sets the value of this {@link ASTNode} to the given integer
   <p>
   * As a side effect, this operation sets the node type to
   * {@link libsbmlConstants#AST_INTEGER AST_INTEGER}.
   <p>
   * @param value the integer to which this node\'s value should be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::setValue(long value) "
/**
   * Sets the value of this {@link ASTNode} to the given (<code>long</code>) integer
   <p>
   * As a side effect, this operation sets the node type to
   * {@link libsbmlConstants#AST_INTEGER AST_INTEGER}.
   <p>
   * @param value the integer to which this node\'s value should be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::setValue(long numerator, long denominator) "
/**
   * Sets the value of this {@link ASTNode} to the given rational.
   <p>
   * As a side effect, this operation sets the node type to
   * {@link libsbmlConstants#AST_RATIONAL AST_RATIONAL}.
   <p>
   * @param numerator the numerator value of the rational.
   * @param denominator the denominator value of the rational.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::setValue(double value) "
/**
   * Sets the value of this {@link ASTNode} to the given real (<code>double</code>).
   <p>
   * As a side effect, this operation sets the node type to
   * {@link libsbmlConstants#AST_REAL AST_REAL}.
   <p>
   * This is functionally equivalent to:
   * <pre class=\'fragment\'>
setValue(value, 0);
</pre>
   <p>
   * @param value the <code>double</code> format number to which this node\'s value
   * should be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::setValue(double mantissa, long exponent) "
/**
   * Sets the value of this {@link ASTNode} to the given real (<code>double</code>)
   <p>
   * As a side effet, this operation sets the node type to
   * {@link libsbmlConstants#AST_REAL_E AST_REAL_E}.
   <p>
   * @param mantissa the mantissa of this node\'s real-numbered value.
   * @param exponent the exponent of this node\'s real-numbered value.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::setType(ASTNodeType_t type) "
/**
   * Sets the type of this {@link ASTNode} to the given type code.
   <p>
   * @param type the type to which this node should be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note A side-effect of doing this is that any numerical values
   * previously stored in this node are reset to zero.
   <p>
   * @see #getType()
   * @see #setType(int Type)
   */ public
";


%javamethodmodifiers ASTNode::setType(int type) "
/**
   * Sets the type of this {@link ASTNode}.
   <p>
   * This uses integer type codes, which may come from the set
   * of static integer constants whose names begin with the prefix
   * <code>AST_</code>  defined in the interface class
   * <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>
   *  or an enumeration of AST types in an SBML
   * Level&nbsp;3 package.
   <p>
   * @param type the integer representing the type to which this node should
   * be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note A side-effect of doing this is that any numerical values
   * previously stored in this node are reset to zero.
   <p>
   * @see #getType()
   * @see #setType(int)
   */ public
";


%javamethodmodifiers ASTNode::setUnits(const std::string& units) "
/**
   * Sets the units of this {@link ASTNode} to units.
   <p>
   * The units will be set <em>only</em> if this {@link ASTNode} object represents a
   * MathML <code>&lt;cn&gt;</code> element, i.e., represents a number.
   * Callers may use
   * {@link ASTNode#isNumber()}
   * to inquire whether the node is of that type.
   <p>
   * SBML Level&nbsp;3 Version&nbsp;1 introduced the ability to include an
attribute <code>sbml:units</code> on MathML <code>cn</code> elements
appearing in SBML mathematical formulas.  The value of this attribute can
be used to indicate the unit of measurement to be associated with the
number in the content of the <code>cn</code> element.  The value of this
attribute must be the identifier of a unit of measurement defined by SBML
or the enclosing Model.  Here, the <code>sbml</code> portion is an XML
namespace prefix that must be associated with the SBML namespace for SBML
Level&nbsp;3.  The following example illustrates how this attribute can be
used to define a number with value <code>10</code> and unit of measurement
<code>second</code>:
<pre class=\"fragment\">&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"
      xmlns:sbml=\"http://www.sbml.org/sbml/level3/version1/core\"&gt;
        &lt;cn type=\"integer\" sbml:units=\"second\"&gt; 10 &lt;/cn&gt;
&lt;/math&gt;
</pre>

   <p>
   * @param units <code>string</code> representing the unit identifier.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   <p>
   * @see #isSetUnits()
   * @see #hasUnits()
   */ public
";


%javamethodmodifiers ASTNode::swapChildren(ASTNode* that) "
/**
   * Swaps the children of this node with the children of another node.
   <p>
   * @param that the other node whose children should be used to replace
   * <em>this</em> node\'s children.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the SIdRef attributes on this node and its child nodes.
   <p>
   * @param oldid the old identifier.
   * @param newid the new identifier.
   */ public
";


%javamethodmodifiers ASTNode::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the UnitSIdRef attributes on this node and its child nodes.
   <p>
   * The only place UnitSIDRefs appear in MathML <code>&lt;cn&gt;</code>
   * elements, so the effects of this method are limited to that.
   <p>
   * @param oldid the old identifier.
   * @param newid the new identifier.
   */ public
";


%javamethodmodifiers ASTNode::replaceIDWithFunction(const std::string& id, const ASTNode* function) "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::setIsChildFlag(bool flag) "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::unsetUnits "
/**
   * Unsets the units of this {@link ASTNode}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::unsetId "
/**
   * Unsets the MathML <code>id</code> attribute of this {@link ASTNode}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::unsetClass "
/**
   * Unsets the MathML <code>class</code> attribute of this {@link ASTNode}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::unsetStyle "
/**
   * Unsets the MathML <code>style</code> attribute of this {@link ASTNode}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
";


%javamethodmodifiers ASTNode::setDefinitionURL(XMLAttributes url) "
/**
   * Sets the MathML attribute <code>definitionURL.</code>
   <p>
   * @param url the URL value for the <code>definitionURL</code> attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #setDefinitionURL(String url)
   * @see #getDefinitionURL()
   * @see #getDefinitionURLString()
   */ public
";


%javamethodmodifiers ASTNode::setDefinitionURL(const std::string& url) "
/**
   * Sets the MathML attribute <code>definitionURL.</code>
   <p>
   * @param url the URL value for the <code>definitionURL</code> attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   *
   * </ul> <p>
   * @see #setDefinitionURL(XMLAttributes url)
   * @see #getDefinitionURL()
   * @see #getDefinitionURLString()
   */ public
";


%javamethodmodifiers ASTNode::getDefinitionURL() const "
/**
   * Returns the MathML <code>definitionURL</code> attribute value.
   <p>
   * @return the value of the <code>definitionURL</code> attribute, in the form of
   * a libSBML {@link XMLAttributes} object.
   <p>
   * @see #setDefinitionURL(XMLAttributes url)
   * @see #setDefinitionURL(String url)
   * @see #getDefinitionURLString()
   */ public
";


%javamethodmodifiers ASTNode::replaceArgument(const std::string& bvar, ASTNode *arg) "
/**
   * Replaces occurrences of a given name with a given {@link ASTNode}.
   <p>
   * For example, if the formula in this {@link ASTNode} is <code>x + y</code>,
   * then the <code>&lt;bvar&gt;</code> is <code>x</code> and <code>arg</code> is an {@link ASTNode}
   * representing the real value <code>3.</code>  This method substitutes <code>3</code> for 
   * <code>x</code> within this {@link ASTNode} object.
   <p>
   * @param bvar a string representing the variable name to be substituted.
   <p>
   * @param arg an {@link ASTNode} representing the name/value/formula to use as
   * a replacement.
   */ public
";


%javamethodmodifiers ASTNode::setParentSBMLObject(SBase* sb) "
/**
   * Sets the parent SBML object.
   <p>
   * @param sb the parent SBML object of this {@link ASTNode}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #isSetParentSBMLObject()
   * @see #getParentSBMLObject()
   */ public
";


%javamethodmodifiers ASTNode::getParentSBMLObject() const "
/**
   * Returns the parent SBML object.
   <p>
   * @return the parent SBML object of this {@link ASTNode}.
   <p>
   * @see #isSetParentSBMLObject()
   */ public
";


%javamethodmodifiers ASTNode::unsetParentSBMLObject "
/**
   * Unsets the parent SBML object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @see #isSetParentSBMLObject()
   * @see #getParentSBMLObject()
   */ public
";


%javamethodmodifiers ASTNode::isSetParentSBMLObject() const "
/**
   * Returns <code>true</code> if this node has a value for the parent SBML
   * object.
   <p>
   * @return true if this {@link ASTNode} has an parent SBML object set, <code>false</code> otherwise.
   <p>
   * @see #getParentSBMLObject()
   */ public
";


%javamethodmodifiers ASTNode::reduceToBinary "
/**
   * Reduces this {@link ASTNode} to a binary tree.
   <p>
   * Example: if this {@link ASTNode} is <code>and(x, y, z)</code>, then the
   * formula of the reduced node is <code>and(and(x, y), z)</code>.  The
   * operation replaces the formula stored in the current {@link ASTNode} object.
   */ public
";


%javamethodmodifiers ASTNode::setUserData(void *userData) "
/**
  * Sets the user data of this node.
  <p>
  * The user data can be used by the application developer to attach custom
  * information to the node.  In case of a deep copy, this attribute will
  * passed as it is. The attribute will be never interpreted by this class.
  <p>
  * @param userData specifies the new user data.
  <p>
  * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
  * <ul>
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
  *
  * </ul> */ public
";


%javamethodmodifiers ASTNode::*getUserData() const "
/**
  * Returns the user data that has been previously set via setUserData().
  <p>
  * @return the user data of this node, or <code>null</code> if no user data has been
  * set.
  */ public
";


%javamethodmodifiers ASTNode::unsetUserData "
/**
  * Unsets the user data of this node.
  <p>
  * The user data can be used by the application developer to attach custom
  * information to the node.  In case of a deep copy, this attribute will
  * passed as it is. The attribute will be never interpreted by this class.
  <p>
  * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
  * <ul>
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
  *
  * </ul> */ public
";


%javamethodmodifiers ASTNode::isSetUserData() const "
/**
  * Returns <code>true</code> if this node has a user data object.
  <p>
  * @return true if this {@link ASTNode} has a user data object set, <code>false</code>
  * otherwise.
  */ public
";


%javamethodmodifiers ASTNode::isWellFormedASTNode() const "
/**
  * Returns <code>true</code> or <code>false</code> depending on whether this
  * {@link ASTNode} is well-formed.
  <p>
  * @note An {@link ASTNode} may be well-formed, with each node and its children
  * having the appropriate number of children for the given type, but may
  * still be invalid in the context of its use within an SBML model.
  <p>
  * @return <code>true</code> if this {@link ASTNode} is well-formed, <code>false</code> otherwise.
  <p>
  * @see #hasCorrectNumberArguments()
  */ public
";


%javamethodmodifiers ASTNode::hasCorrectNumberArguments() const "
/**
  * Returns <code>true</code> if this {@link ASTNode} has the correct number of children for
  * its type.
  <p>
  * For example, an {@link ASTNode} with type {@link libsbmlConstants#AST_PLUS AST_PLUS}
  * expects 2 child nodes.
  <p>
  * @return <code>true</code> if this {@link ASTNode} has the appropriate number of children
  * for its type, <code>false</code> otherwise.
  <p>
  * @note This function performs a check on the top-level node only.  Child
  * nodes are not checked.
  <p>
  * @see #isWellFormedASTNode()
  */ public
";


%javamethodmodifiers ASTNode::getDefinitionURLString() const "
/**
   * Returns the MathML <code>definitionURL</code> attribute value as a string.
   <p>
   * @return the value of the <code>definitionURL</code> attribute, as a string.
   <p>
   * @see #getDefinitionURL()
   * @see #setDefinitionURL(String url)
   * @see #setDefinitionURL(XMLAttributes url)
   */ public
";


%javamethodmodifiers ASTNode::representsBvar() const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::write(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::read(XMLInputStream& stream, const std::string& reqd_prefix="") "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::writeNodeOfType(XMLOutputStream& stream, int type, bool inChildNode = false) const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::getNumBvars() const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::getTypeCode() const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::getPackageName() const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::containsVariable(const std::string id) const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::getNumVariablesWithUndeclaredUnits(Model * m = NULL) const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::canonicalizeConstant "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::canonicalizeFunction "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::canonicalizeFunctionL1 "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::canonicalizeLogical "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::canonicalizeRelational "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::hasCnUnits() const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::getUnitsPrefix() const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::ASTNode(ASTNumber* number) "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::ASTNode(ASTFunction* function) "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::reset "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::connectPlugins "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::getNumber() const "
/** * @internal */ public
";


%javamethodmodifiers ASTNode::getFunction() const "
/** * @internal */ public
";


%javamethodmodifiers readMathML(XMLInputStream& stream, const std::string& reqd_prefix="") "
/** * @internal */ public
";


%javamethodmodifiers writeMathML(const ASTNode* node, XMLOutputStream& stream, SBMLNamespaces *sbmlns=NULL) "
/** * @internal */ public
";


%javamethodmodifiers readMathMLFromString(const char *xml) "
/**
 * Reads the MathML from the given XML string, constructs a corresponding
 * abstract syntax tree, and returns a pointer to the root of the tree.
 <p>
 * @param xml a string containing a full MathML expression
 <p>
 * @return the root of an AST corresponding to the given mathematical
 * expression, otherwise <code>null</code> is returned if the given string is <code>null</code>
 * or invalid.
 */ public
";


%javamethodmodifiers readMathMLFromStringWithNamespaces(const char *xml, XMLNamespaces_t * xmlns) "
/**
 * Reads the MathML from the given XML string, constructs a corresponding
 * abstract syntax tree, and returns a pointer to the root of the tree.
 <p>
 * @param xml a string containing a full MathML expression
 * @param xmlns an {@link XMLNamespaces}
 * object containing namespaces that are considered active during the
 * read. (For example, an SBML Level&nbsp;3 package namespace.)
 <p>
 * @return the root of an AST corresponding to the given mathematical
 * expression, otherwise <code>null</code> is returned if the given string is <code>null</code>
 * or invalid.
 */ public
";


%javamethodmodifiers writeMathMLToString(const ASTNode_t* node) "
/**
 * Writes the given AST node (and its children) to a string as MathML, and
 * returns the string.
 <p>
 * @param node the root of an AST to write out to the stream.
 <p>
 * @return a string containing the written-out MathML representation
 * of the given AST.
 <p>
 * @note The string is owned by the caller and should be freed (with
 * free()) when no longer needed.  <code>null</code> is returned if the given
 * argument is <code>null.</code>
 */ public
";


%javamethodmodifiers SBML_parseFormula(const char *formula) "
/**
 * Parses a text string as a mathematical formula and returns an AST
 * representation of it.
 <p>
 * <p>
 * The text-string form of mathematical formulas produced by
 * <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a> and read by
 * <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> use a simple C-inspired infix
 * notation taken from SBML Level&nbsp;1.  A formula in this text-string form
 * therefore can be handed to a program that understands SBML Level&nbsp;1
 * mathematical expressions, or used as part of a formula translation system.
 * The syntax is described in detail in the documentation for {@link ASTNode}.  The
 * following are illustrative examples of formulas expressed using this syntax:
 * <pre class=\'fragment\'>
0.10 * k4^2
</pre>
<pre class=\'fragment\'>
(vm * s1)/(km + s1)
</pre>
 <p>
 * Note that this facility is provided as a convenience by libSBML&mdash;the
 * MathML standard does not actually define a \'string-form\' equivalent to
 * MathML expression trees, so the choice of formula syntax is somewhat
 * arbitrary.  The approach taken by libSBML is to use the syntax defined by
 * SBML Level&nbsp;1 (which in fact used a text-string representation of
 * formulas and not MathML).  This formula syntax is based mostly on C
 * programming syntax, and may contain operators, function calls, symbols,
 * and white space characters.  The following table provides the precedence
 * rules for the different entities that may appear in formula strings.
 <p>
 * <table border=\"0\" class=\"centered text-table width80 normal-font alt-row-colors\" style=\"padding-bottom: 0.5em\">
 <tr style=\"background: lightgray; font-size: 14px;\">
     <th align=\"left\">Token</th>
     <th align=\"left\">Operation</th>
     <th align=\"left\">Class</th>
     <th>Precedence</th>
     <th align=\"left\">Associates</th>
 </tr>
<tr><td><em>name</em></td><td>symbol reference</td><td>operand</td><td align=\"center\">6</td><td>n/a</td></tr>
<tr><td><code>(</code><em>expression</em><code>)</code></td><td>expression grouping</td><td>operand</td><td align=\"center\">6</td><td>n/a</td></tr>
<tr><td><code>f(</code><em>...</em><code>)</code></td><td>function call</td><td>prefix</td><td align=\"center\">6</td><td>left</td></tr>
<tr><td><code>-</code></td><td>negation</td><td>unary</td><td align=\"center\">5</td><td>right</td></tr>
<tr><td><code>^</code></td><td>power</td><td>binary</td><td align=\"center\">4</td><td>left</td></tr>
<tr><td><code>*</code></td><td>multiplication</td><td>binary</td><td align=\"center\">3</td><td>left</td></tr>
<tr><td><code>/</code></td><td>divison</td><td>binary</td><td align=\"center\">3</td><td>left</td></tr>
<tr><td><code>+</code></td><td>addition</td><td>binary</td><td align=\"center\">2</td><td>left</td></tr>
<tr><td><code>-</code></td><td>subtraction</td><td>binary</td><td align=\"center\">2</td><td>left</td></tr>
<tr><td><code>,</code></td><td>argument delimiter</td><td>binary</td><td align=\"center\">1</td><td>left</td></tr>
<caption class=\"top-caption\">A table of the expression operators and their precedence in the
text-string format for mathematical expressions used by SBML_parseFormula().
</caption>
</table>


 <p>
 * In the table above, <em>operand</em> implies the construct is an operand, 
 * <em>prefix</em> implies the operation is applied to the following arguments, 
 * <em>unary</em> implies there is one argument, and <em>binary</em> implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a * b + c</code> is evaluated as <code>(a * b) +
 * c</code> because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a - b + c</code> is
 * evaluated as <code>(a - b) + c</code> because the <code>+</code> and <code>-</code>
 * operators are left-associative.
 <p>
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters, followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\' href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML Level&nbsp;1 Version&nbsp;2 specification</a>:
 <p>
 * <table border=\"0\" class=\"centered text-table width80 normal-font alt-row-colors\">
 <tr>
     <th align=\"left\" width=\"60\">Name</th>
     <th align=\"left\" width=\"35\">Args</th>
     <th align=\"left\">Formula or meaning</th>
     <th align=\"left\" width=\"90\">Argument Constraints</th>
     <th align=\"left\" width=\"90\">Result constraints</th>
 </tr>
<tr><td><code>abs</code></td><td><em>x</em></td><td>absolute value of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>acos</code></td><td><em>x</em></td><td>arc cosine of <em>x</em> in radians</td><td>-1.0 &le; <em>x</em> &le; 1.0</td><td>0 &le; <em>acos(x)</em> &le; &pi;</td></tr>
<tr><td><code>asin</code></td><td><em>x</em></td><td>arc sine of <em>x</em> in radians</td><td>-1.0 &le; <em>x</em> &le; 1.0</td><td>0 &le; <em>asin(x)</em> &le; &pi;</td></tr>
<tr><td><code>atan</code></td><td><em>x</em></td><td>arc tangent of <em>x</em> in radians</td><td></td><td>0 &le; <em>atan(x)</em> &le; &pi;</td></tr>
<tr><td><code>ceil</code></td><td><em>x</em></td><td>smallest number not less than <em>x</em> whose value is an exact integer</td><td></td><td></td></tr>
<tr><td><code>cos</code></td><td><em>x</em></td><td>cosine of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>exp</code></td><td><em>x</em></td><td><em>e</em><sup><em> x</em></sup>, where <em>e</em> is the base of the natural logarithm</td><td></td><td></td></tr>
<tr><td><code>floor</code></td><td><em>x</em></td><td>the largest number not greater than <em>x</em> whose value is an exact integer</td><td></td><td></td></tr>
<tr><td><code>log</code></td><td><em>x</em></td><td>natural logarithm of <em>x</em></td><td><em>x</em> &gt; 0</td><td></td></tr>
<tr><td><code>log10</code></td><td><em>x</em></td><td>base 10 logarithm of <em>x</em></td><td><em>x</em> &gt; 0</td><td></td></tr>
<tr><td><code>pow</code></td><td><em>x, y</em></td><td><em>x</em><sup><em> y</em></sup></td><td></td><td></td></tr>
<tr><td><code>sqr</code></td><td><em>x</em></td><td><em>x</em><sup><em>2</em></sup></td><td></td><td></td></tr>
<tr><td><code>sqrt</code></td><td><em>x</em></td><td>&radic;<em>x</em></td><td><em>x</em> &gt; 0</td><td><em>sqrt(x)</em> &ge; 0</td></tr>
<tr><td><code>sin</code></td><td><em>x</em></td><td>sine of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>tan</code></td><td><em>x</em></td><td>tangent of <em>x</em></td><td>x &ne; n*&pi;/2, for odd integer <em>n</em></td><td></td></tr>
<caption class=\"bottom-caption\">The names of mathematical functions defined in the SBML
Level&nbsp;1 Version&nbsp;2 text-string formula syntax.</caption>
</table>


 <p>
 * @warning <span class=\'warning\'>There are differences between the symbols
 * used to represent the common mathematical functions and the corresponding
 * MathML token names.  This is a potential source of incompatibilities.
 * Note in particular that in this text-string syntax, <code>log(x)</code>
 * represents the natural logarithm, whereas in MathML, the natural logarithm
 * is <code>&lt;ln/&gt;</code>.  Application writers are urged to be careful
 * when translating between text forms and MathML forms, especially if they
 * provide a direct text-string input facility to users of their software
 * systems.</span>
 <p>
 * @param formula the text-string formula expression to be parsed
 <p>
 * @return the root node of the AST corresponding to the <code>formula</code>, or 
 * <code>null</code> if an error occurred in parsing the formula
 <p>
 * 
 * <p>
 * @note
 * Callers using SBML Level&nbsp;3 are encouraged to use the facilities
 * provided by libSBML\'s newer and more powerful Level&nbsp;3-oriented
 * formula parser and formatter.  The entry points to this second system are
 * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> and
 * <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>.  The Level&nbsp;1-oriented
 * system (i.e., what is provided by <a href=\'libsbml.html#formulaToString(java.lang.String)\'><code>libsbml.formulaToString(String)</code></a>
 * and <a href=\'libsbml.html#parseFormula(org.sbml.libsbml.ASTNode)\'><code>libsbml.parseFormula(ASTNode)</code></a>) is provided 
 * untouched for backwards compatibility.
 <p>
 * <p>
 * @note We urge developers to keep in mind that the text-string formula
 * syntax is specific to libSBML.  <em>Neither MathML nor SBML define a
 * text-string format for mathematical formulas.</em> LibSBML\'s particular
 * syntax should not be considered to be a canonical or standard
 * general-purpose mathematical expression syntax.  LibSBML provides methods
 * for parsing and transforming text-string math formulas back and forth from
 * AST structures for the convenience of calling applications, but it is
 * important to keep the system\'s limitations in mind.
 <p>
   * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
 * @see <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see L3ParserSettings
 */ public
";


%javamethodmodifiers SBML_formulaToL3String(const ASTNode_t *tree) "
/**
 * Converts an AST to a text string representation of a formula using an
 * extended syntax.
 <p>
 * <p>
 * The text-string form of mathematical formulas read by the function
 * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> and written by the function
 * <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a> uses an expanded version of
 * the syntax read and written by <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * and <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>, respectively.  The
 * latter two libSBML functions were originally developed to support
 * conversion between SBML Levels&nbsp;1 and&nbsp;2, and were focused on the
 * syntax of mathematical formulas used in SBML Level&nbsp;1.  With time, and
 * the use of MathML in SBML Levels&nbsp;2 and&nbsp;3, it became clear that
 * supporting Level&nbsp;2 and&nbsp;3\'s expanded mathematical syntax would be
 * useful for software developers.  To maintain backwards compatibility for
 * libSBML users, the original <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>
 * and <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> have been left untouched,
 * and instead, the new functionality is provided in the form of
 * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> and
 * <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>.
 <p>
 * The following lists the main differences in the formula syntax supported by
 * the \'Level 3\' or L3 versions of the formula parsers and formatters,
 * compared to what is supported by the Level&nbsp;1-oriented
 * <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> and
 * <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>:
 <p>
 * <ul>
 * <li> Units may be asociated with bare numbers, using the following syntax:
 * <div style=\'margin: 10px auto 10px 25px; display: block\'>
 * <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * </div>
 * The <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * may be in any form (an integer, real, or rational
 * number), and the
 * <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * must conform to the syntax of an SBML identifier (technically, the
 * type defined as <code>SId</code> in the SBML specifications).  The whitespace between
 * <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * and <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * is optional.
 <p>
 * <li> The Boolean function symbols <code>&&</code>, <code>||</code>, <code>!</code>, and <code>!=</code> may be
 * used.
 <p>
 * <li> The <em>modulo</em> operation is allowed as the symbol <code>@%</code> and will
 * produce a <code>&lt;piecewise&gt;</code> function in the corresponding
 * MathML output.
 <p>
 * <li> All inverse trigonometric functions may be defined in the infix either
 * using <code>arc</code> as a prefix or simply <code>a</code>; in other words, both <code>arccsc</code>
 * and <code>acsc</code> are interpreted as the operator <em>arccosecant</em> as defined in
 * MathML&nbsp;2.0.  (Many functions in the simpler SBML Level&nbsp;1
 * oriented parser implemented by <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * are defined this way as well, but not all.)
 <p>
 * <li> The following expression is parsed as a rational number instead of
 * as a numerical division:
 * <pre style=\'display: block; margin-left: 25px\'>
 * (<span class=\'code\' style=\'background-color: #d0d0ee\'>integer</span>/<span class=\'code\' style=\'background-color: #d0d0ee\'>integer</span>)</pre>
 * <strong>Spaces are not allowed</strong> in this construct; in other words,
 * &quot;<code>(3 / 4)</code>&quot; (with whitespace between the numbers and
 * the operator) will be parsed into the MathML <code>&lt;divide&gt;</code>
 * construct rather than a rational number.  You can, however, assign units to a
 * rational number as a whole; here is an example: &quot;<code>(3/4) ml</code>&quot;.
 * (In the case of division rather than a rational number, units are not interpreted
 * in this way.)
 <p>
 * <li> Various parser and formatter behaviors may be altered through the use
 * of a {@link L3ParserSettings} object in conjunction with the functions
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> and
 * <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * The settings available include the following:
 * <ul style=\'list-style-type: circle\'>
 *
 * </ul> <p>
 * <li style=\'margin-bottom: 0.5em\'> The function <code>log</code> with a single
 * argument (&quot;<code>log(x)</code>&quot;) can be parsed as
 * <code>log10(x)</code>, <code>ln(x)</code>, or treated as an error, as
 * desired.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> Unary minus signs can be collapsed or
 * preserved; that is, sequential pairs of unary minuses (e.g., &quot;<code>-
 * -3</code>&quot;) can be removed from the input entirely and single unary
 * minuses can be incorporated into the number node, or all minuses can be
 * preserved in the AST node structure.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> Parsing of units embedded in the input
 * string can be turned on and off.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> The string <code>avogadro</code> can be parsed as
 * a MathML <em>csymbol</em> or as an identifier.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> A {@link Model} object may optionally be
 * provided to the parser using the variant function call
 * <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a> or
 * stored in a {@link L3ParserSettings} object passed to the variant function
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.  When a {@link Model} object is provided, identifiers
 * (values of type <code>SId</code>) from that model are used in preference to
 * pre-defined MathML definitions for both symbols and functions.
 * More precisely:
 * <ul style=\'list-style-type: square\'>
 <p>
 * <li style=\'margin-bottom: 0.5em\'> <em>In the case of symbols</em>: the
 * {@link Model} entities whose identifiers will shadow identical symbols in the
 * mathematical formula are: {@link Species}, {@link Compartment}, {@link Parameter}, {@link Reaction}, and
 * {@link SpeciesReference}.  For instance, if the parser is given a {@link Model} containing
 * a {@link Species} with the identifier &quot;<code>pi</code>&quot;, and the formula
 * to be parsed is &quot;<code>3*pi</code>&quot;, the MathML produced will
 * contain the construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of
 * the construct <code>&lt;pi/&gt;</code>.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> <em>In the case of user-defined
 * functions</em>: when a {@link Model} object is provided, <code>SId</code> values of
 * user-defined functions present in the model will be used preferentially
 * over pre-defined MathML functions.  For example, if the passed-in {@link Model}
 * contains a {@link FunctionDefinition} object with the identifier
 * &quot;<code>sin</code>&quot;, that function will be used instead of the
 * predefined MathML function <code>&lt;sin/&gt;</code>.
 * </ul>
 <p>
 * <li style=\'margin-bottom: 0.5em\'> An {@link SBMLNamespaces} object may optionally
 * be provided to identify SBML Level&nbsp;3 packages that extend the
 * syntax understood by the formula parser.  When the namespaces are provided,
 * the parser will interpret possible additional syntax defined by the libSBML
 * plug-ins implementing the SBML Level&nbsp;3 packages; for example, it may
 * understand vector/array extensions introduced by the SBML Level&nbsp;3 
 * <em>Arrays</em> package.
 * </ul>
 <p>
 * These configuration settings cannot be changed directly using the basic
 * parser and formatter functions, but <em>can</em> be changed on a per-call basis
 * by using the alternative functions <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> and
 * <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>.
 <p>
 * Neither SBML nor the MathML standard define a \'string-form\' equivalent to
 * MathML expressions.  The approach taken by libSBML is to start with the
 * formula syntax defined by SBML Level&nbsp;1 (which in fact used a custom
 * text-string representation of formulas, and not MathML), and expand it to
 * include the functionality described above.  This formula syntax is based
 * mostly on C programming syntax, and may contain operators, function calls,
 * symbols, and white space characters.  The following table provides the
 * precedence rules for the different entities that may appear in formula
 * strings.
 <p>
 * <table border=\"0\" width=\"95%\"
       class=\"centered text-table normal-font alt-row-colors\"
       style=\"padding-bottom: 0.5em\">
 <tr style=\"background: lightgray; font-size: 14px;\">
     <th align=\"left\">Token</th>
     <th align=\"left\">Operation</th>
     <th align=\"left\">Class</th>
     <th>Precedence</th>
     <th align=\"left\">Associates</th>
 </tr>
<tr><td><em>name</em></td><td>symbol reference</td><td>operand</td><td align=\"center\">8</td><td>n/a</td></tr>
<tr><td><code>(</code><em>expression</em><code>)</code></td><td>expression grouping</td><td>operand</td><td align=\"center\">8</td><td>n/a</td></tr>
<tr><td><code>f(</code><em>...</em><code>)</code></td><td>function call</td><td>prefix</td><td align=\"center\">8</td><td>left</td></tr>
<tr><td><code>^</code></td><td>power</td><td>binary</td><td align=\"center\">7</td><td>left</td></tr>
<tr><td><code>-, !</code></td><td>negation and boolean 'not'</td><td>unary</td><td align=\"center\">6</td><td>right</td></tr>
<tr><td><code>*, /, %</code></td><td>multiplication, division, and modulo</td><td>binary</td><td align=\"center\">5</td><td>left</td></tr>
<tr><td><code>+, -</code></td><td>addition and subtraction</td><td>binary</td><td align=\"center\">4</td><td>left</td></tr>
<tr><td><code>==, &lt;, &gt;, &lt=, &gt=, !=</code></td><td>boolean equality, inequality, and comparison</td><td>binary</td><td align=\"center\">3</td><td>left</td></tr>
<tr><td><code>&&, ||</code></td><td>boolean 'and' and 'or'</td><td>binary</td><td align=\"center\">2</td><td>left</td></tr>
<tr><td><code>,</code></td><td>argument delimiter</td><td>binary</td><td align=\"center\">1</td><td>left</td></tr>

<caption class=\"top-caption\">Expression operators and their precedence in the
\"Level&nbsp;3\" text-string format for mathematical expressions.
</caption>
</table>


 <p>
 * In the table above, <em>operand</em> implies the construct is an operand, 
 * <em>prefix</em> implies the operation is applied to the following arguments, 
 * <em>unary</em> implies there is one argument, and <em>binary</em> implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a + b * c</code> is evaluated as <code>a + (b * c)</code>
 * because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a && b || c</code> is
 * evaluated as <code>(a && b) || c</code> because the <code>&&</code> and <code>||</code>
 * operators are left-associative and have the same precedence.
 <p>
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters), followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML
 * Level&nbsp;1 Version&nbsp;2 specification</a> with additions based on the
 * functions added in SBML Level 2 and Level 3:
 <p>
 * <table border=\"0\" width=\"95%\" 
       class=\"centered text-table normal-font alt-row-colors\">
 <tr>
     <th align=\"left\" width=\"60\">Name</th>
     <th align=\"left\" width=\"75\">Argument(s)</th>
     <th align=\"left\">Formula or meaning</th>
     <th align=\"left\" width=\"90\">Argument Constraints</th>
     <th align=\"left\" width=\"90\">Result constraints</th>
 </tr>
<tr><td><code>abs</code></td>   
    <td><em>x</em></td> 
    <td>Absolute value of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acos</code>, <code>arccos</code></td>
    <td><em>x</em></td>
    <td>Arccosine of <em>x</em> in radians.</td>
    <td>&ndash;1.0 &le; <em>x</em> &le; 1.0</td>
    <td>0 &le; <em>acos(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>acosh</code>, <code>arccosh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccosine of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acot</code>, <code>arccot</code></td>
    <td><em>x</em></td>
    <td>Arccotangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acoth</code>, <code>arccoth</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccotangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acsc</code>, <code>arccsc</code></td>
    <td><em>x</em></td>
    <td>Arccosecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acsch</code>, <code>arccsch</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccosecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asec</code>, <code>arcsec</code></td>
    <td><em>x</em></td>
    <td>Arcsecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asech</code>, <code>arcsech</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arcsecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asin</code>, <code>arcsin</code></td>
    <td><em>x</em></td><td>Arcsine of <em>x</em> in radians.</td>
    <td>&ndash;1.0 &le; <em>x</em> &le; 1.0</td>
    <td>0 &le; <em>asin(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>atan</code>, <code>arctan</code></td>
    <td><em>x</em></td>
    <td>Arctangent of <em>x</em> in radians.</td>
    <td></td>
    <td>0 &le; <em>atan(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>atanh</code>, <code>arctanh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arctangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>ceil</code>, <code>ceiling</code></td>
    <td><em>x</em></td>
    <td>Smallest number not less than <em>x</em> whose value is an exact integer.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cos</code></td>
    <td><em>x</em></td>
    <td>Cosine of <em>x</em></td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cosh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cosine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cot</code></td>
    <td><em>x</em></td>
    <td>Cotangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>coth</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cotangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>csc</code></td>
    <td><em>x</em></td>
    <td>Cosecant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>csch</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cosecant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>delay</code></td>
    <td><em>x, y</em></td>
    <td>The value of <em>x</em> at <em>y</em> time units in the past.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>factorial</code></td>
    <td><em>n</em></td>
    <td>The factorial of <em>n</em>. Factorials are defined by <em>n! = n*(n&ndash;1)* ... * 1</em>.</td>
    <td><em>n</em> must be an integer.</td>
    <td></td>
</tr>
<tr><td><code>exp</code></td>
    <td><em>x</em></td>
    <td><em>e</em><sup><em> x</em></sup>, where <em>e</em> is the base of the natural logarithm.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>floor</code></td>
    <td><em>x</em></td>
    <td>The largest number not greater than <em>x</em> whose value is an exact integer.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>ln</code></td>
    <td><em>x</em></td>
    <td>Natural logarithm of <em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log</code></td>
    <td><em>x</em></td>
    <td>By default, the base 10 logarithm of <em>x</em>, but can be set to be the natural logarithm of <em>x</em>, or to be an illegal construct.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log</code></td>
    <td><em>x, y</em></td>
    <td>The base <em>x</em> logarithm of <em>y</em>.</td>
    <td><em>y</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log10</code></td>
    <td><em>x</em></td>
    <td>Base 10 logarithm of <em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>piecewise</code></td>
    <td><em>x1, y1, [x2, y2,] [...] [z]</em></td>
    <td>A piecewise function: if (<em>y1</em>), <em>x1</em>.  Otherwise, if (<em>y2</em>), <em>x2</em>, etc.  Otherwise, z. </td>
    <td><em>y1, y2, y3 [etc]</em> must be boolean</td>
    <td></td>
</tr>
<tr><td><code>pow</code>, <code>power</code> </td>
    <td><em>x, y</em></td>
    <td><em>x</em><sup><em> y</em></sup>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>root</code></td>
    <td><em>b, x</em></td>
    <td>The root base <em>b</em> of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sec</code></td>
    <td><em>x</em></td>
    <td>Secant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sech</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic secant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sqr</code></td>
    <td><em>x</em></td>
    <td><em>x</em><sup><em>2</em></sup>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sqrt</code></td>
    <td><em>x</em></td>
    <td>&radic;<em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td><em>sqrt(x)</em> &ge; 0</td>
</tr>
<tr><td><code>sin</code></td>
    <td><em>x</em></td>
    <td>Sine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sinh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic sine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>tan</code></td>
    <td><em>x</em></td>
    <td>Tangent of <em>x</em>.</td>
    <td>x &ne; n*&pi;/2, for odd integer <em>n</em></td>
    <td></td>
</tr>
<tr><td><code>tanh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic tangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>and</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>and(x, y, z...)</em>: returns <code>true</code> if all of its arguments are true.  Note that <code>and</code> is an n-ary function, taking 0 or more arguments, and that <code>and()</code> returns <code>true</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>not</code></td>
    <td><em>x</em></td>
    <td>Boolean <em>not(x)</em></td>
    <td><em>x</em> must be boolean</td>
    <td></td>
</tr>
<tr><td><code>or</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>or(x, y, z...)</em>: returns <code>true</code> if at least one of its arguments is true.  Note that <code>or</code> is an n-ary function, taking 0 or more arguments, and that <code>or()</code> returns <code>false</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>xor</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>xor(x, y, z...)</em>: returns <code>true</code> if an odd number of its arguments is true.  Note that <code>xor</code> is an n-ary function, taking 0 or more arguments, and that <code>xor()</code> returns <code>false</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>eq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>eq(x, y, z...)</em>: returns <code>true</code> if all arguments are equal.  Note that <code>eq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>geq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>geq(x, y, z...)</em>: returns <code>true</code> if each argument is greater than or equal to the argument following it.  Note that <code>geq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>gt</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>gt(x, y, z...)</em>: returns <code>true</code> if each argument is greater than the argument following it.  Note that <code>gt</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>leq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>leq(x, y, z...)</em>: returns <code>true</code> if each argument is less than or equal to the argument following it.  Note that <code>leq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>lt</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>lt(x, y, z...)</em>: returns <code>true</code> if each argument is less than the argument following it.  Note that <code>lt</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>neq</code></td>
    <td><em>x, y</em></td>
    <td>Boolean <em>x</em> != <em>y</em>: returns <code>true</code> unless x and y are equal.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>plus</code></td>
    <td><em>x, y, z...</em></td>
    <td><em>x</em> + <em>y</em> + <em>z</em> + <em>...</em>: The sum of the arguments of the function.  Note that <code>plus</code> is an n-ary function taking 0 or more arguments, and that <code>plus()</code> returns <code>0</code>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>times</code></td>
    <td><em>x, y, z...</em></td>
    <td><em>x</em> * <em>y</em> * <em>z</em> * <em>...</em>: The product of the arguments of the function.  Note that <code>times</code> is an n-ary function taking 0 or more arguments, and that <code>times()</code> returns <code>1</code>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>minus</code></td>
    <td><em>x, y</em></td>
    <td><em>x</em> &ndash; <em>y</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>divide</code></td>
    <td><em>x, y</em></td>
    <td><em>x</em> / <em>y</em>.</td>
    <td></td>
    <td></td>
</tr>

<caption class=\"top-caption\">Mathematical functions defined
in the \"Level&nbsp;3\" text-string formula syntax.</caption>

</table>


 <p>
 * Parsing of the various MathML functions and constants are all
 * case-insensitive by default: function names such as <code>cos</code>,
 * <code>Cos</code> and <code>COS</code> are all parsed as the MathML cosine
 * operator, <code>&lt;cos&gt;</code>.  However, <em>when a {@link Model} object is
 * used</em> in conjunction with either
 * <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a> or
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>, any identifiers found in that model will be
 * parsed in a case-<em>sensitive</em> way.  For example, if a model contains
 * a {@link Species} having the identifier <code>Pi</code>, the parser will parse
 * &quot;<code>Pi</code>&quot; in the input as &quot;<code>&lt;ci&gt; Pi
 * &lt;/ci&gt;</code>&quot; but will continue to parse the symbols
 * &quot;<code>pi</code>&quot; and &quot;<code>PI</code>&quot; as
 * &quot;<code>&lt;pi&gt;</code>&quot;.
 <p>
 * As mentioned above, the manner in which the \'L3\' versions of the formula
 * parser and formatter interpret the function &quot;<code>log</code>&quot;
 * can be changed.  To do so, callers should use the function
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> and pass it an appropriate {@link L3ParserSettings}
 * object.  By default, unlike the SBML Level&nbsp;1 parser implemented by
 * <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>, the string
 * &quot;<code>log</code>&quot; is interpreted as the base&nbsp;10 logarithm,
 * and <em>not</em> as the natural logarithm.  However, you can change the
 * interpretation to be base-10 log, natural log, or as an error; since the
 * name \'log\' by itself is ambiguous, you require that the parser uses 
 * <code>log10</code> or <code>ln</code> instead, which are more clear.  Please refer to
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.
 <p>
 * In addition, the following symbols will be translated to their MathML
 * equivalents, if no symbol with the same <code>SId</code> identifier string exists
 * in the {@link Model} object provided:
 <p>
 * <table border=\"0\" width=\"95%\"
       class=\"centered text-table normal-font alt-row-colors\">
 <tr>
     <th align=\"left\" width=\"60\">Name</th>
     <th align=\"left\" width=\"250\">Meaning</th>
     <th align=\"left\">MathML</th>
 </tr>
<tr><td><code>true</code></td>   
    <td>The boolean value <code>true</code></td>
    <td><code>&lt;true/&gt;</code></td>
</tr>
<tr><td><code>false</code></td>   
    <td>The boolean value <code>false</code></td>
    <td><code>&lt;false/&gt;</code></td>
</tr>
<tr><td><code>pi</code></td>   
    <td>The mathematical constant pi</td>
    <td><code>&lt;pi/&gt;</code></td>
</tr>
<tr><td><code>avogadro</code></td>   
    <td>The numerical value of Avogadro's constant, as defined in the SBML specification</td>
    <td><code style=\"letter-spacing: -1px\">&lt;csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/symbols/avogadro\"&gt; avogadro &lt;/csymbol/&gt;</code></td>
</tr>
<tr><td><code>time</code></td>   
    <td>Simulation time as defined in SBML</td>
    <td><code style=\"letter-spacing: -1px\">&lt;csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/symbols/time\"&gt; time &lt;/csymbol/&gt;</code></td>
</tr>
<tr><td><code>inf</code> or <code>infinity</code></td>   
    <td>The mathematical constant \"infinity\"</td>
    <td><code>&lt;infinity/&gt;</code></td>
</tr>
<tr><td><code>nan</code> or <code>notanumber</code></td>   
    <td>The mathematical concept \"not a number\"</td>
    <td><code>&lt;notanumber/&gt;</code></td>
</tr>

<caption class=\"top-caption\">Mathematical symbols defined
in the \"Level&nbsp;3\" text-string formula syntax.
</caption>
</table>

 <p>
 * Again, as mentioned above, whether the string
 * &quot;<code>avogadro</code>&quot; is parsed as an AST node of type
 * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} or
 * {@link libsbmlConstants#AST_NAME AST_NAME} is configurable; use the version of
 * the parser function called <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.  This Avogadro-related
 * functionality is provided because SBML Level&nbsp;2 models may not use
 * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} AST nodes.
 <p>
 * @param tree the AST to be converted.
 <p>
 * @return the formula from the given AST as text string, with a syntax
 * oriented towards the capabilities defined in SBML Level&nbsp;3.  The
 * caller owns the returned string and is responsible for freeing it when it
 * is no longer needed.  If <code>tree</code> is a null pointer, then a null pointer is
 * returned.
 <p>
 * @see <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * @see L3ParserSettings
 * @see <a href=\'libsbml.html#getDefaultL3ParserSettings()\'><code>libsbml.getDefaultL3ParserSettings()</code></a>
 * @see <a href=\'libsbml.html#getLastParseL3Error()\'><code>libsbml.getLastParseL3Error()</code></a>
 */ public
";


%javamethodmodifiers SBML_formulaToL3StringWithSettings(const ASTNode_t *tree, const L3ParserSettings_t *settings) "
/**
 * Converts an AST to a text string representation of a formula, using
 * specific formatter settings.
 <p>
 * This function behaves identically to <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a> but its behavior is controlled by two fields in the 
 * <code>settings</code> object, namely:
 <p>
 * <ul>
 * <li> <em>parseunits</em> (\'parse units\'): If this field in the <code>settings</code>
 *     object is set to <code>true</code> (the default), the function will
 *     write out the units of any numerical ASTNodes that have them,
 *     producing (for example) &quot;<code>3 mL</code>&quot;,
 *     &quot;<code>(3/4) m</code>&quot;, or &quot;<code>5.5e-10
 *     M</code>&quot;.  If this is set to <code>false</code>, this function
 *     will only write out the number itself (&quot;<code>3</code>&quot;,
 *     &quot;<code>(3/4)</code>&quot;, and &quot;<code>5.5e-10</code>&quot;,
 *     in the previous examples).
 * <li> <em>collapseminus</em> (\'collapse minus\'): If this field in the 
 *     <code>settings</code> object is set to <code>false</code> (the default), the
 *     function will write out explicitly any doubly-nested unary minus
 *     ASTNodes, producing (for example) &quot;<code>- -x</code>&quot; or
 *     even &quot;<code>- - - - -3.1</code>&quot;.  If this is set to
 *     <code>true</code>, the function will collapse the nodes before
 *     producing the infix form, producing &quot;<code>x</code>&quot; and
 *     &quot;<code>-3.1</code>&quot; in the previous examples.
 *
 * </ul> <p>
 * All the other settings of the {@link L3ParserSettings} object passed in as 
 * <code>settings</code> will be ignored for the purposes of this function: the
 * <em>parselog</em> (\'parse log\') setting is ignored so that
 * &quot;<code>log10(x)</code>&quot;, &quot;<code>ln(x)</code>&quot;, and
 * &quot;<code>log(x, y)</code>&quot; are always produced; the
 * <em>avocsymbol</em> (\'Avogadro csymbol\') is irrelevant to the behavior
 * of this function; and nothing in the {@link Model} object set via the
 * <em>model</em> setting is used.
 <p>
 * @param tree the AST to be converted.
<p>
 * @param settings the {@link L3ParserSettings} object used to modify the behavior of
 * this function.
 <p>
 * @return the formula from the given AST as text string, with a syntax
 * oriented towards the capabilities defined in SBML Level&nbsp;3.  The
 * caller owns the returned string and is responsible for freeing it when it
 * is no longer needed.  If <code>tree</code> is a null pointer, then a null pointer is
 * returned.
 <p>
 * @see <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * @see L3ParserSettings
 * @see <a href=\'libsbml.html#getDefaultL3ParserSettings()\'><code>libsbml.getDefaultL3ParserSettings()</code></a>
 * @see <a href=\'libsbml.html#getLastParseL3Error()\'><code>libsbml.getLastParseL3Error()</code></a>
 */ public
";


%javamethodmodifiers SBML_formulaToString(const ASTNode_t *tree) "
/**
 * Converts an AST to a text string representation of a formula using a
 * basic syntax derived from SBML Level&nbsp;1.
 <p>
 * <p>
 * The text-string form of mathematical formulas produced by
 * <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a> and read by
 * <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> use a simple C-inspired infix
 * notation taken from SBML Level&nbsp;1.  A formula in this text-string form
 * therefore can be handed to a program that understands SBML Level&nbsp;1
 * mathematical expressions, or used as part of a formula translation system.
 * The syntax is described in detail in the documentation for {@link ASTNode}.  The
 * following are illustrative examples of formulas expressed using this syntax:
 * <pre class=\'fragment\'>
0.10 * k4^2
</pre>
<pre class=\'fragment\'>
(vm * s1)/(km + s1)
</pre>
 <p>
 * Note that this facility is provided as a convenience by libSBML&mdash;the
 * MathML standard does not actually define a \'string-form\' equivalent to
 * MathML expression trees, so the choice of formula syntax is somewhat
 * arbitrary.  The approach taken by libSBML is to use the syntax defined by
 * SBML Level&nbsp;1 (which in fact used a text-string representation of
 * formulas and not MathML).  This formula syntax is based mostly on C
 * programming syntax, and may contain operators, function calls, symbols,
 * and white space characters.  The following table provides the precedence
 * rules for the different entities that may appear in formula strings.
 <p>
 * <table border=\"0\" class=\"centered text-table width80 normal-font alt-row-colors\" style=\"padding-bottom: 0.5em\">
 <tr style=\"background: lightgray; font-size: 14px;\">
     <th align=\"left\">Token</th>
     <th align=\"left\">Operation</th>
     <th align=\"left\">Class</th>
     <th>Precedence</th>
     <th align=\"left\">Associates</th>
 </tr>
<tr><td><em>name</em></td><td>symbol reference</td><td>operand</td><td align=\"center\">6</td><td>n/a</td></tr>
<tr><td><code>(</code><em>expression</em><code>)</code></td><td>expression grouping</td><td>operand</td><td align=\"center\">6</td><td>n/a</td></tr>
<tr><td><code>f(</code><em>...</em><code>)</code></td><td>function call</td><td>prefix</td><td align=\"center\">6</td><td>left</td></tr>
<tr><td><code>-</code></td><td>negation</td><td>unary</td><td align=\"center\">5</td><td>right</td></tr>
<tr><td><code>^</code></td><td>power</td><td>binary</td><td align=\"center\">4</td><td>left</td></tr>
<tr><td><code>*</code></td><td>multiplication</td><td>binary</td><td align=\"center\">3</td><td>left</td></tr>
<tr><td><code>/</code></td><td>divison</td><td>binary</td><td align=\"center\">3</td><td>left</td></tr>
<tr><td><code>+</code></td><td>addition</td><td>binary</td><td align=\"center\">2</td><td>left</td></tr>
<tr><td><code>-</code></td><td>subtraction</td><td>binary</td><td align=\"center\">2</td><td>left</td></tr>
<tr><td><code>,</code></td><td>argument delimiter</td><td>binary</td><td align=\"center\">1</td><td>left</td></tr>
<caption class=\"top-caption\">A table of the expression operators and their precedence in the
text-string format for mathematical expressions used by SBML_parseFormula().
</caption>
</table>


 <p>
 * In the table above, <em>operand</em> implies the construct is an operand, 
 * <em>prefix</em> implies the operation is applied to the following arguments, 
 * <em>unary</em> implies there is one argument, and <em>binary</em> implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a * b + c</code> is evaluated as <code>(a * b) +
 * c</code> because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a - b + c</code> is
 * evaluated as <code>(a - b) + c</code> because the <code>+</code> and <code>-</code>
 * operators are left-associative.
 <p>
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters, followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\' href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML Level&nbsp;1 Version&nbsp;2 specification</a>:
 <p>
 * <table border=\"0\" class=\"centered text-table width80 normal-font alt-row-colors\">
 <tr>
     <th align=\"left\" width=\"60\">Name</th>
     <th align=\"left\" width=\"35\">Args</th>
     <th align=\"left\">Formula or meaning</th>
     <th align=\"left\" width=\"90\">Argument Constraints</th>
     <th align=\"left\" width=\"90\">Result constraints</th>
 </tr>
<tr><td><code>abs</code></td><td><em>x</em></td><td>absolute value of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>acos</code></td><td><em>x</em></td><td>arc cosine of <em>x</em> in radians</td><td>-1.0 &le; <em>x</em> &le; 1.0</td><td>0 &le; <em>acos(x)</em> &le; &pi;</td></tr>
<tr><td><code>asin</code></td><td><em>x</em></td><td>arc sine of <em>x</em> in radians</td><td>-1.0 &le; <em>x</em> &le; 1.0</td><td>0 &le; <em>asin(x)</em> &le; &pi;</td></tr>
<tr><td><code>atan</code></td><td><em>x</em></td><td>arc tangent of <em>x</em> in radians</td><td></td><td>0 &le; <em>atan(x)</em> &le; &pi;</td></tr>
<tr><td><code>ceil</code></td><td><em>x</em></td><td>smallest number not less than <em>x</em> whose value is an exact integer</td><td></td><td></td></tr>
<tr><td><code>cos</code></td><td><em>x</em></td><td>cosine of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>exp</code></td><td><em>x</em></td><td><em>e</em><sup><em> x</em></sup>, where <em>e</em> is the base of the natural logarithm</td><td></td><td></td></tr>
<tr><td><code>floor</code></td><td><em>x</em></td><td>the largest number not greater than <em>x</em> whose value is an exact integer</td><td></td><td></td></tr>
<tr><td><code>log</code></td><td><em>x</em></td><td>natural logarithm of <em>x</em></td><td><em>x</em> &gt; 0</td><td></td></tr>
<tr><td><code>log10</code></td><td><em>x</em></td><td>base 10 logarithm of <em>x</em></td><td><em>x</em> &gt; 0</td><td></td></tr>
<tr><td><code>pow</code></td><td><em>x, y</em></td><td><em>x</em><sup><em> y</em></sup></td><td></td><td></td></tr>
<tr><td><code>sqr</code></td><td><em>x</em></td><td><em>x</em><sup><em>2</em></sup></td><td></td><td></td></tr>
<tr><td><code>sqrt</code></td><td><em>x</em></td><td>&radic;<em>x</em></td><td><em>x</em> &gt; 0</td><td><em>sqrt(x)</em> &ge; 0</td></tr>
<tr><td><code>sin</code></td><td><em>x</em></td><td>sine of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>tan</code></td><td><em>x</em></td><td>tangent of <em>x</em></td><td>x &ne; n*&pi;/2, for odd integer <em>n</em></td><td></td></tr>
<caption class=\"bottom-caption\">The names of mathematical functions defined in the SBML
Level&nbsp;1 Version&nbsp;2 text-string formula syntax.</caption>
</table>


 <p>
 * @warning <span class=\'warning\'>There are differences between the symbols
 * used to represent the common mathematical functions and the corresponding
 * MathML token names.  This is a potential source of incompatibilities.
 * Note in particular that in this text-string syntax, <code>log(x)</code>
 * represents the natural logarithm, whereas in MathML, the natural logarithm
 * is <code>&lt;ln/&gt;</code>.  Application writers are urged to be careful
 * when translating between text forms and MathML forms, especially if they
 * provide a direct text-string input facility to users of their software
 * systems.</span>
 <p>
 * @param tree the AST to be converted.
 <p>
 * @return the formula from the given AST as a text-string mathematical
 * formula oriented towards SBML Level&nbsp;1.  The caller owns the returned
 * string and is responsible for freeing it when it is no longer needed.
 <p>
 * 
 * <p>
 * @note
 * Callers using SBML Level&nbsp;3 are encouraged to use the facilities
 * provided by libSBML\'s newer and more powerful Level&nbsp;3-oriented
 * formula parser and formatter.  The entry points to this second system are
 * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> and
 * <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>.  The Level&nbsp;1-oriented
 * system (i.e., what is provided by <a href=\'libsbml.html#formulaToString(java.lang.String)\'><code>libsbml.formulaToString(String)</code></a>
 * and <a href=\'libsbml.html#parseFormula(org.sbml.libsbml.ASTNode)\'><code>libsbml.parseFormula(ASTNode)</code></a>) is provided 
 * untouched for backwards compatibility.
 <p>
 * <p>
 * @note We urge developers to keep in mind that the text-string formula
 * syntax is specific to libSBML.  <em>Neither MathML nor SBML define a
 * text-string format for mathematical formulas.</em> LibSBML\'s particular
 * syntax should not be considered to be a canonical or standard
 * general-purpose mathematical expression syntax.  LibSBML provides methods
 * for parsing and transforming text-string math formulas back and forth from
 * AST structures for the convenience of calling applications, but it is
 * important to keep the system\'s limitations in mind.
 <p>
   * @see <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 */ public
";


%javamethodmodifiers SBML_parseL3Formula(const char *formula) "
/**
 * Parses a text string as a mathematical formula and returns an AST
 * representation of it.
 <p>
 * <p>
 * The text-string form of mathematical formulas read by the function
 * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> and written by the function
 * <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a> uses an expanded version of
 * the syntax read and written by <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * and <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>, respectively.  The
 * latter two libSBML functions were originally developed to support
 * conversion between SBML Levels&nbsp;1 and&nbsp;2, and were focused on the
 * syntax of mathematical formulas used in SBML Level&nbsp;1.  With time, and
 * the use of MathML in SBML Levels&nbsp;2 and&nbsp;3, it became clear that
 * supporting Level&nbsp;2 and&nbsp;3\'s expanded mathematical syntax would be
 * useful for software developers.  To maintain backwards compatibility for
 * libSBML users, the original <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>
 * and <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> have been left untouched,
 * and instead, the new functionality is provided in the form of
 * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> and
 * <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>.
 <p>
 * The following lists the main differences in the formula syntax supported by
 * the \'Level 3\' or L3 versions of the formula parsers and formatters,
 * compared to what is supported by the Level&nbsp;1-oriented
 * <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> and
 * <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>:
 <p>
 * <ul>
 * <li> Units may be asociated with bare numbers, using the following syntax:
 * <div style=\'margin: 10px auto 10px 25px; display: block\'>
 * <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * </div>
 * The <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * may be in any form (an integer, real, or rational
 * number), and the
 * <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * must conform to the syntax of an SBML identifier (technically, the
 * type defined as <code>SId</code> in the SBML specifications).  The whitespace between
 * <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * and <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * is optional.
 <p>
 * <li> The Boolean function symbols <code>&&</code>, <code>||</code>, <code>!</code>, and <code>!=</code> may be
 * used.
 <p>
 * <li> The <em>modulo</em> operation is allowed as the symbol <code>@%</code> and will
 * produce a <code>&lt;piecewise&gt;</code> function in the corresponding
 * MathML output.
 <p>
 * <li> All inverse trigonometric functions may be defined in the infix either
 * using <code>arc</code> as a prefix or simply <code>a</code>; in other words, both <code>arccsc</code>
 * and <code>acsc</code> are interpreted as the operator <em>arccosecant</em> as defined in
 * MathML&nbsp;2.0.  (Many functions in the simpler SBML Level&nbsp;1
 * oriented parser implemented by <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * are defined this way as well, but not all.)
 <p>
 * <li> The following expression is parsed as a rational number instead of
 * as a numerical division:
 * <pre style=\'display: block; margin-left: 25px\'>
 * (<span class=\'code\' style=\'background-color: #d0d0ee\'>integer</span>/<span class=\'code\' style=\'background-color: #d0d0ee\'>integer</span>)</pre>
 * <strong>Spaces are not allowed</strong> in this construct; in other words,
 * &quot;<code>(3 / 4)</code>&quot; (with whitespace between the numbers and
 * the operator) will be parsed into the MathML <code>&lt;divide&gt;</code>
 * construct rather than a rational number.  You can, however, assign units to a
 * rational number as a whole; here is an example: &quot;<code>(3/4) ml</code>&quot;.
 * (In the case of division rather than a rational number, units are not interpreted
 * in this way.)
 <p>
 * <li> Various parser and formatter behaviors may be altered through the use
 * of a {@link L3ParserSettings} object in conjunction with the functions
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> and
 * <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * The settings available include the following:
 * <ul style=\'list-style-type: circle\'>
 *
 * </ul> <p>
 * <li style=\'margin-bottom: 0.5em\'> The function <code>log</code> with a single
 * argument (&quot;<code>log(x)</code>&quot;) can be parsed as
 * <code>log10(x)</code>, <code>ln(x)</code>, or treated as an error, as
 * desired.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> Unary minus signs can be collapsed or
 * preserved; that is, sequential pairs of unary minuses (e.g., &quot;<code>-
 * -3</code>&quot;) can be removed from the input entirely and single unary
 * minuses can be incorporated into the number node, or all minuses can be
 * preserved in the AST node structure.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> Parsing of units embedded in the input
 * string can be turned on and off.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> The string <code>avogadro</code> can be parsed as
 * a MathML <em>csymbol</em> or as an identifier.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> A {@link Model} object may optionally be
 * provided to the parser using the variant function call
 * <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a> or
 * stored in a {@link L3ParserSettings} object passed to the variant function
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.  When a {@link Model} object is provided, identifiers
 * (values of type <code>SId</code>) from that model are used in preference to
 * pre-defined MathML definitions for both symbols and functions.
 * More precisely:
 * <ul style=\'list-style-type: square\'>
 <p>
 * <li style=\'margin-bottom: 0.5em\'> <em>In the case of symbols</em>: the
 * {@link Model} entities whose identifiers will shadow identical symbols in the
 * mathematical formula are: {@link Species}, {@link Compartment}, {@link Parameter}, {@link Reaction}, and
 * {@link SpeciesReference}.  For instance, if the parser is given a {@link Model} containing
 * a {@link Species} with the identifier &quot;<code>pi</code>&quot;, and the formula
 * to be parsed is &quot;<code>3*pi</code>&quot;, the MathML produced will
 * contain the construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of
 * the construct <code>&lt;pi/&gt;</code>.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> <em>In the case of user-defined
 * functions</em>: when a {@link Model} object is provided, <code>SId</code> values of
 * user-defined functions present in the model will be used preferentially
 * over pre-defined MathML functions.  For example, if the passed-in {@link Model}
 * contains a {@link FunctionDefinition} object with the identifier
 * &quot;<code>sin</code>&quot;, that function will be used instead of the
 * predefined MathML function <code>&lt;sin/&gt;</code>.
 * </ul>
 <p>
 * <li style=\'margin-bottom: 0.5em\'> An {@link SBMLNamespaces} object may optionally
 * be provided to identify SBML Level&nbsp;3 packages that extend the
 * syntax understood by the formula parser.  When the namespaces are provided,
 * the parser will interpret possible additional syntax defined by the libSBML
 * plug-ins implementing the SBML Level&nbsp;3 packages; for example, it may
 * understand vector/array extensions introduced by the SBML Level&nbsp;3 
 * <em>Arrays</em> package.
 * </ul>
 <p>
 * These configuration settings cannot be changed directly using the basic
 * parser and formatter functions, but <em>can</em> be changed on a per-call basis
 * by using the alternative functions <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> and
 * <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>.
 <p>
 * Neither SBML nor the MathML standard define a \'string-form\' equivalent to
 * MathML expressions.  The approach taken by libSBML is to start with the
 * formula syntax defined by SBML Level&nbsp;1 (which in fact used a custom
 * text-string representation of formulas, and not MathML), and expand it to
 * include the functionality described above.  This formula syntax is based
 * mostly on C programming syntax, and may contain operators, function calls,
 * symbols, and white space characters.  The following table provides the
 * precedence rules for the different entities that may appear in formula
 * strings.
 <p>
 * <table border=\"0\" width=\"95%\"
       class=\"centered text-table normal-font alt-row-colors\"
       style=\"padding-bottom: 0.5em\">
 <tr style=\"background: lightgray; font-size: 14px;\">
     <th align=\"left\">Token</th>
     <th align=\"left\">Operation</th>
     <th align=\"left\">Class</th>
     <th>Precedence</th>
     <th align=\"left\">Associates</th>
 </tr>
<tr><td><em>name</em></td><td>symbol reference</td><td>operand</td><td align=\"center\">8</td><td>n/a</td></tr>
<tr><td><code>(</code><em>expression</em><code>)</code></td><td>expression grouping</td><td>operand</td><td align=\"center\">8</td><td>n/a</td></tr>
<tr><td><code>f(</code><em>...</em><code>)</code></td><td>function call</td><td>prefix</td><td align=\"center\">8</td><td>left</td></tr>
<tr><td><code>^</code></td><td>power</td><td>binary</td><td align=\"center\">7</td><td>left</td></tr>
<tr><td><code>-, !</code></td><td>negation and boolean 'not'</td><td>unary</td><td align=\"center\">6</td><td>right</td></tr>
<tr><td><code>*, /, %</code></td><td>multiplication, division, and modulo</td><td>binary</td><td align=\"center\">5</td><td>left</td></tr>
<tr><td><code>+, -</code></td><td>addition and subtraction</td><td>binary</td><td align=\"center\">4</td><td>left</td></tr>
<tr><td><code>==, &lt;, &gt;, &lt=, &gt=, !=</code></td><td>boolean equality, inequality, and comparison</td><td>binary</td><td align=\"center\">3</td><td>left</td></tr>
<tr><td><code>&&, ||</code></td><td>boolean 'and' and 'or'</td><td>binary</td><td align=\"center\">2</td><td>left</td></tr>
<tr><td><code>,</code></td><td>argument delimiter</td><td>binary</td><td align=\"center\">1</td><td>left</td></tr>

<caption class=\"top-caption\">Expression operators and their precedence in the
\"Level&nbsp;3\" text-string format for mathematical expressions.
</caption>
</table>


 <p>
 * In the table above, <em>operand</em> implies the construct is an operand, 
 * <em>prefix</em> implies the operation is applied to the following arguments, 
 * <em>unary</em> implies there is one argument, and <em>binary</em> implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a + b * c</code> is evaluated as <code>a + (b * c)</code>
 * because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a && b || c</code> is
 * evaluated as <code>(a && b) || c</code> because the <code>&&</code> and <code>||</code>
 * operators are left-associative and have the same precedence.
 <p>
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters), followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML
 * Level&nbsp;1 Version&nbsp;2 specification</a> with additions based on the
 * functions added in SBML Level 2 and Level 3:
 <p>
 * <table border=\"0\" width=\"95%\" 
       class=\"centered text-table normal-font alt-row-colors\">
 <tr>
     <th align=\"left\" width=\"60\">Name</th>
     <th align=\"left\" width=\"75\">Argument(s)</th>
     <th align=\"left\">Formula or meaning</th>
     <th align=\"left\" width=\"90\">Argument Constraints</th>
     <th align=\"left\" width=\"90\">Result constraints</th>
 </tr>
<tr><td><code>abs</code></td>   
    <td><em>x</em></td> 
    <td>Absolute value of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acos</code>, <code>arccos</code></td>
    <td><em>x</em></td>
    <td>Arccosine of <em>x</em> in radians.</td>
    <td>&ndash;1.0 &le; <em>x</em> &le; 1.0</td>
    <td>0 &le; <em>acos(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>acosh</code>, <code>arccosh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccosine of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acot</code>, <code>arccot</code></td>
    <td><em>x</em></td>
    <td>Arccotangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acoth</code>, <code>arccoth</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccotangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acsc</code>, <code>arccsc</code></td>
    <td><em>x</em></td>
    <td>Arccosecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acsch</code>, <code>arccsch</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccosecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asec</code>, <code>arcsec</code></td>
    <td><em>x</em></td>
    <td>Arcsecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asech</code>, <code>arcsech</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arcsecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asin</code>, <code>arcsin</code></td>
    <td><em>x</em></td><td>Arcsine of <em>x</em> in radians.</td>
    <td>&ndash;1.0 &le; <em>x</em> &le; 1.0</td>
    <td>0 &le; <em>asin(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>atan</code>, <code>arctan</code></td>
    <td><em>x</em></td>
    <td>Arctangent of <em>x</em> in radians.</td>
    <td></td>
    <td>0 &le; <em>atan(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>atanh</code>, <code>arctanh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arctangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>ceil</code>, <code>ceiling</code></td>
    <td><em>x</em></td>
    <td>Smallest number not less than <em>x</em> whose value is an exact integer.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cos</code></td>
    <td><em>x</em></td>
    <td>Cosine of <em>x</em></td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cosh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cosine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cot</code></td>
    <td><em>x</em></td>
    <td>Cotangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>coth</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cotangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>csc</code></td>
    <td><em>x</em></td>
    <td>Cosecant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>csch</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cosecant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>delay</code></td>
    <td><em>x, y</em></td>
    <td>The value of <em>x</em> at <em>y</em> time units in the past.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>factorial</code></td>
    <td><em>n</em></td>
    <td>The factorial of <em>n</em>. Factorials are defined by <em>n! = n*(n&ndash;1)* ... * 1</em>.</td>
    <td><em>n</em> must be an integer.</td>
    <td></td>
</tr>
<tr><td><code>exp</code></td>
    <td><em>x</em></td>
    <td><em>e</em><sup><em> x</em></sup>, where <em>e</em> is the base of the natural logarithm.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>floor</code></td>
    <td><em>x</em></td>
    <td>The largest number not greater than <em>x</em> whose value is an exact integer.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>ln</code></td>
    <td><em>x</em></td>
    <td>Natural logarithm of <em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log</code></td>
    <td><em>x</em></td>
    <td>By default, the base 10 logarithm of <em>x</em>, but can be set to be the natural logarithm of <em>x</em>, or to be an illegal construct.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log</code></td>
    <td><em>x, y</em></td>
    <td>The base <em>x</em> logarithm of <em>y</em>.</td>
    <td><em>y</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log10</code></td>
    <td><em>x</em></td>
    <td>Base 10 logarithm of <em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>piecewise</code></td>
    <td><em>x1, y1, [x2, y2,] [...] [z]</em></td>
    <td>A piecewise function: if (<em>y1</em>), <em>x1</em>.  Otherwise, if (<em>y2</em>), <em>x2</em>, etc.  Otherwise, z. </td>
    <td><em>y1, y2, y3 [etc]</em> must be boolean</td>
    <td></td>
</tr>
<tr><td><code>pow</code>, <code>power</code> </td>
    <td><em>x, y</em></td>
    <td><em>x</em><sup><em> y</em></sup>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>root</code></td>
    <td><em>b, x</em></td>
    <td>The root base <em>b</em> of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sec</code></td>
    <td><em>x</em></td>
    <td>Secant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sech</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic secant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sqr</code></td>
    <td><em>x</em></td>
    <td><em>x</em><sup><em>2</em></sup>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sqrt</code></td>
    <td><em>x</em></td>
    <td>&radic;<em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td><em>sqrt(x)</em> &ge; 0</td>
</tr>
<tr><td><code>sin</code></td>
    <td><em>x</em></td>
    <td>Sine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sinh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic sine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>tan</code></td>
    <td><em>x</em></td>
    <td>Tangent of <em>x</em>.</td>
    <td>x &ne; n*&pi;/2, for odd integer <em>n</em></td>
    <td></td>
</tr>
<tr><td><code>tanh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic tangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>and</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>and(x, y, z...)</em>: returns <code>true</code> if all of its arguments are true.  Note that <code>and</code> is an n-ary function, taking 0 or more arguments, and that <code>and()</code> returns <code>true</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>not</code></td>
    <td><em>x</em></td>
    <td>Boolean <em>not(x)</em></td>
    <td><em>x</em> must be boolean</td>
    <td></td>
</tr>
<tr><td><code>or</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>or(x, y, z...)</em>: returns <code>true</code> if at least one of its arguments is true.  Note that <code>or</code> is an n-ary function, taking 0 or more arguments, and that <code>or()</code> returns <code>false</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>xor</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>xor(x, y, z...)</em>: returns <code>true</code> if an odd number of its arguments is true.  Note that <code>xor</code> is an n-ary function, taking 0 or more arguments, and that <code>xor()</code> returns <code>false</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>eq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>eq(x, y, z...)</em>: returns <code>true</code> if all arguments are equal.  Note that <code>eq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>geq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>geq(x, y, z...)</em>: returns <code>true</code> if each argument is greater than or equal to the argument following it.  Note that <code>geq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>gt</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>gt(x, y, z...)</em>: returns <code>true</code> if each argument is greater than the argument following it.  Note that <code>gt</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>leq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>leq(x, y, z...)</em>: returns <code>true</code> if each argument is less than or equal to the argument following it.  Note that <code>leq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>lt</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>lt(x, y, z...)</em>: returns <code>true</code> if each argument is less than the argument following it.  Note that <code>lt</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>neq</code></td>
    <td><em>x, y</em></td>
    <td>Boolean <em>x</em> != <em>y</em>: returns <code>true</code> unless x and y are equal.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>plus</code></td>
    <td><em>x, y, z...</em></td>
    <td><em>x</em> + <em>y</em> + <em>z</em> + <em>...</em>: The sum of the arguments of the function.  Note that <code>plus</code> is an n-ary function taking 0 or more arguments, and that <code>plus()</code> returns <code>0</code>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>times</code></td>
    <td><em>x, y, z...</em></td>
    <td><em>x</em> * <em>y</em> * <em>z</em> * <em>...</em>: The product of the arguments of the function.  Note that <code>times</code> is an n-ary function taking 0 or more arguments, and that <code>times()</code> returns <code>1</code>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>minus</code></td>
    <td><em>x, y</em></td>
    <td><em>x</em> &ndash; <em>y</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>divide</code></td>
    <td><em>x, y</em></td>
    <td><em>x</em> / <em>y</em>.</td>
    <td></td>
    <td></td>
</tr>

<caption class=\"top-caption\">Mathematical functions defined
in the \"Level&nbsp;3\" text-string formula syntax.</caption>

</table>


 <p>
 * Parsing of the various MathML functions and constants are all
 * case-insensitive by default: function names such as <code>cos</code>,
 * <code>Cos</code> and <code>COS</code> are all parsed as the MathML cosine
 * operator, <code>&lt;cos&gt;</code>.  However, <em>when a {@link Model} object is
 * used</em> in conjunction with either
 * <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a> or
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>, any identifiers found in that model will be
 * parsed in a case-<em>sensitive</em> way.  For example, if a model contains
 * a {@link Species} having the identifier <code>Pi</code>, the parser will parse
 * &quot;<code>Pi</code>&quot; in the input as &quot;<code>&lt;ci&gt; Pi
 * &lt;/ci&gt;</code>&quot; but will continue to parse the symbols
 * &quot;<code>pi</code>&quot; and &quot;<code>PI</code>&quot; as
 * &quot;<code>&lt;pi&gt;</code>&quot;.
 <p>
 * As mentioned above, the manner in which the \'L3\' versions of the formula
 * parser and formatter interpret the function &quot;<code>log</code>&quot;
 * can be changed.  To do so, callers should use the function
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> and pass it an appropriate {@link L3ParserSettings}
 * object.  By default, unlike the SBML Level&nbsp;1 parser implemented by
 * <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>, the string
 * &quot;<code>log</code>&quot; is interpreted as the base&nbsp;10 logarithm,
 * and <em>not</em> as the natural logarithm.  However, you can change the
 * interpretation to be base-10 log, natural log, or as an error; since the
 * name \'log\' by itself is ambiguous, you require that the parser uses 
 * <code>log10</code> or <code>ln</code> instead, which are more clear.  Please refer to
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.
 <p>
 * In addition, the following symbols will be translated to their MathML
 * equivalents, if no symbol with the same <code>SId</code> identifier string exists
 * in the {@link Model} object provided:
 <p>
 * <table border=\"0\" width=\"95%\"
       class=\"centered text-table normal-font alt-row-colors\">
 <tr>
     <th align=\"left\" width=\"60\">Name</th>
     <th align=\"left\" width=\"250\">Meaning</th>
     <th align=\"left\">MathML</th>
 </tr>
<tr><td><code>true</code></td>   
    <td>The boolean value <code>true</code></td>
    <td><code>&lt;true/&gt;</code></td>
</tr>
<tr><td><code>false</code></td>   
    <td>The boolean value <code>false</code></td>
    <td><code>&lt;false/&gt;</code></td>
</tr>
<tr><td><code>pi</code></td>   
    <td>The mathematical constant pi</td>
    <td><code>&lt;pi/&gt;</code></td>
</tr>
<tr><td><code>avogadro</code></td>   
    <td>The numerical value of Avogadro's constant, as defined in the SBML specification</td>
    <td><code style=\"letter-spacing: -1px\">&lt;csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/symbols/avogadro\"&gt; avogadro &lt;/csymbol/&gt;</code></td>
</tr>
<tr><td><code>time</code></td>   
    <td>Simulation time as defined in SBML</td>
    <td><code style=\"letter-spacing: -1px\">&lt;csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/symbols/time\"&gt; time &lt;/csymbol/&gt;</code></td>
</tr>
<tr><td><code>inf</code> or <code>infinity</code></td>   
    <td>The mathematical constant \"infinity\"</td>
    <td><code>&lt;infinity/&gt;</code></td>
</tr>
<tr><td><code>nan</code> or <code>notanumber</code></td>   
    <td>The mathematical concept \"not a number\"</td>
    <td><code>&lt;notanumber/&gt;</code></td>
</tr>

<caption class=\"top-caption\">Mathematical symbols defined
in the \"Level&nbsp;3\" text-string formula syntax.
</caption>
</table>

 <p>
 * Again, as mentioned above, whether the string
 * &quot;<code>avogadro</code>&quot; is parsed as an AST node of type
 * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} or
 * {@link libsbmlConstants#AST_NAME AST_NAME} is configurable; use the version of
 * the parser function called <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.  This Avogadro-related
 * functionality is provided because SBML Level&nbsp;2 models may not use
 * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} AST nodes.
 <p>
 * @param formula the text-string formula expression to be parsed
 <p>
 * @return the root node of an AST representing the mathematical formula, or
 * <code>null</code> if an error occurred while parsing the formula.  When <code>null</code> is
 * returned, an error is recorded internally; information about the error can
 * be retrieved using <a href=\'libsbml.html#getLastParseL3Error()\'><code>libsbml.getLastParseL3Error()</code></a>.
 <p>
 * 
 * <p>
 * @note We urge developers to keep in mind that the text-string formula
 * syntax is specific to libSBML.  <em>Neither MathML nor SBML define a
 * text-string format for mathematical formulas.</em> LibSBML\'s particular
 * syntax should not be considered to be a canonical or standard
 * general-purpose mathematical expression syntax.  LibSBML provides methods
 * for parsing and transforming text-string math formulas back and forth from
 * AST structures for the convenience of calling applications, but it is
 * important to keep the system\'s limitations in mind.
 <p>
   * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>
 * @see L3ParserSettings
 * @see <a href=\'libsbml.html#getDefaultL3ParserSettings()\'><code>libsbml.getDefaultL3ParserSettings()</code></a>
 * @see <a href=\'libsbml.html#getLastParseL3Error()\'><code>libsbml.getLastParseL3Error()</code></a>
 */ public
";


%javamethodmodifiers SBML_parseL3FormulaWithModel(const char *formula, const Model_t * model) "
/**
 * Parses a text string as a mathematical formula using a {@link Model} to resolve
 * symbols, and returns an AST representation of the result.
 <p>
 * This is identical to <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>, except
 * that this function uses the given model in the argument <code>model</code> to check
 * against identifiers that appear in the <code>formula</code>.  For more information
 * about the parser, please see the definition of {@link L3ParserSettings} and
 * the function <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>.
 <p>
 * @param formula the mathematical formula expression to be parsed
 <p>
 * @param model the {@link Model} object to use for checking identifiers
 <p>
 * @return the root node of an AST representing the mathematical formula,
 * or <code>null</code> if an error occurred while parsing the formula.  When <code>null</code>
 * is returned, an error is recorded internally; information about the
 * error can be retrieved using <a href=\'libsbml.html#getLastParseL3Error()\'><code>libsbml.getLastParseL3Error()</code></a>.
 <p>
 * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * @see <a href=\'libsbml.html#getLastParseL3Error()\'><code>libsbml.getLastParseL3Error()</code></a>
 * @see L3ParserSettings
 */ public
";


%javamethodmodifiers SBML_parseL3FormulaWithSettings(const char *formula, const L3ParserSettings_t *settings) "
/**
 * Parses a text string as a mathematical formula using specific parser
 * settings and returns an AST representation of the result.
 <p>
 * This is identical to <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>, except
 * that this function uses the parser settings given in the argument 
 * <code>settings</code>.  The settings override the default parsing behavior.  The
 * following parsing behaviors can be configured:
 <p>
 * <p>
 * <ul>
 * <li> A {@link Model} object may optionally be provided to use identifiers (values
 * of type <code>SId</code>) from the model in preference to pre-defined MathML symbols
 * More precisely, the {@link Model} entities whose identifiers will shadow identical
 * symbols in the mathematical formula are: {@link Species}, {@link Compartment}, {@link Parameter},
 * {@link Reaction}, and {@link SpeciesReference}.  For instance, if the parser is given a
 * {@link Model} containing a {@link Species} with the identifier
 * &quot;<code>pi</code>&quot;, and the formula to be parsed is
 * &quot;<code>3*pi</code>&quot;, the MathML produced by the parser will
 * contain the construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of
 * the construct <code>&lt;pi/&gt;</code>.  Another example, if the passed-in
 * {@link Model} contains a {@link FunctionDefinition} with the identifier
 * &quot;<code>sin</code>&quot;, that function will be used instead of the
 * predefined MathML function <code>&lt;sin/&gt;</code>.
 * <li> The function <code>log</code> with a single argument
 * (&quot;<code>log(x)</code>&quot;) can be parsed as <code>log10(x)</code>,
 * <code>ln(x)</code>, or treated as an error, as desired.
 * <li> Unary minus signs can be either collapsed or preserved; that is, the
 * parser can either (1) remove sequential pairs of unary minuses (e.g.,
 * &quot;<code>- -3</code>&quot;) from the input and incorporate single unary
 * minuses into the number node, or (2) preserve all minuses in the AST node
 * structure, turning them into {@link ASTNode} objects of type
 * {@link libsbmlConstants#AST_MINUS AST_MINUS}.
 * <li> The character sequence &quot;<code>number id</code>&quot; can be
 * interpreted as a numerical value <code>number</code> followed by units of measurement
 * indicated by <code>id</code>, or it can be treated as a syntax error.  (In
 * Level&nbsp;3, MathML <code>&lt;cn&gt;</code> elements can have an
 * attribute named <code>units</code> placed in the SBML namespace, which can be used
 * to indicate the units to be associated with the number.  The text-string
 * infix formula parser allows units to be placed after raw numbers; they are
 * interpreted as unit identifiers for units defined by the SBML
 * specification or in the containing {@link Model} object.)
 * <li> The symbol <code>avogadro</code> can be parsed either as a MathML <em>csymbol</em> or
 * as a identifier.  More specifically, &quot;<code>avogadro</code>&quot; can
 * be treated as an {@link ASTNode} of type
 * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} or of type
 * {@link libsbmlConstants#AST_NAME AST_NAME}.
 * <li> Strings that match built-in functions and constants can either be parsed
 * as a match regardless of capitalization, or may be required to be
 * all-lower-case to be considered a match.  
 * <li> LibSBML plug-ins implementing support for SBML Level&nbsp;3 packages
 * may introduce extensions to the syntax understood by the parser.  The
 * precise nature of the extensions will be documented by the individual
 * package plug-ins.  An example of a possible extension is a notation for
 * vectors and arrays, introduced by the SBML Level&nbsp;3 <em>Arrays</em>
 * package.
 *
 * </ul>
 <p>
 * For more details about the parser, please see the definition of
 * {@link L3ParserSettings} and <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.
 <p>
 * @param formula the mathematical formula expression to be parsed
 <p>
 * @param settings the settings to be used for this parser invocation
 <p>
 * @return the root node of an AST representing the mathematical formula,
 * or <code>null</code> if an error occurred while parsing the formula.  When <code>null</code>
 * is returned, an error is recorded internally; information about the
 * error can be retrieved using <a href=\'libsbml.html#getLastParseL3Error()\'><code>libsbml.getLastParseL3Error()</code></a>.
 <p>
 * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * @see <a href=\'libsbml.html#getLastParseL3Error()\'><code>libsbml.getLastParseL3Error()</code></a>
 * @see L3ParserSettings
 */ public
";


%javamethodmodifiers SBML_getDefaultL3ParserSettings "
/**
 * Returns a copy of the default Level&nbsp;3 (\'L3\') formula parser settings.
 <p>
 * The data structure storing the settings allows callers to change the
 * following parsing behaviors:
 <p>
 * <p>
 * The text-string form of mathematical formulas read by the function
 * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> and written by the function
 * <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a> uses an expanded version of
 * the syntax read and written by <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * and <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>, respectively.  The
 * latter two libSBML functions were originally developed to support
 * conversion between SBML Levels&nbsp;1 and&nbsp;2, and were focused on the
 * syntax of mathematical formulas used in SBML Level&nbsp;1.  With time, and
 * the use of MathML in SBML Levels&nbsp;2 and&nbsp;3, it became clear that
 * supporting Level&nbsp;2 and&nbsp;3\'s expanded mathematical syntax would be
 * useful for software developers.  To maintain backwards compatibility for
 * libSBML users, the original <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>
 * and <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> have been left untouched,
 * and instead, the new functionality is provided in the form of
 * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> and
 * <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>.
 <p>
 * The following lists the main differences in the formula syntax supported by
 * the \'Level 3\' or L3 versions of the formula parsers and formatters,
 * compared to what is supported by the Level&nbsp;1-oriented
 * <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> and
 * <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>:
 <p>
 * <ul>
 * <li> Units may be asociated with bare numbers, using the following syntax:
 * <div style=\'margin: 10px auto 10px 25px; display: block\'>
 * <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * </div>
 * The <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * may be in any form (an integer, real, or rational
 * number), and the
 * <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * must conform to the syntax of an SBML identifier (technically, the
 * type defined as <code>SId</code> in the SBML specifications).  The whitespace between
 * <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * and <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * is optional.
 <p>
 * <li> The Boolean function symbols <code>&&</code>, <code>||</code>, <code>!</code>, and <code>!=</code> may be
 * used.
 <p>
 * <li> The <em>modulo</em> operation is allowed as the symbol <code>@%</code> and will
 * produce a <code>&lt;piecewise&gt;</code> function in the corresponding
 * MathML output.
 <p>
 * <li> All inverse trigonometric functions may be defined in the infix either
 * using <code>arc</code> as a prefix or simply <code>a</code>; in other words, both <code>arccsc</code>
 * and <code>acsc</code> are interpreted as the operator <em>arccosecant</em> as defined in
 * MathML&nbsp;2.0.  (Many functions in the simpler SBML Level&nbsp;1
 * oriented parser implemented by <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * are defined this way as well, but not all.)
 <p>
 * <li> The following expression is parsed as a rational number instead of
 * as a numerical division:
 * <pre style=\'display: block; margin-left: 25px\'>
 * (<span class=\'code\' style=\'background-color: #d0d0ee\'>integer</span>/<span class=\'code\' style=\'background-color: #d0d0ee\'>integer</span>)</pre>
 * <strong>Spaces are not allowed</strong> in this construct; in other words,
 * &quot;<code>(3 / 4)</code>&quot; (with whitespace between the numbers and
 * the operator) will be parsed into the MathML <code>&lt;divide&gt;</code>
 * construct rather than a rational number.  You can, however, assign units to a
 * rational number as a whole; here is an example: &quot;<code>(3/4) ml</code>&quot;.
 * (In the case of division rather than a rational number, units are not interpreted
 * in this way.)
 <p>
 * <li> Various parser and formatter behaviors may be altered through the use
 * of a {@link L3ParserSettings} object in conjunction with the functions
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> and
 * <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * The settings available include the following:
 * <ul style=\'list-style-type: circle\'>
 *
 * </ul> <p>
 * <li style=\'margin-bottom: 0.5em\'> The function <code>log</code> with a single
 * argument (&quot;<code>log(x)</code>&quot;) can be parsed as
 * <code>log10(x)</code>, <code>ln(x)</code>, or treated as an error, as
 * desired.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> Unary minus signs can be collapsed or
 * preserved; that is, sequential pairs of unary minuses (e.g., &quot;<code>-
 * -3</code>&quot;) can be removed from the input entirely and single unary
 * minuses can be incorporated into the number node, or all minuses can be
 * preserved in the AST node structure.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> Parsing of units embedded in the input
 * string can be turned on and off.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> The string <code>avogadro</code> can be parsed as
 * a MathML <em>csymbol</em> or as an identifier.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> A {@link Model} object may optionally be
 * provided to the parser using the variant function call
 * <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a> or
 * stored in a {@link L3ParserSettings} object passed to the variant function
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.  When a {@link Model} object is provided, identifiers
 * (values of type <code>SId</code>) from that model are used in preference to
 * pre-defined MathML definitions for both symbols and functions.
 * More precisely:
 * <ul style=\'list-style-type: square\'>
 <p>
 * <li style=\'margin-bottom: 0.5em\'> <em>In the case of symbols</em>: the
 * {@link Model} entities whose identifiers will shadow identical symbols in the
 * mathematical formula are: {@link Species}, {@link Compartment}, {@link Parameter}, {@link Reaction}, and
 * {@link SpeciesReference}.  For instance, if the parser is given a {@link Model} containing
 * a {@link Species} with the identifier &quot;<code>pi</code>&quot;, and the formula
 * to be parsed is &quot;<code>3*pi</code>&quot;, the MathML produced will
 * contain the construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of
 * the construct <code>&lt;pi/&gt;</code>.
 <p>
 * <li style=\'margin-bottom: 0.5em\'> <em>In the case of user-defined
 * functions</em>: when a {@link Model} object is provided, <code>SId</code> values of
 * user-defined functions present in the model will be used preferentially
 * over pre-defined MathML functions.  For example, if the passed-in {@link Model}
 * contains a {@link FunctionDefinition} object with the identifier
 * &quot;<code>sin</code>&quot;, that function will be used instead of the
 * predefined MathML function <code>&lt;sin/&gt;</code>.
 * </ul>
 <p>
 * <li style=\'margin-bottom: 0.5em\'> An {@link SBMLNamespaces} object may optionally
 * be provided to identify SBML Level&nbsp;3 packages that extend the
 * syntax understood by the formula parser.  When the namespaces are provided,
 * the parser will interpret possible additional syntax defined by the libSBML
 * plug-ins implementing the SBML Level&nbsp;3 packages; for example, it may
 * understand vector/array extensions introduced by the SBML Level&nbsp;3 
 * <em>Arrays</em> package.
 * </ul>
 <p>
 * These configuration settings cannot be changed directly using the basic
 * parser and formatter functions, but <em>can</em> be changed on a per-call basis
 * by using the alternative functions <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> and
 * <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>.
 <p>
 * Neither SBML nor the MathML standard define a \'string-form\' equivalent to
 * MathML expressions.  The approach taken by libSBML is to start with the
 * formula syntax defined by SBML Level&nbsp;1 (which in fact used a custom
 * text-string representation of formulas, and not MathML), and expand it to
 * include the functionality described above.  This formula syntax is based
 * mostly on C programming syntax, and may contain operators, function calls,
 * symbols, and white space characters.  The following table provides the
 * precedence rules for the different entities that may appear in formula
 * strings.
 <p>
 * <table border=\"0\" width=\"95%\"
       class=\"centered text-table normal-font alt-row-colors\"
       style=\"padding-bottom: 0.5em\">
 <tr style=\"background: lightgray; font-size: 14px;\">
     <th align=\"left\">Token</th>
     <th align=\"left\">Operation</th>
     <th align=\"left\">Class</th>
     <th>Precedence</th>
     <th align=\"left\">Associates</th>
 </tr>
<tr><td><em>name</em></td><td>symbol reference</td><td>operand</td><td align=\"center\">8</td><td>n/a</td></tr>
<tr><td><code>(</code><em>expression</em><code>)</code></td><td>expression grouping</td><td>operand</td><td align=\"center\">8</td><td>n/a</td></tr>
<tr><td><code>f(</code><em>...</em><code>)</code></td><td>function call</td><td>prefix</td><td align=\"center\">8</td><td>left</td></tr>
<tr><td><code>^</code></td><td>power</td><td>binary</td><td align=\"center\">7</td><td>left</td></tr>
<tr><td><code>-, !</code></td><td>negation and boolean 'not'</td><td>unary</td><td align=\"center\">6</td><td>right</td></tr>
<tr><td><code>*, /, %</code></td><td>multiplication, division, and modulo</td><td>binary</td><td align=\"center\">5</td><td>left</td></tr>
<tr><td><code>+, -</code></td><td>addition and subtraction</td><td>binary</td><td align=\"center\">4</td><td>left</td></tr>
<tr><td><code>==, &lt;, &gt;, &lt=, &gt=, !=</code></td><td>boolean equality, inequality, and comparison</td><td>binary</td><td align=\"center\">3</td><td>left</td></tr>
<tr><td><code>&&, ||</code></td><td>boolean 'and' and 'or'</td><td>binary</td><td align=\"center\">2</td><td>left</td></tr>
<tr><td><code>,</code></td><td>argument delimiter</td><td>binary</td><td align=\"center\">1</td><td>left</td></tr>

<caption class=\"top-caption\">Expression operators and their precedence in the
\"Level&nbsp;3\" text-string format for mathematical expressions.
</caption>
</table>


 <p>
 * In the table above, <em>operand</em> implies the construct is an operand, 
 * <em>prefix</em> implies the operation is applied to the following arguments, 
 * <em>unary</em> implies there is one argument, and <em>binary</em> implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a + b * c</code> is evaluated as <code>a + (b * c)</code>
 * because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a && b || c</code> is
 * evaluated as <code>(a && b) || c</code> because the <code>&&</code> and <code>||</code>
 * operators are left-associative and have the same precedence.
 <p>
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters), followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML
 * Level&nbsp;1 Version&nbsp;2 specification</a> with additions based on the
 * functions added in SBML Level 2 and Level 3:
 <p>
 * <table border=\"0\" width=\"95%\" 
       class=\"centered text-table normal-font alt-row-colors\">
 <tr>
     <th align=\"left\" width=\"60\">Name</th>
     <th align=\"left\" width=\"75\">Argument(s)</th>
     <th align=\"left\">Formula or meaning</th>
     <th align=\"left\" width=\"90\">Argument Constraints</th>
     <th align=\"left\" width=\"90\">Result constraints</th>
 </tr>
<tr><td><code>abs</code></td>   
    <td><em>x</em></td> 
    <td>Absolute value of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acos</code>, <code>arccos</code></td>
    <td><em>x</em></td>
    <td>Arccosine of <em>x</em> in radians.</td>
    <td>&ndash;1.0 &le; <em>x</em> &le; 1.0</td>
    <td>0 &le; <em>acos(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>acosh</code>, <code>arccosh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccosine of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acot</code>, <code>arccot</code></td>
    <td><em>x</em></td>
    <td>Arccotangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acoth</code>, <code>arccoth</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccotangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acsc</code>, <code>arccsc</code></td>
    <td><em>x</em></td>
    <td>Arccosecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acsch</code>, <code>arccsch</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccosecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asec</code>, <code>arcsec</code></td>
    <td><em>x</em></td>
    <td>Arcsecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asech</code>, <code>arcsech</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arcsecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asin</code>, <code>arcsin</code></td>
    <td><em>x</em></td><td>Arcsine of <em>x</em> in radians.</td>
    <td>&ndash;1.0 &le; <em>x</em> &le; 1.0</td>
    <td>0 &le; <em>asin(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>atan</code>, <code>arctan</code></td>
    <td><em>x</em></td>
    <td>Arctangent of <em>x</em> in radians.</td>
    <td></td>
    <td>0 &le; <em>atan(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>atanh</code>, <code>arctanh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arctangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>ceil</code>, <code>ceiling</code></td>
    <td><em>x</em></td>
    <td>Smallest number not less than <em>x</em> whose value is an exact integer.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cos</code></td>
    <td><em>x</em></td>
    <td>Cosine of <em>x</em></td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cosh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cosine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cot</code></td>
    <td><em>x</em></td>
    <td>Cotangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>coth</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cotangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>csc</code></td>
    <td><em>x</em></td>
    <td>Cosecant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>csch</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cosecant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>delay</code></td>
    <td><em>x, y</em></td>
    <td>The value of <em>x</em> at <em>y</em> time units in the past.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>factorial</code></td>
    <td><em>n</em></td>
    <td>The factorial of <em>n</em>. Factorials are defined by <em>n! = n*(n&ndash;1)* ... * 1</em>.</td>
    <td><em>n</em> must be an integer.</td>
    <td></td>
</tr>
<tr><td><code>exp</code></td>
    <td><em>x</em></td>
    <td><em>e</em><sup><em> x</em></sup>, where <em>e</em> is the base of the natural logarithm.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>floor</code></td>
    <td><em>x</em></td>
    <td>The largest number not greater than <em>x</em> whose value is an exact integer.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>ln</code></td>
    <td><em>x</em></td>
    <td>Natural logarithm of <em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log</code></td>
    <td><em>x</em></td>
    <td>By default, the base 10 logarithm of <em>x</em>, but can be set to be the natural logarithm of <em>x</em>, or to be an illegal construct.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log</code></td>
    <td><em>x, y</em></td>
    <td>The base <em>x</em> logarithm of <em>y</em>.</td>
    <td><em>y</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log10</code></td>
    <td><em>x</em></td>
    <td>Base 10 logarithm of <em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>piecewise</code></td>
    <td><em>x1, y1, [x2, y2,] [...] [z]</em></td>
    <td>A piecewise function: if (<em>y1</em>), <em>x1</em>.  Otherwise, if (<em>y2</em>), <em>x2</em>, etc.  Otherwise, z. </td>
    <td><em>y1, y2, y3 [etc]</em> must be boolean</td>
    <td></td>
</tr>
<tr><td><code>pow</code>, <code>power</code> </td>
    <td><em>x, y</em></td>
    <td><em>x</em><sup><em> y</em></sup>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>root</code></td>
    <td><em>b, x</em></td>
    <td>The root base <em>b</em> of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sec</code></td>
    <td><em>x</em></td>
    <td>Secant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sech</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic secant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sqr</code></td>
    <td><em>x</em></td>
    <td><em>x</em><sup><em>2</em></sup>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sqrt</code></td>
    <td><em>x</em></td>
    <td>&radic;<em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td><em>sqrt(x)</em> &ge; 0</td>
</tr>
<tr><td><code>sin</code></td>
    <td><em>x</em></td>
    <td>Sine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sinh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic sine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>tan</code></td>
    <td><em>x</em></td>
    <td>Tangent of <em>x</em>.</td>
    <td>x &ne; n*&pi;/2, for odd integer <em>n</em></td>
    <td></td>
</tr>
<tr><td><code>tanh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic tangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>and</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>and(x, y, z...)</em>: returns <code>true</code> if all of its arguments are true.  Note that <code>and</code> is an n-ary function, taking 0 or more arguments, and that <code>and()</code> returns <code>true</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>not</code></td>
    <td><em>x</em></td>
    <td>Boolean <em>not(x)</em></td>
    <td><em>x</em> must be boolean</td>
    <td></td>
</tr>
<tr><td><code>or</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>or(x, y, z...)</em>: returns <code>true</code> if at least one of its arguments is true.  Note that <code>or</code> is an n-ary function, taking 0 or more arguments, and that <code>or()</code> returns <code>false</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>xor</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>xor(x, y, z...)</em>: returns <code>true</code> if an odd number of its arguments is true.  Note that <code>xor</code> is an n-ary function, taking 0 or more arguments, and that <code>xor()</code> returns <code>false</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>eq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>eq(x, y, z...)</em>: returns <code>true</code> if all arguments are equal.  Note that <code>eq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>geq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>geq(x, y, z...)</em>: returns <code>true</code> if each argument is greater than or equal to the argument following it.  Note that <code>geq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>gt</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>gt(x, y, z...)</em>: returns <code>true</code> if each argument is greater than the argument following it.  Note that <code>gt</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>leq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>leq(x, y, z...)</em>: returns <code>true</code> if each argument is less than or equal to the argument following it.  Note that <code>leq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>lt</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>lt(x, y, z...)</em>: returns <code>true</code> if each argument is less than the argument following it.  Note that <code>lt</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>neq</code></td>
    <td><em>x, y</em></td>
    <td>Boolean <em>x</em> != <em>y</em>: returns <code>true</code> unless x and y are equal.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>plus</code></td>
    <td><em>x, y, z...</em></td>
    <td><em>x</em> + <em>y</em> + <em>z</em> + <em>...</em>: The sum of the arguments of the function.  Note that <code>plus</code> is an n-ary function taking 0 or more arguments, and that <code>plus()</code> returns <code>0</code>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>times</code></td>
    <td><em>x, y, z...</em></td>
    <td><em>x</em> * <em>y</em> * <em>z</em> * <em>...</em>: The product of the arguments of the function.  Note that <code>times</code> is an n-ary function taking 0 or more arguments, and that <code>times()</code> returns <code>1</code>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>minus</code></td>
    <td><em>x, y</em></td>
    <td><em>x</em> &ndash; <em>y</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>divide</code></td>
    <td><em>x, y</em></td>
    <td><em>x</em> / <em>y</em>.</td>
    <td></td>
    <td></td>
</tr>

<caption class=\"top-caption\">Mathematical functions defined
in the \"Level&nbsp;3\" text-string formula syntax.</caption>

</table>


 <p>
 * Parsing of the various MathML functions and constants are all
 * case-insensitive by default: function names such as <code>cos</code>,
 * <code>Cos</code> and <code>COS</code> are all parsed as the MathML cosine
 * operator, <code>&lt;cos&gt;</code>.  However, <em>when a {@link Model} object is
 * used</em> in conjunction with either
 * <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a> or
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>, any identifiers found in that model will be
 * parsed in a case-<em>sensitive</em> way.  For example, if a model contains
 * a {@link Species} having the identifier <code>Pi</code>, the parser will parse
 * &quot;<code>Pi</code>&quot; in the input as &quot;<code>&lt;ci&gt; Pi
 * &lt;/ci&gt;</code>&quot; but will continue to parse the symbols
 * &quot;<code>pi</code>&quot; and &quot;<code>PI</code>&quot; as
 * &quot;<code>&lt;pi&gt;</code>&quot;.
 <p>
 * As mentioned above, the manner in which the \'L3\' versions of the formula
 * parser and formatter interpret the function &quot;<code>log</code>&quot;
 * can be changed.  To do so, callers should use the function
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> and pass it an appropriate {@link L3ParserSettings}
 * object.  By default, unlike the SBML Level&nbsp;1 parser implemented by
 * <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>, the string
 * &quot;<code>log</code>&quot; is interpreted as the base&nbsp;10 logarithm,
 * and <em>not</em> as the natural logarithm.  However, you can change the
 * interpretation to be base-10 log, natural log, or as an error; since the
 * name \'log\' by itself is ambiguous, you require that the parser uses 
 * <code>log10</code> or <code>ln</code> instead, which are more clear.  Please refer to
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.
 <p>
 * In addition, the following symbols will be translated to their MathML
 * equivalents, if no symbol with the same <code>SId</code> identifier string exists
 * in the {@link Model} object provided:
 <p>
 * <table border=\"0\" width=\"95%\"
       class=\"centered text-table normal-font alt-row-colors\">
 <tr>
     <th align=\"left\" width=\"60\">Name</th>
     <th align=\"left\" width=\"250\">Meaning</th>
     <th align=\"left\">MathML</th>
 </tr>
<tr><td><code>true</code></td>   
    <td>The boolean value <code>true</code></td>
    <td><code>&lt;true/&gt;</code></td>
</tr>
<tr><td><code>false</code></td>   
    <td>The boolean value <code>false</code></td>
    <td><code>&lt;false/&gt;</code></td>
</tr>
<tr><td><code>pi</code></td>   
    <td>The mathematical constant pi</td>
    <td><code>&lt;pi/&gt;</code></td>
</tr>
<tr><td><code>avogadro</code></td>   
    <td>The numerical value of Avogadro's constant, as defined in the SBML specification</td>
    <td><code style=\"letter-spacing: -1px\">&lt;csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/symbols/avogadro\"&gt; avogadro &lt;/csymbol/&gt;</code></td>
</tr>
<tr><td><code>time</code></td>   
    <td>Simulation time as defined in SBML</td>
    <td><code style=\"letter-spacing: -1px\">&lt;csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/symbols/time\"&gt; time &lt;/csymbol/&gt;</code></td>
</tr>
<tr><td><code>inf</code> or <code>infinity</code></td>   
    <td>The mathematical constant \"infinity\"</td>
    <td><code>&lt;infinity/&gt;</code></td>
</tr>
<tr><td><code>nan</code> or <code>notanumber</code></td>   
    <td>The mathematical concept \"not a number\"</td>
    <td><code>&lt;notanumber/&gt;</code></td>
</tr>

<caption class=\"top-caption\">Mathematical symbols defined
in the \"Level&nbsp;3\" text-string formula syntax.
</caption>
</table>

 <p>
 * Again, as mentioned above, whether the string
 * &quot;<code>avogadro</code>&quot; is parsed as an AST node of type
 * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} or
 * {@link libsbmlConstants#AST_NAME AST_NAME} is configurable; use the version of
 * the parser function called <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>.  This Avogadro-related
 * functionality is provided because SBML Level&nbsp;2 models may not use
 * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} AST nodes.
 <p>
 * For more details about the parser, please see the definition of
 * {@link L3ParserSettings} and <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>.
 <p>
 * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * @see L3ParserSettings
 */ public
";


%javamethodmodifiers SBML_getLastParseL3Error "
/**
 * Returns the last error reported by the \'L3\' mathematical formula parser.
 <p>
 * If the functions <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>,
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>, or <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a> return <code>null</code>, an error is set internally.
 * This function allows callers to retrieve information about the error.
 <p>
 * @return a string describing the error that occurred.  This will contain
 * the input string the parser was trying to parse, the character it had
 * parsed when it encountered the error, and a description of the error.
 <p>
 * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see <a href=\'libsbml.html#getDefaultL3ParserSettings()\'><code>libsbml.getDefaultL3ParserSettings()</code></a>
 */ public
";


%javamethodmodifiers SBML_deleteL3Parser "
/** * @internal */ public
";


%typemap(javaimports) L3ParserSettings "
/** 
 *  Controls the behavior of the Level 3 formula parser.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The function
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>,
 * along with its variants <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a> and
 * <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>,
 * are the interfaces to a parser for mathematical formulas written as
 * text strings.  The inverse function is <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a> and its variants such as
 * <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>.
 * The parsers and the formula writers convert between a text-string
 * representation of mathematical formulas and Abstract Syntax Trees (ASTs),
 * represented in libSBML using {@link ASTNode} objects.
 * Compared to the parser and writer implemented by the functions
 * <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a> and
 * <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>,
 * which were designed primarily for converting the mathematical formula
 * strings in SBML Level&nbsp;1, the SBML Level&nbsp;3 or \'L3\' variants of
 * the parser and writer use an extended formula syntax.  They also have a
 * number of configurable behaviors.  This class (L3ParserSettings) is an
 * object used to communicate the configuration settings with callers.
 <p>
 * The following aspects of the parser are configurable using
 * {@link L3ParserSettings} objects.  (For the formula writer, only a subset of these
 * settings is relevant; please see the documentation for
 * <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a> for more information about which ones).
 <p>
 * <p>
 * <ul>
 * <li> A {@link Model} object may optionally be provided to use identifiers (values
 * of type <code>SId</code>) from the model in preference to pre-defined MathML symbols
 * More precisely, the {@link Model} entities whose identifiers will shadow identical
 * symbols in the mathematical formula are: {@link Species}, {@link Compartment}, {@link Parameter},
 * {@link Reaction}, and {@link SpeciesReference}.  For instance, if the parser is given a
 * {@link Model} containing a {@link Species} with the identifier
 * &quot;<code>pi</code>&quot;, and the formula to be parsed is
 * &quot;<code>3*pi</code>&quot;, the MathML produced by the parser will
 * contain the construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of
 * the construct <code>&lt;pi/&gt;</code>.  Another example, if the passed-in
 * {@link Model} contains a {@link FunctionDefinition} with the identifier
 * &quot;<code>sin</code>&quot;, that function will be used instead of the
 * predefined MathML function <code>&lt;sin/&gt;</code>.
 * <li> The function <code>log</code> with a single argument
 * (&quot;<code>log(x)</code>&quot;) can be parsed as <code>log10(x)</code>,
 * <code>ln(x)</code>, or treated as an error, as desired.
 * <li> Unary minus signs can be either collapsed or preserved; that is, the
 * parser can either (1) remove sequential pairs of unary minuses (e.g.,
 * &quot;<code>- -3</code>&quot;) from the input and incorporate single unary
 * minuses into the number node, or (2) preserve all minuses in the AST node
 * structure, turning them into {@link ASTNode} objects of type
 * {@link libsbmlConstants#AST_MINUS AST_MINUS}.
 * <li> The character sequence &quot;<code>number id</code>&quot; can be
 * interpreted as a numerical value <code>number</code> followed by units of measurement
 * indicated by <code>id</code>, or it can be treated as a syntax error.  (In
 * Level&nbsp;3, MathML <code>&lt;cn&gt;</code> elements can have an
 * attribute named <code>units</code> placed in the SBML namespace, which can be used
 * to indicate the units to be associated with the number.  The text-string
 * infix formula parser allows units to be placed after raw numbers; they are
 * interpreted as unit identifiers for units defined by the SBML
 * specification or in the containing {@link Model} object.)
 * <li> The symbol <code>avogadro</code> can be parsed either as a MathML <em>csymbol</em> or
 * as a identifier.  More specifically, &quot;<code>avogadro</code>&quot; can
 * be treated as an {@link ASTNode} of type
 * {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} or of type
 * {@link libsbmlConstants#AST_NAME AST_NAME}.
 * <li> Strings that match built-in functions and constants can either be parsed
 * as a match regardless of capitalization, or may be required to be
 * all-lower-case to be considered a match.  
 * <li> LibSBML plug-ins implementing support for SBML Level&nbsp;3 packages
 * may introduce extensions to the syntax understood by the parser.  The
 * precise nature of the extensions will be documented by the individual
 * package plug-ins.  An example of a possible extension is a notation for
 * vectors and arrays, introduced by the SBML Level&nbsp;3 <em>Arrays</em>
 * package.
 *
 * </ul>
 <p>
 * To obtain the default configuration values, callers can use the function
 * <a href=\'libsbml.html#getDefaultL3ParserSettings()\'><code>libsbml.getDefaultL3ParserSettings()</code></a>.  To change the configuration,
 * callers can create an {@link L3ParserSettings} object, set the desired
 * characteristics using the methods provided, and pass that object to
 * <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</code></a>.
 <p>
 * @see <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'><code>libsbml.parseL3FormulaWithModel(String, Model)</code></a>
 * @see <a href=\'libsbml.html#parseFormula(java.lang.String)\'><code>libsbml.parseFormula(String)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3StringWithSettings(org.sbml.libsbml.ASTNode, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.formulaToL3StringWithSettings(ASTNode, L3ParserSettings)</code></a>
 * @see <a href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToL3String(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'><code>libsbml.formulaToString(ASTNode)</code></a>
 * @see <a href=\'libsbml.html#getDefaultL3ParserSettings()\'><code>libsbml.getDefaultL3ParserSettings()</code></a>
 */
"


%javamethodmodifiers L3ParserSettings::L3ParserSettings "
/**
   * Creates a new {@link L3ParserSettings} object with default values.
   <p>
   * This is the default constructor for the {@link L3ParserSettings} object.  It
   * sets the stored {@link Model} object to <code>null</code> and sets the following
   * field values in the {@link L3ParserSettings} object:
   <p>
   * <ul>
   * <li> <em>parseunits</em> (\'parse units\') is set to
   * {@link libsbmlConstants#L3P_PARSE_UNITS L3P_PARSE_UNITS}.
   <p>
   * <li> <em>collapseminus</em> (\'collapse minus\') is set to
   * {@link libsbmlConstants#L3P_EXPAND_UNARY_MINUS L3P_EXPAND_UNARY_MINUS}.
   <p>
   * <li> <em>parselog</em> (\'parse log\') is set to
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_LOG10 L3P_PARSE_LOG_AS_LOG10}.
   <p>
   * <li> <em>avocsymbol</em> (\'Avogadro csymbol\') is set to
   * {@link libsbmlConstants#L3P_AVOGADRO_IS_CSYMBOL L3P_AVOGADRO_IS_CSYMBOL}.
   <p>
   * <li> <em>caseSensitive</em> (\'case sensitive\') is set to
   * {@link libsbmlConstants#L3P_COMPARE_BUILTINS_CASE_INSENSITIVE L3P_COMPARE_BUILTINS_CASE_INSENSITIVE}.
   <p>
   * <li> <em>sbmlns</em> (\'SBML namespaces\') is set to <code>null</code> (which
   * indicates that no syntax extensions due to SBML Level&nbsp;3 packages
   * will be assumed&mdash;the formula parser will only understand the
   * core syntax described in the documentation for
   * <a href=\'libsbml.html#parseL3Formula(java.lang.String)\'><code>libsbml.parseL3Formula(String)</code></a>).
   * </ul>
   */ public
";


%javamethodmodifiers L3ParserSettings::L3ParserSettings(Model* model, ParseLogType_t parselog, bool collapseminus, bool parseunits, bool avocsymbol, bool caseSensitive = false, SBMLNamespaces* sbmlns = NULL) "
/**
   * Creates a new {@link L3ParserSettings} object with specific values for all
   * possible settings.
   <p>
   * @param model a {@link Model} object to be used for disambiguating identifiers
   * encountered by <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String, L3ParserSettings)</code></a> in mathematical formulas.
   <p>
   * @param parselog (\'parse log\') a flag that controls how the parser will
   * handle the symbol <code>log</code> in mathematical formulas. The function <code>log</code>
   * with a single argument (&quot;<code>log(x)</code>&quot;) can be parsed
   * as <code>log10(x)</code>, <code>ln(x)</code>, or treated as an error, as
   * desired, by using the parameter values
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_LOG10 L3P_PARSE_LOG_AS_LOG10},
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_LN L3P_PARSE_LOG_AS_LN}, or
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_ERROR L3P_PARSE_LOG_AS_ERROR}, respectively.
   <p>
   * @param collapseminus (\'collapse minus\') a flag that controls how the
   * parser will handle minus signs in formulas.  Unary minus signs can be
   * collapsed or preserved; that is, sequential pairs of unary minuses
   * (e.g., &quot;<code>- -3</code>&quot;) can be removed from the input
   * entirely and single unary minuses can be incorporated into the number
   * node, or all minuses can be preserved in the AST node structure.
   * The possible values of this field are
   * {@link libsbmlConstants#L3P_COLLAPSE_UNARY_MINUS L3P_COLLAPSE_UNARY_MINUS} (to collapse unary minuses) and
   * {@link libsbmlConstants#L3P_EXPAND_UNARY_MINUS L3P_EXPAND_UNARY_MINUS} (to expand unary minuses).
   <p>
   * @param parseunits (\'parse units\') a flag that controls how the parser
   * will handle apparent references to units of measurement associated with
   * raw numbers in a formula.  If set to the value
   * {@link libsbmlConstants#L3P_PARSE_UNITS L3P_PARSE_UNITS}, units are parsed; if set to the value
   * {@link libsbmlConstants#L3P_NO_UNITS L3P_NO_UNITS}, units are not parsed.
   <p>
   * @param avocsymbol (\'Avogadro csymbol\') a flag that controls how the
   * parser will handle the appearance of the symbol <code>avogadro</code> in a
   * formula.  If set to the value {@link libsbmlConstants#L3P_AVOGADRO_IS_CSYMBOL L3P_AVOGADRO_IS_CSYMBOL},
   * the symbol is interpreted as the SBML/MathML <em>csymbol</em> <code>avogadro</code>; if
   * set to the value {@link libsbmlConstants#L3P_AVOGADRO_IS_NAME L3P_AVOGADRO_IS_NAME}, the symbol is
   * interpreted as a plain symbol name.
   <p>
   * @param caseSensitive (\'case sensitive\') a flag that controls how the
   * cases of alphabetical characters are treated when symbols are compared.
   * If the flag is set to the value
   * {@link libsbmlConstants#L3P_COMPARE_BUILTINS_CASE_INSENSITIVE L3P_COMPARE_BUILTINS_CASE_INSENSITIVE}, symbols are
   * compared in a case-insensitive manner, which means that mathematical
   * functions such as <code>\'sin\'</code> will be matched no matter what their case is:
   * <code>\'Sin\'</code>, <code>\'SIN\'</code>, etc.  If the flag is set to the value
   * {@link libsbmlConstants#L3P_COMPARE_BUILTINS_CASE_SENSITIVE L3P_COMPARE_BUILTINS_CASE_SENSITIVE}, symbols are
   * interpreted in a case-sensitive manner.
   <p>
   * @param sbmlns (\'SBML namespaces\') an SBML namespaces object.  The
   * namespaces identify the SBML Level&nbsp;3 packages that can extend the
   * syntax understood by the formula parser.  When non-<code>null</code>, the parser
   * will interpret additional syntax defined by the packages; for example,
   * it may understand vector/array extensions introduced by the SBML
   * Level&nbsp;3 <em>Arrays</em> package.
   <p>
   * 
</dl><dl class=\"docnote\"><dt><b>Documentation note:</b></dt><dd>
The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.
</dd></dl>
 
   <p>
   * @see #getModel()
   * @see #setModel(Model)
   * @see #unsetModel()
   * @see #getParseLog()
   * @see #setParseLog(int)
   * @see #getParseUnits()
   * @see #setParseUnits(boolean)
   * @see #getParseCollapseMinus()
   * @see #setParseCollapseMinus(boolean)
   * @see #getParseAvogadroCsymbol()
   * @see #setParseAvogadroCsymbol(boolean)
   */ public
";


%javamethodmodifiers L3ParserSettings::L3ParserSettings(const L3ParserSettings& source) "
/**
   * Copy constructor.
   */ public
";


%javamethodmodifiers L3ParserSettings::setModel(const Model* model) "
/**
   * Sets the model reference in this {@link L3ParserSettings} object.
   <p>
   * <p>
 * When a {@link Model} object is provided, identifiers (values of type <code>SId</code>)
 * from that model are used in preference to pre-defined MathML symbol
 * definitions.  More precisely, the {@link Model} entities whose identifiers will
 * shadow identical symbols in the mathematical formula are: {@link Species},
 * {@link Compartment}, {@link Parameter}, {@link Reaction}, and {@link SpeciesReference}.  For instance, if
 * the parser is given a {@link Model} containing a {@link Species} with the identifier
 * &quot;<code>pi</code>&quot;, and the formula to be parsed is
 * &quot;<code>3*pi</code>&quot;, the MathML produced will contain the
 * construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of the construct
 * <code>&lt;pi/&gt;</code>.  Similarly, when a {@link Model} object is provided, 
 * <code>SId</code> values of user-defined functions present in the {@link Model} will be used
 * preferentially over pre-defined MathML functions.  For example, if the
 * passed-in {@link Model} contains a {@link FunctionDefinition} with the identifier
 * &quot;<code>sin</code>&quot;, that function will be used instead of the
 * predefined MathML function <code>&lt;sin/&gt;</code>.
   <p>
   * @param model a {@link Model} object to be used for disambiguating identifiers.
   <p>
   * @warning <span class=\'warning\'>This does <em>not</em> copy the {@link Model} object.
   * This means that modifications made to the {@link Model} after invoking this
   * method may affect parsing behavior, because the parser will query the
   * <em>current</em> contents of the model.</span>
   <p>
   * @see #getModel()
   * @see #unsetModel()
   */ public
";


%javamethodmodifiers L3ParserSettings::getModel() const "
/**
   * Returns the {@link Model} object referenced by this {@link L3ParserSettings} object.
   <p>
   * <p>
 * When a {@link Model} object is provided, identifiers (values of type <code>SId</code>)
 * from that model are used in preference to pre-defined MathML symbol
 * definitions.  More precisely, the {@link Model} entities whose identifiers will
 * shadow identical symbols in the mathematical formula are: {@link Species},
 * {@link Compartment}, {@link Parameter}, {@link Reaction}, and {@link SpeciesReference}.  For instance, if
 * the parser is given a {@link Model} containing a {@link Species} with the identifier
 * &quot;<code>pi</code>&quot;, and the formula to be parsed is
 * &quot;<code>3*pi</code>&quot;, the MathML produced will contain the
 * construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of the construct
 * <code>&lt;pi/&gt;</code>.  Similarly, when a {@link Model} object is provided, 
 * <code>SId</code> values of user-defined functions present in the {@link Model} will be used
 * preferentially over pre-defined MathML functions.  For example, if the
 * passed-in {@link Model} contains a {@link FunctionDefinition} with the identifier
 * &quot;<code>sin</code>&quot;, that function will be used instead of the
 * predefined MathML function <code>&lt;sin/&gt;</code>.
   <p>
   * @see #setModel(Model)
   * @see #unsetModel()
   */ public
";


%javamethodmodifiers L3ParserSettings::unsetModel "
/**
   * Unsets the {@link Model} reference in this {@link L3ParserSettings} object.
   <p>
   * The effect of calling this method is to set the stored model value
   * to <code>null.</code>
   <p>
   * @see #setModel(Model)
   * @see #getModel()
   */ public
";


%javamethodmodifiers L3ParserSettings::setParseLog(ParseLogType_t type) "
/**
   * Sets the behavior for handling <code>log</code> in mathematical formulas.
   <p>
   * The function <code>log</code> with a single argument
   * (&quot;<code>log(x)</code>&quot;) can be parsed as
   * <code>log10(x)</code>, <code>ln(x)</code>, or treated as an error.
   * These three behaviors are set, respectively, by using the value
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_LOG10 L3P_PARSE_LOG_AS_LOG10},
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_LN L3P_PARSE_LOG_AS_LN}, or
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_ERROR L3P_PARSE_LOG_AS_ERROR}
   * for the <code>type</code> parameter.
   <p>
   * @param type a constant, one of following three possibilities:
   * <ul>
   * <li> {@link libsbmlConstants#L3P_PARSE_LOG_AS_LOG10 L3P_PARSE_LOG_AS_LOG10}
   * <li> {@link libsbmlConstants#L3P_PARSE_LOG_AS_LN L3P_PARSE_LOG_AS_LN}
   * <li> {@link libsbmlConstants#L3P_PARSE_LOG_AS_ERROR L3P_PARSE_LOG_AS_ERROR}
   *
   * </ul> <p>
   * @see #getParseLog()
   */ public
";


%javamethodmodifiers L3ParserSettings::getParseLog() const "
/**
   * Indicates the current behavior set for handling the function <code>log</code> with
   * one argument.
   <p>
   * The function <code>log</code> with a single argument
   * (&quot;<code>log(x)</code>&quot;) can be parsed as
   * <code>log10(x)</code>, <code>ln(x)</code>, or treated as an error, as
   * desired.  These three possible behaviors are indicated, respectively, by
   * the values
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_LOG10 L3P_PARSE_LOG_AS_LOG10},
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_LN L3P_PARSE_LOG_AS_LN}, and
   * {@link libsbmlConstants#L3P_PARSE_LOG_AS_ERROR L3P_PARSE_LOG_AS_ERROR}.
   <p>
   * @return One of following three constants:
   * <ul>
   * <li> {@link libsbmlConstants#L3P_PARSE_LOG_AS_LOG10 L3P_PARSE_LOG_AS_LOG10}
   * <li> {@link libsbmlConstants#L3P_PARSE_LOG_AS_LN L3P_PARSE_LOG_AS_LN}
   * <li> {@link libsbmlConstants#L3P_PARSE_LOG_AS_ERROR L3P_PARSE_LOG_AS_ERROR}
   *
   * </ul> <p>
   * @see #setParseLog(int)
   */ public
";


%javamethodmodifiers L3ParserSettings::setParseCollapseMinus(bool collapseminus) "
/**
   * Sets the behavior for handling unary minuses appearing in mathematical
   * formulas.
   <p>
   * <p>
 * This setting affects two behaviors.  First, pairs of multiple unary
 * minuses in a row (e.g., &quot;<code>- -3</code>&quot;) can be collapsed
 * and ignored in the input, or the multiple minuses can be preserved in the
 * AST node tree that is generated by the parser.  Second, minus signs in
 * front of numbers can be collapsed into the number node itself; for
 * example, a &quot;<code>- 4.1</code>&quot; can be turned into a single
 * {@link ASTNode} of type {@link libsbmlConstants#AST_REAL AST_REAL} with a value of
 * <code>-4.1</code>, or it can be turned into a node of type
 * {@link libsbmlConstants#AST_MINUS AST_MINUS} having a child node of type
 * {@link libsbmlConstants#AST_REAL AST_REAL}.
   <p>
   * This method lets you tell the parser which behavior to use&mdash;either
   * collapse minuses or always preserve them.  The two possibilities are
   * represented using the following constants:
   <p>
   * <p>
 * <ul>
 * <li> {@link libsbmlConstants#L3P_COLLAPSE_UNARY_MINUS L3P_COLLAPSE_UNARY_MINUS} (value = <code>true</code>): collapse
 * unary minuses where possible.
 * <li> {@link libsbmlConstants#L3P_EXPAND_UNARY_MINUS L3P_EXPAND_UNARY_MINUS} (value = <code>false</code>): do not
 * collapse unary minuses, and instead translate each one into an AST node of
 * type {@link libsbmlConstants#AST_MINUS AST_MINUS}.
 * </ul>
   <p>
   * @param collapseminus a boolean value (one of the constants
   * {@link libsbmlConstants#L3P_COLLAPSE_UNARY_MINUS L3P_COLLAPSE_UNARY_MINUS} or
   * {@link libsbmlConstants#L3P_EXPAND_UNARY_MINUS L3P_EXPAND_UNARY_MINUS})
   * indicating how unary minus signs in the input should be handled.
   <p>
   * @see #getParseCollapseMinus()
   */ public
";


%javamethodmodifiers L3ParserSettings::getParseCollapseMinus() const "
/**
   * Indicates the current behavior set for handling multiple unary minuses
   * in formulas.
   <p>
   * <p>
 * This setting affects two behaviors.  First, pairs of multiple unary
 * minuses in a row (e.g., &quot;<code>- -3</code>&quot;) can be collapsed
 * and ignored in the input, or the multiple minuses can be preserved in the
 * AST node tree that is generated by the parser.  Second, minus signs in
 * front of numbers can be collapsed into the number node itself; for
 * example, a &quot;<code>- 4.1</code>&quot; can be turned into a single
 * {@link ASTNode} of type {@link libsbmlConstants#AST_REAL AST_REAL} with a value of
 * <code>-4.1</code>, or it can be turned into a node of type
 * {@link libsbmlConstants#AST_MINUS AST_MINUS} having a child node of type
 * {@link libsbmlConstants#AST_REAL AST_REAL}.
   <p>
   * @return A boolean indicating the behavior currently set.  The possible
   * values are as follows:
   * <p>
 * <ul>
 * <li> {@link libsbmlConstants#L3P_COLLAPSE_UNARY_MINUS L3P_COLLAPSE_UNARY_MINUS} (value = <code>true</code>): collapse
 * unary minuses where possible.
 * <li> {@link libsbmlConstants#L3P_EXPAND_UNARY_MINUS L3P_EXPAND_UNARY_MINUS} (value = <code>false</code>): do not
 * collapse unary minuses, and instead translate each one into an AST node of
 * type {@link libsbmlConstants#AST_MINUS AST_MINUS}.
 * </ul>
   <p>
   * @see #setParseCollapseMinus(boolean)
   */ public
";


%javamethodmodifiers L3ParserSettings::setParseUnits(bool units) "
/**
   * Sets the parser\'s behavior in handling units associated with numbers
   * in a mathematical formula.
   <p>
   * <p>
 * In SBML Level&nbsp;2, there is no means of associating a unit of
 * measurement with a pure number in a formula, while SBML Level&nbsp;3 does
 * define a syntax for this.  In Level&nbsp;3, MathML <code>&lt;cn&gt;</code>
 * elements can have an attribute named <code>units</code> placed in the SBML
 * namespace, which can be used to indicate the units to be associated with
 * the number.  The text-string infix formula parser allows units to be
 * placed after raw numbers; they are interpreted as unit identifiers for
 * units defined by the SBML specification or in the containing {@link Model} object.
 * Some examples include: &quot;<code>4 mL</code>&quot;, &quot;<code>2.01
 * Hz</code>&quot;, &quot;<code>3.1e-6 M</code>&quot;, and &quot;<code>(5/8)
 * inches</code>&quot;.  To produce a valid SBML model, there must either
 * exist a {@link UnitDefinition} corresponding to the identifier of the unit, or the
 * unit must be defined in Table&nbsp;2 of the SBML Level&nbsp;3 specification.
   <p>
   * This method sets the formula parser\'s behavior with respect to units.
   <p>
   * @param units A boolean indicating whether to parse units.  The
   * possible values are as follows:
   * <p>
 * <ul>
 * <li> {@link libsbmlConstants#L3P_PARSE_UNITS L3P_PARSE_UNITS} (value = <code>true</code>): parse units in the
 * text-string formula.
 * <li> {@link libsbmlConstants#L3P_NO_UNITS L3P_NO_UNITS} (value = <code>false</code>): treat units in the
 * text-string formula as errors.
 * </ul>
   <p>
   * @see #getParseUnits()
   */ public
";


%javamethodmodifiers L3ParserSettings::getParseUnits() const "
/**
   * Indicates the current behavior set for handling units in text-string
   * mathematical formulas.
   <p>
   * <p>
 * In SBML Level&nbsp;2, there is no means of associating a unit of
 * measurement with a pure number in a formula, while SBML Level&nbsp;3 does
 * define a syntax for this.  In Level&nbsp;3, MathML <code>&lt;cn&gt;</code>
 * elements can have an attribute named <code>units</code> placed in the SBML
 * namespace, which can be used to indicate the units to be associated with
 * the number.  The text-string infix formula parser allows units to be
 * placed after raw numbers; they are interpreted as unit identifiers for
 * units defined by the SBML specification or in the containing {@link Model} object.
 * Some examples include: &quot;<code>4 mL</code>&quot;, &quot;<code>2.01
 * Hz</code>&quot;, &quot;<code>3.1e-6 M</code>&quot;, and &quot;<code>(5/8)
 * inches</code>&quot;.  To produce a valid SBML model, there must either
 * exist a {@link UnitDefinition} corresponding to the identifier of the unit, or the
 * unit must be defined in Table&nbsp;2 of the SBML Level&nbsp;3 specification.
   <p>
   * Since SBML Level&nbsp;2 does not have the ability to associate units
   * with pure numbers, the value should be expected to be <code>false</code>
   * ({@link libsbmlConstants#L3P_NO_UNITS L3P_NO_UNITS}) when parsing text-string
   * formulas intended for use in SBML Level&nbsp;2 documents.
   <p>
   * @return A boolean indicating whether to parse units.  The
   * possible values are as follows:
   * <p>
 * <ul>
 * <li> {@link libsbmlConstants#L3P_PARSE_UNITS L3P_PARSE_UNITS} (value = <code>true</code>): parse units in the
 * text-string formula.
 * <li> {@link libsbmlConstants#L3P_NO_UNITS L3P_NO_UNITS} (value = <code>false</code>): treat units in the
 * text-string formula as errors.
 * </ul>
   <p>
   * @see #setParseUnits(boolean)
   */ public
";


%javamethodmodifiers L3ParserSettings::setParseAvogadroCsymbol(bool l2only) "
/**
   * Sets the parser\'s behavior in handling the symbol <code>avogadro</code> in
   * mathematical formulas.
   <p>
   * <p>
 * SBML Level&nbsp;3 defines a symbol for representing the value of
 * Avogadro\'s constant, but it is not defined in SBML Level&nbsp;2.  As a
 * result, the text-string formula parser must behave differently
 * depending on which SBML Level is being targeted.  For Level&nbsp;3
 * documents, it can interpret instances of <code>avogadro</code> in the input
 * as a reference to the MathML <em>csymbol</em> for Avogadro\'s constant
 * defined in the SBML Level&nbsp;3 specification.  For Level&nbsp;2,
 * it must treat <code>avogadro</code> as just another plain symbol.
   <p>
   * This method allows callers to set the <code>avogadro</code>-handling
   * behavior in this {@link L3ParserSettings} object.  The possible values of 
   * <code>l2only</code> are as follows:
   <p>
   * <p>
 * <ul>
 * <li> {@link libsbmlConstants#L3P_AVOGADRO_IS_CSYMBOL L3P_AVOGADRO_IS_CSYMBOL} (value = <code>true</code>): tells the
 * parser to translate the string <code>avogadro</code> (in any capitalization) into an
 * AST node of type {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO}.
 * <li> {@link libsbmlConstants#L3P_AVOGADRO_IS_NAME L3P_AVOGADRO_IS_NAME} (value = <code>false</code>): tells the
 * parser to translate the string <code>avogadro</code> into an AST of type
 * {@link libsbmlConstants#AST_NAME AST_NAME}.
 * </ul>
   <p>
   * Since SBML Level&nbsp;2 does not define a symbol for Avogadro\'s
   * constant, the value should be set to
   * {@link libsbmlConstants#L3P_AVOGADRO_IS_NAME L3P_AVOGADRO_IS_NAME} when parsing text-string formulas
   * intended for use in SBML Level&nbsp;2 documents.
   <p>
   * @param l2only a boolean value indicating how the string <code>avogadro</code>
   * should be treated when encountered in a formula.  This will be one of
   * the values {@link libsbmlConstants#L3P_AVOGADRO_IS_CSYMBOL L3P_AVOGADRO_IS_CSYMBOL} or
   * {@link libsbmlConstants#L3P_AVOGADRO_IS_NAME L3P_AVOGADRO_IS_NAME}.
   <p>
   * @see #getParseAvogadroCsymbol()
   */ public
";


%javamethodmodifiers L3ParserSettings::getParseAvogadroCsymbol() const "
/**
   * Indicates the current behavior set for handling <code>avogadro</code> for SBML
   * Level&nbsp;3.
   <p>
   * <p>
 * SBML Level&nbsp;3 defines a symbol for representing the value of
 * Avogadro\'s constant, but it is not defined in SBML Level&nbsp;2.  As a
 * result, the text-string formula parser must behave differently
 * depending on which SBML Level is being targeted.  For Level&nbsp;3
 * documents, it can interpret instances of <code>avogadro</code> in the input
 * as a reference to the MathML <em>csymbol</em> for Avogadro\'s constant
 * defined in the SBML Level&nbsp;3 specification.  For Level&nbsp;2,
 * it must treat <code>avogadro</code> as just another plain symbol.
   <p>
   * This method returns the current setting of the
   * <code>avogadro</code>-handling behavior in this {@link L3ParserSettings} object.
   * The possible values are as follows:
   <p>
   * <p>
 * <ul>
 * <li> {@link libsbmlConstants#L3P_AVOGADRO_IS_CSYMBOL L3P_AVOGADRO_IS_CSYMBOL} (value = <code>true</code>): tells the
 * parser to translate the string <code>avogadro</code> (in any capitalization) into an
 * AST node of type {@link libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO}.
 * <li> {@link libsbmlConstants#L3P_AVOGADRO_IS_NAME L3P_AVOGADRO_IS_NAME} (value = <code>false</code>): tells the
 * parser to translate the string <code>avogadro</code> into an AST of type
 * {@link libsbmlConstants#AST_NAME AST_NAME}.
 * </ul>
   <p>
   * @return A boolean indicating which mode is currently set; one of
   * {@link libsbmlConstants#L3P_AVOGADRO_IS_CSYMBOL L3P_AVOGADRO_IS_CSYMBOL}
   * or
   * {@link libsbmlConstants#L3P_AVOGADRO_IS_NAME L3P_AVOGADRO_IS_NAME}.
   <p>
   * @see #setParseAvogadroCsymbol(boolean)
   */ public
";


%javamethodmodifiers L3ParserSettings::setComparisonCaseSensitivity(bool strcmp) "
/**
   * Sets the parser\'s behavior with respect to case sensitivity for
   * recognizing predefined symbols.
   <p>
   * <p>
 * By default (which is the value
 * {@link libsbmlConstants#L3P_COMPARE_BUILTINS_CASE_INSENSITIVE L3P_COMPARE_BUILTINS_CASE_INSENSITIVE}), the parser
 * compares symbols in a case <em>insensitive</em> manner for built-in functions
 * such as <code>\'sin\'</code> and <code>\'piecewise\'</code>, and for constants such as <code>\'true\'</code>
 * and <code>\'avogadro\'.</code>  Setting this option to
 * {@link libsbmlConstants#L3P_COMPARE_BUILTINS_CASE_SENSITIVE L3P_COMPARE_BUILTINS_CASE_SENSITIVE} causes the parser to
 * become case sensitive.  In that mode, for example, the symbols <code>\'sin\'</code>
 * and <code>\'true\'</code> will match the built-in values, but the symbols <code>\'SIN\'</code>,
 * <code>\'Sin\'</code>, <code>\'True\'</code>, <code>\'TRUE\'</code>, and so on, will not.
   <p>
   * @param strcmp a boolean indicating whether to be case sensitive (if 
   * <code>true</code>) or be case insensitive (if <code>false</code>).
   <p>
   * @see #getComparisonCaseSensitivity()
   */ public
";


%javamethodmodifiers L3ParserSettings::getComparisonCaseSensitivity() const "
/**
   * Returns <code>true</code> if the parser is configured to match built-in symbols
   * in a case-insensitive way.
   <p>
   * <p>
 * By default (which is the value
 * {@link libsbmlConstants#L3P_COMPARE_BUILTINS_CASE_INSENSITIVE L3P_COMPARE_BUILTINS_CASE_INSENSITIVE}), the parser
 * compares symbols in a case <em>insensitive</em> manner for built-in functions
 * such as <code>\'sin\'</code> and <code>\'piecewise\'</code>, and for constants such as <code>\'true\'</code>
 * and <code>\'avogadro\'.</code>  Setting this option to
 * {@link libsbmlConstants#L3P_COMPARE_BUILTINS_CASE_SENSITIVE L3P_COMPARE_BUILTINS_CASE_SENSITIVE} causes the parser to
 * become case sensitive.  In that mode, for example, the symbols <code>\'sin\'</code>
 * and <code>\'true\'</code> will match the built-in values, but the symbols <code>\'SIN\'</code>,
 * <code>\'Sin\'</code>, <code>\'True\'</code>, <code>\'TRUE\'</code>, and so on, will not.
   <p>
   * @return <code>true</code> if matches are done in a case-sensitive manner, and 
   * <code>false</code> if the parser will recognize built-in functions and
   * constants regardless of case,.
   <p>
   * @see #setComparisonCaseSensitivity(boolean)
   */ public
";


%javamethodmodifiers L3ParserSettings::setPlugins(const SBMLNamespaces * sbmlns) "
/**
   * Set up the plugins for this {@link L3ParserSettings}, based on the
   * {@link SBMLNamespaces} object.
   <p>
   * When a {@link SBMLNamespaces} object is provided, the parser will only interpret
   * infix syntax understood by the core libSBML <em>plus</em> the packages
   * indicated by the {@link SBMLNamespaces} objects provided.  {@link ASTNode} objects
   * returned by the L3Parser will contain those {@link SBMLNamespaces} objects, and
   * will be used to parse certain constructs that may only be understood by
   * packages (e.g., vectors for the SBML Level&nbsp;3 \'arrays\' package).
   * Note that by default, all packages that were compiled with this version
   * of libSBML are included, so this function is most useful as a way to
   * turn <em>off</em> certain namespaces, such as might be desired if your tool
   * does not support vectors, for example.
   <p>
   * @param sbmlns a {@link SBMLNamespaces} object to be used.  If <code>null</code> is given
   * as the value, all plugins will be loaded.
   */ public
";


%javamethodmodifiers L3ParserSettings::visitPackageInfixSyntax( const ASTNode_t *parent, const ASTNode_t *node, StringBuffer_t  *sb) const "
/** * @internal */ public
";


%javamethodmodifiers L3ParserSettings::checkNumArgumentsForPackage(const ASTNode* function, std::stringstream& error) const "
/** * @internal */ public
";


%javamethodmodifiers L3ParserSettings::parsePackageInfix(L3ParserGrammarLineType_t type, std::vector<ASTNode*> *nodeList = NULL, std::vector<std::string*> *stringList = NULL, std::vector<double> *doubleList = NULL) const "
/** * @internal */ public
";


%javamethodmodifiers L3ParserSettings::getPackageFunctionFor(const std::string& name) const "
/** * @internal */ public
";


%javamethodmodifiers L3ParserSettings::deletePlugins "
/** * @internal */ public
";


%typemap(javaimports) ASTBasePlugin "
/** 
 *  Base class for extensions that plug into AST classes.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * @internal
 */
"


%javamethodmodifiers ASTBasePlugin::clone() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getElementNamespace() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getPrefix() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getPackageName() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::setSBMLExtension(const SBMLExtension* ext) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::setPrefix(const std::string& prefix) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::connectToParent(ASTBase *astbase) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::stripPackage(const std::string& pkgPrefix, bool flag) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getURI() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getParentASTObject "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getParentASTObject() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::setElementNamespace(const std::string &uri) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getLevel() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getVersion() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getPackageVersion() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getSBMLNamespaces() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isSetMath() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getMath() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::createMath(int type) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::addChild(ASTBase * child) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getChild "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getNumChildren() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::insertChild(unsigned int n, ASTBase* newChild) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::prependChild(ASTBase* newChild) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::removeChild(unsigned int n) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::replaceChild(unsigned int n, ASTBase* newChild, bool delreplaced) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::swapChildren(ASTFunction* that) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::read(XMLInputStream& stream, const std::string& reqd_prefix, const XMLToken& currentElement) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::addExpectedAttributes(ExpectedAttributes& attributes, XMLInputStream& stream, int type) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes, XMLInputStream& stream, const XMLToken& element, int type) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::writeAttributes(XMLOutputStream& stream, int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::writeXMLNS(XMLOutputStream& stream) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isNumberNode(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isFunctionNode(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isLogical(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isConstantNumber(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isCSymbolFunction(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isCSymbolNumber(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isName(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isNumber(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isOperator(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isRelational(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::representsQualifier(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isFunction(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::representsUnaryFunction(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::representsBinaryFunction(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::representsNaryFunction(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::hasCorrectNumberArguments(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isWellFormedNode(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isTopLevelMathMLFunctionNodeTag(const std::string& name) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isTopLevelMathMLNumberNodeTag(const std::string& name) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getTypeFromName(const std::string& name) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getNameFromType(int type) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::ASTBasePlugin(const std::string &uri) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::ASTBasePlugin "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::ASTBasePlugin(const ASTBasePlugin& orig) "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::isPackageInfixFunction() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::hasPackageOnlyInfixSyntax() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getL3PackageInfixPrecedence() const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::hasUnambiguousPackageInfixGrammar(const ASTNode *child) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::visitPackageInfixSyntax( const ASTNode *parent, const ASTNode *node, StringBuffer_t  *sb, const L3ParserSettings* settings) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::checkNumArguments(const ASTNode* function, std::stringstream& error) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::parsePackageInfix(L3ParserGrammarLineType_t type, std::vector<ASTNode*> *nodeList = NULL, std::vector<std::string*> *stringList = NULL, std::vector<double> *doubleList = NULL) const "
/** * @internal */ public
";


%javamethodmodifiers ASTBasePlugin::getPackageFunctionFor(const std::string& name) const "
/** * @internal */ public
";



%include "local-doc-extras.i"
