% CREATESBTOOLBOXMODEL  Convert Odefy model to SBToolbox model
%
%   SBMODEL=CREATESBTOOLBOXMODEL(MODEL,TYPE,CREATEOBJECT) converts MODEL to
%   an ODE system of type TYPE and returns an SBToolbox model. If
%   CREATEOBJECT=1, Odefy attempts to directly create an SBToolbox object
%   rather than returnt the corresponding structure.
%
%   TYPE must be one of: 'boolcube', 'hillcube', 'hillcubenorm'
%
%   The resulting models are compatible with both SBTOOLBOX and SBTOOLBOX2.
%   Note that SBTOOLBOX2 models can be compiled to .mex models which run
%   50-100 times faster than regular MATLAB ODEs. Please refer to the HTML
%   help 'Model simulation' chapter for more details.
%
%   Web:
%   http://www.sbtoolbox2.org/
%   http://www.sbtoolbox.org/
%
%   Reference:
%   H. Schmidt, M. Jirstrand. Systems Biology Toolbox for MATLAB: a
%   computational platform for research in systems biology. 
%   Bioinformatics (2006), 15;22(4):514-5.

%   Odefy - Copyright (c) CMB, IBIS, Helmholtz Zentrum Muenchen
%   Free for non-commerical use, for more information: see LICENSE.txt
%   http://cmb.helmholtz-muenchen.de/odefy
%
function sbmodel = CreateSBToolboxModel(odefymodel, type, createObject)

type=ValidateType(type);

if createObject && ~IsMatlab
    error('Creating SB toolbox objects not supported in Octave. Please set createObject = 0');
end

if type<1 || type >3, error('Type must be between 1 and 3'), end

% shortcuts
tables = odefymodel.tables;
species = odefymodel.species;
numspecies = numel(species);

% default values
defK = 0.5;
defN = 3;
defTau = 1;

% name and notes
sbmodel.name = odefymodel.name;
sbmodel.notes = 'Automatically generated by Odefy';

% functions => none
sbmodel.functions = struct('name',{},'arguments',{},'formula',{},'notes',{});

% create those calls
calls = CreateCubeCalls(odefymodel, type, 2);

% states = ODEs
paramindex=0;
allparameters = {};
isinput = zeros(numspecies,1);
for i=1:numspecies
    if (numel(tables(i).inspecies) > 0)
        paramindex = paramindex + 1;

        % hill function parameters
        for j=1:numel(tables(i).inspecies)
            allparameters{paramindex,1} = [species{i} '_n_' species{tables(i).inspecies(j)}];
            allparameters{paramindex,2} = defN;
            allparameters{paramindex+1,1} = [species{i} '_k_' species{tables(i).inspecies(j)}];
            allparameters{paramindex+1,2} = defK;
            paramindex = paramindex + 2;
        end
        allparameters{paramindex,1} = [species{i} '_tau'];
        allparameters{paramindex,2} = defTau;
    else
        % this species has no inputs
        isinput(i) = 1;
    end

    % create this state
    sbmodel.states(i).name = species{i};
    sbmodel.states(i).initialCondition = 0;
    sbmodel.states(i).ODE = calls{i};
    sbmodel.states(i).type = '';
    sbmodel.states(i).compartment = '';
    sbmodel.states(i).unittype = '';
    sbmodel.states(i).notes = '';
end

% algebraic => none
sbmodel.algebraic =  struct('name',{},'formula',{},'initialCondition',{},'type',{},'compartment',{},'unittype',{},'notes',{});

% parameters
for i=1:size(allparameters,1)
    sbmodel.parameters(i).name = allparameters{i,1};
    sbmodel.parameters(i).value = allparameters{i,2};
    sbmodel.parameters(i).type = '';
    sbmodel.parameters(i).compartment = '';
    sbmodel.parameters(i).unittype = '';
    sbmodel.parameters(i).notes = '';
end

% variables
sbmodel.variables = struct('name',{},'formula',{},'type',{},'compartment',{},'unittype',{},'notes',{});

% reactions, events, MATLAB => none
sbmodel.reactions = struct('name',{},'formula',{},'notes',{},'reversible',{},'fast',{});
sbmodel.events = struct('name',{},'trigger',{},'assignment',{},'notes',{});

% MATLAB functions => none
sbmodel.functionsMATLAB = '';

if (nargin > 1 && createObject ~= 0)
    sbmodel = SBmodel(sbmodel);
end